package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	lrzxLXR "github.com/paloaltonetworks/scm-go/netsec/schemas/anti/spyware/profiles"
	bUPXiuP "github.com/paloaltonetworks/scm-go/netsec/services/antispywareprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &antiSpywareProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &antiSpywareProfileListDataSource{}
)

func NewAntiSpywareProfileListDataSource() datasource.DataSource {
	return &antiSpywareProfileListDataSource{}
}

type antiSpywareProfileListDataSource struct {
	client *scm.Client
}

// antiSpywareProfileListDsModel is the model.
type antiSpywareProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []antiSpywareProfileListDsModel_lrzxLXR_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type antiSpywareProfileListDsModel_lrzxLXR_Config struct {
	CloudInlineAnalysis          types.Bool                                                    `tfsdk:"cloud_inline_analysis"`
	Description                  types.String                                                  `tfsdk:"description"`
	Id                           types.String                                                  `tfsdk:"id"`
	InlineExceptionEdlUrls       types.List                                                    `tfsdk:"inline_exception_edl_urls"`
	InlineExceptionIpAddresses   types.List                                                    `tfsdk:"inline_exception_ip_addresses"`
	MicaEngineSpywareEnabledList []antiSpywareProfileListDsModel_lrzxLXR_MicaEngineObject      `tfsdk:"mica_engine_spyware_enabled_list"`
	Name                         types.String                                                  `tfsdk:"name"`
	Rules                        []antiSpywareProfileListDsModel_lrzxLXR_RuleObject            `tfsdk:"rules"`
	ThreatExceptions             []antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionObject `tfsdk:"threat_exceptions"`
}

type antiSpywareProfileListDsModel_lrzxLXR_MicaEngineObject struct {
	InlinePolicyAction types.String `tfsdk:"inline_policy_action"`
	Name               types.String `tfsdk:"name"`
}

type antiSpywareProfileListDsModel_lrzxLXR_RuleObject struct {
	Action        *antiSpywareProfileListDsModel_lrzxLXR_RuleActionObject `tfsdk:"action"`
	Category      types.String                                            `tfsdk:"category"`
	Name          types.String                                            `tfsdk:"name"`
	PacketCapture types.String                                            `tfsdk:"packet_capture"`
	Severities    types.List                                              `tfsdk:"severities"`
	ThreatName    types.String                                            `tfsdk:"threat_name"`
}

type antiSpywareProfileListDsModel_lrzxLXR_RuleActionObject struct {
	Alert       types.Bool                                               `tfsdk:"alert"`
	Allow       types.Bool                                               `tfsdk:"allow"`
	BlockIp     *antiSpywareProfileListDsModel_lrzxLXR_RuleBlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                               `tfsdk:"drop"`
	ResetBoth   types.Bool                                               `tfsdk:"reset_both"`
	ResetClient types.Bool                                               `tfsdk:"reset_client"`
	ResetServer types.Bool                                               `tfsdk:"reset_server"`
}

type antiSpywareProfileListDsModel_lrzxLXR_RuleBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionObject struct {
	Action        *antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionActionObject `tfsdk:"action"`
	ExemptIps     []antiSpywareProfileListDsModel_lrzxLXR_ExemptIpObject             `tfsdk:"exempt_ips"`
	Name          types.String                                                       `tfsdk:"name"`
	Notes         types.String                                                       `tfsdk:"notes"`
	PacketCapture types.String                                                       `tfsdk:"packet_capture"`
}

type antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionActionObject struct {
	Alert       types.Bool                                                          `tfsdk:"alert"`
	Allow       types.Bool                                                          `tfsdk:"allow"`
	BlockIp     *antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                          `tfsdk:"default"`
	Drop        types.Bool                                                          `tfsdk:"drop"`
	ResetBoth   types.Bool                                                          `tfsdk:"reset_both"`
	ResetClient types.Bool                                                          `tfsdk:"reset_client"`
	ResetServer types.Bool                                                          `tfsdk:"reset_server"`
}

type antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareProfileListDsModel_lrzxLXR_ExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (d *antiSpywareProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_anti_spyware_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *antiSpywareProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"cloud_inline_analysis":true, "description":true, "id":true, "inline_exception_edl_url":true, "inline_exception_ip_address":true, "mica_engine_spyware_enabled":true, "name":true, "rules":true, "threat_exception":true} forceNew:map[string]bool(nil)
						"cloud_inline_analysis": dsschema.BoolAttribute{
							Description: "The CloudInlineAnalysis param. Default: `false`.",
							Computed:    true,
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"inline_exception_edl_urls": dsschema.ListAttribute{
							Description: "The InlineExceptionEdlUrls param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"inline_exception_ip_addresses": dsschema.ListAttribute{
							Description: "The InlineExceptionIpAddresses param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"mica_engine_spyware_enabled_list": dsschema.ListNestedAttribute{
							Description: "The MicaEngineSpywareEnabledList param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"inline_policy_action":true, "name":true} forceNew:map[string]bool(nil)
									"inline_policy_action": dsschema.StringAttribute{
										Description: "The InlinePolicyAction param. String must be one of these: `\"alert\"`, `\"allow\"`, `\"drop\"`, `\"reset-both\"`, `\"reset-client\"`, `\"reset-server\"`. Default: `\"alert\"`.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
								},
							},
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"rules": dsschema.ListNestedAttribute{
							Description: "The Rules param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "category":true, "name":true, "packet_capture":true, "severity":true, "threat_name":true} forceNew:map[string]bool(nil)
									"action": dsschema.SingleNestedAttribute{
										Description: "The Action param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
											"alert": dsschema.BoolAttribute{
												Description: "The Alert param.",
												Computed:    true,
											},
											"allow": dsschema.BoolAttribute{
												Description: "The Allow param.",
												Computed:    true,
											},
											"block_ip": dsschema.SingleNestedAttribute{
												Description: "The BlockIp param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
													"duration": dsschema.Int64Attribute{
														Description: "The Duration param. Value must be between 1 and 3600.",
														Computed:    true,
													},
													"track_by": dsschema.StringAttribute{
														Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
														Computed:    true,
													},
												},
											},
											"drop": dsschema.BoolAttribute{
												Description: "The Drop param.",
												Computed:    true,
											},
											"reset_both": dsschema.BoolAttribute{
												Description: "The ResetBoth param.",
												Computed:    true,
											},
											"reset_client": dsschema.BoolAttribute{
												Description: "The ResetClient param.",
												Computed:    true,
											},
											"reset_server": dsschema.BoolAttribute{
												Description: "The ResetServer param.",
												Computed:    true,
											},
										},
									},
									"category": dsschema.StringAttribute{
										Description: "The Category param. String must be one of these: `\"dns-proxy\"`, `\"backdoor\"`, `\"data-theft\"`, `\"autogen\"`, `\"spyware\"`, `\"dns-security\"`, `\"downloader\"`, `\"dns-phishing\"`, `\"phishing-kit\"`, `\"cryptominer\"`, `\"hacktool\"`, `\"dns-benign\"`, `\"dns-wildfire\"`, `\"botnet\"`, `\"dns-grayware\"`, `\"inline-cloud-c2\"`, `\"keylogger\"`, `\"p2p-communication\"`, `\"domain-edl\"`, `\"webshell\"`, `\"command-and-control\"`, `\"dns-ddns\"`, `\"net-worm\"`, `\"any\"`, `\"tls-fingerprint\"`, `\"dns-new-domain\"`, `\"dns\"`, `\"fraud\"`, `\"dns-c2\"`, `\"adware\"`, `\"post-exploitation\"`, `\"dns-malware\"`, `\"browser-hijack\"`, `\"dns-parked\"`.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"packet_capture": dsschema.StringAttribute{
										Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
										Computed:    true,
									},
									"severities": dsschema.ListAttribute{
										Description: "The Severities param.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"threat_name": dsschema.StringAttribute{
										Description: "The ThreatName param. String length must exceed 4 characters.",
										Computed:    true,
									},
								},
							},
						},
						"threat_exceptions": dsschema.ListNestedAttribute{
							Description: "The ThreatExceptions param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "exempt_ip":true, "name":true, "notes":true, "packet_capture":true} forceNew:map[string]bool(nil)
									"action": dsschema.SingleNestedAttribute{
										Description: "The Action param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
											"alert": dsschema.BoolAttribute{
												Description: "The Alert param.",
												Computed:    true,
											},
											"allow": dsschema.BoolAttribute{
												Description: "The Allow param.",
												Computed:    true,
											},
											"block_ip": dsschema.SingleNestedAttribute{
												Description: "The BlockIp param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
													"duration": dsschema.Int64Attribute{
														Description: "The Duration param. Value must be between 1 and 3600.",
														Computed:    true,
													},
													"track_by": dsschema.StringAttribute{
														Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
														Computed:    true,
													},
												},
											},
											"default": dsschema.BoolAttribute{
												Description: "The Default param.",
												Computed:    true,
											},
											"drop": dsschema.BoolAttribute{
												Description: "The Drop param.",
												Computed:    true,
											},
											"reset_both": dsschema.BoolAttribute{
												Description: "The ResetBoth param.",
												Computed:    true,
											},
											"reset_client": dsschema.BoolAttribute{
												Description: "The ResetClient param.",
												Computed:    true,
											},
											"reset_server": dsschema.BoolAttribute{
												Description: "The ResetServer param.",
												Computed:    true,
											},
										},
									},
									"exempt_ips": dsschema.ListNestedAttribute{
										Description: "The ExemptIps param.",
										Computed:    true,
										NestedObject: dsschema.NestedAttributeObject{
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
												"name": dsschema.StringAttribute{
													Description: "The Name param.",
													Computed:    true,
												},
											},
										},
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"notes": dsschema.StringAttribute{
										Description: "The Notes param.",
										Computed:    true,
									},
									"packet_capture": dsschema.StringAttribute{
										Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
										Computed:    true,
									},
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *antiSpywareProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *antiSpywareProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state antiSpywareProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_anti_spyware_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := bUPXiuP.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]antiSpywareProfileListDsModel_lrzxLXR_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := antiSpywareProfileListDsModel_lrzxLXR_Config{}

			var1.CloudInlineAnalysis = types.BoolPointerValue(var0.CloudInlineAnalysis)

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Id = types.StringPointerValue(var0.Id)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.InlineExceptionEdlUrls)
			var1.InlineExceptionEdlUrls = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.InlineExceptionIpAddresses)
			var1.InlineExceptionIpAddresses = var4
			resp.Diagnostics.Append(var5.Errors()...)

			if len(var0.MicaEngineSpywareEnabledList) == 0 {
				var1.MicaEngineSpywareEnabledList = nil
			} else {
				var1.MicaEngineSpywareEnabledList = make([]antiSpywareProfileListDsModel_lrzxLXR_MicaEngineObject, 0, len(var0.MicaEngineSpywareEnabledList))
				for _, var6 := range var0.MicaEngineSpywareEnabledList {
					var7 := antiSpywareProfileListDsModel_lrzxLXR_MicaEngineObject{}

					var7.InlinePolicyAction = types.StringPointerValue(var6.InlinePolicyAction)

					var7.Name = types.StringPointerValue(var6.Name)
					var1.MicaEngineSpywareEnabledList = append(var1.MicaEngineSpywareEnabledList, var7)
				}
			}

			var1.Name = types.StringValue(var0.Name)

			if len(var0.Rules) == 0 {
				var1.Rules = nil
			} else {
				var1.Rules = make([]antiSpywareProfileListDsModel_lrzxLXR_RuleObject, 0, len(var0.Rules))
				for _, var8 := range var0.Rules {
					var9 := antiSpywareProfileListDsModel_lrzxLXR_RuleObject{}

					if var8.Action == nil {
						var9.Action = nil
					} else {
						var9.Action = &antiSpywareProfileListDsModel_lrzxLXR_RuleActionObject{}

						var9.Action.Alert = types.BoolValue(var8.Action.Alert != nil)

						var9.Action.Allow = types.BoolValue(var8.Action.Allow != nil)

						if var8.Action.BlockIp == nil {
							var9.Action.BlockIp = nil
						} else {
							var9.Action.BlockIp = &antiSpywareProfileListDsModel_lrzxLXR_RuleBlockIpObject{}

							var9.Action.BlockIp.Duration = types.Int64PointerValue(var8.Action.BlockIp.Duration)

							var9.Action.BlockIp.TrackBy = types.StringPointerValue(var8.Action.BlockIp.TrackBy)
						}

						var9.Action.Drop = types.BoolValue(var8.Action.Drop != nil)

						var9.Action.ResetBoth = types.BoolValue(var8.Action.ResetBoth != nil)

						var9.Action.ResetClient = types.BoolValue(var8.Action.ResetClient != nil)

						var9.Action.ResetServer = types.BoolValue(var8.Action.ResetServer != nil)
					}

					var9.Category = types.StringPointerValue(var8.Category)

					var9.Name = types.StringPointerValue(var8.Name)

					var9.PacketCapture = types.StringPointerValue(var8.PacketCapture)

					var10, var11 := types.ListValueFrom(ctx, types.StringType, var8.Severities)
					var9.Severities = var10
					resp.Diagnostics.Append(var11.Errors()...)

					var9.ThreatName = types.StringPointerValue(var8.ThreatName)
					var1.Rules = append(var1.Rules, var9)
				}
			}

			if len(var0.ThreatExceptions) == 0 {
				var1.ThreatExceptions = nil
			} else {
				var1.ThreatExceptions = make([]antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionObject, 0, len(var0.ThreatExceptions))
				for _, var12 := range var0.ThreatExceptions {
					var13 := antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionObject{}

					if var12.Action == nil {
						var13.Action = nil
					} else {
						var13.Action = &antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionActionObject{}

						var13.Action.Alert = types.BoolValue(var12.Action.Alert != nil)

						var13.Action.Allow = types.BoolValue(var12.Action.Allow != nil)

						if var12.Action.BlockIp == nil {
							var13.Action.BlockIp = nil
						} else {
							var13.Action.BlockIp = &antiSpywareProfileListDsModel_lrzxLXR_ThreatExceptionBlockIpObject{}

							var13.Action.BlockIp.Duration = types.Int64PointerValue(var12.Action.BlockIp.Duration)

							var13.Action.BlockIp.TrackBy = types.StringPointerValue(var12.Action.BlockIp.TrackBy)
						}

						var13.Action.Default = types.BoolValue(var12.Action.Default != nil)

						var13.Action.Drop = types.BoolValue(var12.Action.Drop != nil)

						var13.Action.ResetBoth = types.BoolValue(var12.Action.ResetBoth != nil)

						var13.Action.ResetClient = types.BoolValue(var12.Action.ResetClient != nil)

						var13.Action.ResetServer = types.BoolValue(var12.Action.ResetServer != nil)
					}

					if len(var12.ExemptIps) == 0 {
						var13.ExemptIps = nil
					} else {
						var13.ExemptIps = make([]antiSpywareProfileListDsModel_lrzxLXR_ExemptIpObject, 0, len(var12.ExemptIps))
						for _, var14 := range var12.ExemptIps {
							var15 := antiSpywareProfileListDsModel_lrzxLXR_ExemptIpObject{}

							var15.Name = types.StringValue(var14.Name)
							var13.ExemptIps = append(var13.ExemptIps, var15)
						}
					}

					var13.Name = types.StringPointerValue(var12.Name)

					var13.Notes = types.StringPointerValue(var12.Notes)

					var13.PacketCapture = types.StringPointerValue(var12.PacketCapture)
					var1.ThreatExceptions = append(var1.ThreatExceptions, var13)
				}
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &antiSpywareProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &antiSpywareProfileDataSource{}
)

func NewAntiSpywareProfileDataSource() datasource.DataSource {
	return &antiSpywareProfileDataSource{}
}

type antiSpywareProfileDataSource struct {
	client *scm.Client
}

// antiSpywareProfileDsModel is the model.
type antiSpywareProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	CloudInlineAnalysis types.Bool   `tfsdk:"cloud_inline_analysis"`
	Description         types.String `tfsdk:"description"`
	// omit input: id
	InlineExceptionEdlUrls       types.List                                                `tfsdk:"inline_exception_edl_urls"`
	InlineExceptionIpAddresses   types.List                                                `tfsdk:"inline_exception_ip_addresses"`
	MicaEngineSpywareEnabledList []antiSpywareProfileDsModel_lrzxLXR_MicaEngineObject      `tfsdk:"mica_engine_spyware_enabled_list"`
	Name                         types.String                                              `tfsdk:"name"`
	Rules                        []antiSpywareProfileDsModel_lrzxLXR_RuleObject            `tfsdk:"rules"`
	ThreatExceptions             []antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionObject `tfsdk:"threat_exceptions"`
}

type antiSpywareProfileDsModel_lrzxLXR_MicaEngineObject struct {
	InlinePolicyAction types.String `tfsdk:"inline_policy_action"`
	Name               types.String `tfsdk:"name"`
}

type antiSpywareProfileDsModel_lrzxLXR_RuleObject struct {
	Action        *antiSpywareProfileDsModel_lrzxLXR_RuleActionObject `tfsdk:"action"`
	Category      types.String                                        `tfsdk:"category"`
	Name          types.String                                        `tfsdk:"name"`
	PacketCapture types.String                                        `tfsdk:"packet_capture"`
	Severities    types.List                                          `tfsdk:"severities"`
	ThreatName    types.String                                        `tfsdk:"threat_name"`
}

type antiSpywareProfileDsModel_lrzxLXR_RuleActionObject struct {
	Alert       types.Bool                                           `tfsdk:"alert"`
	Allow       types.Bool                                           `tfsdk:"allow"`
	BlockIp     *antiSpywareProfileDsModel_lrzxLXR_RuleBlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                           `tfsdk:"drop"`
	ResetBoth   types.Bool                                           `tfsdk:"reset_both"`
	ResetClient types.Bool                                           `tfsdk:"reset_client"`
	ResetServer types.Bool                                           `tfsdk:"reset_server"`
}

type antiSpywareProfileDsModel_lrzxLXR_RuleBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionObject struct {
	Action        *antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionActionObject `tfsdk:"action"`
	ExemptIps     []antiSpywareProfileDsModel_lrzxLXR_ExemptIpObject             `tfsdk:"exempt_ips"`
	Name          types.String                                                   `tfsdk:"name"`
	Notes         types.String                                                   `tfsdk:"notes"`
	PacketCapture types.String                                                   `tfsdk:"packet_capture"`
}

type antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionActionObject struct {
	Alert       types.Bool                                                      `tfsdk:"alert"`
	Allow       types.Bool                                                      `tfsdk:"allow"`
	BlockIp     *antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                      `tfsdk:"default"`
	Drop        types.Bool                                                      `tfsdk:"drop"`
	ResetBoth   types.Bool                                                      `tfsdk:"reset_both"`
	ResetClient types.Bool                                                      `tfsdk:"reset_client"`
	ResetServer types.Bool                                                      `tfsdk:"reset_server"`
}

type antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareProfileDsModel_lrzxLXR_ExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (d *antiSpywareProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_anti_spyware_profile"
}

// Schema defines the schema for this data source.
func (d *antiSpywareProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"cloud_inline_analysis":true, "description":true, "id":true, "inline_exception_edl_url":true, "inline_exception_ip_address":true, "mica_engine_spyware_enabled":true, "name":true, "rules":true, "tfid":true, "threat_exception":true} forceNew:map[string]bool{"id":true}
			"cloud_inline_analysis": dsschema.BoolAttribute{
				Description: "The CloudInlineAnalysis param. Default: `false`.",
				Computed:    true,
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"inline_exception_edl_urls": dsschema.ListAttribute{
				Description: "The InlineExceptionEdlUrls param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"inline_exception_ip_addresses": dsschema.ListAttribute{
				Description: "The InlineExceptionIpAddresses param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"mica_engine_spyware_enabled_list": dsschema.ListNestedAttribute{
				Description: "The MicaEngineSpywareEnabledList param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"inline_policy_action":true, "name":true} forceNew:map[string]bool(nil)
						"inline_policy_action": dsschema.StringAttribute{
							Description: "The InlinePolicyAction param. String must be one of these: `\"alert\"`, `\"allow\"`, `\"drop\"`, `\"reset-both\"`, `\"reset-client\"`, `\"reset-server\"`. Default: `\"alert\"`.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
					},
				},
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"rules": dsschema.ListNestedAttribute{
				Description: "The Rules param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "category":true, "name":true, "packet_capture":true, "severity":true, "threat_name":true} forceNew:map[string]bool(nil)
						"action": dsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": dsschema.BoolAttribute{
									Description: "The Alert param.",
									Computed:    true,
								},
								"allow": dsschema.BoolAttribute{
									Description: "The Allow param.",
									Computed:    true,
								},
								"block_ip": dsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": dsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Computed:    true,
										},
										"track_by": dsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Computed:    true,
										},
									},
								},
								"drop": dsschema.BoolAttribute{
									Description: "The Drop param.",
									Computed:    true,
								},
								"reset_both": dsschema.BoolAttribute{
									Description: "The ResetBoth param.",
									Computed:    true,
								},
								"reset_client": dsschema.BoolAttribute{
									Description: "The ResetClient param.",
									Computed:    true,
								},
								"reset_server": dsschema.BoolAttribute{
									Description: "The ResetServer param.",
									Computed:    true,
								},
							},
						},
						"category": dsschema.StringAttribute{
							Description: "The Category param. String must be one of these: `\"dns-proxy\"`, `\"backdoor\"`, `\"data-theft\"`, `\"autogen\"`, `\"spyware\"`, `\"dns-security\"`, `\"downloader\"`, `\"dns-phishing\"`, `\"phishing-kit\"`, `\"cryptominer\"`, `\"hacktool\"`, `\"dns-benign\"`, `\"dns-wildfire\"`, `\"botnet\"`, `\"dns-grayware\"`, `\"inline-cloud-c2\"`, `\"keylogger\"`, `\"p2p-communication\"`, `\"domain-edl\"`, `\"webshell\"`, `\"command-and-control\"`, `\"dns-ddns\"`, `\"net-worm\"`, `\"any\"`, `\"tls-fingerprint\"`, `\"dns-new-domain\"`, `\"dns\"`, `\"fraud\"`, `\"dns-c2\"`, `\"adware\"`, `\"post-exploitation\"`, `\"dns-malware\"`, `\"browser-hijack\"`, `\"dns-parked\"`.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"packet_capture": dsschema.StringAttribute{
							Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Computed:    true,
						},
						"severities": dsschema.ListAttribute{
							Description: "The Severities param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"threat_name": dsschema.StringAttribute{
							Description: "The ThreatName param. String length must exceed 4 characters.",
							Computed:    true,
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"threat_exceptions": dsschema.ListNestedAttribute{
				Description: "The ThreatExceptions param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "exempt_ip":true, "name":true, "notes":true, "packet_capture":true} forceNew:map[string]bool(nil)
						"action": dsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": dsschema.BoolAttribute{
									Description: "The Alert param.",
									Computed:    true,
								},
								"allow": dsschema.BoolAttribute{
									Description: "The Allow param.",
									Computed:    true,
								},
								"block_ip": dsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": dsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Computed:    true,
										},
										"track_by": dsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Computed:    true,
										},
									},
								},
								"default": dsschema.BoolAttribute{
									Description: "The Default param.",
									Computed:    true,
								},
								"drop": dsschema.BoolAttribute{
									Description: "The Drop param.",
									Computed:    true,
								},
								"reset_both": dsschema.BoolAttribute{
									Description: "The ResetBoth param.",
									Computed:    true,
								},
								"reset_client": dsschema.BoolAttribute{
									Description: "The ResetClient param.",
									Computed:    true,
								},
								"reset_server": dsschema.BoolAttribute{
									Description: "The ResetServer param.",
									Computed:    true,
								},
							},
						},
						"exempt_ips": dsschema.ListNestedAttribute{
							Description: "The ExemptIps param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
								},
							},
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"notes": dsschema.StringAttribute{
							Description: "The Notes param.",
							Computed:    true,
						},
						"packet_capture": dsschema.StringAttribute{
							Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Computed:    true,
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (d *antiSpywareProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *antiSpywareProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state antiSpywareProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_anti_spyware_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := bUPXiuP.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.CloudInlineAnalysis = types.BoolPointerValue(ans.CloudInlineAnalysis)

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.InlineExceptionEdlUrls)
	state.InlineExceptionEdlUrls = var0
	resp.Diagnostics.Append(var1.Errors()...)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.InlineExceptionIpAddresses)
	state.InlineExceptionIpAddresses = var2
	resp.Diagnostics.Append(var3.Errors()...)

	if len(ans.MicaEngineSpywareEnabledList) == 0 {
		state.MicaEngineSpywareEnabledList = nil
	} else {
		state.MicaEngineSpywareEnabledList = make([]antiSpywareProfileDsModel_lrzxLXR_MicaEngineObject, 0, len(ans.MicaEngineSpywareEnabledList))
		for _, var4 := range ans.MicaEngineSpywareEnabledList {
			var5 := antiSpywareProfileDsModel_lrzxLXR_MicaEngineObject{}

			var5.InlinePolicyAction = types.StringPointerValue(var4.InlinePolicyAction)

			var5.Name = types.StringPointerValue(var4.Name)
			state.MicaEngineSpywareEnabledList = append(state.MicaEngineSpywareEnabledList, var5)
		}
	}

	state.Name = types.StringValue(ans.Name)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]antiSpywareProfileDsModel_lrzxLXR_RuleObject, 0, len(ans.Rules))
		for _, var6 := range ans.Rules {
			var7 := antiSpywareProfileDsModel_lrzxLXR_RuleObject{}

			if var6.Action == nil {
				var7.Action = nil
			} else {
				var7.Action = &antiSpywareProfileDsModel_lrzxLXR_RuleActionObject{}

				var7.Action.Alert = types.BoolValue(var6.Action.Alert != nil)

				var7.Action.Allow = types.BoolValue(var6.Action.Allow != nil)

				if var6.Action.BlockIp == nil {
					var7.Action.BlockIp = nil
				} else {
					var7.Action.BlockIp = &antiSpywareProfileDsModel_lrzxLXR_RuleBlockIpObject{}

					var7.Action.BlockIp.Duration = types.Int64PointerValue(var6.Action.BlockIp.Duration)

					var7.Action.BlockIp.TrackBy = types.StringPointerValue(var6.Action.BlockIp.TrackBy)
				}

				var7.Action.Drop = types.BoolValue(var6.Action.Drop != nil)

				var7.Action.ResetBoth = types.BoolValue(var6.Action.ResetBoth != nil)

				var7.Action.ResetClient = types.BoolValue(var6.Action.ResetClient != nil)

				var7.Action.ResetServer = types.BoolValue(var6.Action.ResetServer != nil)
			}

			var7.Category = types.StringPointerValue(var6.Category)

			var7.Name = types.StringPointerValue(var6.Name)

			var7.PacketCapture = types.StringPointerValue(var6.PacketCapture)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var6.Severities)
			var7.Severities = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var7.ThreatName = types.StringPointerValue(var6.ThreatName)
			state.Rules = append(state.Rules, var7)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var10 := range ans.ThreatExceptions {
			var11 := antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionObject{}

			if var10.Action == nil {
				var11.Action = nil
			} else {
				var11.Action = &antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionActionObject{}

				var11.Action.Alert = types.BoolValue(var10.Action.Alert != nil)

				var11.Action.Allow = types.BoolValue(var10.Action.Allow != nil)

				if var10.Action.BlockIp == nil {
					var11.Action.BlockIp = nil
				} else {
					var11.Action.BlockIp = &antiSpywareProfileDsModel_lrzxLXR_ThreatExceptionBlockIpObject{}

					var11.Action.BlockIp.Duration = types.Int64PointerValue(var10.Action.BlockIp.Duration)

					var11.Action.BlockIp.TrackBy = types.StringPointerValue(var10.Action.BlockIp.TrackBy)
				}

				var11.Action.Default = types.BoolValue(var10.Action.Default != nil)

				var11.Action.Drop = types.BoolValue(var10.Action.Drop != nil)

				var11.Action.ResetBoth = types.BoolValue(var10.Action.ResetBoth != nil)

				var11.Action.ResetClient = types.BoolValue(var10.Action.ResetClient != nil)

				var11.Action.ResetServer = types.BoolValue(var10.Action.ResetServer != nil)
			}

			if len(var10.ExemptIps) == 0 {
				var11.ExemptIps = nil
			} else {
				var11.ExemptIps = make([]antiSpywareProfileDsModel_lrzxLXR_ExemptIpObject, 0, len(var10.ExemptIps))
				for _, var12 := range var10.ExemptIps {
					var13 := antiSpywareProfileDsModel_lrzxLXR_ExemptIpObject{}

					var13.Name = types.StringValue(var12.Name)
					var11.ExemptIps = append(var11.ExemptIps, var13)
				}
			}

			var11.Name = types.StringPointerValue(var10.Name)

			var11.Notes = types.StringPointerValue(var10.Notes)

			var11.PacketCapture = types.StringPointerValue(var10.PacketCapture)
			state.ThreatExceptions = append(state.ThreatExceptions, var11)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &antiSpywareProfileResource{}
	_ resource.ResourceWithConfigure   = &antiSpywareProfileResource{}
	_ resource.ResourceWithImportState = &antiSpywareProfileResource{}
)

func NewAntiSpywareProfileResource() resource.Resource {
	return &antiSpywareProfileResource{}
}

type antiSpywareProfileResource struct {
	client *scm.Client
}

// antiSpywareProfileRsModel is the model.
type antiSpywareProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	CloudInlineAnalysis          types.Bool                                                `tfsdk:"cloud_inline_analysis"`
	Description                  types.String                                              `tfsdk:"description"`
	Device                       types.String                                              `tfsdk:"device"`
	Folder                       types.String                                              `tfsdk:"folder"`
	Id                           types.String                                              `tfsdk:"id"`
	InlineExceptionEdlUrls       types.List                                                `tfsdk:"inline_exception_edl_urls"`
	InlineExceptionIpAddresses   types.List                                                `tfsdk:"inline_exception_ip_addresses"`
	MicaEngineSpywareEnabledList []antiSpywareProfileRsModel_lrzxLXR_MicaEngineObject      `tfsdk:"mica_engine_spyware_enabled_list"`
	Name                         types.String                                              `tfsdk:"name"`
	Rules                        []antiSpywareProfileRsModel_lrzxLXR_RuleObject            `tfsdk:"rules"`
	Snippet                      types.String                                              `tfsdk:"snippet"`
	ThreatExceptions             []antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionObject `tfsdk:"threat_exceptions"`

	// Output.
	// omit input: cloud_inline_analysis
	// omit input: description
	// omit input: id
	// omit input: inline_exception_edl_urls
	// omit input: inline_exception_ip_addresses
	// omit input: mica_engine_spyware_enabled_list
	// omit input: name
	// omit input: rules
	// omit input: threat_exceptions
}

type antiSpywareProfileRsModel_lrzxLXR_MicaEngineObject struct {
	InlinePolicyAction types.String `tfsdk:"inline_policy_action"`
	Name               types.String `tfsdk:"name"`
}

type antiSpywareProfileRsModel_lrzxLXR_RuleObject struct {
	Action        *antiSpywareProfileRsModel_lrzxLXR_RuleActionObject `tfsdk:"action"`
	Category      types.String                                        `tfsdk:"category"`
	Name          types.String                                        `tfsdk:"name"`
	PacketCapture types.String                                        `tfsdk:"packet_capture"`
	Severities    types.List                                          `tfsdk:"severities"`
	ThreatName    types.String                                        `tfsdk:"threat_name"`
}

type antiSpywareProfileRsModel_lrzxLXR_RuleActionObject struct {
	Alert       types.Bool                                           `tfsdk:"alert"`
	Allow       types.Bool                                           `tfsdk:"allow"`
	BlockIp     *antiSpywareProfileRsModel_lrzxLXR_RuleBlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                           `tfsdk:"drop"`
	ResetBoth   types.Bool                                           `tfsdk:"reset_both"`
	ResetClient types.Bool                                           `tfsdk:"reset_client"`
	ResetServer types.Bool                                           `tfsdk:"reset_server"`
}

type antiSpywareProfileRsModel_lrzxLXR_RuleBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionObject struct {
	Action        *antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionActionObject `tfsdk:"action"`
	ExemptIps     []antiSpywareProfileRsModel_lrzxLXR_ExemptIpObject             `tfsdk:"exempt_ips"`
	Name          types.String                                                   `tfsdk:"name"`
	Notes         types.String                                                   `tfsdk:"notes"`
	PacketCapture types.String                                                   `tfsdk:"packet_capture"`
}

type antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionActionObject struct {
	Alert       types.Bool                                                      `tfsdk:"alert"`
	Allow       types.Bool                                                      `tfsdk:"allow"`
	BlockIp     *antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                      `tfsdk:"default"`
	Drop        types.Bool                                                      `tfsdk:"drop"`
	ResetBoth   types.Bool                                                      `tfsdk:"reset_both"`
	ResetClient types.Bool                                                      `tfsdk:"reset_client"`
	ResetServer types.Bool                                                      `tfsdk:"reset_server"`
}

type antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareProfileRsModel_lrzxLXR_ExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (r *antiSpywareProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_anti_spyware_profile"
}

// Schema defines the schema for this data source.
func (r *antiSpywareProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"cloud_inline_analysis":true, "description":true, "device":true, "folder":true, "id":true, "inline_exception_edl_url":true, "inline_exception_ip_address":true, "mica_engine_spyware_enabled":true, "name":true, "rules":true, "snippet":true, "threat_exception":true} outputs:map[string]bool{"cloud_inline_analysis":true, "description":true, "id":true, "inline_exception_edl_url":true, "inline_exception_ip_address":true, "mica_engine_spyware_enabled":true, "name":true, "rules":true, "tfid":true, "threat_exception":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"cloud_inline_analysis": rsschema.BoolAttribute{
				Description: "The CloudInlineAnalysis param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"inline_exception_edl_urls": rsschema.ListAttribute{
				Description: "The InlineExceptionEdlUrls param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"inline_exception_ip_addresses": rsschema.ListAttribute{
				Description: "The InlineExceptionIpAddresses param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"mica_engine_spyware_enabled_list": rsschema.ListNestedAttribute{
				Description: "The MicaEngineSpywareEnabledList param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"inline_policy_action":true, "name":true} outputs:map[string]bool{"inline_policy_action":true, "name":true} forceNew:map[string]bool(nil)
						"inline_policy_action": rsschema.StringAttribute{
							Description: "The InlinePolicyAction param. String must be one of these: `\"alert\"`, `\"allow\"`, `\"drop\"`, `\"reset-both\"`, `\"reset-client\"`, `\"reset-server\"`. Default: `\"alert\"`.",
							Optional:    true,
							Computed:    true,
							Default:     stringdefault.StaticString("alert"),
							Validators: []validator.String{
								stringvalidator.OneOf("alert", "allow", "drop", "reset-both", "reset-client", "reset-server"),
							},
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
					},
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"rules": rsschema.ListNestedAttribute{
				Description: "The Rules param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"action":true, "category":true, "name":true, "packet_capture":true, "severity":true, "threat_name":true} outputs:map[string]bool{"action":true, "category":true, "name":true, "packet_capture":true, "severity":true, "threat_name":true} forceNew:map[string]bool(nil)
						"action": rsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Optional:    true,
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": rsschema.BoolAttribute{
									Description: "The Alert param.",
									Optional:    true,
								},
								"allow": rsschema.BoolAttribute{
									Description: "The Allow param.",
									Optional:    true,
								},
								"block_ip": rsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"duration":true, "track_by":true} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": rsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Optional:    true,
											Validators: []validator.Int64{
												int64validator.Between(1, 3600),
											},
										},
										"track_by": rsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Optional:    true,
											Validators: []validator.String{
												stringvalidator.OneOf("source-and-destination", "source"),
											},
										},
									},
								},
								"drop": rsschema.BoolAttribute{
									Description: "The Drop param.",
									Optional:    true,
								},
								"reset_both": rsschema.BoolAttribute{
									Description: "The ResetBoth param.",
									Optional:    true,
								},
								"reset_client": rsschema.BoolAttribute{
									Description: "The ResetClient param.",
									Optional:    true,
								},
								"reset_server": rsschema.BoolAttribute{
									Description: "The ResetServer param.",
									Optional:    true,
								},
							},
						},
						"category": rsschema.StringAttribute{
							Description: "The Category param. String must be one of these: `\"dns-proxy\"`, `\"backdoor\"`, `\"data-theft\"`, `\"autogen\"`, `\"spyware\"`, `\"dns-security\"`, `\"downloader\"`, `\"dns-phishing\"`, `\"phishing-kit\"`, `\"cryptominer\"`, `\"hacktool\"`, `\"dns-benign\"`, `\"dns-wildfire\"`, `\"botnet\"`, `\"dns-grayware\"`, `\"inline-cloud-c2\"`, `\"keylogger\"`, `\"p2p-communication\"`, `\"domain-edl\"`, `\"webshell\"`, `\"command-and-control\"`, `\"dns-ddns\"`, `\"net-worm\"`, `\"any\"`, `\"tls-fingerprint\"`, `\"dns-new-domain\"`, `\"dns\"`, `\"fraud\"`, `\"dns-c2\"`, `\"adware\"`, `\"post-exploitation\"`, `\"dns-malware\"`, `\"browser-hijack\"`, `\"dns-parked\"`.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.OneOf("dns-proxy", "backdoor", "data-theft", "autogen", "spyware", "dns-security", "downloader", "dns-phishing", "phishing-kit", "cryptominer", "hacktool", "dns-benign", "dns-wildfire", "botnet", "dns-grayware", "inline-cloud-c2", "keylogger", "p2p-communication", "domain-edl", "webshell", "command-and-control", "dns-ddns", "net-worm", "any", "tls-fingerprint", "dns-new-domain", "dns", "fraud", "dns-c2", "adware", "post-exploitation", "dns-malware", "browser-hijack", "dns-parked"),
							},
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
						"packet_capture": rsschema.StringAttribute{
							Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.OneOf("disable", "single-packet", "extended-capture"),
							},
						},
						"severities": rsschema.ListAttribute{
							Description: "The Severities param.",
							Optional:    true,
							ElementType: types.StringType,
						},
						"threat_name": rsschema.StringAttribute{
							Description: "The ThreatName param. String length must exceed 4 characters.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.LengthAtLeast(4),
							},
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"threat_exceptions": rsschema.ListNestedAttribute{
				Description: "The ThreatExceptions param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"action":true, "exempt_ip":true, "name":true, "notes":true, "packet_capture":true} outputs:map[string]bool{"action":true, "exempt_ip":true, "name":true, "notes":true, "packet_capture":true} forceNew:map[string]bool(nil)
						"action": rsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Optional:    true,
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": rsschema.BoolAttribute{
									Description: "The Alert param.",
									Optional:    true,
								},
								"allow": rsschema.BoolAttribute{
									Description: "The Allow param.",
									Optional:    true,
								},
								"block_ip": rsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"duration":true, "track_by":true} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": rsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Optional:    true,
											Validators: []validator.Int64{
												int64validator.Between(1, 3600),
											},
										},
										"track_by": rsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Optional:    true,
											Validators: []validator.String{
												stringvalidator.OneOf("source-and-destination", "source"),
											},
										},
									},
								},
								"default": rsschema.BoolAttribute{
									Description: "The Default param.",
									Optional:    true,
								},
								"drop": rsschema.BoolAttribute{
									Description: "The Drop param.",
									Optional:    true,
								},
								"reset_both": rsschema.BoolAttribute{
									Description: "The ResetBoth param.",
									Optional:    true,
								},
								"reset_client": rsschema.BoolAttribute{
									Description: "The ResetClient param.",
									Optional:    true,
								},
								"reset_server": rsschema.BoolAttribute{
									Description: "The ResetServer param.",
									Optional:    true,
								},
							},
						},
						"exempt_ips": rsschema.ListNestedAttribute{
							Description: "The ExemptIps param.",
							Optional:    true,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"name":true} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
									"name": rsschema.StringAttribute{
										Description: "The Name param.",
										Required:    true,
									},
								},
							},
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
						"notes": rsschema.StringAttribute{
							Description: "The Notes param.",
							Optional:    true,
						},
						"packet_capture": rsschema.StringAttribute{
							Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.OneOf("disable", "single-packet", "extended-capture"),
							},
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *antiSpywareProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *antiSpywareProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state antiSpywareProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_anti_spyware_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := bUPXiuP.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &lrzxLXR.Config{}

	input.Request.CloudInlineAnalysis = state.CloudInlineAnalysis.ValueBoolPointer()

	input.Request.Description = state.Description.ValueStringPointer()

	resp.Diagnostics.Append(state.InlineExceptionEdlUrls.ElementsAs(ctx, &input.Request.InlineExceptionEdlUrls, false)...)
	//if len(state.InlineExceptionEdlUrls) != 0 {
	//    input.Request.InlineExceptionEdlUrls = make([]string, 0, len(state.InlineExceptionEdlUrls))
	//    for _, var0 := range state.InlineExceptionEdlUrls {
	//        input.Request.InlineExceptionEdlUrls = append(input.Request.InlineExceptionEdlUrls, var0.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.InlineExceptionIpAddresses.ElementsAs(ctx, &input.Request.InlineExceptionIpAddresses, false)...)
	//if len(state.InlineExceptionIpAddresses) != 0 {
	//    input.Request.InlineExceptionIpAddresses = make([]string, 0, len(state.InlineExceptionIpAddresses))
	//    for _, var1 := range state.InlineExceptionIpAddresses {
	//        input.Request.InlineExceptionIpAddresses = append(input.Request.InlineExceptionIpAddresses, var1.ValueString())
	//    }
	//}

	if len(state.MicaEngineSpywareEnabledList) != 0 {
		input.Request.MicaEngineSpywareEnabledList = make([]lrzxLXR.MicaEngineObject, 0, len(state.MicaEngineSpywareEnabledList))
		for _, var2 := range state.MicaEngineSpywareEnabledList {
			var var3 lrzxLXR.MicaEngineObject

			var3.InlinePolicyAction = var2.InlinePolicyAction.ValueStringPointer()

			var3.Name = var2.Name.ValueStringPointer()
			input.Request.MicaEngineSpywareEnabledList = append(input.Request.MicaEngineSpywareEnabledList, var3)
		}
	}

	input.Request.Name = state.Name.ValueString()

	if len(state.Rules) != 0 {
		input.Request.Rules = make([]lrzxLXR.RuleObject, 0, len(state.Rules))
		for _, var4 := range state.Rules {
			var var5 lrzxLXR.RuleObject

			if var4.Action != nil {
				var5.Action = &lrzxLXR.RuleActionObject{}

				if !var4.Action.Alert.IsNull() && var4.Action.Alert.ValueBool() {
					var5.Action.Alert = map[string]interface{}{}
				}

				if !var4.Action.Allow.IsNull() && var4.Action.Allow.ValueBool() {
					var5.Action.Allow = map[string]interface{}{}
				}

				if var4.Action.BlockIp != nil {
					var5.Action.BlockIp = &lrzxLXR.RuleBlockIpObject{}

					var5.Action.BlockIp.Duration = var4.Action.BlockIp.Duration.ValueInt64Pointer()

					var5.Action.BlockIp.TrackBy = var4.Action.BlockIp.TrackBy.ValueStringPointer()
				}

				if !var4.Action.Drop.IsNull() && var4.Action.Drop.ValueBool() {
					var5.Action.Drop = map[string]interface{}{}
				}

				if !var4.Action.ResetBoth.IsNull() && var4.Action.ResetBoth.ValueBool() {
					var5.Action.ResetBoth = map[string]interface{}{}
				}

				if !var4.Action.ResetClient.IsNull() && var4.Action.ResetClient.ValueBool() {
					var5.Action.ResetClient = map[string]interface{}{}
				}

				if !var4.Action.ResetServer.IsNull() && var4.Action.ResetServer.ValueBool() {
					var5.Action.ResetServer = map[string]interface{}{}
				}
			}

			var5.Category = var4.Category.ValueStringPointer()

			var5.Name = var4.Name.ValueStringPointer()

			var5.PacketCapture = var4.PacketCapture.ValueStringPointer()

			resp.Diagnostics.Append(var4.Severities.ElementsAs(ctx, &var5.Severities, false)...)
			//if len(var4.Severities) != 0 {
			//    var5.Severities = make([]string, 0, len(var4.Severities))
			//    for _, var6 := range var4.Severities {
			//        var5.Severities = append(var5.Severities, var6.ValueString())
			//    }
			//}

			var5.ThreatName = var4.ThreatName.ValueStringPointer()
			input.Request.Rules = append(input.Request.Rules, var5)
		}
	}

	if len(state.ThreatExceptions) != 0 {
		input.Request.ThreatExceptions = make([]lrzxLXR.ThreatExceptionObject, 0, len(state.ThreatExceptions))
		for _, var7 := range state.ThreatExceptions {
			var var8 lrzxLXR.ThreatExceptionObject

			if var7.Action != nil {
				var8.Action = &lrzxLXR.ThreatExceptionActionObject{}

				if !var7.Action.Alert.IsNull() && var7.Action.Alert.ValueBool() {
					var8.Action.Alert = map[string]interface{}{}
				}

				if !var7.Action.Allow.IsNull() && var7.Action.Allow.ValueBool() {
					var8.Action.Allow = map[string]interface{}{}
				}

				if var7.Action.BlockIp != nil {
					var8.Action.BlockIp = &lrzxLXR.ThreatExceptionBlockIpObject{}

					var8.Action.BlockIp.Duration = var7.Action.BlockIp.Duration.ValueInt64Pointer()

					var8.Action.BlockIp.TrackBy = var7.Action.BlockIp.TrackBy.ValueStringPointer()
				}

				if !var7.Action.Default.IsNull() && var7.Action.Default.ValueBool() {
					var8.Action.Default = map[string]interface{}{}
				}

				if !var7.Action.Drop.IsNull() && var7.Action.Drop.ValueBool() {
					var8.Action.Drop = map[string]interface{}{}
				}

				if !var7.Action.ResetBoth.IsNull() && var7.Action.ResetBoth.ValueBool() {
					var8.Action.ResetBoth = map[string]interface{}{}
				}

				if !var7.Action.ResetClient.IsNull() && var7.Action.ResetClient.ValueBool() {
					var8.Action.ResetClient = map[string]interface{}{}
				}

				if !var7.Action.ResetServer.IsNull() && var7.Action.ResetServer.ValueBool() {
					var8.Action.ResetServer = map[string]interface{}{}
				}
			}

			if len(var7.ExemptIps) != 0 {
				var8.ExemptIps = make([]lrzxLXR.ExemptIpObject, 0, len(var7.ExemptIps))
				for _, var9 := range var7.ExemptIps {
					var var10 lrzxLXR.ExemptIpObject

					var10.Name = var9.Name.ValueString()
					var8.ExemptIps = append(var8.ExemptIps, var10)
				}
			}

			var8.Name = var7.Name.ValueStringPointer()

			var8.Notes = var7.Notes.ValueStringPointer()

			var8.PacketCapture = var7.PacketCapture.ValueStringPointer()
			input.Request.ThreatExceptions = append(input.Request.ThreatExceptions, var8)
		}
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.CloudInlineAnalysis = types.BoolPointerValue(ans.CloudInlineAnalysis)

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.InlineExceptionEdlUrls)
	state.InlineExceptionEdlUrls = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.InlineExceptionIpAddresses)
	state.InlineExceptionIpAddresses = var13
	resp.Diagnostics.Append(var14.Errors()...)

	if len(ans.MicaEngineSpywareEnabledList) == 0 {
		state.MicaEngineSpywareEnabledList = nil
	} else {
		state.MicaEngineSpywareEnabledList = make([]antiSpywareProfileRsModel_lrzxLXR_MicaEngineObject, 0, len(ans.MicaEngineSpywareEnabledList))
		for _, var15 := range ans.MicaEngineSpywareEnabledList {
			var16 := antiSpywareProfileRsModel_lrzxLXR_MicaEngineObject{}

			var16.InlinePolicyAction = types.StringPointerValue(var15.InlinePolicyAction)

			var16.Name = types.StringPointerValue(var15.Name)
			state.MicaEngineSpywareEnabledList = append(state.MicaEngineSpywareEnabledList, var16)
		}
	}

	state.Name = types.StringValue(ans.Name)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]antiSpywareProfileRsModel_lrzxLXR_RuleObject, 0, len(ans.Rules))
		for _, var17 := range ans.Rules {
			var18 := antiSpywareProfileRsModel_lrzxLXR_RuleObject{}

			if var17.Action == nil {
				var18.Action = nil
			} else {
				var18.Action = &antiSpywareProfileRsModel_lrzxLXR_RuleActionObject{}

				var18.Action.Alert = types.BoolValue(var17.Action.Alert != nil)

				var18.Action.Allow = types.BoolValue(var17.Action.Allow != nil)

				if var17.Action.BlockIp == nil {
					var18.Action.BlockIp = nil
				} else {
					var18.Action.BlockIp = &antiSpywareProfileRsModel_lrzxLXR_RuleBlockIpObject{}

					var18.Action.BlockIp.Duration = types.Int64PointerValue(var17.Action.BlockIp.Duration)

					var18.Action.BlockIp.TrackBy = types.StringPointerValue(var17.Action.BlockIp.TrackBy)
				}

				var18.Action.Drop = types.BoolValue(var17.Action.Drop != nil)

				var18.Action.ResetBoth = types.BoolValue(var17.Action.ResetBoth != nil)

				var18.Action.ResetClient = types.BoolValue(var17.Action.ResetClient != nil)

				var18.Action.ResetServer = types.BoolValue(var17.Action.ResetServer != nil)
			}

			var18.Category = types.StringPointerValue(var17.Category)

			var18.Name = types.StringPointerValue(var17.Name)

			var18.PacketCapture = types.StringPointerValue(var17.PacketCapture)

			var19, var20 := types.ListValueFrom(ctx, types.StringType, var17.Severities)
			var18.Severities = var19
			resp.Diagnostics.Append(var20.Errors()...)

			var18.ThreatName = types.StringPointerValue(var17.ThreatName)
			state.Rules = append(state.Rules, var18)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var21 := range ans.ThreatExceptions {
			var22 := antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionObject{}

			if var21.Action == nil {
				var22.Action = nil
			} else {
				var22.Action = &antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionActionObject{}

				var22.Action.Alert = types.BoolValue(var21.Action.Alert != nil)

				var22.Action.Allow = types.BoolValue(var21.Action.Allow != nil)

				if var21.Action.BlockIp == nil {
					var22.Action.BlockIp = nil
				} else {
					var22.Action.BlockIp = &antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionBlockIpObject{}

					var22.Action.BlockIp.Duration = types.Int64PointerValue(var21.Action.BlockIp.Duration)

					var22.Action.BlockIp.TrackBy = types.StringPointerValue(var21.Action.BlockIp.TrackBy)
				}

				var22.Action.Default = types.BoolValue(var21.Action.Default != nil)

				var22.Action.Drop = types.BoolValue(var21.Action.Drop != nil)

				var22.Action.ResetBoth = types.BoolValue(var21.Action.ResetBoth != nil)

				var22.Action.ResetClient = types.BoolValue(var21.Action.ResetClient != nil)

				var22.Action.ResetServer = types.BoolValue(var21.Action.ResetServer != nil)
			}

			if len(var21.ExemptIps) == 0 {
				var22.ExemptIps = nil
			} else {
				var22.ExemptIps = make([]antiSpywareProfileRsModel_lrzxLXR_ExemptIpObject, 0, len(var21.ExemptIps))
				for _, var23 := range var21.ExemptIps {
					var24 := antiSpywareProfileRsModel_lrzxLXR_ExemptIpObject{}

					var24.Name = types.StringValue(var23.Name)
					var22.ExemptIps = append(var22.ExemptIps, var24)
				}
			}

			var22.Name = types.StringPointerValue(var21.Name)

			var22.Notes = types.StringPointerValue(var21.Notes)

			var22.PacketCapture = types.StringPointerValue(var21.PacketCapture)
			state.ThreatExceptions = append(state.ThreatExceptions, var22)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *antiSpywareProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state antiSpywareProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_anti_spyware_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := bUPXiuP.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.CloudInlineAnalysis = types.BoolPointerValue(ans.CloudInlineAnalysis)

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.InlineExceptionEdlUrls)
	state.InlineExceptionEdlUrls = var0
	resp.Diagnostics.Append(var1.Errors()...)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.InlineExceptionIpAddresses)
	state.InlineExceptionIpAddresses = var2
	resp.Diagnostics.Append(var3.Errors()...)

	if len(ans.MicaEngineSpywareEnabledList) == 0 {
		state.MicaEngineSpywareEnabledList = nil
	} else {
		state.MicaEngineSpywareEnabledList = make([]antiSpywareProfileRsModel_lrzxLXR_MicaEngineObject, 0, len(ans.MicaEngineSpywareEnabledList))
		for _, var4 := range ans.MicaEngineSpywareEnabledList {
			var5 := antiSpywareProfileRsModel_lrzxLXR_MicaEngineObject{}

			var5.InlinePolicyAction = types.StringPointerValue(var4.InlinePolicyAction)

			var5.Name = types.StringPointerValue(var4.Name)
			state.MicaEngineSpywareEnabledList = append(state.MicaEngineSpywareEnabledList, var5)
		}
	}

	state.Name = types.StringValue(ans.Name)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]antiSpywareProfileRsModel_lrzxLXR_RuleObject, 0, len(ans.Rules))
		for _, var6 := range ans.Rules {
			var7 := antiSpywareProfileRsModel_lrzxLXR_RuleObject{}

			if var6.Action == nil {
				var7.Action = nil
			} else {
				var7.Action = &antiSpywareProfileRsModel_lrzxLXR_RuleActionObject{}

				var7.Action.Alert = types.BoolValue(var6.Action.Alert != nil)

				var7.Action.Allow = types.BoolValue(var6.Action.Allow != nil)

				if var6.Action.BlockIp == nil {
					var7.Action.BlockIp = nil
				} else {
					var7.Action.BlockIp = &antiSpywareProfileRsModel_lrzxLXR_RuleBlockIpObject{}

					var7.Action.BlockIp.Duration = types.Int64PointerValue(var6.Action.BlockIp.Duration)

					var7.Action.BlockIp.TrackBy = types.StringPointerValue(var6.Action.BlockIp.TrackBy)
				}

				var7.Action.Drop = types.BoolValue(var6.Action.Drop != nil)

				var7.Action.ResetBoth = types.BoolValue(var6.Action.ResetBoth != nil)

				var7.Action.ResetClient = types.BoolValue(var6.Action.ResetClient != nil)

				var7.Action.ResetServer = types.BoolValue(var6.Action.ResetServer != nil)
			}

			var7.Category = types.StringPointerValue(var6.Category)

			var7.Name = types.StringPointerValue(var6.Name)

			var7.PacketCapture = types.StringPointerValue(var6.PacketCapture)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var6.Severities)
			var7.Severities = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var7.ThreatName = types.StringPointerValue(var6.ThreatName)
			state.Rules = append(state.Rules, var7)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var10 := range ans.ThreatExceptions {
			var11 := antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionObject{}

			if var10.Action == nil {
				var11.Action = nil
			} else {
				var11.Action = &antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionActionObject{}

				var11.Action.Alert = types.BoolValue(var10.Action.Alert != nil)

				var11.Action.Allow = types.BoolValue(var10.Action.Allow != nil)

				if var10.Action.BlockIp == nil {
					var11.Action.BlockIp = nil
				} else {
					var11.Action.BlockIp = &antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionBlockIpObject{}

					var11.Action.BlockIp.Duration = types.Int64PointerValue(var10.Action.BlockIp.Duration)

					var11.Action.BlockIp.TrackBy = types.StringPointerValue(var10.Action.BlockIp.TrackBy)
				}

				var11.Action.Default = types.BoolValue(var10.Action.Default != nil)

				var11.Action.Drop = types.BoolValue(var10.Action.Drop != nil)

				var11.Action.ResetBoth = types.BoolValue(var10.Action.ResetBoth != nil)

				var11.Action.ResetClient = types.BoolValue(var10.Action.ResetClient != nil)

				var11.Action.ResetServer = types.BoolValue(var10.Action.ResetServer != nil)
			}

			if len(var10.ExemptIps) == 0 {
				var11.ExemptIps = nil
			} else {
				var11.ExemptIps = make([]antiSpywareProfileRsModel_lrzxLXR_ExemptIpObject, 0, len(var10.ExemptIps))
				for _, var12 := range var10.ExemptIps {
					var13 := antiSpywareProfileRsModel_lrzxLXR_ExemptIpObject{}

					var13.Name = types.StringValue(var12.Name)
					var11.ExemptIps = append(var11.ExemptIps, var13)
				}
			}

			var11.Name = types.StringPointerValue(var10.Name)

			var11.Notes = types.StringPointerValue(var10.Notes)

			var11.PacketCapture = types.StringPointerValue(var10.PacketCapture)
			state.ThreatExceptions = append(state.ThreatExceptions, var11)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *antiSpywareProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state antiSpywareProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_anti_spyware_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := bUPXiuP.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &lrzxLXR.Config{}

	input.Request.CloudInlineAnalysis = plan.CloudInlineAnalysis.ValueBoolPointer()

	input.Request.Description = plan.Description.ValueStringPointer()

	resp.Diagnostics.Append(plan.InlineExceptionEdlUrls.ElementsAs(ctx, &input.Request.InlineExceptionEdlUrls, false)...)
	//if len(plan.InlineExceptionEdlUrls) != 0 {
	//    input.Request.InlineExceptionEdlUrls = make([]string, 0, len(plan.InlineExceptionEdlUrls))
	//    for _, var0 := range plan.InlineExceptionEdlUrls {
	//        input.Request.InlineExceptionEdlUrls = append(input.Request.InlineExceptionEdlUrls, var0.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.InlineExceptionIpAddresses.ElementsAs(ctx, &input.Request.InlineExceptionIpAddresses, false)...)
	//if len(plan.InlineExceptionIpAddresses) != 0 {
	//    input.Request.InlineExceptionIpAddresses = make([]string, 0, len(plan.InlineExceptionIpAddresses))
	//    for _, var1 := range plan.InlineExceptionIpAddresses {
	//        input.Request.InlineExceptionIpAddresses = append(input.Request.InlineExceptionIpAddresses, var1.ValueString())
	//    }
	//}

	if len(plan.MicaEngineSpywareEnabledList) != 0 {
		input.Request.MicaEngineSpywareEnabledList = make([]lrzxLXR.MicaEngineObject, 0, len(plan.MicaEngineSpywareEnabledList))
		for _, var2 := range plan.MicaEngineSpywareEnabledList {
			var var3 lrzxLXR.MicaEngineObject

			var3.InlinePolicyAction = var2.InlinePolicyAction.ValueStringPointer()

			var3.Name = var2.Name.ValueStringPointer()
			input.Request.MicaEngineSpywareEnabledList = append(input.Request.MicaEngineSpywareEnabledList, var3)
		}
	}

	input.Request.Name = plan.Name.ValueString()

	if len(plan.Rules) != 0 {
		input.Request.Rules = make([]lrzxLXR.RuleObject, 0, len(plan.Rules))
		for _, var4 := range plan.Rules {
			var var5 lrzxLXR.RuleObject

			if var4.Action != nil {
				var5.Action = &lrzxLXR.RuleActionObject{}

				if !var4.Action.Alert.IsNull() && var4.Action.Alert.ValueBool() {
					var5.Action.Alert = map[string]interface{}{}
				}

				if !var4.Action.Allow.IsNull() && var4.Action.Allow.ValueBool() {
					var5.Action.Allow = map[string]interface{}{}
				}

				if var4.Action.BlockIp != nil {
					var5.Action.BlockIp = &lrzxLXR.RuleBlockIpObject{}

					var5.Action.BlockIp.Duration = var4.Action.BlockIp.Duration.ValueInt64Pointer()

					var5.Action.BlockIp.TrackBy = var4.Action.BlockIp.TrackBy.ValueStringPointer()
				}

				if !var4.Action.Drop.IsNull() && var4.Action.Drop.ValueBool() {
					var5.Action.Drop = map[string]interface{}{}
				}

				if !var4.Action.ResetBoth.IsNull() && var4.Action.ResetBoth.ValueBool() {
					var5.Action.ResetBoth = map[string]interface{}{}
				}

				if !var4.Action.ResetClient.IsNull() && var4.Action.ResetClient.ValueBool() {
					var5.Action.ResetClient = map[string]interface{}{}
				}

				if !var4.Action.ResetServer.IsNull() && var4.Action.ResetServer.ValueBool() {
					var5.Action.ResetServer = map[string]interface{}{}
				}
			}

			var5.Category = var4.Category.ValueStringPointer()

			var5.Name = var4.Name.ValueStringPointer()

			var5.PacketCapture = var4.PacketCapture.ValueStringPointer()

			resp.Diagnostics.Append(var4.Severities.ElementsAs(ctx, &var5.Severities, false)...)
			//if len(var4.Severities) != 0 {
			//    var5.Severities = make([]string, 0, len(var4.Severities))
			//    for _, var6 := range var4.Severities {
			//        var5.Severities = append(var5.Severities, var6.ValueString())
			//    }
			//}

			var5.ThreatName = var4.ThreatName.ValueStringPointer()
			input.Request.Rules = append(input.Request.Rules, var5)
		}
	}

	if len(plan.ThreatExceptions) != 0 {
		input.Request.ThreatExceptions = make([]lrzxLXR.ThreatExceptionObject, 0, len(plan.ThreatExceptions))
		for _, var7 := range plan.ThreatExceptions {
			var var8 lrzxLXR.ThreatExceptionObject

			if var7.Action != nil {
				var8.Action = &lrzxLXR.ThreatExceptionActionObject{}

				if !var7.Action.Alert.IsNull() && var7.Action.Alert.ValueBool() {
					var8.Action.Alert = map[string]interface{}{}
				}

				if !var7.Action.Allow.IsNull() && var7.Action.Allow.ValueBool() {
					var8.Action.Allow = map[string]interface{}{}
				}

				if var7.Action.BlockIp != nil {
					var8.Action.BlockIp = &lrzxLXR.ThreatExceptionBlockIpObject{}

					var8.Action.BlockIp.Duration = var7.Action.BlockIp.Duration.ValueInt64Pointer()

					var8.Action.BlockIp.TrackBy = var7.Action.BlockIp.TrackBy.ValueStringPointer()
				}

				if !var7.Action.Default.IsNull() && var7.Action.Default.ValueBool() {
					var8.Action.Default = map[string]interface{}{}
				}

				if !var7.Action.Drop.IsNull() && var7.Action.Drop.ValueBool() {
					var8.Action.Drop = map[string]interface{}{}
				}

				if !var7.Action.ResetBoth.IsNull() && var7.Action.ResetBoth.ValueBool() {
					var8.Action.ResetBoth = map[string]interface{}{}
				}

				if !var7.Action.ResetClient.IsNull() && var7.Action.ResetClient.ValueBool() {
					var8.Action.ResetClient = map[string]interface{}{}
				}

				if !var7.Action.ResetServer.IsNull() && var7.Action.ResetServer.ValueBool() {
					var8.Action.ResetServer = map[string]interface{}{}
				}
			}

			if len(var7.ExemptIps) != 0 {
				var8.ExemptIps = make([]lrzxLXR.ExemptIpObject, 0, len(var7.ExemptIps))
				for _, var9 := range var7.ExemptIps {
					var var10 lrzxLXR.ExemptIpObject

					var10.Name = var9.Name.ValueString()
					var8.ExemptIps = append(var8.ExemptIps, var10)
				}
			}

			var8.Name = var7.Name.ValueStringPointer()

			var8.Notes = var7.Notes.ValueStringPointer()

			var8.PacketCapture = var7.PacketCapture.ValueStringPointer()
			input.Request.ThreatExceptions = append(input.Request.ThreatExceptions, var8)
		}
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.CloudInlineAnalysis = types.BoolPointerValue(ans.CloudInlineAnalysis)

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.InlineExceptionEdlUrls)
	state.InlineExceptionEdlUrls = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.InlineExceptionIpAddresses)
	state.InlineExceptionIpAddresses = var13
	resp.Diagnostics.Append(var14.Errors()...)

	if len(ans.MicaEngineSpywareEnabledList) == 0 {
		state.MicaEngineSpywareEnabledList = nil
	} else {
		state.MicaEngineSpywareEnabledList = make([]antiSpywareProfileRsModel_lrzxLXR_MicaEngineObject, 0, len(ans.MicaEngineSpywareEnabledList))
		for _, var15 := range ans.MicaEngineSpywareEnabledList {
			var16 := antiSpywareProfileRsModel_lrzxLXR_MicaEngineObject{}

			var16.InlinePolicyAction = types.StringPointerValue(var15.InlinePolicyAction)

			var16.Name = types.StringPointerValue(var15.Name)
			state.MicaEngineSpywareEnabledList = append(state.MicaEngineSpywareEnabledList, var16)
		}
	}

	state.Name = types.StringValue(ans.Name)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]antiSpywareProfileRsModel_lrzxLXR_RuleObject, 0, len(ans.Rules))
		for _, var17 := range ans.Rules {
			var18 := antiSpywareProfileRsModel_lrzxLXR_RuleObject{}

			if var17.Action == nil {
				var18.Action = nil
			} else {
				var18.Action = &antiSpywareProfileRsModel_lrzxLXR_RuleActionObject{}

				var18.Action.Alert = types.BoolValue(var17.Action.Alert != nil)

				var18.Action.Allow = types.BoolValue(var17.Action.Allow != nil)

				if var17.Action.BlockIp == nil {
					var18.Action.BlockIp = nil
				} else {
					var18.Action.BlockIp = &antiSpywareProfileRsModel_lrzxLXR_RuleBlockIpObject{}

					var18.Action.BlockIp.Duration = types.Int64PointerValue(var17.Action.BlockIp.Duration)

					var18.Action.BlockIp.TrackBy = types.StringPointerValue(var17.Action.BlockIp.TrackBy)
				}

				var18.Action.Drop = types.BoolValue(var17.Action.Drop != nil)

				var18.Action.ResetBoth = types.BoolValue(var17.Action.ResetBoth != nil)

				var18.Action.ResetClient = types.BoolValue(var17.Action.ResetClient != nil)

				var18.Action.ResetServer = types.BoolValue(var17.Action.ResetServer != nil)
			}

			var18.Category = types.StringPointerValue(var17.Category)

			var18.Name = types.StringPointerValue(var17.Name)

			var18.PacketCapture = types.StringPointerValue(var17.PacketCapture)

			var19, var20 := types.ListValueFrom(ctx, types.StringType, var17.Severities)
			var18.Severities = var19
			resp.Diagnostics.Append(var20.Errors()...)

			var18.ThreatName = types.StringPointerValue(var17.ThreatName)
			state.Rules = append(state.Rules, var18)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var21 := range ans.ThreatExceptions {
			var22 := antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionObject{}

			if var21.Action == nil {
				var22.Action = nil
			} else {
				var22.Action = &antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionActionObject{}

				var22.Action.Alert = types.BoolValue(var21.Action.Alert != nil)

				var22.Action.Allow = types.BoolValue(var21.Action.Allow != nil)

				if var21.Action.BlockIp == nil {
					var22.Action.BlockIp = nil
				} else {
					var22.Action.BlockIp = &antiSpywareProfileRsModel_lrzxLXR_ThreatExceptionBlockIpObject{}

					var22.Action.BlockIp.Duration = types.Int64PointerValue(var21.Action.BlockIp.Duration)

					var22.Action.BlockIp.TrackBy = types.StringPointerValue(var21.Action.BlockIp.TrackBy)
				}

				var22.Action.Default = types.BoolValue(var21.Action.Default != nil)

				var22.Action.Drop = types.BoolValue(var21.Action.Drop != nil)

				var22.Action.ResetBoth = types.BoolValue(var21.Action.ResetBoth != nil)

				var22.Action.ResetClient = types.BoolValue(var21.Action.ResetClient != nil)

				var22.Action.ResetServer = types.BoolValue(var21.Action.ResetServer != nil)
			}

			if len(var21.ExemptIps) == 0 {
				var22.ExemptIps = nil
			} else {
				var22.ExemptIps = make([]antiSpywareProfileRsModel_lrzxLXR_ExemptIpObject, 0, len(var21.ExemptIps))
				for _, var23 := range var21.ExemptIps {
					var24 := antiSpywareProfileRsModel_lrzxLXR_ExemptIpObject{}

					var24.Name = types.StringValue(var23.Name)
					var22.ExemptIps = append(var22.ExemptIps, var24)
				}
			}

			var22.Name = types.StringPointerValue(var21.Name)

			var22.Notes = types.StringPointerValue(var21.Notes)

			var22.PacketCapture = types.StringPointerValue(var21.PacketCapture)
			state.ThreatExceptions = append(state.ThreatExceptions, var22)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *antiSpywareProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_anti_spyware_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := bUPXiuP.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *antiSpywareProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
