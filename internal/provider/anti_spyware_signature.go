package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	eumQbRC "github.com/paloaltonetworks/scm-go/netsec/schemas/anti/spyware/signatures"
	lhPcfTR "github.com/paloaltonetworks/scm-go/netsec/services/antispywaresignatures"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &antiSpywareSignatureListDataSource{}
	_ datasource.DataSourceWithConfigure = &antiSpywareSignatureListDataSource{}
)

func NewAntiSpywareSignatureListDataSource() datasource.DataSource {
	return &antiSpywareSignatureListDataSource{}
}

type antiSpywareSignatureListDataSource struct {
	client *scm.Client
}

// antiSpywareSignatureListDsModel is the model.
type antiSpywareSignatureListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []antiSpywareSignatureListDsModel_eumQbRC_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type antiSpywareSignatureListDsModel_eumQbRC_Config struct {
	Bugtraqs      types.List                                                   `tfsdk:"bugtraqs"`
	Comment       types.String                                                 `tfsdk:"comment"`
	Cves          types.List                                                   `tfsdk:"cves"`
	DefaultAction *antiSpywareSignatureListDsModel_eumQbRC_DefaultActionObject `tfsdk:"default_action"`
	Direction     types.String                                                 `tfsdk:"direction"`
	Id            types.String                                                 `tfsdk:"id"`
	References    types.List                                                   `tfsdk:"references"`
	Severity      types.String                                                 `tfsdk:"severity"`
	Signature     *antiSpywareSignatureListDsModel_eumQbRC_SignatureObject     `tfsdk:"signature"`
	ThreatId      types.Int64                                                  `tfsdk:"threat_id"`
	Threatname    types.String                                                 `tfsdk:"threatname"`
	Vendors       types.List                                                   `tfsdk:"vendors"`
}

type antiSpywareSignatureListDsModel_eumQbRC_DefaultActionObject struct {
	Alert       types.Bool                                             `tfsdk:"alert"`
	Allow       types.Bool                                             `tfsdk:"allow"`
	BlockIp     *antiSpywareSignatureListDsModel_eumQbRC_BlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                             `tfsdk:"drop"`
	ResetBoth   types.Bool                                             `tfsdk:"reset_both"`
	ResetClient types.Bool                                             `tfsdk:"reset_client"`
	ResetServer types.Bool                                             `tfsdk:"reset_server"`
}

type antiSpywareSignatureListDsModel_eumQbRC_BlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareSignatureListDsModel_eumQbRC_SignatureObject struct {
	Combination *antiSpywareSignatureListDsModel_eumQbRC_CombinationObject `tfsdk:"combination"`
	Standards   []antiSpywareSignatureListDsModel_eumQbRC_StandardObject   `tfsdk:"standards"`
}

type antiSpywareSignatureListDsModel_eumQbRC_CombinationObject struct {
	AndConditions []antiSpywareSignatureListDsModel_eumQbRC_CombinationAndConditionObject `tfsdk:"and_conditions"`
	OrderFree     types.Bool                                                              `tfsdk:"order_free"`
	TimeAttribute *antiSpywareSignatureListDsModel_eumQbRC_TimeAttributeObject            `tfsdk:"time_attribute"`
}

type antiSpywareSignatureListDsModel_eumQbRC_CombinationAndConditionObject struct {
	Name         types.String                                                           `tfsdk:"name"`
	OrConditions []antiSpywareSignatureListDsModel_eumQbRC_CombinationOrConditionObject `tfsdk:"or_conditions"`
}

type antiSpywareSignatureListDsModel_eumQbRC_CombinationOrConditionObject struct {
	Name     types.String `tfsdk:"name"`
	ThreatId types.String `tfsdk:"threat_id"`
}

type antiSpywareSignatureListDsModel_eumQbRC_TimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

type antiSpywareSignatureListDsModel_eumQbRC_StandardObject struct {
	AndConditions []antiSpywareSignatureListDsModel_eumQbRC_StandardAndConditionObject `tfsdk:"and_conditions"`
	Comment       types.String                                                         `tfsdk:"comment"`
	Name          types.String                                                         `tfsdk:"name"`
	OrderFree     types.Bool                                                           `tfsdk:"order_free"`
	Scope         types.String                                                         `tfsdk:"scope"`
}

type antiSpywareSignatureListDsModel_eumQbRC_StandardAndConditionObject struct {
	Name         types.String                                                        `tfsdk:"name"`
	OrConditions []antiSpywareSignatureListDsModel_eumQbRC_StandardOrConditionObject `tfsdk:"or_conditions"`
}

type antiSpywareSignatureListDsModel_eumQbRC_StandardOrConditionObject struct {
	Name     types.String                                            `tfsdk:"name"`
	Operator *antiSpywareSignatureListDsModel_eumQbRC_OperatorObject `tfsdk:"operator"`
}

type antiSpywareSignatureListDsModel_eumQbRC_OperatorObject struct {
	EqualTo      *antiSpywareSignatureListDsModel_eumQbRC_EqualToObject      `tfsdk:"equal_to"`
	GreaterThan  *antiSpywareSignatureListDsModel_eumQbRC_GreaterThanObject  `tfsdk:"greater_than"`
	LessThan     *antiSpywareSignatureListDsModel_eumQbRC_LessThanObject     `tfsdk:"less_than"`
	PatternMatch *antiSpywareSignatureListDsModel_eumQbRC_PatternMatchObject `tfsdk:"pattern_match"`
}

type antiSpywareSignatureListDsModel_eumQbRC_EqualToObject struct {
	Context    types.String                                                     `tfsdk:"context"`
	Negate     types.Bool                                                       `tfsdk:"negate"`
	Qualifiers []antiSpywareSignatureListDsModel_eumQbRC_EqualToQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                      `tfsdk:"value"`
}

type antiSpywareSignatureListDsModel_eumQbRC_EqualToQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureListDsModel_eumQbRC_GreaterThanObject struct {
	Context    types.String                                                         `tfsdk:"context"`
	Qualifiers []antiSpywareSignatureListDsModel_eumQbRC_GreaterThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                          `tfsdk:"value"`
}

type antiSpywareSignatureListDsModel_eumQbRC_GreaterThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureListDsModel_eumQbRC_LessThanObject struct {
	Context    types.String                                                      `tfsdk:"context"`
	Qualifiers []antiSpywareSignatureListDsModel_eumQbRC_LessThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                       `tfsdk:"value"`
}

type antiSpywareSignatureListDsModel_eumQbRC_LessThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureListDsModel_eumQbRC_PatternMatchObject struct {
	Context    types.String                                                          `tfsdk:"context"`
	Negate     types.Bool                                                            `tfsdk:"negate"`
	Pattern    types.String                                                          `tfsdk:"pattern"`
	Qualifiers []antiSpywareSignatureListDsModel_eumQbRC_PatternMatchQualifierObject `tfsdk:"qualifiers"`
}

type antiSpywareSignatureListDsModel_eumQbRC_PatternMatchQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (d *antiSpywareSignatureListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_anti_spyware_signature_list"
}

// Schema defines the schema for this listing data source.
func (d *antiSpywareSignatureListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"bugtraq":true, "comment":true, "cve":true, "default_action":true, "direction":true, "id":true, "reference":true, "severity":true, "signature":true, "threat_id":true, "threatname":true, "vendor":true} forceNew:map[string]bool(nil)
						"bugtraqs": dsschema.ListAttribute{
							Description: "The Bugtraqs param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"comment": dsschema.StringAttribute{
							Description: "The Comment param. String length must not exceed 256 characters.",
							Computed:    true,
						},
						"cves": dsschema.ListAttribute{
							Description: "The Cves param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"default_action": dsschema.SingleNestedAttribute{
							Description: "The DefaultAction param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": dsschema.BoolAttribute{
									Description: "The Alert param. Default: `false`.",
									Computed:    true,
								},
								"allow": dsschema.BoolAttribute{
									Description: "The Allow param. Default: `false`.",
									Computed:    true,
								},
								"block_ip": dsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": dsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Computed:    true,
										},
										"track_by": dsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Computed:    true,
										},
									},
								},
								"drop": dsschema.BoolAttribute{
									Description: "The Drop param. Default: `false`.",
									Computed:    true,
								},
								"reset_both": dsschema.BoolAttribute{
									Description: "The ResetBoth param. Default: `false`.",
									Computed:    true,
								},
								"reset_client": dsschema.BoolAttribute{
									Description: "The ResetClient param. Default: `false`.",
									Computed:    true,
								},
								"reset_server": dsschema.BoolAttribute{
									Description: "The ResetServer param. Default: `false`.",
									Computed:    true,
								},
							},
						},
						"direction": dsschema.StringAttribute{
							Description: "The Direction param. String must be one of these: `\"client2server\"`, `\"server2client\"`, `\"both\"`.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"references": dsschema.ListAttribute{
							Description: "The References param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"severity": dsschema.StringAttribute{
							Description: "The Severity param. String must be one of these: `\"critical\"`, `\"low\"`, `\"high\"`, `\"medium\"`, `\"informational\"`.",
							Computed:    true,
						},
						"signature": dsschema.SingleNestedAttribute{
							Description: "The Signature param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"combination":true, "standard":true} forceNew:map[string]bool(nil)
								"combination": dsschema.SingleNestedAttribute{
									Description: "The Combination param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"and_condition":true, "order_free":true, "time_attribute":true} forceNew:map[string]bool(nil)
										"and_conditions": dsschema.ListNestedAttribute{
											Description: "The AndConditions param.",
											Computed:    true,
											NestedObject: dsschema.NestedAttributeObject{
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
													"name": dsschema.StringAttribute{
														Description: "The Name param.",
														Computed:    true,
													},
													"or_conditions": dsschema.ListNestedAttribute{
														Description: "The OrConditions param.",
														Computed:    true,
														NestedObject: dsschema.NestedAttributeObject{
															Attributes: map[string]dsschema.Attribute{
																// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "threat_id":true} forceNew:map[string]bool(nil)
																"name": dsschema.StringAttribute{
																	Description: "The Name param.",
																	Computed:    true,
																},
																"threat_id": dsschema.StringAttribute{
																	Description: "The ThreatId param.",
																	Computed:    true,
																},
															},
														},
													},
												},
											},
										},
										"order_free": dsschema.BoolAttribute{
											Description: "The OrderFree param. Default: `false`.",
											Computed:    true,
										},
										"time_attribute": dsschema.SingleNestedAttribute{
											Description: "The TimeAttribute param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"interval":true, "threshold":true, "track_by":true} forceNew:map[string]bool(nil)
												"interval": dsschema.Int64Attribute{
													Description: "The Interval param. Value must be between 1 and 3600.",
													Computed:    true,
												},
												"threshold": dsschema.Int64Attribute{
													Description: "The Threshold param. Value must be between 1 and 255.",
													Computed:    true,
												},
												"track_by": dsschema.StringAttribute{
													Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`, `\"destination\"`.",
													Computed:    true,
												},
											},
										},
									},
								},
								"standards": dsschema.ListNestedAttribute{
									Description: "The Standards param.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"and_condition":true, "comment":true, "name":true, "order_free":true, "scope":true} forceNew:map[string]bool(nil)
											"and_conditions": dsschema.ListNestedAttribute{
												Description: "The AndConditions param.",
												Computed:    true,
												NestedObject: dsschema.NestedAttributeObject{
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
														"name": dsschema.StringAttribute{
															Description: "The Name param.",
															Computed:    true,
														},
														"or_conditions": dsschema.ListNestedAttribute{
															Description: "The OrConditions param.",
															Computed:    true,
															NestedObject: dsschema.NestedAttributeObject{
																Attributes: map[string]dsschema.Attribute{
																	// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "operator":true} forceNew:map[string]bool(nil)
																	"name": dsschema.StringAttribute{
																		Description: "The Name param.",
																		Computed:    true,
																	},
																	"operator": dsschema.SingleNestedAttribute{
																		Description: "The Operator param.",
																		Computed:    true,
																		Attributes: map[string]dsschema.Attribute{
																			// inputs:map[string]bool{} outputs:map[string]bool{"equal_to":true, "greater_than":true, "less_than":true, "pattern_match":true} forceNew:map[string]bool(nil)
																			"equal_to": dsschema.SingleNestedAttribute{
																				Description: "The EqualTo param.",
																				Computed:    true,
																				Attributes: map[string]dsschema.Attribute{
																					// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "negate":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																					"context": dsschema.StringAttribute{
																						Description: "The Context param.",
																						Computed:    true,
																					},
																					"negate": dsschema.BoolAttribute{
																						Description: "The Negate param. Default: `false`.",
																						Computed:    true,
																					},
																					"qualifiers": dsschema.ListNestedAttribute{
																						Description: "The Qualifiers param.",
																						Computed:    true,
																						NestedObject: dsschema.NestedAttributeObject{
																							Attributes: map[string]dsschema.Attribute{
																								// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																								"name": dsschema.StringAttribute{
																									Description: "The Name param.",
																									Computed:    true,
																								},
																								"value": dsschema.StringAttribute{
																									Description: "The Value param.",
																									Computed:    true,
																								},
																							},
																						},
																					},
																					"value": dsschema.Int64Attribute{
																						Description: "The Value param. Value must be between 0 and 4294967295.",
																						Computed:    true,
																					},
																				},
																			},
																			"greater_than": dsschema.SingleNestedAttribute{
																				Description: "The GreaterThan param.",
																				Computed:    true,
																				Attributes: map[string]dsschema.Attribute{
																					// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																					"context": dsschema.StringAttribute{
																						Description: "The Context param.",
																						Computed:    true,
																					},
																					"qualifiers": dsschema.ListNestedAttribute{
																						Description: "The Qualifiers param.",
																						Computed:    true,
																						NestedObject: dsschema.NestedAttributeObject{
																							Attributes: map[string]dsschema.Attribute{
																								// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																								"name": dsschema.StringAttribute{
																									Description: "The Name param.",
																									Computed:    true,
																								},
																								"value": dsschema.StringAttribute{
																									Description: "The Value param.",
																									Computed:    true,
																								},
																							},
																						},
																					},
																					"value": dsschema.Int64Attribute{
																						Description: "The Value param. Value must be between 0 and 4294967295.",
																						Computed:    true,
																					},
																				},
																			},
																			"less_than": dsschema.SingleNestedAttribute{
																				Description: "The LessThan param.",
																				Computed:    true,
																				Attributes: map[string]dsschema.Attribute{
																					// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																					"context": dsschema.StringAttribute{
																						Description: "The Context param.",
																						Computed:    true,
																					},
																					"qualifiers": dsschema.ListNestedAttribute{
																						Description: "The Qualifiers param.",
																						Computed:    true,
																						NestedObject: dsschema.NestedAttributeObject{
																							Attributes: map[string]dsschema.Attribute{
																								// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																								"name": dsschema.StringAttribute{
																									Description: "The Name param.",
																									Computed:    true,
																								},
																								"value": dsschema.StringAttribute{
																									Description: "The Value param.",
																									Computed:    true,
																								},
																							},
																						},
																					},
																					"value": dsschema.Int64Attribute{
																						Description: "The Value param. Value must be between 0 and 4294967295.",
																						Computed:    true,
																					},
																				},
																			},
																			"pattern_match": dsschema.SingleNestedAttribute{
																				Description: "The PatternMatch param.",
																				Computed:    true,
																				Attributes: map[string]dsschema.Attribute{
																					// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "negate":true, "pattern":true, "qualifier":true} forceNew:map[string]bool(nil)
																					"context": dsschema.StringAttribute{
																						Description: "The Context param.",
																						Computed:    true,
																					},
																					"negate": dsschema.BoolAttribute{
																						Description: "The Negate param. Default: `false`.",
																						Computed:    true,
																					},
																					"pattern": dsschema.StringAttribute{
																						Description: "The Pattern param.",
																						Computed:    true,
																					},
																					"qualifiers": dsschema.ListNestedAttribute{
																						Description: "The Qualifiers param.",
																						Computed:    true,
																						NestedObject: dsschema.NestedAttributeObject{
																							Attributes: map[string]dsschema.Attribute{
																								// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																								"name": dsschema.StringAttribute{
																									Description: "The Name param.",
																									Computed:    true,
																								},
																								"value": dsschema.StringAttribute{
																									Description: "The Value param.",
																									Computed:    true,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											"comment": dsschema.StringAttribute{
												Description: "The Comment param. String length must not exceed 256 characters.",
												Computed:    true,
											},
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
											"order_free": dsschema.BoolAttribute{
												Description: "The OrderFree param. Default: `false`.",
												Computed:    true,
											},
											"scope": dsschema.StringAttribute{
												Description: "The Scope param. String must be one of these: `\"protocol-data-unit\"`, `\"session\"`.",
												Computed:    true,
											},
										},
									},
								},
							},
						},
						"threat_id": dsschema.Int64Attribute{
							Description: "threat id range <15000-18000> and <6900001-7000000>. Value must be between 15000 and 70000000.",
							Computed:    true,
						},
						"threatname": dsschema.StringAttribute{
							Description: "The Threatname param. String length must not exceed 1024 characters.",
							Computed:    true,
						},
						"vendors": dsschema.ListAttribute{
							Description: "The Vendors param.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *antiSpywareSignatureListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *antiSpywareSignatureListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state antiSpywareSignatureListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_anti_spyware_signature_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := lhPcfTR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]antiSpywareSignatureListDsModel_eumQbRC_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := antiSpywareSignatureListDsModel_eumQbRC_Config{}

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Bugtraqs)
			var1.Bugtraqs = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Comment = types.StringPointerValue(var0.Comment)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Cves)
			var1.Cves = var4
			resp.Diagnostics.Append(var5.Errors()...)

			if var0.DefaultAction == nil {
				var1.DefaultAction = nil
			} else {
				var1.DefaultAction = &antiSpywareSignatureListDsModel_eumQbRC_DefaultActionObject{}

				var1.DefaultAction.Alert = types.BoolValue(var0.DefaultAction.Alert != nil)

				var1.DefaultAction.Allow = types.BoolValue(var0.DefaultAction.Allow != nil)

				if var0.DefaultAction.BlockIp == nil {
					var1.DefaultAction.BlockIp = nil
				} else {
					var1.DefaultAction.BlockIp = &antiSpywareSignatureListDsModel_eumQbRC_BlockIpObject{}

					var1.DefaultAction.BlockIp.Duration = types.Int64PointerValue(var0.DefaultAction.BlockIp.Duration)

					var1.DefaultAction.BlockIp.TrackBy = types.StringPointerValue(var0.DefaultAction.BlockIp.TrackBy)
				}

				var1.DefaultAction.Drop = types.BoolValue(var0.DefaultAction.Drop != nil)

				var1.DefaultAction.ResetBoth = types.BoolValue(var0.DefaultAction.ResetBoth != nil)

				var1.DefaultAction.ResetClient = types.BoolValue(var0.DefaultAction.ResetClient != nil)

				var1.DefaultAction.ResetServer = types.BoolValue(var0.DefaultAction.ResetServer != nil)
			}

			var1.Direction = types.StringPointerValue(var0.Direction)

			var1.Id = types.StringPointerValue(var0.Id)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.References)
			var1.References = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var1.Severity = types.StringPointerValue(var0.Severity)

			if var0.Signature == nil {
				var1.Signature = nil
			} else {
				var1.Signature = &antiSpywareSignatureListDsModel_eumQbRC_SignatureObject{}

				if var0.Signature.Combination == nil {
					var1.Signature.Combination = nil
				} else {
					var1.Signature.Combination = &antiSpywareSignatureListDsModel_eumQbRC_CombinationObject{}

					if len(var0.Signature.Combination.AndConditions) == 0 {
						var1.Signature.Combination.AndConditions = nil
					} else {
						var1.Signature.Combination.AndConditions = make([]antiSpywareSignatureListDsModel_eumQbRC_CombinationAndConditionObject, 0, len(var0.Signature.Combination.AndConditions))
						for _, var8 := range var0.Signature.Combination.AndConditions {
							var9 := antiSpywareSignatureListDsModel_eumQbRC_CombinationAndConditionObject{}

							var9.Name = types.StringPointerValue(var8.Name)

							if len(var8.OrConditions) == 0 {
								var9.OrConditions = nil
							} else {
								var9.OrConditions = make([]antiSpywareSignatureListDsModel_eumQbRC_CombinationOrConditionObject, 0, len(var8.OrConditions))
								for _, var10 := range var8.OrConditions {
									var11 := antiSpywareSignatureListDsModel_eumQbRC_CombinationOrConditionObject{}

									var11.Name = types.StringPointerValue(var10.Name)

									var11.ThreatId = types.StringPointerValue(var10.ThreatId)
									var9.OrConditions = append(var9.OrConditions, var11)
								}
							}
							var1.Signature.Combination.AndConditions = append(var1.Signature.Combination.AndConditions, var9)
						}
					}

					var1.Signature.Combination.OrderFree = types.BoolPointerValue(var0.Signature.Combination.OrderFree)

					if var0.Signature.Combination.TimeAttribute == nil {
						var1.Signature.Combination.TimeAttribute = nil
					} else {
						var1.Signature.Combination.TimeAttribute = &antiSpywareSignatureListDsModel_eumQbRC_TimeAttributeObject{}

						var1.Signature.Combination.TimeAttribute.Interval = types.Int64PointerValue(var0.Signature.Combination.TimeAttribute.Interval)

						var1.Signature.Combination.TimeAttribute.Threshold = types.Int64PointerValue(var0.Signature.Combination.TimeAttribute.Threshold)

						var1.Signature.Combination.TimeAttribute.TrackBy = types.StringPointerValue(var0.Signature.Combination.TimeAttribute.TrackBy)
					}
				}

				if len(var0.Signature.Standards) == 0 {
					var1.Signature.Standards = nil
				} else {
					var1.Signature.Standards = make([]antiSpywareSignatureListDsModel_eumQbRC_StandardObject, 0, len(var0.Signature.Standards))
					for _, var12 := range var0.Signature.Standards {
						var13 := antiSpywareSignatureListDsModel_eumQbRC_StandardObject{}

						if len(var12.AndConditions) == 0 {
							var13.AndConditions = nil
						} else {
							var13.AndConditions = make([]antiSpywareSignatureListDsModel_eumQbRC_StandardAndConditionObject, 0, len(var12.AndConditions))
							for _, var14 := range var12.AndConditions {
								var15 := antiSpywareSignatureListDsModel_eumQbRC_StandardAndConditionObject{}

								var15.Name = types.StringPointerValue(var14.Name)

								if len(var14.OrConditions) == 0 {
									var15.OrConditions = nil
								} else {
									var15.OrConditions = make([]antiSpywareSignatureListDsModel_eumQbRC_StandardOrConditionObject, 0, len(var14.OrConditions))
									for _, var16 := range var14.OrConditions {
										var17 := antiSpywareSignatureListDsModel_eumQbRC_StandardOrConditionObject{}

										var17.Name = types.StringPointerValue(var16.Name)

										if var16.Operator == nil {
											var17.Operator = nil
										} else {
											var17.Operator = &antiSpywareSignatureListDsModel_eumQbRC_OperatorObject{}

											if var16.Operator.EqualTo == nil {
												var17.Operator.EqualTo = nil
											} else {
												var17.Operator.EqualTo = &antiSpywareSignatureListDsModel_eumQbRC_EqualToObject{}

												var17.Operator.EqualTo.Context = types.StringPointerValue(var16.Operator.EqualTo.Context)

												var17.Operator.EqualTo.Negate = types.BoolPointerValue(var16.Operator.EqualTo.Negate)

												if len(var16.Operator.EqualTo.Qualifiers) == 0 {
													var17.Operator.EqualTo.Qualifiers = nil
												} else {
													var17.Operator.EqualTo.Qualifiers = make([]antiSpywareSignatureListDsModel_eumQbRC_EqualToQualifierObject, 0, len(var16.Operator.EqualTo.Qualifiers))
													for _, var18 := range var16.Operator.EqualTo.Qualifiers {
														var19 := antiSpywareSignatureListDsModel_eumQbRC_EqualToQualifierObject{}

														var19.Name = types.StringPointerValue(var18.Name)

														var19.Value = types.StringPointerValue(var18.Value)
														var17.Operator.EqualTo.Qualifiers = append(var17.Operator.EqualTo.Qualifiers, var19)
													}
												}

												var17.Operator.EqualTo.Value = types.Int64PointerValue(var16.Operator.EqualTo.Value)
											}

											if var16.Operator.GreaterThan == nil {
												var17.Operator.GreaterThan = nil
											} else {
												var17.Operator.GreaterThan = &antiSpywareSignatureListDsModel_eumQbRC_GreaterThanObject{}

												var17.Operator.GreaterThan.Context = types.StringPointerValue(var16.Operator.GreaterThan.Context)

												if len(var16.Operator.GreaterThan.Qualifiers) == 0 {
													var17.Operator.GreaterThan.Qualifiers = nil
												} else {
													var17.Operator.GreaterThan.Qualifiers = make([]antiSpywareSignatureListDsModel_eumQbRC_GreaterThanQualifierObject, 0, len(var16.Operator.GreaterThan.Qualifiers))
													for _, var20 := range var16.Operator.GreaterThan.Qualifiers {
														var21 := antiSpywareSignatureListDsModel_eumQbRC_GreaterThanQualifierObject{}

														var21.Name = types.StringPointerValue(var20.Name)

														var21.Value = types.StringPointerValue(var20.Value)
														var17.Operator.GreaterThan.Qualifiers = append(var17.Operator.GreaterThan.Qualifiers, var21)
													}
												}

												var17.Operator.GreaterThan.Value = types.Int64PointerValue(var16.Operator.GreaterThan.Value)
											}

											if var16.Operator.LessThan == nil {
												var17.Operator.LessThan = nil
											} else {
												var17.Operator.LessThan = &antiSpywareSignatureListDsModel_eumQbRC_LessThanObject{}

												var17.Operator.LessThan.Context = types.StringPointerValue(var16.Operator.LessThan.Context)

												if len(var16.Operator.LessThan.Qualifiers) == 0 {
													var17.Operator.LessThan.Qualifiers = nil
												} else {
													var17.Operator.LessThan.Qualifiers = make([]antiSpywareSignatureListDsModel_eumQbRC_LessThanQualifierObject, 0, len(var16.Operator.LessThan.Qualifiers))
													for _, var22 := range var16.Operator.LessThan.Qualifiers {
														var23 := antiSpywareSignatureListDsModel_eumQbRC_LessThanQualifierObject{}

														var23.Name = types.StringPointerValue(var22.Name)

														var23.Value = types.StringPointerValue(var22.Value)
														var17.Operator.LessThan.Qualifiers = append(var17.Operator.LessThan.Qualifiers, var23)
													}
												}

												var17.Operator.LessThan.Value = types.Int64PointerValue(var16.Operator.LessThan.Value)
											}

											if var16.Operator.PatternMatch == nil {
												var17.Operator.PatternMatch = nil
											} else {
												var17.Operator.PatternMatch = &antiSpywareSignatureListDsModel_eumQbRC_PatternMatchObject{}

												var17.Operator.PatternMatch.Context = types.StringPointerValue(var16.Operator.PatternMatch.Context)

												var17.Operator.PatternMatch.Negate = types.BoolPointerValue(var16.Operator.PatternMatch.Negate)

												var17.Operator.PatternMatch.Pattern = types.StringPointerValue(var16.Operator.PatternMatch.Pattern)

												if len(var16.Operator.PatternMatch.Qualifiers) == 0 {
													var17.Operator.PatternMatch.Qualifiers = nil
												} else {
													var17.Operator.PatternMatch.Qualifiers = make([]antiSpywareSignatureListDsModel_eumQbRC_PatternMatchQualifierObject, 0, len(var16.Operator.PatternMatch.Qualifiers))
													for _, var24 := range var16.Operator.PatternMatch.Qualifiers {
														var25 := antiSpywareSignatureListDsModel_eumQbRC_PatternMatchQualifierObject{}

														var25.Name = types.StringPointerValue(var24.Name)

														var25.Value = types.StringPointerValue(var24.Value)
														var17.Operator.PatternMatch.Qualifiers = append(var17.Operator.PatternMatch.Qualifiers, var25)
													}
												}
											}
										}
										var15.OrConditions = append(var15.OrConditions, var17)
									}
								}
								var13.AndConditions = append(var13.AndConditions, var15)
							}
						}

						var13.Comment = types.StringPointerValue(var12.Comment)

						var13.Name = types.StringValue(var12.Name)

						var13.OrderFree = types.BoolPointerValue(var12.OrderFree)

						var13.Scope = types.StringPointerValue(var12.Scope)
						var1.Signature.Standards = append(var1.Signature.Standards, var13)
					}
				}
			}

			var1.ThreatId = types.Int64Value(var0.ThreatId)

			var1.Threatname = types.StringValue(var0.Threatname)

			var26, var27 := types.ListValueFrom(ctx, types.StringType, var0.Vendors)
			var1.Vendors = var26
			resp.Diagnostics.Append(var27.Errors()...)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &antiSpywareSignatureDataSource{}
	_ datasource.DataSourceWithConfigure = &antiSpywareSignatureDataSource{}
)

func NewAntiSpywareSignatureDataSource() datasource.DataSource {
	return &antiSpywareSignatureDataSource{}
}

type antiSpywareSignatureDataSource struct {
	client *scm.Client
}

// antiSpywareSignatureDsModel is the model.
type antiSpywareSignatureDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Bugtraqs      types.List                                               `tfsdk:"bugtraqs"`
	Comment       types.String                                             `tfsdk:"comment"`
	Cves          types.List                                               `tfsdk:"cves"`
	DefaultAction *antiSpywareSignatureDsModel_eumQbRC_DefaultActionObject `tfsdk:"default_action"`
	Direction     types.String                                             `tfsdk:"direction"`
	// omit input: id
	References types.List                                           `tfsdk:"references"`
	Severity   types.String                                         `tfsdk:"severity"`
	Signature  *antiSpywareSignatureDsModel_eumQbRC_SignatureObject `tfsdk:"signature"`
	ThreatId   types.Int64                                          `tfsdk:"threat_id"`
	Threatname types.String                                         `tfsdk:"threatname"`
	Vendors    types.List                                           `tfsdk:"vendors"`
}

type antiSpywareSignatureDsModel_eumQbRC_DefaultActionObject struct {
	Alert       types.Bool                                         `tfsdk:"alert"`
	Allow       types.Bool                                         `tfsdk:"allow"`
	BlockIp     *antiSpywareSignatureDsModel_eumQbRC_BlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                         `tfsdk:"drop"`
	ResetBoth   types.Bool                                         `tfsdk:"reset_both"`
	ResetClient types.Bool                                         `tfsdk:"reset_client"`
	ResetServer types.Bool                                         `tfsdk:"reset_server"`
}

type antiSpywareSignatureDsModel_eumQbRC_BlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareSignatureDsModel_eumQbRC_SignatureObject struct {
	Combination *antiSpywareSignatureDsModel_eumQbRC_CombinationObject `tfsdk:"combination"`
	Standards   []antiSpywareSignatureDsModel_eumQbRC_StandardObject   `tfsdk:"standards"`
}

type antiSpywareSignatureDsModel_eumQbRC_CombinationObject struct {
	AndConditions []antiSpywareSignatureDsModel_eumQbRC_CombinationAndConditionObject `tfsdk:"and_conditions"`
	OrderFree     types.Bool                                                          `tfsdk:"order_free"`
	TimeAttribute *antiSpywareSignatureDsModel_eumQbRC_TimeAttributeObject            `tfsdk:"time_attribute"`
}

type antiSpywareSignatureDsModel_eumQbRC_CombinationAndConditionObject struct {
	Name         types.String                                                       `tfsdk:"name"`
	OrConditions []antiSpywareSignatureDsModel_eumQbRC_CombinationOrConditionObject `tfsdk:"or_conditions"`
}

type antiSpywareSignatureDsModel_eumQbRC_CombinationOrConditionObject struct {
	Name     types.String `tfsdk:"name"`
	ThreatId types.String `tfsdk:"threat_id"`
}

type antiSpywareSignatureDsModel_eumQbRC_TimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

type antiSpywareSignatureDsModel_eumQbRC_StandardObject struct {
	AndConditions []antiSpywareSignatureDsModel_eumQbRC_StandardAndConditionObject `tfsdk:"and_conditions"`
	Comment       types.String                                                     `tfsdk:"comment"`
	Name          types.String                                                     `tfsdk:"name"`
	OrderFree     types.Bool                                                       `tfsdk:"order_free"`
	Scope         types.String                                                     `tfsdk:"scope"`
}

type antiSpywareSignatureDsModel_eumQbRC_StandardAndConditionObject struct {
	Name         types.String                                                    `tfsdk:"name"`
	OrConditions []antiSpywareSignatureDsModel_eumQbRC_StandardOrConditionObject `tfsdk:"or_conditions"`
}

type antiSpywareSignatureDsModel_eumQbRC_StandardOrConditionObject struct {
	Name     types.String                                        `tfsdk:"name"`
	Operator *antiSpywareSignatureDsModel_eumQbRC_OperatorObject `tfsdk:"operator"`
}

type antiSpywareSignatureDsModel_eumQbRC_OperatorObject struct {
	EqualTo      *antiSpywareSignatureDsModel_eumQbRC_EqualToObject      `tfsdk:"equal_to"`
	GreaterThan  *antiSpywareSignatureDsModel_eumQbRC_GreaterThanObject  `tfsdk:"greater_than"`
	LessThan     *antiSpywareSignatureDsModel_eumQbRC_LessThanObject     `tfsdk:"less_than"`
	PatternMatch *antiSpywareSignatureDsModel_eumQbRC_PatternMatchObject `tfsdk:"pattern_match"`
}

type antiSpywareSignatureDsModel_eumQbRC_EqualToObject struct {
	Context    types.String                                                 `tfsdk:"context"`
	Negate     types.Bool                                                   `tfsdk:"negate"`
	Qualifiers []antiSpywareSignatureDsModel_eumQbRC_EqualToQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                  `tfsdk:"value"`
}

type antiSpywareSignatureDsModel_eumQbRC_EqualToQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureDsModel_eumQbRC_GreaterThanObject struct {
	Context    types.String                                                     `tfsdk:"context"`
	Qualifiers []antiSpywareSignatureDsModel_eumQbRC_GreaterThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                      `tfsdk:"value"`
}

type antiSpywareSignatureDsModel_eumQbRC_GreaterThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureDsModel_eumQbRC_LessThanObject struct {
	Context    types.String                                                  `tfsdk:"context"`
	Qualifiers []antiSpywareSignatureDsModel_eumQbRC_LessThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                   `tfsdk:"value"`
}

type antiSpywareSignatureDsModel_eumQbRC_LessThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureDsModel_eumQbRC_PatternMatchObject struct {
	Context    types.String                                                      `tfsdk:"context"`
	Negate     types.Bool                                                        `tfsdk:"negate"`
	Pattern    types.String                                                      `tfsdk:"pattern"`
	Qualifiers []antiSpywareSignatureDsModel_eumQbRC_PatternMatchQualifierObject `tfsdk:"qualifiers"`
}

type antiSpywareSignatureDsModel_eumQbRC_PatternMatchQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (d *antiSpywareSignatureDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_anti_spyware_signature"
}

// Schema defines the schema for this data source.
func (d *antiSpywareSignatureDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"bugtraq":true, "comment":true, "cve":true, "default_action":true, "direction":true, "id":true, "reference":true, "severity":true, "signature":true, "tfid":true, "threat_id":true, "threatname":true, "vendor":true} forceNew:map[string]bool{"id":true}
			"bugtraqs": dsschema.ListAttribute{
				Description: "The Bugtraqs param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"comment": dsschema.StringAttribute{
				Description: "The Comment param. String length must not exceed 256 characters.",
				Computed:    true,
			},
			"cves": dsschema.ListAttribute{
				Description: "The Cves param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"default_action": dsschema.SingleNestedAttribute{
				Description: "The DefaultAction param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
					"alert": dsschema.BoolAttribute{
						Description: "The Alert param. Default: `false`.",
						Computed:    true,
					},
					"allow": dsschema.BoolAttribute{
						Description: "The Allow param. Default: `false`.",
						Computed:    true,
					},
					"block_ip": dsschema.SingleNestedAttribute{
						Description: "The BlockIp param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
							"duration": dsschema.Int64Attribute{
								Description: "The Duration param. Value must be between 1 and 3600.",
								Computed:    true,
							},
							"track_by": dsschema.StringAttribute{
								Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
								Computed:    true,
							},
						},
					},
					"drop": dsschema.BoolAttribute{
						Description: "The Drop param. Default: `false`.",
						Computed:    true,
					},
					"reset_both": dsschema.BoolAttribute{
						Description: "The ResetBoth param. Default: `false`.",
						Computed:    true,
					},
					"reset_client": dsschema.BoolAttribute{
						Description: "The ResetClient param. Default: `false`.",
						Computed:    true,
					},
					"reset_server": dsschema.BoolAttribute{
						Description: "The ResetServer param. Default: `false`.",
						Computed:    true,
					},
				},
			},
			"direction": dsschema.StringAttribute{
				Description: "The Direction param. String must be one of these: `\"client2server\"`, `\"server2client\"`, `\"both\"`.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"references": dsschema.ListAttribute{
				Description: "The References param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"severity": dsschema.StringAttribute{
				Description: "The Severity param. String must be one of these: `\"critical\"`, `\"low\"`, `\"high\"`, `\"medium\"`, `\"informational\"`.",
				Computed:    true,
			},
			"signature": dsschema.SingleNestedAttribute{
				Description: "The Signature param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"combination":true, "standard":true} forceNew:map[string]bool(nil)
					"combination": dsschema.SingleNestedAttribute{
						Description: "The Combination param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"and_condition":true, "order_free":true, "time_attribute":true} forceNew:map[string]bool(nil)
							"and_conditions": dsschema.ListNestedAttribute{
								Description: "The AndConditions param.",
								Computed:    true,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
										"name": dsschema.StringAttribute{
											Description: "The Name param.",
											Computed:    true,
										},
										"or_conditions": dsschema.ListNestedAttribute{
											Description: "The OrConditions param.",
											Computed:    true,
											NestedObject: dsschema.NestedAttributeObject{
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "threat_id":true} forceNew:map[string]bool(nil)
													"name": dsschema.StringAttribute{
														Description: "The Name param.",
														Computed:    true,
													},
													"threat_id": dsschema.StringAttribute{
														Description: "The ThreatId param.",
														Computed:    true,
													},
												},
											},
										},
									},
								},
							},
							"order_free": dsschema.BoolAttribute{
								Description: "The OrderFree param. Default: `false`.",
								Computed:    true,
							},
							"time_attribute": dsschema.SingleNestedAttribute{
								Description: "The TimeAttribute param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"interval":true, "threshold":true, "track_by":true} forceNew:map[string]bool(nil)
									"interval": dsschema.Int64Attribute{
										Description: "The Interval param. Value must be between 1 and 3600.",
										Computed:    true,
									},
									"threshold": dsschema.Int64Attribute{
										Description: "The Threshold param. Value must be between 1 and 255.",
										Computed:    true,
									},
									"track_by": dsschema.StringAttribute{
										Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`, `\"destination\"`.",
										Computed:    true,
									},
								},
							},
						},
					},
					"standards": dsschema.ListNestedAttribute{
						Description: "The Standards param.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"and_condition":true, "comment":true, "name":true, "order_free":true, "scope":true} forceNew:map[string]bool(nil)
								"and_conditions": dsschema.ListNestedAttribute{
									Description: "The AndConditions param.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
											"or_conditions": dsschema.ListNestedAttribute{
												Description: "The OrConditions param.",
												Computed:    true,
												NestedObject: dsschema.NestedAttributeObject{
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "operator":true} forceNew:map[string]bool(nil)
														"name": dsschema.StringAttribute{
															Description: "The Name param.",
															Computed:    true,
														},
														"operator": dsschema.SingleNestedAttribute{
															Description: "The Operator param.",
															Computed:    true,
															Attributes: map[string]dsschema.Attribute{
																// inputs:map[string]bool{} outputs:map[string]bool{"equal_to":true, "greater_than":true, "less_than":true, "pattern_match":true} forceNew:map[string]bool(nil)
																"equal_to": dsschema.SingleNestedAttribute{
																	Description: "The EqualTo param.",
																	Computed:    true,
																	Attributes: map[string]dsschema.Attribute{
																		// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "negate":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																		"context": dsschema.StringAttribute{
																			Description: "The Context param.",
																			Computed:    true,
																		},
																		"negate": dsschema.BoolAttribute{
																			Description: "The Negate param. Default: `false`.",
																			Computed:    true,
																		},
																		"qualifiers": dsschema.ListNestedAttribute{
																			Description: "The Qualifiers param.",
																			Computed:    true,
																			NestedObject: dsschema.NestedAttributeObject{
																				Attributes: map[string]dsschema.Attribute{
																					// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																					"name": dsschema.StringAttribute{
																						Description: "The Name param.",
																						Computed:    true,
																					},
																					"value": dsschema.StringAttribute{
																						Description: "The Value param.",
																						Computed:    true,
																					},
																				},
																			},
																		},
																		"value": dsschema.Int64Attribute{
																			Description: "The Value param. Value must be between 0 and 4294967295.",
																			Computed:    true,
																		},
																	},
																},
																"greater_than": dsschema.SingleNestedAttribute{
																	Description: "The GreaterThan param.",
																	Computed:    true,
																	Attributes: map[string]dsschema.Attribute{
																		// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																		"context": dsschema.StringAttribute{
																			Description: "The Context param.",
																			Computed:    true,
																		},
																		"qualifiers": dsschema.ListNestedAttribute{
																			Description: "The Qualifiers param.",
																			Computed:    true,
																			NestedObject: dsschema.NestedAttributeObject{
																				Attributes: map[string]dsschema.Attribute{
																					// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																					"name": dsschema.StringAttribute{
																						Description: "The Name param.",
																						Computed:    true,
																					},
																					"value": dsschema.StringAttribute{
																						Description: "The Value param.",
																						Computed:    true,
																					},
																				},
																			},
																		},
																		"value": dsschema.Int64Attribute{
																			Description: "The Value param. Value must be between 0 and 4294967295.",
																			Computed:    true,
																		},
																	},
																},
																"less_than": dsschema.SingleNestedAttribute{
																	Description: "The LessThan param.",
																	Computed:    true,
																	Attributes: map[string]dsschema.Attribute{
																		// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																		"context": dsschema.StringAttribute{
																			Description: "The Context param.",
																			Computed:    true,
																		},
																		"qualifiers": dsschema.ListNestedAttribute{
																			Description: "The Qualifiers param.",
																			Computed:    true,
																			NestedObject: dsschema.NestedAttributeObject{
																				Attributes: map[string]dsschema.Attribute{
																					// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																					"name": dsschema.StringAttribute{
																						Description: "The Name param.",
																						Computed:    true,
																					},
																					"value": dsschema.StringAttribute{
																						Description: "The Value param.",
																						Computed:    true,
																					},
																				},
																			},
																		},
																		"value": dsschema.Int64Attribute{
																			Description: "The Value param. Value must be between 0 and 4294967295.",
																			Computed:    true,
																		},
																	},
																},
																"pattern_match": dsschema.SingleNestedAttribute{
																	Description: "The PatternMatch param.",
																	Computed:    true,
																	Attributes: map[string]dsschema.Attribute{
																		// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "negate":true, "pattern":true, "qualifier":true} forceNew:map[string]bool(nil)
																		"context": dsschema.StringAttribute{
																			Description: "The Context param.",
																			Computed:    true,
																		},
																		"negate": dsschema.BoolAttribute{
																			Description: "The Negate param. Default: `false`.",
																			Computed:    true,
																		},
																		"pattern": dsschema.StringAttribute{
																			Description: "The Pattern param.",
																			Computed:    true,
																		},
																		"qualifiers": dsschema.ListNestedAttribute{
																			Description: "The Qualifiers param.",
																			Computed:    true,
																			NestedObject: dsschema.NestedAttributeObject{
																				Attributes: map[string]dsschema.Attribute{
																					// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																					"name": dsschema.StringAttribute{
																						Description: "The Name param.",
																						Computed:    true,
																					},
																					"value": dsschema.StringAttribute{
																						Description: "The Value param.",
																						Computed:    true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"comment": dsschema.StringAttribute{
									Description: "The Comment param. String length must not exceed 256 characters.",
									Computed:    true,
								},
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
								"order_free": dsschema.BoolAttribute{
									Description: "The OrderFree param. Default: `false`.",
									Computed:    true,
								},
								"scope": dsschema.StringAttribute{
									Description: "The Scope param. String must be one of these: `\"protocol-data-unit\"`, `\"session\"`.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"threat_id": dsschema.Int64Attribute{
				Description: "threat id range <15000-18000> and <6900001-7000000>. Value must be between 15000 and 70000000.",
				Computed:    true,
			},
			"threatname": dsschema.StringAttribute{
				Description: "The Threatname param. String length must not exceed 1024 characters.",
				Computed:    true,
			},
			"vendors": dsschema.ListAttribute{
				Description: "The Vendors param.",
				Computed:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (d *antiSpywareSignatureDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *antiSpywareSignatureDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state antiSpywareSignatureDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_anti_spyware_signature",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := lhPcfTR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Bugtraqs)
	state.Bugtraqs = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Comment = types.StringPointerValue(ans.Comment)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Cves)
	state.Cves = var2
	resp.Diagnostics.Append(var3.Errors()...)

	if ans.DefaultAction == nil {
		state.DefaultAction = nil
	} else {
		state.DefaultAction = &antiSpywareSignatureDsModel_eumQbRC_DefaultActionObject{}

		state.DefaultAction.Alert = types.BoolValue(ans.DefaultAction.Alert != nil)

		state.DefaultAction.Allow = types.BoolValue(ans.DefaultAction.Allow != nil)

		if ans.DefaultAction.BlockIp == nil {
			state.DefaultAction.BlockIp = nil
		} else {
			state.DefaultAction.BlockIp = &antiSpywareSignatureDsModel_eumQbRC_BlockIpObject{}

			state.DefaultAction.BlockIp.Duration = types.Int64PointerValue(ans.DefaultAction.BlockIp.Duration)

			state.DefaultAction.BlockIp.TrackBy = types.StringPointerValue(ans.DefaultAction.BlockIp.TrackBy)
		}

		state.DefaultAction.Drop = types.BoolValue(ans.DefaultAction.Drop != nil)

		state.DefaultAction.ResetBoth = types.BoolValue(ans.DefaultAction.ResetBoth != nil)

		state.DefaultAction.ResetClient = types.BoolValue(ans.DefaultAction.ResetClient != nil)

		state.DefaultAction.ResetServer = types.BoolValue(ans.DefaultAction.ResetServer != nil)
	}

	state.Direction = types.StringPointerValue(ans.Direction)

	state.Id = types.StringPointerValue(ans.Id)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.References)
	state.References = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Severity = types.StringPointerValue(ans.Severity)

	if ans.Signature == nil {
		state.Signature = nil
	} else {
		state.Signature = &antiSpywareSignatureDsModel_eumQbRC_SignatureObject{}

		if ans.Signature.Combination == nil {
			state.Signature.Combination = nil
		} else {
			state.Signature.Combination = &antiSpywareSignatureDsModel_eumQbRC_CombinationObject{}

			if len(ans.Signature.Combination.AndConditions) == 0 {
				state.Signature.Combination.AndConditions = nil
			} else {
				state.Signature.Combination.AndConditions = make([]antiSpywareSignatureDsModel_eumQbRC_CombinationAndConditionObject, 0, len(ans.Signature.Combination.AndConditions))
				for _, var6 := range ans.Signature.Combination.AndConditions {
					var7 := antiSpywareSignatureDsModel_eumQbRC_CombinationAndConditionObject{}

					var7.Name = types.StringPointerValue(var6.Name)

					if len(var6.OrConditions) == 0 {
						var7.OrConditions = nil
					} else {
						var7.OrConditions = make([]antiSpywareSignatureDsModel_eumQbRC_CombinationOrConditionObject, 0, len(var6.OrConditions))
						for _, var8 := range var6.OrConditions {
							var9 := antiSpywareSignatureDsModel_eumQbRC_CombinationOrConditionObject{}

							var9.Name = types.StringPointerValue(var8.Name)

							var9.ThreatId = types.StringPointerValue(var8.ThreatId)
							var7.OrConditions = append(var7.OrConditions, var9)
						}
					}
					state.Signature.Combination.AndConditions = append(state.Signature.Combination.AndConditions, var7)
				}
			}

			state.Signature.Combination.OrderFree = types.BoolPointerValue(ans.Signature.Combination.OrderFree)

			if ans.Signature.Combination.TimeAttribute == nil {
				state.Signature.Combination.TimeAttribute = nil
			} else {
				state.Signature.Combination.TimeAttribute = &antiSpywareSignatureDsModel_eumQbRC_TimeAttributeObject{}

				state.Signature.Combination.TimeAttribute.Interval = types.Int64PointerValue(ans.Signature.Combination.TimeAttribute.Interval)

				state.Signature.Combination.TimeAttribute.Threshold = types.Int64PointerValue(ans.Signature.Combination.TimeAttribute.Threshold)

				state.Signature.Combination.TimeAttribute.TrackBy = types.StringPointerValue(ans.Signature.Combination.TimeAttribute.TrackBy)
			}
		}

		if len(ans.Signature.Standards) == 0 {
			state.Signature.Standards = nil
		} else {
			state.Signature.Standards = make([]antiSpywareSignatureDsModel_eumQbRC_StandardObject, 0, len(ans.Signature.Standards))
			for _, var10 := range ans.Signature.Standards {
				var11 := antiSpywareSignatureDsModel_eumQbRC_StandardObject{}

				if len(var10.AndConditions) == 0 {
					var11.AndConditions = nil
				} else {
					var11.AndConditions = make([]antiSpywareSignatureDsModel_eumQbRC_StandardAndConditionObject, 0, len(var10.AndConditions))
					for _, var12 := range var10.AndConditions {
						var13 := antiSpywareSignatureDsModel_eumQbRC_StandardAndConditionObject{}

						var13.Name = types.StringPointerValue(var12.Name)

						if len(var12.OrConditions) == 0 {
							var13.OrConditions = nil
						} else {
							var13.OrConditions = make([]antiSpywareSignatureDsModel_eumQbRC_StandardOrConditionObject, 0, len(var12.OrConditions))
							for _, var14 := range var12.OrConditions {
								var15 := antiSpywareSignatureDsModel_eumQbRC_StandardOrConditionObject{}

								var15.Name = types.StringPointerValue(var14.Name)

								if var14.Operator == nil {
									var15.Operator = nil
								} else {
									var15.Operator = &antiSpywareSignatureDsModel_eumQbRC_OperatorObject{}

									if var14.Operator.EqualTo == nil {
										var15.Operator.EqualTo = nil
									} else {
										var15.Operator.EqualTo = &antiSpywareSignatureDsModel_eumQbRC_EqualToObject{}

										var15.Operator.EqualTo.Context = types.StringPointerValue(var14.Operator.EqualTo.Context)

										var15.Operator.EqualTo.Negate = types.BoolPointerValue(var14.Operator.EqualTo.Negate)

										if len(var14.Operator.EqualTo.Qualifiers) == 0 {
											var15.Operator.EqualTo.Qualifiers = nil
										} else {
											var15.Operator.EqualTo.Qualifiers = make([]antiSpywareSignatureDsModel_eumQbRC_EqualToQualifierObject, 0, len(var14.Operator.EqualTo.Qualifiers))
											for _, var16 := range var14.Operator.EqualTo.Qualifiers {
												var17 := antiSpywareSignatureDsModel_eumQbRC_EqualToQualifierObject{}

												var17.Name = types.StringPointerValue(var16.Name)

												var17.Value = types.StringPointerValue(var16.Value)
												var15.Operator.EqualTo.Qualifiers = append(var15.Operator.EqualTo.Qualifiers, var17)
											}
										}

										var15.Operator.EqualTo.Value = types.Int64PointerValue(var14.Operator.EqualTo.Value)
									}

									if var14.Operator.GreaterThan == nil {
										var15.Operator.GreaterThan = nil
									} else {
										var15.Operator.GreaterThan = &antiSpywareSignatureDsModel_eumQbRC_GreaterThanObject{}

										var15.Operator.GreaterThan.Context = types.StringPointerValue(var14.Operator.GreaterThan.Context)

										if len(var14.Operator.GreaterThan.Qualifiers) == 0 {
											var15.Operator.GreaterThan.Qualifiers = nil
										} else {
											var15.Operator.GreaterThan.Qualifiers = make([]antiSpywareSignatureDsModel_eumQbRC_GreaterThanQualifierObject, 0, len(var14.Operator.GreaterThan.Qualifiers))
											for _, var18 := range var14.Operator.GreaterThan.Qualifiers {
												var19 := antiSpywareSignatureDsModel_eumQbRC_GreaterThanQualifierObject{}

												var19.Name = types.StringPointerValue(var18.Name)

												var19.Value = types.StringPointerValue(var18.Value)
												var15.Operator.GreaterThan.Qualifiers = append(var15.Operator.GreaterThan.Qualifiers, var19)
											}
										}

										var15.Operator.GreaterThan.Value = types.Int64PointerValue(var14.Operator.GreaterThan.Value)
									}

									if var14.Operator.LessThan == nil {
										var15.Operator.LessThan = nil
									} else {
										var15.Operator.LessThan = &antiSpywareSignatureDsModel_eumQbRC_LessThanObject{}

										var15.Operator.LessThan.Context = types.StringPointerValue(var14.Operator.LessThan.Context)

										if len(var14.Operator.LessThan.Qualifiers) == 0 {
											var15.Operator.LessThan.Qualifiers = nil
										} else {
											var15.Operator.LessThan.Qualifiers = make([]antiSpywareSignatureDsModel_eumQbRC_LessThanQualifierObject, 0, len(var14.Operator.LessThan.Qualifiers))
											for _, var20 := range var14.Operator.LessThan.Qualifiers {
												var21 := antiSpywareSignatureDsModel_eumQbRC_LessThanQualifierObject{}

												var21.Name = types.StringPointerValue(var20.Name)

												var21.Value = types.StringPointerValue(var20.Value)
												var15.Operator.LessThan.Qualifiers = append(var15.Operator.LessThan.Qualifiers, var21)
											}
										}

										var15.Operator.LessThan.Value = types.Int64PointerValue(var14.Operator.LessThan.Value)
									}

									if var14.Operator.PatternMatch == nil {
										var15.Operator.PatternMatch = nil
									} else {
										var15.Operator.PatternMatch = &antiSpywareSignatureDsModel_eumQbRC_PatternMatchObject{}

										var15.Operator.PatternMatch.Context = types.StringPointerValue(var14.Operator.PatternMatch.Context)

										var15.Operator.PatternMatch.Negate = types.BoolPointerValue(var14.Operator.PatternMatch.Negate)

										var15.Operator.PatternMatch.Pattern = types.StringPointerValue(var14.Operator.PatternMatch.Pattern)

										if len(var14.Operator.PatternMatch.Qualifiers) == 0 {
											var15.Operator.PatternMatch.Qualifiers = nil
										} else {
											var15.Operator.PatternMatch.Qualifiers = make([]antiSpywareSignatureDsModel_eumQbRC_PatternMatchQualifierObject, 0, len(var14.Operator.PatternMatch.Qualifiers))
											for _, var22 := range var14.Operator.PatternMatch.Qualifiers {
												var23 := antiSpywareSignatureDsModel_eumQbRC_PatternMatchQualifierObject{}

												var23.Name = types.StringPointerValue(var22.Name)

												var23.Value = types.StringPointerValue(var22.Value)
												var15.Operator.PatternMatch.Qualifiers = append(var15.Operator.PatternMatch.Qualifiers, var23)
											}
										}
									}
								}
								var13.OrConditions = append(var13.OrConditions, var15)
							}
						}
						var11.AndConditions = append(var11.AndConditions, var13)
					}
				}

				var11.Comment = types.StringPointerValue(var10.Comment)

				var11.Name = types.StringValue(var10.Name)

				var11.OrderFree = types.BoolPointerValue(var10.OrderFree)

				var11.Scope = types.StringPointerValue(var10.Scope)
				state.Signature.Standards = append(state.Signature.Standards, var11)
			}
		}
	}

	state.ThreatId = types.Int64Value(ans.ThreatId)

	state.Threatname = types.StringValue(ans.Threatname)

	var24, var25 := types.ListValueFrom(ctx, types.StringType, ans.Vendors)
	state.Vendors = var24
	resp.Diagnostics.Append(var25.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &antiSpywareSignatureResource{}
	_ resource.ResourceWithConfigure   = &antiSpywareSignatureResource{}
	_ resource.ResourceWithImportState = &antiSpywareSignatureResource{}
)

func NewAntiSpywareSignatureResource() resource.Resource {
	return &antiSpywareSignatureResource{}
}

type antiSpywareSignatureResource struct {
	client *scm.Client
}

// antiSpywareSignatureRsModel is the model.
type antiSpywareSignatureRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Bugtraqs      types.List                                               `tfsdk:"bugtraqs"`
	Comment       types.String                                             `tfsdk:"comment"`
	Cves          types.List                                               `tfsdk:"cves"`
	DefaultAction *antiSpywareSignatureRsModel_eumQbRC_DefaultActionObject `tfsdk:"default_action"`
	Device        types.String                                             `tfsdk:"device"`
	Direction     types.String                                             `tfsdk:"direction"`
	Folder        types.String                                             `tfsdk:"folder"`
	Id            types.String                                             `tfsdk:"id"`
	References    types.List                                               `tfsdk:"references"`
	Severity      types.String                                             `tfsdk:"severity"`
	Signature     *antiSpywareSignatureRsModel_eumQbRC_SignatureObject     `tfsdk:"signature"`
	Snippet       types.String                                             `tfsdk:"snippet"`
	ThreatId      types.Int64                                              `tfsdk:"threat_id"`
	Threatname    types.String                                             `tfsdk:"threatname"`
	Vendors       types.List                                               `tfsdk:"vendors"`

	// Output.
	// omit input: bugtraqs
	// omit input: comment
	// omit input: cves
	// omit input: default_action
	// omit input: direction
	// omit input: id
	// omit input: references
	// omit input: severity
	// omit input: signature
	// omit input: threat_id
	// omit input: threatname
	// omit input: vendors
}

type antiSpywareSignatureRsModel_eumQbRC_DefaultActionObject struct {
	Alert       types.Bool                                         `tfsdk:"alert"`
	Allow       types.Bool                                         `tfsdk:"allow"`
	BlockIp     *antiSpywareSignatureRsModel_eumQbRC_BlockIpObject `tfsdk:"block_ip"`
	Drop        types.Bool                                         `tfsdk:"drop"`
	ResetBoth   types.Bool                                         `tfsdk:"reset_both"`
	ResetClient types.Bool                                         `tfsdk:"reset_client"`
	ResetServer types.Bool                                         `tfsdk:"reset_server"`
}

type antiSpywareSignatureRsModel_eumQbRC_BlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type antiSpywareSignatureRsModel_eumQbRC_SignatureObject struct {
	Combination *antiSpywareSignatureRsModel_eumQbRC_CombinationObject `tfsdk:"combination"`
	Standards   []antiSpywareSignatureRsModel_eumQbRC_StandardObject   `tfsdk:"standards"`
}

type antiSpywareSignatureRsModel_eumQbRC_CombinationObject struct {
	AndConditions []antiSpywareSignatureRsModel_eumQbRC_CombinationAndConditionObject `tfsdk:"and_conditions"`
	OrderFree     types.Bool                                                          `tfsdk:"order_free"`
	TimeAttribute *antiSpywareSignatureRsModel_eumQbRC_TimeAttributeObject            `tfsdk:"time_attribute"`
}

type antiSpywareSignatureRsModel_eumQbRC_CombinationAndConditionObject struct {
	Name         types.String                                                       `tfsdk:"name"`
	OrConditions []antiSpywareSignatureRsModel_eumQbRC_CombinationOrConditionObject `tfsdk:"or_conditions"`
}

type antiSpywareSignatureRsModel_eumQbRC_CombinationOrConditionObject struct {
	Name     types.String `tfsdk:"name"`
	ThreatId types.String `tfsdk:"threat_id"`
}

type antiSpywareSignatureRsModel_eumQbRC_TimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

type antiSpywareSignatureRsModel_eumQbRC_StandardObject struct {
	AndConditions []antiSpywareSignatureRsModel_eumQbRC_StandardAndConditionObject `tfsdk:"and_conditions"`
	Comment       types.String                                                     `tfsdk:"comment"`
	Name          types.String                                                     `tfsdk:"name"`
	OrderFree     types.Bool                                                       `tfsdk:"order_free"`
	Scope         types.String                                                     `tfsdk:"scope"`
}

type antiSpywareSignatureRsModel_eumQbRC_StandardAndConditionObject struct {
	Name         types.String                                                    `tfsdk:"name"`
	OrConditions []antiSpywareSignatureRsModel_eumQbRC_StandardOrConditionObject `tfsdk:"or_conditions"`
}

type antiSpywareSignatureRsModel_eumQbRC_StandardOrConditionObject struct {
	Name     types.String                                        `tfsdk:"name"`
	Operator *antiSpywareSignatureRsModel_eumQbRC_OperatorObject `tfsdk:"operator"`
}

type antiSpywareSignatureRsModel_eumQbRC_OperatorObject struct {
	EqualTo      *antiSpywareSignatureRsModel_eumQbRC_EqualToObject      `tfsdk:"equal_to"`
	GreaterThan  *antiSpywareSignatureRsModel_eumQbRC_GreaterThanObject  `tfsdk:"greater_than"`
	LessThan     *antiSpywareSignatureRsModel_eumQbRC_LessThanObject     `tfsdk:"less_than"`
	PatternMatch *antiSpywareSignatureRsModel_eumQbRC_PatternMatchObject `tfsdk:"pattern_match"`
}

type antiSpywareSignatureRsModel_eumQbRC_EqualToObject struct {
	Context    types.String                                                 `tfsdk:"context"`
	Negate     types.Bool                                                   `tfsdk:"negate"`
	Qualifiers []antiSpywareSignatureRsModel_eumQbRC_EqualToQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                  `tfsdk:"value"`
}

type antiSpywareSignatureRsModel_eumQbRC_EqualToQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureRsModel_eumQbRC_GreaterThanObject struct {
	Context    types.String                                                     `tfsdk:"context"`
	Qualifiers []antiSpywareSignatureRsModel_eumQbRC_GreaterThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                      `tfsdk:"value"`
}

type antiSpywareSignatureRsModel_eumQbRC_GreaterThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureRsModel_eumQbRC_LessThanObject struct {
	Context    types.String                                                  `tfsdk:"context"`
	Qualifiers []antiSpywareSignatureRsModel_eumQbRC_LessThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                   `tfsdk:"value"`
}

type antiSpywareSignatureRsModel_eumQbRC_LessThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type antiSpywareSignatureRsModel_eumQbRC_PatternMatchObject struct {
	Context    types.String                                                      `tfsdk:"context"`
	Negate     types.Bool                                                        `tfsdk:"negate"`
	Pattern    types.String                                                      `tfsdk:"pattern"`
	Qualifiers []antiSpywareSignatureRsModel_eumQbRC_PatternMatchQualifierObject `tfsdk:"qualifiers"`
}

type antiSpywareSignatureRsModel_eumQbRC_PatternMatchQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (r *antiSpywareSignatureResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_anti_spyware_signature"
}

// Schema defines the schema for this data source.
func (r *antiSpywareSignatureResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"bugtraq":true, "comment":true, "cve":true, "default_action":true, "device":true, "direction":true, "folder":true, "id":true, "reference":true, "severity":true, "signature":true, "snippet":true, "threat_id":true, "threatname":true, "vendor":true} outputs:map[string]bool{"bugtraq":true, "comment":true, "cve":true, "default_action":true, "direction":true, "id":true, "reference":true, "severity":true, "signature":true, "tfid":true, "threat_id":true, "threatname":true, "vendor":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"bugtraqs": rsschema.ListAttribute{
				Description: "The Bugtraqs param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"comment": rsschema.StringAttribute{
				Description: "The Comment param. String length must not exceed 256 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(256),
				},
			},
			"cves": rsschema.ListAttribute{
				Description: "The Cves param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"default_action": rsschema.SingleNestedAttribute{
				Description: "The DefaultAction param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
					"alert": rsschema.BoolAttribute{
						Description: "The Alert param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"allow": rsschema.BoolAttribute{
						Description: "The Allow param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_ip": rsschema.SingleNestedAttribute{
						Description: "The BlockIp param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"duration":true, "track_by":true} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
							"duration": rsschema.Int64Attribute{
								Description: "The Duration param. Value must be between 1 and 3600.",
								Optional:    true,
								Validators: []validator.Int64{
									int64validator.Between(1, 3600),
								},
							},
							"track_by": rsschema.StringAttribute{
								Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.OneOf("source-and-destination", "source"),
								},
							},
						},
					},
					"drop": rsschema.BoolAttribute{
						Description: "The Drop param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"reset_both": rsschema.BoolAttribute{
						Description: "The ResetBoth param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"reset_client": rsschema.BoolAttribute{
						Description: "The ResetClient param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"reset_server": rsschema.BoolAttribute{
						Description: "The ResetServer param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"direction": rsschema.StringAttribute{
				Description: "The Direction param. String must be one of these: `\"client2server\"`, `\"server2client\"`, `\"both\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("client2server", "server2client", "both"),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"references": rsschema.ListAttribute{
				Description: "The References param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"severity": rsschema.StringAttribute{
				Description: "The Severity param. String must be one of these: `\"critical\"`, `\"low\"`, `\"high\"`, `\"medium\"`, `\"informational\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("critical", "low", "high", "medium", "informational"),
				},
			},
			"signature": rsschema.SingleNestedAttribute{
				Description: "The Signature param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"combination":true, "standard":true} outputs:map[string]bool{"combination":true, "standard":true} forceNew:map[string]bool(nil)
					"combination": rsschema.SingleNestedAttribute{
						Description: "The Combination param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"and_condition":true, "order_free":true, "time_attribute":true} outputs:map[string]bool{"and_condition":true, "order_free":true, "time_attribute":true} forceNew:map[string]bool(nil)
							"and_conditions": rsschema.ListNestedAttribute{
								Description: "The AndConditions param.",
								Optional:    true,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"name":true, "or_condition":true} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
										"name": rsschema.StringAttribute{
											Description: "The Name param.",
											Optional:    true,
										},
										"or_conditions": rsschema.ListNestedAttribute{
											Description: "The OrConditions param.",
											Optional:    true,
											NestedObject: rsschema.NestedAttributeObject{
												Attributes: map[string]rsschema.Attribute{
													// inputs:map[string]bool{"name":true, "threat_id":true} outputs:map[string]bool{"name":true, "threat_id":true} forceNew:map[string]bool(nil)
													"name": rsschema.StringAttribute{
														Description: "The Name param.",
														Optional:    true,
													},
													"threat_id": rsschema.StringAttribute{
														Description: "The ThreatId param.",
														Optional:    true,
													},
												},
											},
										},
									},
								},
							},
							"order_free": rsschema.BoolAttribute{
								Description: "The OrderFree param. Default: `false`.",
								Optional:    true,
								Computed:    true,
								Default:     booldefault.StaticBool(false),
							},
							"time_attribute": rsschema.SingleNestedAttribute{
								Description: "The TimeAttribute param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"interval":true, "threshold":true, "track_by":true} outputs:map[string]bool{"interval":true, "threshold":true, "track_by":true} forceNew:map[string]bool(nil)
									"interval": rsschema.Int64Attribute{
										Description: "The Interval param. Value must be between 1 and 3600.",
										Optional:    true,
										Validators: []validator.Int64{
											int64validator.Between(1, 3600),
										},
									},
									"threshold": rsschema.Int64Attribute{
										Description: "The Threshold param. Value must be between 1 and 255.",
										Optional:    true,
										Validators: []validator.Int64{
											int64validator.Between(1, 255),
										},
									},
									"track_by": rsschema.StringAttribute{
										Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`, `\"destination\"`.",
										Optional:    true,
										Validators: []validator.String{
											stringvalidator.OneOf("source-and-destination", "source", "destination"),
										},
									},
								},
							},
						},
					},
					"standards": rsschema.ListNestedAttribute{
						Description: "The Standards param.",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"and_condition":true, "comment":true, "name":true, "order_free":true, "scope":true} outputs:map[string]bool{"and_condition":true, "comment":true, "name":true, "order_free":true, "scope":true} forceNew:map[string]bool(nil)
								"and_conditions": rsschema.ListNestedAttribute{
									Description: "The AndConditions param.",
									Optional:    true,
									NestedObject: rsschema.NestedAttributeObject{
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"name":true, "or_condition":true} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
											"name": rsschema.StringAttribute{
												Description: "The Name param.",
												Optional:    true,
											},
											"or_conditions": rsschema.ListNestedAttribute{
												Description: "The OrConditions param.",
												Optional:    true,
												NestedObject: rsschema.NestedAttributeObject{
													Attributes: map[string]rsschema.Attribute{
														// inputs:map[string]bool{"name":true, "operator":true} outputs:map[string]bool{"name":true, "operator":true} forceNew:map[string]bool(nil)
														"name": rsschema.StringAttribute{
															Description: "The Name param.",
															Optional:    true,
														},
														"operator": rsschema.SingleNestedAttribute{
															Description: "The Operator param.",
															Optional:    true,
															Attributes: map[string]rsschema.Attribute{
																// inputs:map[string]bool{"equal_to":true, "greater_than":true, "less_than":true, "pattern_match":true} outputs:map[string]bool{"equal_to":true, "greater_than":true, "less_than":true, "pattern_match":true} forceNew:map[string]bool(nil)
																"equal_to": rsschema.SingleNestedAttribute{
																	Description: "The EqualTo param.",
																	Optional:    true,
																	Attributes: map[string]rsschema.Attribute{
																		// inputs:map[string]bool{"context":true, "negate":true, "qualifier":true, "value":true} outputs:map[string]bool{"context":true, "negate":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																		"context": rsschema.StringAttribute{
																			Description: "The Context param.",
																			Optional:    true,
																		},
																		"negate": rsschema.BoolAttribute{
																			Description: "The Negate param. Default: `false`.",
																			Optional:    true,
																			Computed:    true,
																			Default:     booldefault.StaticBool(false),
																		},
																		"qualifiers": rsschema.ListNestedAttribute{
																			Description: "The Qualifiers param.",
																			Optional:    true,
																			NestedObject: rsschema.NestedAttributeObject{
																				Attributes: map[string]rsschema.Attribute{
																					// inputs:map[string]bool{"name":true, "value":true} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																					"name": rsschema.StringAttribute{
																						Description: "The Name param.",
																						Optional:    true,
																					},
																					"value": rsschema.StringAttribute{
																						Description: "The Value param.",
																						Optional:    true,
																					},
																				},
																			},
																		},
																		"value": rsschema.Int64Attribute{
																			Description: "The Value param. Value must be between 0 and 4294967295.",
																			Optional:    true,
																			Validators: []validator.Int64{
																				int64validator.Between(0, 4294967295),
																			},
																		},
																	},
																},
																"greater_than": rsschema.SingleNestedAttribute{
																	Description: "The GreaterThan param.",
																	Optional:    true,
																	Attributes: map[string]rsschema.Attribute{
																		// inputs:map[string]bool{"context":true, "qualifier":true, "value":true} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																		"context": rsschema.StringAttribute{
																			Description: "The Context param.",
																			Optional:    true,
																		},
																		"qualifiers": rsschema.ListNestedAttribute{
																			Description: "The Qualifiers param.",
																			Optional:    true,
																			NestedObject: rsschema.NestedAttributeObject{
																				Attributes: map[string]rsschema.Attribute{
																					// inputs:map[string]bool{"name":true, "value":true} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																					"name": rsschema.StringAttribute{
																						Description: "The Name param.",
																						Optional:    true,
																					},
																					"value": rsschema.StringAttribute{
																						Description: "The Value param.",
																						Optional:    true,
																					},
																				},
																			},
																		},
																		"value": rsschema.Int64Attribute{
																			Description: "The Value param. Value must be between 0 and 4294967295.",
																			Optional:    true,
																			Validators: []validator.Int64{
																				int64validator.Between(0, 4294967295),
																			},
																		},
																	},
																},
																"less_than": rsschema.SingleNestedAttribute{
																	Description: "The LessThan param.",
																	Optional:    true,
																	Attributes: map[string]rsschema.Attribute{
																		// inputs:map[string]bool{"context":true, "qualifier":true, "value":true} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																		"context": rsschema.StringAttribute{
																			Description: "The Context param.",
																			Optional:    true,
																		},
																		"qualifiers": rsschema.ListNestedAttribute{
																			Description: "The Qualifiers param.",
																			Optional:    true,
																			NestedObject: rsschema.NestedAttributeObject{
																				Attributes: map[string]rsschema.Attribute{
																					// inputs:map[string]bool{"name":true, "value":true} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																					"name": rsschema.StringAttribute{
																						Description: "The Name param.",
																						Optional:    true,
																					},
																					"value": rsschema.StringAttribute{
																						Description: "The Value param.",
																						Optional:    true,
																					},
																				},
																			},
																		},
																		"value": rsschema.Int64Attribute{
																			Description: "The Value param. Value must be between 0 and 4294967295.",
																			Optional:    true,
																			Validators: []validator.Int64{
																				int64validator.Between(0, 4294967295),
																			},
																		},
																	},
																},
																"pattern_match": rsschema.SingleNestedAttribute{
																	Description: "The PatternMatch param.",
																	Optional:    true,
																	Attributes: map[string]rsschema.Attribute{
																		// inputs:map[string]bool{"context":true, "negate":true, "pattern":true, "qualifier":true} outputs:map[string]bool{"context":true, "negate":true, "pattern":true, "qualifier":true} forceNew:map[string]bool(nil)
																		"context": rsschema.StringAttribute{
																			Description: "The Context param.",
																			Optional:    true,
																		},
																		"negate": rsschema.BoolAttribute{
																			Description: "The Negate param. Default: `false`.",
																			Optional:    true,
																			Computed:    true,
																			Default:     booldefault.StaticBool(false),
																		},
																		"pattern": rsschema.StringAttribute{
																			Description: "The Pattern param.",
																			Optional:    true,
																		},
																		"qualifiers": rsschema.ListNestedAttribute{
																			Description: "The Qualifiers param.",
																			Optional:    true,
																			NestedObject: rsschema.NestedAttributeObject{
																				Attributes: map[string]rsschema.Attribute{
																					// inputs:map[string]bool{"name":true, "value":true} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																					"name": rsschema.StringAttribute{
																						Description: "The Name param.",
																						Optional:    true,
																					},
																					"value": rsschema.StringAttribute{
																						Description: "The Value param.",
																						Optional:    true,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								"comment": rsschema.StringAttribute{
									Description: "The Comment param. String length must not exceed 256 characters.",
									Optional:    true,
									Validators: []validator.String{
										stringvalidator.LengthAtMost(256),
									},
								},
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Required:    true,
								},
								"order_free": rsschema.BoolAttribute{
									Description: "The OrderFree param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"scope": rsschema.StringAttribute{
									Description: "The Scope param. String must be one of these: `\"protocol-data-unit\"`, `\"session\"`.",
									Optional:    true,
									Validators: []validator.String{
										stringvalidator.OneOf("protocol-data-unit", "session"),
									},
								},
							},
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"threat_id": rsschema.Int64Attribute{
				Description: "threat id range <15000-18000> and <6900001-7000000>. Value must be between 15000 and 70000000.",
				Required:    true,
				Validators: []validator.Int64{
					int64validator.Between(15000, 70000000),
				},
			},
			"threatname": rsschema.StringAttribute{
				Description: "The Threatname param. String length must not exceed 1024 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1024),
				},
			},
			"vendors": rsschema.ListAttribute{
				Description: "The Vendors param.",
				Optional:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (r *antiSpywareSignatureResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *antiSpywareSignatureResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state antiSpywareSignatureRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_anti_spyware_signature",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := lhPcfTR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &eumQbRC.Config{}

	resp.Diagnostics.Append(state.Bugtraqs.ElementsAs(ctx, &input.Request.Bugtraqs, false)...)
	//if len(state.Bugtraqs) != 0 {
	//    input.Request.Bugtraqs = make([]string, 0, len(state.Bugtraqs))
	//    for _, var0 := range state.Bugtraqs {
	//        input.Request.Bugtraqs = append(input.Request.Bugtraqs, var0.ValueString())
	//    }
	//}

	input.Request.Comment = state.Comment.ValueStringPointer()

	resp.Diagnostics.Append(state.Cves.ElementsAs(ctx, &input.Request.Cves, false)...)
	//if len(state.Cves) != 0 {
	//    input.Request.Cves = make([]string, 0, len(state.Cves))
	//    for _, var1 := range state.Cves {
	//        input.Request.Cves = append(input.Request.Cves, var1.ValueString())
	//    }
	//}

	if state.DefaultAction != nil {
		input.Request.DefaultAction = &eumQbRC.DefaultActionObject{}

		if !state.DefaultAction.Alert.IsNull() && state.DefaultAction.Alert.ValueBool() {
			input.Request.DefaultAction.Alert = map[string]interface{}{}
		}

		if !state.DefaultAction.Allow.IsNull() && state.DefaultAction.Allow.ValueBool() {
			input.Request.DefaultAction.Allow = map[string]interface{}{}
		}

		if state.DefaultAction.BlockIp != nil {
			input.Request.DefaultAction.BlockIp = &eumQbRC.BlockIpObject{}

			input.Request.DefaultAction.BlockIp.Duration = state.DefaultAction.BlockIp.Duration.ValueInt64Pointer()

			input.Request.DefaultAction.BlockIp.TrackBy = state.DefaultAction.BlockIp.TrackBy.ValueStringPointer()
		}

		if !state.DefaultAction.Drop.IsNull() && state.DefaultAction.Drop.ValueBool() {
			input.Request.DefaultAction.Drop = map[string]interface{}{}
		}

		if !state.DefaultAction.ResetBoth.IsNull() && state.DefaultAction.ResetBoth.ValueBool() {
			input.Request.DefaultAction.ResetBoth = map[string]interface{}{}
		}

		if !state.DefaultAction.ResetClient.IsNull() && state.DefaultAction.ResetClient.ValueBool() {
			input.Request.DefaultAction.ResetClient = map[string]interface{}{}
		}

		if !state.DefaultAction.ResetServer.IsNull() && state.DefaultAction.ResetServer.ValueBool() {
			input.Request.DefaultAction.ResetServer = map[string]interface{}{}
		}
	}

	input.Request.Direction = state.Direction.ValueStringPointer()

	resp.Diagnostics.Append(state.References.ElementsAs(ctx, &input.Request.References, false)...)
	//if len(state.References) != 0 {
	//    input.Request.References = make([]string, 0, len(state.References))
	//    for _, var2 := range state.References {
	//        input.Request.References = append(input.Request.References, var2.ValueString())
	//    }
	//}

	input.Request.Severity = state.Severity.ValueStringPointer()

	if state.Signature != nil {
		input.Request.Signature = &eumQbRC.SignatureObject{}

		if state.Signature.Combination != nil {
			input.Request.Signature.Combination = &eumQbRC.CombinationObject{}

			if len(state.Signature.Combination.AndConditions) != 0 {
				input.Request.Signature.Combination.AndConditions = make([]eumQbRC.CombinationAndConditionObject, 0, len(state.Signature.Combination.AndConditions))
				for _, var3 := range state.Signature.Combination.AndConditions {
					var var4 eumQbRC.CombinationAndConditionObject

					var4.Name = var3.Name.ValueStringPointer()

					if len(var3.OrConditions) != 0 {
						var4.OrConditions = make([]eumQbRC.CombinationOrConditionObject, 0, len(var3.OrConditions))
						for _, var5 := range var3.OrConditions {
							var var6 eumQbRC.CombinationOrConditionObject

							var6.Name = var5.Name.ValueStringPointer()

							var6.ThreatId = var5.ThreatId.ValueStringPointer()
							var4.OrConditions = append(var4.OrConditions, var6)
						}
					}
					input.Request.Signature.Combination.AndConditions = append(input.Request.Signature.Combination.AndConditions, var4)
				}
			}

			input.Request.Signature.Combination.OrderFree = state.Signature.Combination.OrderFree.ValueBoolPointer()

			if state.Signature.Combination.TimeAttribute != nil {
				input.Request.Signature.Combination.TimeAttribute = &eumQbRC.TimeAttributeObject{}

				input.Request.Signature.Combination.TimeAttribute.Interval = state.Signature.Combination.TimeAttribute.Interval.ValueInt64Pointer()

				input.Request.Signature.Combination.TimeAttribute.Threshold = state.Signature.Combination.TimeAttribute.Threshold.ValueInt64Pointer()

				input.Request.Signature.Combination.TimeAttribute.TrackBy = state.Signature.Combination.TimeAttribute.TrackBy.ValueStringPointer()
			}
		}

		if len(state.Signature.Standards) != 0 {
			input.Request.Signature.Standards = make([]eumQbRC.StandardObject, 0, len(state.Signature.Standards))
			for _, var7 := range state.Signature.Standards {
				var var8 eumQbRC.StandardObject

				if len(var7.AndConditions) != 0 {
					var8.AndConditions = make([]eumQbRC.StandardAndConditionObject, 0, len(var7.AndConditions))
					for _, var9 := range var7.AndConditions {
						var var10 eumQbRC.StandardAndConditionObject

						var10.Name = var9.Name.ValueStringPointer()

						if len(var9.OrConditions) != 0 {
							var10.OrConditions = make([]eumQbRC.StandardOrConditionObject, 0, len(var9.OrConditions))
							for _, var11 := range var9.OrConditions {
								var var12 eumQbRC.StandardOrConditionObject

								var12.Name = var11.Name.ValueStringPointer()

								if var11.Operator != nil {
									var12.Operator = &eumQbRC.OperatorObject{}

									if var11.Operator.EqualTo != nil {
										var12.Operator.EqualTo = &eumQbRC.EqualToObject{}

										var12.Operator.EqualTo.Context = var11.Operator.EqualTo.Context.ValueStringPointer()

										var12.Operator.EqualTo.Negate = var11.Operator.EqualTo.Negate.ValueBoolPointer()

										if len(var11.Operator.EqualTo.Qualifiers) != 0 {
											var12.Operator.EqualTo.Qualifiers = make([]eumQbRC.EqualToQualifierObject, 0, len(var11.Operator.EqualTo.Qualifiers))
											for _, var13 := range var11.Operator.EqualTo.Qualifiers {
												var var14 eumQbRC.EqualToQualifierObject

												var14.Name = var13.Name.ValueStringPointer()

												var14.Value = var13.Value.ValueStringPointer()
												var12.Operator.EqualTo.Qualifiers = append(var12.Operator.EqualTo.Qualifiers, var14)
											}
										}

										var12.Operator.EqualTo.Value = var11.Operator.EqualTo.Value.ValueInt64Pointer()
									}

									if var11.Operator.GreaterThan != nil {
										var12.Operator.GreaterThan = &eumQbRC.GreaterThanObject{}

										var12.Operator.GreaterThan.Context = var11.Operator.GreaterThan.Context.ValueStringPointer()

										if len(var11.Operator.GreaterThan.Qualifiers) != 0 {
											var12.Operator.GreaterThan.Qualifiers = make([]eumQbRC.GreaterThanQualifierObject, 0, len(var11.Operator.GreaterThan.Qualifiers))
											for _, var15 := range var11.Operator.GreaterThan.Qualifiers {
												var var16 eumQbRC.GreaterThanQualifierObject

												var16.Name = var15.Name.ValueStringPointer()

												var16.Value = var15.Value.ValueStringPointer()
												var12.Operator.GreaterThan.Qualifiers = append(var12.Operator.GreaterThan.Qualifiers, var16)
											}
										}

										var12.Operator.GreaterThan.Value = var11.Operator.GreaterThan.Value.ValueInt64Pointer()
									}

									if var11.Operator.LessThan != nil {
										var12.Operator.LessThan = &eumQbRC.LessThanObject{}

										var12.Operator.LessThan.Context = var11.Operator.LessThan.Context.ValueStringPointer()

										if len(var11.Operator.LessThan.Qualifiers) != 0 {
											var12.Operator.LessThan.Qualifiers = make([]eumQbRC.LessThanQualifierObject, 0, len(var11.Operator.LessThan.Qualifiers))
											for _, var17 := range var11.Operator.LessThan.Qualifiers {
												var var18 eumQbRC.LessThanQualifierObject

												var18.Name = var17.Name.ValueStringPointer()

												var18.Value = var17.Value.ValueStringPointer()
												var12.Operator.LessThan.Qualifiers = append(var12.Operator.LessThan.Qualifiers, var18)
											}
										}

										var12.Operator.LessThan.Value = var11.Operator.LessThan.Value.ValueInt64Pointer()
									}

									if var11.Operator.PatternMatch != nil {
										var12.Operator.PatternMatch = &eumQbRC.PatternMatchObject{}

										var12.Operator.PatternMatch.Context = var11.Operator.PatternMatch.Context.ValueStringPointer()

										var12.Operator.PatternMatch.Negate = var11.Operator.PatternMatch.Negate.ValueBoolPointer()

										var12.Operator.PatternMatch.Pattern = var11.Operator.PatternMatch.Pattern.ValueStringPointer()

										if len(var11.Operator.PatternMatch.Qualifiers) != 0 {
											var12.Operator.PatternMatch.Qualifiers = make([]eumQbRC.PatternMatchQualifierObject, 0, len(var11.Operator.PatternMatch.Qualifiers))
											for _, var19 := range var11.Operator.PatternMatch.Qualifiers {
												var var20 eumQbRC.PatternMatchQualifierObject

												var20.Name = var19.Name.ValueStringPointer()

												var20.Value = var19.Value.ValueStringPointer()
												var12.Operator.PatternMatch.Qualifiers = append(var12.Operator.PatternMatch.Qualifiers, var20)
											}
										}
									}
								}
								var10.OrConditions = append(var10.OrConditions, var12)
							}
						}
						var8.AndConditions = append(var8.AndConditions, var10)
					}
				}

				var8.Comment = var7.Comment.ValueStringPointer()

				var8.Name = var7.Name.ValueString()

				var8.OrderFree = var7.OrderFree.ValueBoolPointer()

				var8.Scope = var7.Scope.ValueStringPointer()
				input.Request.Signature.Standards = append(input.Request.Signature.Standards, var8)
			}
		}
	}

	input.Request.ThreatId = state.ThreatId.ValueInt64()

	input.Request.Threatname = state.Threatname.ValueString()

	resp.Diagnostics.Append(state.Vendors.ElementsAs(ctx, &input.Request.Vendors, false)...)
	//if len(state.Vendors) != 0 {
	//    input.Request.Vendors = make([]string, 0, len(state.Vendors))
	//    for _, var21 := range state.Vendors {
	//        input.Request.Vendors = append(input.Request.Vendors, var21.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var22, var23 := types.ListValueFrom(ctx, types.StringType, ans.Bugtraqs)
	state.Bugtraqs = var22
	resp.Diagnostics.Append(var23.Errors()...)

	state.Comment = types.StringPointerValue(ans.Comment)

	var24, var25 := types.ListValueFrom(ctx, types.StringType, ans.Cves)
	state.Cves = var24
	resp.Diagnostics.Append(var25.Errors()...)

	if ans.DefaultAction == nil {
		state.DefaultAction = nil
	} else {
		state.DefaultAction = &antiSpywareSignatureRsModel_eumQbRC_DefaultActionObject{}

		state.DefaultAction.Alert = types.BoolValue(ans.DefaultAction.Alert != nil)

		state.DefaultAction.Allow = types.BoolValue(ans.DefaultAction.Allow != nil)

		if ans.DefaultAction.BlockIp == nil {
			state.DefaultAction.BlockIp = nil
		} else {
			state.DefaultAction.BlockIp = &antiSpywareSignatureRsModel_eumQbRC_BlockIpObject{}

			state.DefaultAction.BlockIp.Duration = types.Int64PointerValue(ans.DefaultAction.BlockIp.Duration)

			state.DefaultAction.BlockIp.TrackBy = types.StringPointerValue(ans.DefaultAction.BlockIp.TrackBy)
		}

		state.DefaultAction.Drop = types.BoolValue(ans.DefaultAction.Drop != nil)

		state.DefaultAction.ResetBoth = types.BoolValue(ans.DefaultAction.ResetBoth != nil)

		state.DefaultAction.ResetClient = types.BoolValue(ans.DefaultAction.ResetClient != nil)

		state.DefaultAction.ResetServer = types.BoolValue(ans.DefaultAction.ResetServer != nil)
	}

	state.Direction = types.StringPointerValue(ans.Direction)

	state.Id = types.StringPointerValue(ans.Id)

	var26, var27 := types.ListValueFrom(ctx, types.StringType, ans.References)
	state.References = var26
	resp.Diagnostics.Append(var27.Errors()...)

	state.Severity = types.StringPointerValue(ans.Severity)

	if ans.Signature == nil {
		state.Signature = nil
	} else {
		state.Signature = &antiSpywareSignatureRsModel_eumQbRC_SignatureObject{}

		if ans.Signature.Combination == nil {
			state.Signature.Combination = nil
		} else {
			state.Signature.Combination = &antiSpywareSignatureRsModel_eumQbRC_CombinationObject{}

			if len(ans.Signature.Combination.AndConditions) == 0 {
				state.Signature.Combination.AndConditions = nil
			} else {
				state.Signature.Combination.AndConditions = make([]antiSpywareSignatureRsModel_eumQbRC_CombinationAndConditionObject, 0, len(ans.Signature.Combination.AndConditions))
				for _, var28 := range ans.Signature.Combination.AndConditions {
					var29 := antiSpywareSignatureRsModel_eumQbRC_CombinationAndConditionObject{}

					var29.Name = types.StringPointerValue(var28.Name)

					if len(var28.OrConditions) == 0 {
						var29.OrConditions = nil
					} else {
						var29.OrConditions = make([]antiSpywareSignatureRsModel_eumQbRC_CombinationOrConditionObject, 0, len(var28.OrConditions))
						for _, var30 := range var28.OrConditions {
							var31 := antiSpywareSignatureRsModel_eumQbRC_CombinationOrConditionObject{}

							var31.Name = types.StringPointerValue(var30.Name)

							var31.ThreatId = types.StringPointerValue(var30.ThreatId)
							var29.OrConditions = append(var29.OrConditions, var31)
						}
					}
					state.Signature.Combination.AndConditions = append(state.Signature.Combination.AndConditions, var29)
				}
			}

			state.Signature.Combination.OrderFree = types.BoolPointerValue(ans.Signature.Combination.OrderFree)

			if ans.Signature.Combination.TimeAttribute == nil {
				state.Signature.Combination.TimeAttribute = nil
			} else {
				state.Signature.Combination.TimeAttribute = &antiSpywareSignatureRsModel_eumQbRC_TimeAttributeObject{}

				state.Signature.Combination.TimeAttribute.Interval = types.Int64PointerValue(ans.Signature.Combination.TimeAttribute.Interval)

				state.Signature.Combination.TimeAttribute.Threshold = types.Int64PointerValue(ans.Signature.Combination.TimeAttribute.Threshold)

				state.Signature.Combination.TimeAttribute.TrackBy = types.StringPointerValue(ans.Signature.Combination.TimeAttribute.TrackBy)
			}
		}

		if len(ans.Signature.Standards) == 0 {
			state.Signature.Standards = nil
		} else {
			state.Signature.Standards = make([]antiSpywareSignatureRsModel_eumQbRC_StandardObject, 0, len(ans.Signature.Standards))
			for _, var32 := range ans.Signature.Standards {
				var33 := antiSpywareSignatureRsModel_eumQbRC_StandardObject{}

				if len(var32.AndConditions) == 0 {
					var33.AndConditions = nil
				} else {
					var33.AndConditions = make([]antiSpywareSignatureRsModel_eumQbRC_StandardAndConditionObject, 0, len(var32.AndConditions))
					for _, var34 := range var32.AndConditions {
						var35 := antiSpywareSignatureRsModel_eumQbRC_StandardAndConditionObject{}

						var35.Name = types.StringPointerValue(var34.Name)

						if len(var34.OrConditions) == 0 {
							var35.OrConditions = nil
						} else {
							var35.OrConditions = make([]antiSpywareSignatureRsModel_eumQbRC_StandardOrConditionObject, 0, len(var34.OrConditions))
							for _, var36 := range var34.OrConditions {
								var37 := antiSpywareSignatureRsModel_eumQbRC_StandardOrConditionObject{}

								var37.Name = types.StringPointerValue(var36.Name)

								if var36.Operator == nil {
									var37.Operator = nil
								} else {
									var37.Operator = &antiSpywareSignatureRsModel_eumQbRC_OperatorObject{}

									if var36.Operator.EqualTo == nil {
										var37.Operator.EqualTo = nil
									} else {
										var37.Operator.EqualTo = &antiSpywareSignatureRsModel_eumQbRC_EqualToObject{}

										var37.Operator.EqualTo.Context = types.StringPointerValue(var36.Operator.EqualTo.Context)

										var37.Operator.EqualTo.Negate = types.BoolPointerValue(var36.Operator.EqualTo.Negate)

										if len(var36.Operator.EqualTo.Qualifiers) == 0 {
											var37.Operator.EqualTo.Qualifiers = nil
										} else {
											var37.Operator.EqualTo.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_EqualToQualifierObject, 0, len(var36.Operator.EqualTo.Qualifiers))
											for _, var38 := range var36.Operator.EqualTo.Qualifiers {
												var39 := antiSpywareSignatureRsModel_eumQbRC_EqualToQualifierObject{}

												var39.Name = types.StringPointerValue(var38.Name)

												var39.Value = types.StringPointerValue(var38.Value)
												var37.Operator.EqualTo.Qualifiers = append(var37.Operator.EqualTo.Qualifiers, var39)
											}
										}

										var37.Operator.EqualTo.Value = types.Int64PointerValue(var36.Operator.EqualTo.Value)
									}

									if var36.Operator.GreaterThan == nil {
										var37.Operator.GreaterThan = nil
									} else {
										var37.Operator.GreaterThan = &antiSpywareSignatureRsModel_eumQbRC_GreaterThanObject{}

										var37.Operator.GreaterThan.Context = types.StringPointerValue(var36.Operator.GreaterThan.Context)

										if len(var36.Operator.GreaterThan.Qualifiers) == 0 {
											var37.Operator.GreaterThan.Qualifiers = nil
										} else {
											var37.Operator.GreaterThan.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_GreaterThanQualifierObject, 0, len(var36.Operator.GreaterThan.Qualifiers))
											for _, var40 := range var36.Operator.GreaterThan.Qualifiers {
												var41 := antiSpywareSignatureRsModel_eumQbRC_GreaterThanQualifierObject{}

												var41.Name = types.StringPointerValue(var40.Name)

												var41.Value = types.StringPointerValue(var40.Value)
												var37.Operator.GreaterThan.Qualifiers = append(var37.Operator.GreaterThan.Qualifiers, var41)
											}
										}

										var37.Operator.GreaterThan.Value = types.Int64PointerValue(var36.Operator.GreaterThan.Value)
									}

									if var36.Operator.LessThan == nil {
										var37.Operator.LessThan = nil
									} else {
										var37.Operator.LessThan = &antiSpywareSignatureRsModel_eumQbRC_LessThanObject{}

										var37.Operator.LessThan.Context = types.StringPointerValue(var36.Operator.LessThan.Context)

										if len(var36.Operator.LessThan.Qualifiers) == 0 {
											var37.Operator.LessThan.Qualifiers = nil
										} else {
											var37.Operator.LessThan.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_LessThanQualifierObject, 0, len(var36.Operator.LessThan.Qualifiers))
											for _, var42 := range var36.Operator.LessThan.Qualifiers {
												var43 := antiSpywareSignatureRsModel_eumQbRC_LessThanQualifierObject{}

												var43.Name = types.StringPointerValue(var42.Name)

												var43.Value = types.StringPointerValue(var42.Value)
												var37.Operator.LessThan.Qualifiers = append(var37.Operator.LessThan.Qualifiers, var43)
											}
										}

										var37.Operator.LessThan.Value = types.Int64PointerValue(var36.Operator.LessThan.Value)
									}

									if var36.Operator.PatternMatch == nil {
										var37.Operator.PatternMatch = nil
									} else {
										var37.Operator.PatternMatch = &antiSpywareSignatureRsModel_eumQbRC_PatternMatchObject{}

										var37.Operator.PatternMatch.Context = types.StringPointerValue(var36.Operator.PatternMatch.Context)

										var37.Operator.PatternMatch.Negate = types.BoolPointerValue(var36.Operator.PatternMatch.Negate)

										var37.Operator.PatternMatch.Pattern = types.StringPointerValue(var36.Operator.PatternMatch.Pattern)

										if len(var36.Operator.PatternMatch.Qualifiers) == 0 {
											var37.Operator.PatternMatch.Qualifiers = nil
										} else {
											var37.Operator.PatternMatch.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_PatternMatchQualifierObject, 0, len(var36.Operator.PatternMatch.Qualifiers))
											for _, var44 := range var36.Operator.PatternMatch.Qualifiers {
												var45 := antiSpywareSignatureRsModel_eumQbRC_PatternMatchQualifierObject{}

												var45.Name = types.StringPointerValue(var44.Name)

												var45.Value = types.StringPointerValue(var44.Value)
												var37.Operator.PatternMatch.Qualifiers = append(var37.Operator.PatternMatch.Qualifiers, var45)
											}
										}
									}
								}
								var35.OrConditions = append(var35.OrConditions, var37)
							}
						}
						var33.AndConditions = append(var33.AndConditions, var35)
					}
				}

				var33.Comment = types.StringPointerValue(var32.Comment)

				var33.Name = types.StringValue(var32.Name)

				var33.OrderFree = types.BoolPointerValue(var32.OrderFree)

				var33.Scope = types.StringPointerValue(var32.Scope)
				state.Signature.Standards = append(state.Signature.Standards, var33)
			}
		}
	}

	state.ThreatId = types.Int64Value(ans.ThreatId)

	state.Threatname = types.StringValue(ans.Threatname)

	var46, var47 := types.ListValueFrom(ctx, types.StringType, ans.Vendors)
	state.Vendors = var46
	resp.Diagnostics.Append(var47.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *antiSpywareSignatureResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state antiSpywareSignatureRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_anti_spyware_signature",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := lhPcfTR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Bugtraqs)
	state.Bugtraqs = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Comment = types.StringPointerValue(ans.Comment)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Cves)
	state.Cves = var2
	resp.Diagnostics.Append(var3.Errors()...)

	if ans.DefaultAction == nil {
		state.DefaultAction = nil
	} else {
		state.DefaultAction = &antiSpywareSignatureRsModel_eumQbRC_DefaultActionObject{}

		state.DefaultAction.Alert = types.BoolValue(ans.DefaultAction.Alert != nil)

		state.DefaultAction.Allow = types.BoolValue(ans.DefaultAction.Allow != nil)

		if ans.DefaultAction.BlockIp == nil {
			state.DefaultAction.BlockIp = nil
		} else {
			state.DefaultAction.BlockIp = &antiSpywareSignatureRsModel_eumQbRC_BlockIpObject{}

			state.DefaultAction.BlockIp.Duration = types.Int64PointerValue(ans.DefaultAction.BlockIp.Duration)

			state.DefaultAction.BlockIp.TrackBy = types.StringPointerValue(ans.DefaultAction.BlockIp.TrackBy)
		}

		state.DefaultAction.Drop = types.BoolValue(ans.DefaultAction.Drop != nil)

		state.DefaultAction.ResetBoth = types.BoolValue(ans.DefaultAction.ResetBoth != nil)

		state.DefaultAction.ResetClient = types.BoolValue(ans.DefaultAction.ResetClient != nil)

		state.DefaultAction.ResetServer = types.BoolValue(ans.DefaultAction.ResetServer != nil)
	}

	state.Direction = types.StringPointerValue(ans.Direction)

	state.Id = types.StringPointerValue(ans.Id)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.References)
	state.References = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Severity = types.StringPointerValue(ans.Severity)

	if ans.Signature == nil {
		state.Signature = nil
	} else {
		state.Signature = &antiSpywareSignatureRsModel_eumQbRC_SignatureObject{}

		if ans.Signature.Combination == nil {
			state.Signature.Combination = nil
		} else {
			state.Signature.Combination = &antiSpywareSignatureRsModel_eumQbRC_CombinationObject{}

			if len(ans.Signature.Combination.AndConditions) == 0 {
				state.Signature.Combination.AndConditions = nil
			} else {
				state.Signature.Combination.AndConditions = make([]antiSpywareSignatureRsModel_eumQbRC_CombinationAndConditionObject, 0, len(ans.Signature.Combination.AndConditions))
				for _, var6 := range ans.Signature.Combination.AndConditions {
					var7 := antiSpywareSignatureRsModel_eumQbRC_CombinationAndConditionObject{}

					var7.Name = types.StringPointerValue(var6.Name)

					if len(var6.OrConditions) == 0 {
						var7.OrConditions = nil
					} else {
						var7.OrConditions = make([]antiSpywareSignatureRsModel_eumQbRC_CombinationOrConditionObject, 0, len(var6.OrConditions))
						for _, var8 := range var6.OrConditions {
							var9 := antiSpywareSignatureRsModel_eumQbRC_CombinationOrConditionObject{}

							var9.Name = types.StringPointerValue(var8.Name)

							var9.ThreatId = types.StringPointerValue(var8.ThreatId)
							var7.OrConditions = append(var7.OrConditions, var9)
						}
					}
					state.Signature.Combination.AndConditions = append(state.Signature.Combination.AndConditions, var7)
				}
			}

			state.Signature.Combination.OrderFree = types.BoolPointerValue(ans.Signature.Combination.OrderFree)

			if ans.Signature.Combination.TimeAttribute == nil {
				state.Signature.Combination.TimeAttribute = nil
			} else {
				state.Signature.Combination.TimeAttribute = &antiSpywareSignatureRsModel_eumQbRC_TimeAttributeObject{}

				state.Signature.Combination.TimeAttribute.Interval = types.Int64PointerValue(ans.Signature.Combination.TimeAttribute.Interval)

				state.Signature.Combination.TimeAttribute.Threshold = types.Int64PointerValue(ans.Signature.Combination.TimeAttribute.Threshold)

				state.Signature.Combination.TimeAttribute.TrackBy = types.StringPointerValue(ans.Signature.Combination.TimeAttribute.TrackBy)
			}
		}

		if len(ans.Signature.Standards) == 0 {
			state.Signature.Standards = nil
		} else {
			state.Signature.Standards = make([]antiSpywareSignatureRsModel_eumQbRC_StandardObject, 0, len(ans.Signature.Standards))
			for _, var10 := range ans.Signature.Standards {
				var11 := antiSpywareSignatureRsModel_eumQbRC_StandardObject{}

				if len(var10.AndConditions) == 0 {
					var11.AndConditions = nil
				} else {
					var11.AndConditions = make([]antiSpywareSignatureRsModel_eumQbRC_StandardAndConditionObject, 0, len(var10.AndConditions))
					for _, var12 := range var10.AndConditions {
						var13 := antiSpywareSignatureRsModel_eumQbRC_StandardAndConditionObject{}

						var13.Name = types.StringPointerValue(var12.Name)

						if len(var12.OrConditions) == 0 {
							var13.OrConditions = nil
						} else {
							var13.OrConditions = make([]antiSpywareSignatureRsModel_eumQbRC_StandardOrConditionObject, 0, len(var12.OrConditions))
							for _, var14 := range var12.OrConditions {
								var15 := antiSpywareSignatureRsModel_eumQbRC_StandardOrConditionObject{}

								var15.Name = types.StringPointerValue(var14.Name)

								if var14.Operator == nil {
									var15.Operator = nil
								} else {
									var15.Operator = &antiSpywareSignatureRsModel_eumQbRC_OperatorObject{}

									if var14.Operator.EqualTo == nil {
										var15.Operator.EqualTo = nil
									} else {
										var15.Operator.EqualTo = &antiSpywareSignatureRsModel_eumQbRC_EqualToObject{}

										var15.Operator.EqualTo.Context = types.StringPointerValue(var14.Operator.EqualTo.Context)

										var15.Operator.EqualTo.Negate = types.BoolPointerValue(var14.Operator.EqualTo.Negate)

										if len(var14.Operator.EqualTo.Qualifiers) == 0 {
											var15.Operator.EqualTo.Qualifiers = nil
										} else {
											var15.Operator.EqualTo.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_EqualToQualifierObject, 0, len(var14.Operator.EqualTo.Qualifiers))
											for _, var16 := range var14.Operator.EqualTo.Qualifiers {
												var17 := antiSpywareSignatureRsModel_eumQbRC_EqualToQualifierObject{}

												var17.Name = types.StringPointerValue(var16.Name)

												var17.Value = types.StringPointerValue(var16.Value)
												var15.Operator.EqualTo.Qualifiers = append(var15.Operator.EqualTo.Qualifiers, var17)
											}
										}

										var15.Operator.EqualTo.Value = types.Int64PointerValue(var14.Operator.EqualTo.Value)
									}

									if var14.Operator.GreaterThan == nil {
										var15.Operator.GreaterThan = nil
									} else {
										var15.Operator.GreaterThan = &antiSpywareSignatureRsModel_eumQbRC_GreaterThanObject{}

										var15.Operator.GreaterThan.Context = types.StringPointerValue(var14.Operator.GreaterThan.Context)

										if len(var14.Operator.GreaterThan.Qualifiers) == 0 {
											var15.Operator.GreaterThan.Qualifiers = nil
										} else {
											var15.Operator.GreaterThan.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_GreaterThanQualifierObject, 0, len(var14.Operator.GreaterThan.Qualifiers))
											for _, var18 := range var14.Operator.GreaterThan.Qualifiers {
												var19 := antiSpywareSignatureRsModel_eumQbRC_GreaterThanQualifierObject{}

												var19.Name = types.StringPointerValue(var18.Name)

												var19.Value = types.StringPointerValue(var18.Value)
												var15.Operator.GreaterThan.Qualifiers = append(var15.Operator.GreaterThan.Qualifiers, var19)
											}
										}

										var15.Operator.GreaterThan.Value = types.Int64PointerValue(var14.Operator.GreaterThan.Value)
									}

									if var14.Operator.LessThan == nil {
										var15.Operator.LessThan = nil
									} else {
										var15.Operator.LessThan = &antiSpywareSignatureRsModel_eumQbRC_LessThanObject{}

										var15.Operator.LessThan.Context = types.StringPointerValue(var14.Operator.LessThan.Context)

										if len(var14.Operator.LessThan.Qualifiers) == 0 {
											var15.Operator.LessThan.Qualifiers = nil
										} else {
											var15.Operator.LessThan.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_LessThanQualifierObject, 0, len(var14.Operator.LessThan.Qualifiers))
											for _, var20 := range var14.Operator.LessThan.Qualifiers {
												var21 := antiSpywareSignatureRsModel_eumQbRC_LessThanQualifierObject{}

												var21.Name = types.StringPointerValue(var20.Name)

												var21.Value = types.StringPointerValue(var20.Value)
												var15.Operator.LessThan.Qualifiers = append(var15.Operator.LessThan.Qualifiers, var21)
											}
										}

										var15.Operator.LessThan.Value = types.Int64PointerValue(var14.Operator.LessThan.Value)
									}

									if var14.Operator.PatternMatch == nil {
										var15.Operator.PatternMatch = nil
									} else {
										var15.Operator.PatternMatch = &antiSpywareSignatureRsModel_eumQbRC_PatternMatchObject{}

										var15.Operator.PatternMatch.Context = types.StringPointerValue(var14.Operator.PatternMatch.Context)

										var15.Operator.PatternMatch.Negate = types.BoolPointerValue(var14.Operator.PatternMatch.Negate)

										var15.Operator.PatternMatch.Pattern = types.StringPointerValue(var14.Operator.PatternMatch.Pattern)

										if len(var14.Operator.PatternMatch.Qualifiers) == 0 {
											var15.Operator.PatternMatch.Qualifiers = nil
										} else {
											var15.Operator.PatternMatch.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_PatternMatchQualifierObject, 0, len(var14.Operator.PatternMatch.Qualifiers))
											for _, var22 := range var14.Operator.PatternMatch.Qualifiers {
												var23 := antiSpywareSignatureRsModel_eumQbRC_PatternMatchQualifierObject{}

												var23.Name = types.StringPointerValue(var22.Name)

												var23.Value = types.StringPointerValue(var22.Value)
												var15.Operator.PatternMatch.Qualifiers = append(var15.Operator.PatternMatch.Qualifiers, var23)
											}
										}
									}
								}
								var13.OrConditions = append(var13.OrConditions, var15)
							}
						}
						var11.AndConditions = append(var11.AndConditions, var13)
					}
				}

				var11.Comment = types.StringPointerValue(var10.Comment)

				var11.Name = types.StringValue(var10.Name)

				var11.OrderFree = types.BoolPointerValue(var10.OrderFree)

				var11.Scope = types.StringPointerValue(var10.Scope)
				state.Signature.Standards = append(state.Signature.Standards, var11)
			}
		}
	}

	state.ThreatId = types.Int64Value(ans.ThreatId)

	state.Threatname = types.StringValue(ans.Threatname)

	var24, var25 := types.ListValueFrom(ctx, types.StringType, ans.Vendors)
	state.Vendors = var24
	resp.Diagnostics.Append(var25.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *antiSpywareSignatureResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state antiSpywareSignatureRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_anti_spyware_signature",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := lhPcfTR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &eumQbRC.Config{}

	resp.Diagnostics.Append(plan.Bugtraqs.ElementsAs(ctx, &input.Request.Bugtraqs, false)...)
	//if len(plan.Bugtraqs) != 0 {
	//    input.Request.Bugtraqs = make([]string, 0, len(plan.Bugtraqs))
	//    for _, var0 := range plan.Bugtraqs {
	//        input.Request.Bugtraqs = append(input.Request.Bugtraqs, var0.ValueString())
	//    }
	//}

	input.Request.Comment = plan.Comment.ValueStringPointer()

	resp.Diagnostics.Append(plan.Cves.ElementsAs(ctx, &input.Request.Cves, false)...)
	//if len(plan.Cves) != 0 {
	//    input.Request.Cves = make([]string, 0, len(plan.Cves))
	//    for _, var1 := range plan.Cves {
	//        input.Request.Cves = append(input.Request.Cves, var1.ValueString())
	//    }
	//}

	if plan.DefaultAction != nil {
		input.Request.DefaultAction = &eumQbRC.DefaultActionObject{}

		if !plan.DefaultAction.Alert.IsNull() && plan.DefaultAction.Alert.ValueBool() {
			input.Request.DefaultAction.Alert = map[string]interface{}{}
		}

		if !plan.DefaultAction.Allow.IsNull() && plan.DefaultAction.Allow.ValueBool() {
			input.Request.DefaultAction.Allow = map[string]interface{}{}
		}

		if plan.DefaultAction.BlockIp != nil {
			input.Request.DefaultAction.BlockIp = &eumQbRC.BlockIpObject{}

			input.Request.DefaultAction.BlockIp.Duration = plan.DefaultAction.BlockIp.Duration.ValueInt64Pointer()

			input.Request.DefaultAction.BlockIp.TrackBy = plan.DefaultAction.BlockIp.TrackBy.ValueStringPointer()
		}

		if !plan.DefaultAction.Drop.IsNull() && plan.DefaultAction.Drop.ValueBool() {
			input.Request.DefaultAction.Drop = map[string]interface{}{}
		}

		if !plan.DefaultAction.ResetBoth.IsNull() && plan.DefaultAction.ResetBoth.ValueBool() {
			input.Request.DefaultAction.ResetBoth = map[string]interface{}{}
		}

		if !plan.DefaultAction.ResetClient.IsNull() && plan.DefaultAction.ResetClient.ValueBool() {
			input.Request.DefaultAction.ResetClient = map[string]interface{}{}
		}

		if !plan.DefaultAction.ResetServer.IsNull() && plan.DefaultAction.ResetServer.ValueBool() {
			input.Request.DefaultAction.ResetServer = map[string]interface{}{}
		}
	}

	input.Request.Direction = plan.Direction.ValueStringPointer()

	resp.Diagnostics.Append(plan.References.ElementsAs(ctx, &input.Request.References, false)...)
	//if len(plan.References) != 0 {
	//    input.Request.References = make([]string, 0, len(plan.References))
	//    for _, var2 := range plan.References {
	//        input.Request.References = append(input.Request.References, var2.ValueString())
	//    }
	//}

	input.Request.Severity = plan.Severity.ValueStringPointer()

	if plan.Signature != nil {
		input.Request.Signature = &eumQbRC.SignatureObject{}

		if plan.Signature.Combination != nil {
			input.Request.Signature.Combination = &eumQbRC.CombinationObject{}

			if len(plan.Signature.Combination.AndConditions) != 0 {
				input.Request.Signature.Combination.AndConditions = make([]eumQbRC.CombinationAndConditionObject, 0, len(plan.Signature.Combination.AndConditions))
				for _, var3 := range plan.Signature.Combination.AndConditions {
					var var4 eumQbRC.CombinationAndConditionObject

					var4.Name = var3.Name.ValueStringPointer()

					if len(var3.OrConditions) != 0 {
						var4.OrConditions = make([]eumQbRC.CombinationOrConditionObject, 0, len(var3.OrConditions))
						for _, var5 := range var3.OrConditions {
							var var6 eumQbRC.CombinationOrConditionObject

							var6.Name = var5.Name.ValueStringPointer()

							var6.ThreatId = var5.ThreatId.ValueStringPointer()
							var4.OrConditions = append(var4.OrConditions, var6)
						}
					}
					input.Request.Signature.Combination.AndConditions = append(input.Request.Signature.Combination.AndConditions, var4)
				}
			}

			input.Request.Signature.Combination.OrderFree = plan.Signature.Combination.OrderFree.ValueBoolPointer()

			if plan.Signature.Combination.TimeAttribute != nil {
				input.Request.Signature.Combination.TimeAttribute = &eumQbRC.TimeAttributeObject{}

				input.Request.Signature.Combination.TimeAttribute.Interval = plan.Signature.Combination.TimeAttribute.Interval.ValueInt64Pointer()

				input.Request.Signature.Combination.TimeAttribute.Threshold = plan.Signature.Combination.TimeAttribute.Threshold.ValueInt64Pointer()

				input.Request.Signature.Combination.TimeAttribute.TrackBy = plan.Signature.Combination.TimeAttribute.TrackBy.ValueStringPointer()
			}
		}

		if len(plan.Signature.Standards) != 0 {
			input.Request.Signature.Standards = make([]eumQbRC.StandardObject, 0, len(plan.Signature.Standards))
			for _, var7 := range plan.Signature.Standards {
				var var8 eumQbRC.StandardObject

				if len(var7.AndConditions) != 0 {
					var8.AndConditions = make([]eumQbRC.StandardAndConditionObject, 0, len(var7.AndConditions))
					for _, var9 := range var7.AndConditions {
						var var10 eumQbRC.StandardAndConditionObject

						var10.Name = var9.Name.ValueStringPointer()

						if len(var9.OrConditions) != 0 {
							var10.OrConditions = make([]eumQbRC.StandardOrConditionObject, 0, len(var9.OrConditions))
							for _, var11 := range var9.OrConditions {
								var var12 eumQbRC.StandardOrConditionObject

								var12.Name = var11.Name.ValueStringPointer()

								if var11.Operator != nil {
									var12.Operator = &eumQbRC.OperatorObject{}

									if var11.Operator.EqualTo != nil {
										var12.Operator.EqualTo = &eumQbRC.EqualToObject{}

										var12.Operator.EqualTo.Context = var11.Operator.EqualTo.Context.ValueStringPointer()

										var12.Operator.EqualTo.Negate = var11.Operator.EqualTo.Negate.ValueBoolPointer()

										if len(var11.Operator.EqualTo.Qualifiers) != 0 {
											var12.Operator.EqualTo.Qualifiers = make([]eumQbRC.EqualToQualifierObject, 0, len(var11.Operator.EqualTo.Qualifiers))
											for _, var13 := range var11.Operator.EqualTo.Qualifiers {
												var var14 eumQbRC.EqualToQualifierObject

												var14.Name = var13.Name.ValueStringPointer()

												var14.Value = var13.Value.ValueStringPointer()
												var12.Operator.EqualTo.Qualifiers = append(var12.Operator.EqualTo.Qualifiers, var14)
											}
										}

										var12.Operator.EqualTo.Value = var11.Operator.EqualTo.Value.ValueInt64Pointer()
									}

									if var11.Operator.GreaterThan != nil {
										var12.Operator.GreaterThan = &eumQbRC.GreaterThanObject{}

										var12.Operator.GreaterThan.Context = var11.Operator.GreaterThan.Context.ValueStringPointer()

										if len(var11.Operator.GreaterThan.Qualifiers) != 0 {
											var12.Operator.GreaterThan.Qualifiers = make([]eumQbRC.GreaterThanQualifierObject, 0, len(var11.Operator.GreaterThan.Qualifiers))
											for _, var15 := range var11.Operator.GreaterThan.Qualifiers {
												var var16 eumQbRC.GreaterThanQualifierObject

												var16.Name = var15.Name.ValueStringPointer()

												var16.Value = var15.Value.ValueStringPointer()
												var12.Operator.GreaterThan.Qualifiers = append(var12.Operator.GreaterThan.Qualifiers, var16)
											}
										}

										var12.Operator.GreaterThan.Value = var11.Operator.GreaterThan.Value.ValueInt64Pointer()
									}

									if var11.Operator.LessThan != nil {
										var12.Operator.LessThan = &eumQbRC.LessThanObject{}

										var12.Operator.LessThan.Context = var11.Operator.LessThan.Context.ValueStringPointer()

										if len(var11.Operator.LessThan.Qualifiers) != 0 {
											var12.Operator.LessThan.Qualifiers = make([]eumQbRC.LessThanQualifierObject, 0, len(var11.Operator.LessThan.Qualifiers))
											for _, var17 := range var11.Operator.LessThan.Qualifiers {
												var var18 eumQbRC.LessThanQualifierObject

												var18.Name = var17.Name.ValueStringPointer()

												var18.Value = var17.Value.ValueStringPointer()
												var12.Operator.LessThan.Qualifiers = append(var12.Operator.LessThan.Qualifiers, var18)
											}
										}

										var12.Operator.LessThan.Value = var11.Operator.LessThan.Value.ValueInt64Pointer()
									}

									if var11.Operator.PatternMatch != nil {
										var12.Operator.PatternMatch = &eumQbRC.PatternMatchObject{}

										var12.Operator.PatternMatch.Context = var11.Operator.PatternMatch.Context.ValueStringPointer()

										var12.Operator.PatternMatch.Negate = var11.Operator.PatternMatch.Negate.ValueBoolPointer()

										var12.Operator.PatternMatch.Pattern = var11.Operator.PatternMatch.Pattern.ValueStringPointer()

										if len(var11.Operator.PatternMatch.Qualifiers) != 0 {
											var12.Operator.PatternMatch.Qualifiers = make([]eumQbRC.PatternMatchQualifierObject, 0, len(var11.Operator.PatternMatch.Qualifiers))
											for _, var19 := range var11.Operator.PatternMatch.Qualifiers {
												var var20 eumQbRC.PatternMatchQualifierObject

												var20.Name = var19.Name.ValueStringPointer()

												var20.Value = var19.Value.ValueStringPointer()
												var12.Operator.PatternMatch.Qualifiers = append(var12.Operator.PatternMatch.Qualifiers, var20)
											}
										}
									}
								}
								var10.OrConditions = append(var10.OrConditions, var12)
							}
						}
						var8.AndConditions = append(var8.AndConditions, var10)
					}
				}

				var8.Comment = var7.Comment.ValueStringPointer()

				var8.Name = var7.Name.ValueString()

				var8.OrderFree = var7.OrderFree.ValueBoolPointer()

				var8.Scope = var7.Scope.ValueStringPointer()
				input.Request.Signature.Standards = append(input.Request.Signature.Standards, var8)
			}
		}
	}

	input.Request.ThreatId = plan.ThreatId.ValueInt64()

	input.Request.Threatname = plan.Threatname.ValueString()

	resp.Diagnostics.Append(plan.Vendors.ElementsAs(ctx, &input.Request.Vendors, false)...)
	//if len(plan.Vendors) != 0 {
	//    input.Request.Vendors = make([]string, 0, len(plan.Vendors))
	//    for _, var21 := range plan.Vendors {
	//        input.Request.Vendors = append(input.Request.Vendors, var21.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	var22, var23 := types.ListValueFrom(ctx, types.StringType, ans.Bugtraqs)
	state.Bugtraqs = var22
	resp.Diagnostics.Append(var23.Errors()...)

	state.Comment = types.StringPointerValue(ans.Comment)

	var24, var25 := types.ListValueFrom(ctx, types.StringType, ans.Cves)
	state.Cves = var24
	resp.Diagnostics.Append(var25.Errors()...)

	if ans.DefaultAction == nil {
		state.DefaultAction = nil
	} else {
		state.DefaultAction = &antiSpywareSignatureRsModel_eumQbRC_DefaultActionObject{}

		state.DefaultAction.Alert = types.BoolValue(ans.DefaultAction.Alert != nil)

		state.DefaultAction.Allow = types.BoolValue(ans.DefaultAction.Allow != nil)

		if ans.DefaultAction.BlockIp == nil {
			state.DefaultAction.BlockIp = nil
		} else {
			state.DefaultAction.BlockIp = &antiSpywareSignatureRsModel_eumQbRC_BlockIpObject{}

			state.DefaultAction.BlockIp.Duration = types.Int64PointerValue(ans.DefaultAction.BlockIp.Duration)

			state.DefaultAction.BlockIp.TrackBy = types.StringPointerValue(ans.DefaultAction.BlockIp.TrackBy)
		}

		state.DefaultAction.Drop = types.BoolValue(ans.DefaultAction.Drop != nil)

		state.DefaultAction.ResetBoth = types.BoolValue(ans.DefaultAction.ResetBoth != nil)

		state.DefaultAction.ResetClient = types.BoolValue(ans.DefaultAction.ResetClient != nil)

		state.DefaultAction.ResetServer = types.BoolValue(ans.DefaultAction.ResetServer != nil)
	}

	state.Direction = types.StringPointerValue(ans.Direction)

	state.Id = types.StringPointerValue(ans.Id)

	var26, var27 := types.ListValueFrom(ctx, types.StringType, ans.References)
	state.References = var26
	resp.Diagnostics.Append(var27.Errors()...)

	state.Severity = types.StringPointerValue(ans.Severity)

	if ans.Signature == nil {
		state.Signature = nil
	} else {
		state.Signature = &antiSpywareSignatureRsModel_eumQbRC_SignatureObject{}

		if ans.Signature.Combination == nil {
			state.Signature.Combination = nil
		} else {
			state.Signature.Combination = &antiSpywareSignatureRsModel_eumQbRC_CombinationObject{}

			if len(ans.Signature.Combination.AndConditions) == 0 {
				state.Signature.Combination.AndConditions = nil
			} else {
				state.Signature.Combination.AndConditions = make([]antiSpywareSignatureRsModel_eumQbRC_CombinationAndConditionObject, 0, len(ans.Signature.Combination.AndConditions))
				for _, var28 := range ans.Signature.Combination.AndConditions {
					var29 := antiSpywareSignatureRsModel_eumQbRC_CombinationAndConditionObject{}

					var29.Name = types.StringPointerValue(var28.Name)

					if len(var28.OrConditions) == 0 {
						var29.OrConditions = nil
					} else {
						var29.OrConditions = make([]antiSpywareSignatureRsModel_eumQbRC_CombinationOrConditionObject, 0, len(var28.OrConditions))
						for _, var30 := range var28.OrConditions {
							var31 := antiSpywareSignatureRsModel_eumQbRC_CombinationOrConditionObject{}

							var31.Name = types.StringPointerValue(var30.Name)

							var31.ThreatId = types.StringPointerValue(var30.ThreatId)
							var29.OrConditions = append(var29.OrConditions, var31)
						}
					}
					state.Signature.Combination.AndConditions = append(state.Signature.Combination.AndConditions, var29)
				}
			}

			state.Signature.Combination.OrderFree = types.BoolPointerValue(ans.Signature.Combination.OrderFree)

			if ans.Signature.Combination.TimeAttribute == nil {
				state.Signature.Combination.TimeAttribute = nil
			} else {
				state.Signature.Combination.TimeAttribute = &antiSpywareSignatureRsModel_eumQbRC_TimeAttributeObject{}

				state.Signature.Combination.TimeAttribute.Interval = types.Int64PointerValue(ans.Signature.Combination.TimeAttribute.Interval)

				state.Signature.Combination.TimeAttribute.Threshold = types.Int64PointerValue(ans.Signature.Combination.TimeAttribute.Threshold)

				state.Signature.Combination.TimeAttribute.TrackBy = types.StringPointerValue(ans.Signature.Combination.TimeAttribute.TrackBy)
			}
		}

		if len(ans.Signature.Standards) == 0 {
			state.Signature.Standards = nil
		} else {
			state.Signature.Standards = make([]antiSpywareSignatureRsModel_eumQbRC_StandardObject, 0, len(ans.Signature.Standards))
			for _, var32 := range ans.Signature.Standards {
				var33 := antiSpywareSignatureRsModel_eumQbRC_StandardObject{}

				if len(var32.AndConditions) == 0 {
					var33.AndConditions = nil
				} else {
					var33.AndConditions = make([]antiSpywareSignatureRsModel_eumQbRC_StandardAndConditionObject, 0, len(var32.AndConditions))
					for _, var34 := range var32.AndConditions {
						var35 := antiSpywareSignatureRsModel_eumQbRC_StandardAndConditionObject{}

						var35.Name = types.StringPointerValue(var34.Name)

						if len(var34.OrConditions) == 0 {
							var35.OrConditions = nil
						} else {
							var35.OrConditions = make([]antiSpywareSignatureRsModel_eumQbRC_StandardOrConditionObject, 0, len(var34.OrConditions))
							for _, var36 := range var34.OrConditions {
								var37 := antiSpywareSignatureRsModel_eumQbRC_StandardOrConditionObject{}

								var37.Name = types.StringPointerValue(var36.Name)

								if var36.Operator == nil {
									var37.Operator = nil
								} else {
									var37.Operator = &antiSpywareSignatureRsModel_eumQbRC_OperatorObject{}

									if var36.Operator.EqualTo == nil {
										var37.Operator.EqualTo = nil
									} else {
										var37.Operator.EqualTo = &antiSpywareSignatureRsModel_eumQbRC_EqualToObject{}

										var37.Operator.EqualTo.Context = types.StringPointerValue(var36.Operator.EqualTo.Context)

										var37.Operator.EqualTo.Negate = types.BoolPointerValue(var36.Operator.EqualTo.Negate)

										if len(var36.Operator.EqualTo.Qualifiers) == 0 {
											var37.Operator.EqualTo.Qualifiers = nil
										} else {
											var37.Operator.EqualTo.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_EqualToQualifierObject, 0, len(var36.Operator.EqualTo.Qualifiers))
											for _, var38 := range var36.Operator.EqualTo.Qualifiers {
												var39 := antiSpywareSignatureRsModel_eumQbRC_EqualToQualifierObject{}

												var39.Name = types.StringPointerValue(var38.Name)

												var39.Value = types.StringPointerValue(var38.Value)
												var37.Operator.EqualTo.Qualifiers = append(var37.Operator.EqualTo.Qualifiers, var39)
											}
										}

										var37.Operator.EqualTo.Value = types.Int64PointerValue(var36.Operator.EqualTo.Value)
									}

									if var36.Operator.GreaterThan == nil {
										var37.Operator.GreaterThan = nil
									} else {
										var37.Operator.GreaterThan = &antiSpywareSignatureRsModel_eumQbRC_GreaterThanObject{}

										var37.Operator.GreaterThan.Context = types.StringPointerValue(var36.Operator.GreaterThan.Context)

										if len(var36.Operator.GreaterThan.Qualifiers) == 0 {
											var37.Operator.GreaterThan.Qualifiers = nil
										} else {
											var37.Operator.GreaterThan.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_GreaterThanQualifierObject, 0, len(var36.Operator.GreaterThan.Qualifiers))
											for _, var40 := range var36.Operator.GreaterThan.Qualifiers {
												var41 := antiSpywareSignatureRsModel_eumQbRC_GreaterThanQualifierObject{}

												var41.Name = types.StringPointerValue(var40.Name)

												var41.Value = types.StringPointerValue(var40.Value)
												var37.Operator.GreaterThan.Qualifiers = append(var37.Operator.GreaterThan.Qualifiers, var41)
											}
										}

										var37.Operator.GreaterThan.Value = types.Int64PointerValue(var36.Operator.GreaterThan.Value)
									}

									if var36.Operator.LessThan == nil {
										var37.Operator.LessThan = nil
									} else {
										var37.Operator.LessThan = &antiSpywareSignatureRsModel_eumQbRC_LessThanObject{}

										var37.Operator.LessThan.Context = types.StringPointerValue(var36.Operator.LessThan.Context)

										if len(var36.Operator.LessThan.Qualifiers) == 0 {
											var37.Operator.LessThan.Qualifiers = nil
										} else {
											var37.Operator.LessThan.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_LessThanQualifierObject, 0, len(var36.Operator.LessThan.Qualifiers))
											for _, var42 := range var36.Operator.LessThan.Qualifiers {
												var43 := antiSpywareSignatureRsModel_eumQbRC_LessThanQualifierObject{}

												var43.Name = types.StringPointerValue(var42.Name)

												var43.Value = types.StringPointerValue(var42.Value)
												var37.Operator.LessThan.Qualifiers = append(var37.Operator.LessThan.Qualifiers, var43)
											}
										}

										var37.Operator.LessThan.Value = types.Int64PointerValue(var36.Operator.LessThan.Value)
									}

									if var36.Operator.PatternMatch == nil {
										var37.Operator.PatternMatch = nil
									} else {
										var37.Operator.PatternMatch = &antiSpywareSignatureRsModel_eumQbRC_PatternMatchObject{}

										var37.Operator.PatternMatch.Context = types.StringPointerValue(var36.Operator.PatternMatch.Context)

										var37.Operator.PatternMatch.Negate = types.BoolPointerValue(var36.Operator.PatternMatch.Negate)

										var37.Operator.PatternMatch.Pattern = types.StringPointerValue(var36.Operator.PatternMatch.Pattern)

										if len(var36.Operator.PatternMatch.Qualifiers) == 0 {
											var37.Operator.PatternMatch.Qualifiers = nil
										} else {
											var37.Operator.PatternMatch.Qualifiers = make([]antiSpywareSignatureRsModel_eumQbRC_PatternMatchQualifierObject, 0, len(var36.Operator.PatternMatch.Qualifiers))
											for _, var44 := range var36.Operator.PatternMatch.Qualifiers {
												var45 := antiSpywareSignatureRsModel_eumQbRC_PatternMatchQualifierObject{}

												var45.Name = types.StringPointerValue(var44.Name)

												var45.Value = types.StringPointerValue(var44.Value)
												var37.Operator.PatternMatch.Qualifiers = append(var37.Operator.PatternMatch.Qualifiers, var45)
											}
										}
									}
								}
								var35.OrConditions = append(var35.OrConditions, var37)
							}
						}
						var33.AndConditions = append(var33.AndConditions, var35)
					}
				}

				var33.Comment = types.StringPointerValue(var32.Comment)

				var33.Name = types.StringValue(var32.Name)

				var33.OrderFree = types.BoolPointerValue(var32.OrderFree)

				var33.Scope = types.StringPointerValue(var32.Scope)
				state.Signature.Standards = append(state.Signature.Standards, var33)
			}
		}
	}

	state.ThreatId = types.Int64Value(ans.ThreatId)

	state.Threatname = types.StringValue(ans.Threatname)

	var46, var47 := types.ListValueFrom(ctx, types.StringType, ans.Vendors)
	state.Vendors = var46
	resp.Diagnostics.Append(var47.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *antiSpywareSignatureResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_anti_spyware_signature",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := lhPcfTR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *antiSpywareSignatureResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
