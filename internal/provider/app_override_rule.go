package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	qhDZEMT "github.com/paloaltonetworks/scm-go/netsec/schemas/app/override/rules"
	xUpBHLw "github.com/paloaltonetworks/scm-go/netsec/services/appoverriderules"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &appOverrideRuleListDataSource{}
	_ datasource.DataSourceWithConfigure = &appOverrideRuleListDataSource{}
)

func NewAppOverrideRuleListDataSource() datasource.DataSource {
	return &appOverrideRuleListDataSource{}
}

type appOverrideRuleListDataSource struct {
	client *scm.Client
}

// appOverrideRuleListDsModel is the model.
type appOverrideRuleListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device   types.String `tfsdk:"device"`
	Folder   types.String `tfsdk:"folder"`
	Limit    types.Int64  `tfsdk:"limit"`
	Name     types.String `tfsdk:"name"`
	Offset   types.Int64  `tfsdk:"offset"`
	Position types.String `tfsdk:"position"`
	Snippet  types.String `tfsdk:"snippet"`

	// Output.
	Data []appOverrideRuleListDsModel_qhDZEMT_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type appOverrideRuleListDsModel_qhDZEMT_Config struct {
	Application       types.String `tfsdk:"application"`
	Description       types.String `tfsdk:"description"`
	Destinations      types.List   `tfsdk:"destinations"`
	Disabled          types.Bool   `tfsdk:"disabled"`
	Froms             types.List   `tfsdk:"froms"`
	GroupTag          types.String `tfsdk:"group_tag"`
	Id                types.String `tfsdk:"id"`
	Name              types.String `tfsdk:"name"`
	NegateDestination types.Bool   `tfsdk:"negate_destination"`
	NegateSource      types.Bool   `tfsdk:"negate_source"`
	Port              types.Int64  `tfsdk:"port"`
	Protocol          types.String `tfsdk:"protocol"`
	Sources           types.List   `tfsdk:"sources"`
	Tags              types.List   `tfsdk:"tags"`
	Tos               types.List   `tfsdk:"tos"`
}

// Metadata returns the data source type name.
func (d *appOverrideRuleListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_override_rule_list"
}

// Schema defines the schema for this listing data source.
func (d *appOverrideRuleListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"application":true, "description":true, "destination":true, "disabled":true, "from":true, "group_tag":true, "id":true, "name":true, "negate_destination":true, "negate_source":true, "port":true, "protocol":true, "source":true, "tag":true, "to":true} forceNew:map[string]bool(nil)
						"application": dsschema.StringAttribute{
							Description: "The Application param.",
							Computed:    true,
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param. String length must not exceed 1024 characters.",
							Computed:    true,
						},
						"destinations": dsschema.ListAttribute{
							Description: "The Destinations param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"disabled": dsschema.BoolAttribute{
							Description: "The Disabled param. Default: `false`.",
							Computed:    true,
						},
						"froms": dsschema.ListAttribute{
							Description: "The Froms param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"group_tag": dsschema.StringAttribute{
							Description: "The GroupTag param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.",
							Computed:    true,
						},
						"negate_destination": dsschema.BoolAttribute{
							Description: "The NegateDestination param. Default: `false`.",
							Computed:    true,
						},
						"negate_source": dsschema.BoolAttribute{
							Description: "The NegateSource param. Default: `false`.",
							Computed:    true,
						},
						"port": dsschema.Int64Attribute{
							Description: "The Port param. Value must be between 0 and 65535.",
							Computed:    true,
						},
						"protocol": dsschema.StringAttribute{
							Description: "The Protocol param. String must be one of these: `\"tcp\"`, `\"udp\"`.",
							Computed:    true,
						},
						"sources": dsschema.ListAttribute{
							Description: "The Sources param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"tags": dsschema.ListAttribute{
							Description: "The Tags param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"tos": dsschema.ListAttribute{
							Description: "The Tos param.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"position": dsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *appOverrideRuleListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *appOverrideRuleListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state appOverrideRuleListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_app_override_rule_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"position":                    state.Position.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := xUpBHLw.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := xUpBHLw.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Position = state.Position.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]appOverrideRuleListDsModel_qhDZEMT_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := appOverrideRuleListDsModel_qhDZEMT_Config{}

			var1.Application = types.StringValue(var0.Application)

			var1.Description = types.StringPointerValue(var0.Description)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Destinations)
			var1.Destinations = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Disabled = types.BoolPointerValue(var0.Disabled)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Froms)
			var1.Froms = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.GroupTag = types.StringPointerValue(var0.GroupTag)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.NegateDestination = types.BoolPointerValue(var0.NegateDestination)

			var1.NegateSource = types.BoolPointerValue(var0.NegateSource)

			var1.Port = types.Int64Value(var0.Port)

			var1.Protocol = types.StringValue(var0.Protocol)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Sources)
			var1.Sources = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.Tos)
			var1.Tos = var10
			resp.Diagnostics.Append(var11.Errors()...)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &appOverrideRuleDataSource{}
	_ datasource.DataSourceWithConfigure = &appOverrideRuleDataSource{}
)

func NewAppOverrideRuleDataSource() datasource.DataSource {
	return &appOverrideRuleDataSource{}
}

type appOverrideRuleDataSource struct {
	client *scm.Client
}

// appOverrideRuleDsModel is the model.
type appOverrideRuleDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Application  types.String `tfsdk:"application"`
	Description  types.String `tfsdk:"description"`
	Destinations types.List   `tfsdk:"destinations"`
	Disabled     types.Bool   `tfsdk:"disabled"`
	Froms        types.List   `tfsdk:"froms"`
	GroupTag     types.String `tfsdk:"group_tag"`
	// omit input: id
	Name              types.String `tfsdk:"name"`
	NegateDestination types.Bool   `tfsdk:"negate_destination"`
	NegateSource      types.Bool   `tfsdk:"negate_source"`
	Port              types.Int64  `tfsdk:"port"`
	Protocol          types.String `tfsdk:"protocol"`
	Sources           types.List   `tfsdk:"sources"`
	Tags              types.List   `tfsdk:"tags"`
	Tos               types.List   `tfsdk:"tos"`
}

// Metadata returns the data source type name.
func (d *appOverrideRuleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_override_rule"
}

// Schema defines the schema for this data source.
func (d *appOverrideRuleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"application":true, "description":true, "destination":true, "disabled":true, "from":true, "group_tag":true, "id":true, "name":true, "negate_destination":true, "negate_source":true, "port":true, "protocol":true, "source":true, "tag":true, "tfid":true, "to":true} forceNew:map[string]bool{"id":true}
			"application": dsschema.StringAttribute{
				Description: "The Application param.",
				Computed:    true,
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param. String length must not exceed 1024 characters.",
				Computed:    true,
			},
			"destinations": dsschema.ListAttribute{
				Description: "The Destinations param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"disabled": dsschema.BoolAttribute{
				Description: "The Disabled param. Default: `false`.",
				Computed:    true,
			},
			"froms": dsschema.ListAttribute{
				Description: "The Froms param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"group_tag": dsschema.StringAttribute{
				Description: "The GroupTag param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.",
				Computed:    true,
			},
			"negate_destination": dsschema.BoolAttribute{
				Description: "The NegateDestination param. Default: `false`.",
				Computed:    true,
			},
			"negate_source": dsschema.BoolAttribute{
				Description: "The NegateSource param. Default: `false`.",
				Computed:    true,
			},
			"port": dsschema.Int64Attribute{
				Description: "The Port param. Value must be between 0 and 65535.",
				Computed:    true,
			},
			"protocol": dsschema.StringAttribute{
				Description: "The Protocol param. String must be one of these: `\"tcp\"`, `\"udp\"`.",
				Computed:    true,
			},
			"sources": dsschema.ListAttribute{
				Description: "The Sources param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tags": dsschema.ListAttribute{
				Description: "The Tags param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"tos": dsschema.ListAttribute{
				Description: "The Tos param.",
				Computed:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (d *appOverrideRuleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *appOverrideRuleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state appOverrideRuleDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_app_override_rule",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := xUpBHLw.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := xUpBHLw.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Application = types.StringValue(ans.Application)

	state.Description = types.StringPointerValue(ans.Description)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	state.Port = types.Int64Value(ans.Port)

	state.Protocol = types.StringValue(ans.Protocol)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var4
	resp.Diagnostics.Append(var5.Errors()...)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var8
	resp.Diagnostics.Append(var9.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &appOverrideRuleResource{}
	_ resource.ResourceWithConfigure   = &appOverrideRuleResource{}
	_ resource.ResourceWithImportState = &appOverrideRuleResource{}
)

func NewAppOverrideRuleResource() resource.Resource {
	return &appOverrideRuleResource{}
}

type appOverrideRuleResource struct {
	client *scm.Client
}

// appOverrideRuleRsModel is the model.
type appOverrideRuleRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Application       types.String `tfsdk:"application"`
	Description       types.String `tfsdk:"description"`
	Destinations      types.List   `tfsdk:"destinations"`
	Device            types.String `tfsdk:"device"`
	Disabled          types.Bool   `tfsdk:"disabled"`
	Folder            types.String `tfsdk:"folder"`
	Froms             types.List   `tfsdk:"froms"`
	GroupTag          types.String `tfsdk:"group_tag"`
	Id                types.String `tfsdk:"id"`
	Name              types.String `tfsdk:"name"`
	NegateDestination types.Bool   `tfsdk:"negate_destination"`
	NegateSource      types.Bool   `tfsdk:"negate_source"`
	Port              types.Int64  `tfsdk:"port"`
	Position          types.String `tfsdk:"position"`
	Protocol          types.String `tfsdk:"protocol"`
	Snippet           types.String `tfsdk:"snippet"`
	Sources           types.List   `tfsdk:"sources"`
	Tags              types.List   `tfsdk:"tags"`
	Tos               types.List   `tfsdk:"tos"`

	// Output.
	// omit input: application
	// omit input: description
	// omit input: destinations
	// omit input: disabled
	// omit input: froms
	// omit input: group_tag
	// omit input: id
	// omit input: name
	// omit input: negate_destination
	// omit input: negate_source
	// omit input: port
	// omit input: protocol
	// omit input: sources
	// omit input: tags
	// omit input: tos
}

// Metadata returns the data source type name.
func (r *appOverrideRuleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_app_override_rule"
}

// Schema defines the schema for this data source.
func (r *appOverrideRuleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"application":true, "description":true, "destination":true, "device":true, "disabled":true, "folder":true, "from":true, "group_tag":true, "id":true, "name":true, "negate_destination":true, "negate_source":true, "port":true, "position":true, "protocol":true, "snippet":true, "source":true, "tag":true, "to":true} outputs:map[string]bool{"application":true, "description":true, "destination":true, "disabled":true, "from":true, "group_tag":true, "id":true, "name":true, "negate_destination":true, "negate_source":true, "port":true, "protocol":true, "source":true, "tag":true, "tfid":true, "to":true} forceNew:map[string]bool{"device":true, "folder":true, "position":true, "snippet":true}
			"application": rsschema.StringAttribute{
				Description: "The Application param.",
				Required:    true,
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param. String length must not exceed 1024 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1024),
				},
			},
			"destinations": rsschema.ListAttribute{
				Description: "The Destinations param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"disabled": rsschema.BoolAttribute{
				Description: "The Disabled param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"froms": rsschema.ListAttribute{
				Description: "The Froms param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"group_tag": rsschema.StringAttribute{
				Description: "The GroupTag param.",
				Optional:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param. String length must not exceed 63 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9._-]+$"), ""),
				},
			},
			"negate_destination": rsschema.BoolAttribute{
				Description: "The NegateDestination param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"negate_source": rsschema.BoolAttribute{
				Description: "The NegateSource param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"port": rsschema.Int64Attribute{
				Description: "The Port param. Value must be between 0 and 65535.",
				Required:    true,
				Validators: []validator.Int64{
					int64validator.Between(0, 65535),
				},
			},
			"position": rsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("pre"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("pre", "post"),
				},
			},
			"protocol": rsschema.StringAttribute{
				Description: "The Protocol param. String must be one of these: `\"tcp\"`, `\"udp\"`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("tcp", "udp"),
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"sources": rsschema.ListAttribute{
				Description: "The Sources param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"tags": rsschema.ListAttribute{
				Description: "The Tags param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"tos": rsschema.ListAttribute{
				Description: "The Tos param.",
				Required:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (r *appOverrideRuleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *appOverrideRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state appOverrideRuleRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_app_override_rule",
		"terraform_provider_function": "Create",
		"position":                    state.Position.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := xUpBHLw.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xUpBHLw.CreateInput{}

	input.Position = state.Position.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &qhDZEMT.Config{}

	input.Request.Application = state.Application.ValueString()

	input.Request.Description = state.Description.ValueStringPointer()

	resp.Diagnostics.Append(state.Destinations.ElementsAs(ctx, &input.Request.Destinations, false)...)
	//if len(state.Destinations) != 0 {
	//    input.Request.Destinations = make([]string, 0, len(state.Destinations))
	//    for _, var0 := range state.Destinations {
	//        input.Request.Destinations = append(input.Request.Destinations, var0.ValueString())
	//    }
	//}

	input.Request.Disabled = state.Disabled.ValueBoolPointer()

	resp.Diagnostics.Append(state.Froms.ElementsAs(ctx, &input.Request.Froms, false)...)
	//if len(state.Froms) != 0 {
	//    input.Request.Froms = make([]string, 0, len(state.Froms))
	//    for _, var1 := range state.Froms {
	//        input.Request.Froms = append(input.Request.Froms, var1.ValueString())
	//    }
	//}

	input.Request.GroupTag = state.GroupTag.ValueStringPointer()

	input.Request.Name = state.Name.ValueString()

	input.Request.NegateDestination = state.NegateDestination.ValueBoolPointer()

	input.Request.NegateSource = state.NegateSource.ValueBoolPointer()

	input.Request.Port = state.Port.ValueInt64()

	input.Request.Protocol = state.Protocol.ValueString()

	resp.Diagnostics.Append(state.Sources.ElementsAs(ctx, &input.Request.Sources, false)...)
	//if len(state.Sources) != 0 {
	//    input.Request.Sources = make([]string, 0, len(state.Sources))
	//    for _, var2 := range state.Sources {
	//        input.Request.Sources = append(input.Request.Sources, var2.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Tags.ElementsAs(ctx, &input.Request.Tags, false)...)
	//if len(state.Tags) != 0 {
	//    input.Request.Tags = make([]string, 0, len(state.Tags))
	//    for _, var3 := range state.Tags {
	//        input.Request.Tags = append(input.Request.Tags, var3.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Tos.ElementsAs(ctx, &input.Request.Tos, false)...)
	//if len(state.Tos) != 0 {
	//    input.Request.Tos = make([]string, 0, len(state.Tos))
	//    for _, var4 := range state.Tos {
	//        input.Request.Tos = append(input.Request.Tos, var4.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Application = types.StringValue(ans.Application)

	state.Description = types.StringPointerValue(ans.Description)

	var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var5
	resp.Diagnostics.Append(var6.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var7
	resp.Diagnostics.Append(var8.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	state.Port = types.Int64Value(ans.Port)

	state.Protocol = types.StringValue(ans.Protocol)

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var9
	resp.Diagnostics.Append(var10.Errors()...)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var13
	resp.Diagnostics.Append(var14.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *appOverrideRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state appOverrideRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_app_override_rule",
		"locMap":                      map[string]int{"device": 3, "folder": 1, "id": 4, "position": 0, "snippet": 2},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := xUpBHLw.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xUpBHLw.ReadInput{}

	input.Id = tokens[4]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Position = types.StringNull()
	} else {
		state.Position = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[2])
	}

	if tokens[3] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[3])
	}
	state.Tfid = savestate.Tfid

	state.Application = types.StringValue(ans.Application)

	state.Description = types.StringPointerValue(ans.Description)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	state.Port = types.Int64Value(ans.Port)

	state.Protocol = types.StringValue(ans.Protocol)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var4
	resp.Diagnostics.Append(var5.Errors()...)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var8
	resp.Diagnostics.Append(var9.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *appOverrideRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state appOverrideRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_app_override_rule",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := xUpBHLw.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xUpBHLw.UpdateInput{}

	if tokens[4] != "" {
		input.Id = tokens[4]
	}
	input.Request = &qhDZEMT.Config{}

	input.Request.Application = plan.Application.ValueString()

	input.Request.Description = plan.Description.ValueStringPointer()

	resp.Diagnostics.Append(plan.Destinations.ElementsAs(ctx, &input.Request.Destinations, false)...)
	//if len(plan.Destinations) != 0 {
	//    input.Request.Destinations = make([]string, 0, len(plan.Destinations))
	//    for _, var0 := range plan.Destinations {
	//        input.Request.Destinations = append(input.Request.Destinations, var0.ValueString())
	//    }
	//}

	input.Request.Disabled = plan.Disabled.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Froms.ElementsAs(ctx, &input.Request.Froms, false)...)
	//if len(plan.Froms) != 0 {
	//    input.Request.Froms = make([]string, 0, len(plan.Froms))
	//    for _, var1 := range plan.Froms {
	//        input.Request.Froms = append(input.Request.Froms, var1.ValueString())
	//    }
	//}

	input.Request.GroupTag = plan.GroupTag.ValueStringPointer()

	input.Request.Name = plan.Name.ValueString()

	input.Request.NegateDestination = plan.NegateDestination.ValueBoolPointer()

	input.Request.NegateSource = plan.NegateSource.ValueBoolPointer()

	input.Request.Port = plan.Port.ValueInt64()

	input.Request.Protocol = plan.Protocol.ValueString()

	resp.Diagnostics.Append(plan.Sources.ElementsAs(ctx, &input.Request.Sources, false)...)
	//if len(plan.Sources) != 0 {
	//    input.Request.Sources = make([]string, 0, len(plan.Sources))
	//    for _, var2 := range plan.Sources {
	//        input.Request.Sources = append(input.Request.Sources, var2.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Tags.ElementsAs(ctx, &input.Request.Tags, false)...)
	//if len(plan.Tags) != 0 {
	//    input.Request.Tags = make([]string, 0, len(plan.Tags))
	//    for _, var3 := range plan.Tags {
	//        input.Request.Tags = append(input.Request.Tags, var3.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Tos.ElementsAs(ctx, &input.Request.Tos, false)...)
	//if len(plan.Tos) != 0 {
	//    input.Request.Tos = make([]string, 0, len(plan.Tos))
	//    for _, var4 := range plan.Tos {
	//        input.Request.Tos = append(input.Request.Tos, var4.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Application = types.StringValue(ans.Application)

	state.Description = types.StringPointerValue(ans.Description)

	var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var5
	resp.Diagnostics.Append(var6.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var7
	resp.Diagnostics.Append(var8.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	state.Port = types.Int64Value(ans.Port)

	state.Protocol = types.StringValue(ans.Protocol)

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var9
	resp.Diagnostics.Append(var10.Errors()...)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var13
	resp.Diagnostics.Append(var14.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *appOverrideRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_app_override_rule",
		"locMap":                      map[string]int{"device": 3, "folder": 1, "id": 4, "position": 0, "snippet": 2},
		"tokens":                      tokens,
	})

	svc := xUpBHLw.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xUpBHLw.DeleteInput{}

	input.Id = tokens[4]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *appOverrideRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
