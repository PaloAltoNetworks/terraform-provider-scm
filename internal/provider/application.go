package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	yJkkSzS "github.com/paloaltonetworks/scm-go/netsec/schemas/applications"
	kJVbXva "github.com/paloaltonetworks/scm-go/netsec/services/applications"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &applicationListDataSource{}
	_ datasource.DataSourceWithConfigure = &applicationListDataSource{}
)

func NewApplicationListDataSource() datasource.DataSource {
	return &applicationListDataSource{}
}

type applicationListDataSource struct {
	client *scm.Client
}

// applicationListDsModel is the model.
type applicationListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []applicationListDsModel_yJkkSzS_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type applicationListDsModel_yJkkSzS_Config struct {
	AbleToTransferFile     types.Bool                                       `tfsdk:"able_to_transfer_file"`
	AlgDisableCapability   types.String                                     `tfsdk:"alg_disable_capability"`
	Category               types.String                                     `tfsdk:"category"`
	ConsumeBigBandwidth    types.Bool                                       `tfsdk:"consume_big_bandwidth"`
	DataIdent              types.Bool                                       `tfsdk:"data_ident"`
	Default                *applicationListDsModel_yJkkSzS_DefaultObject    `tfsdk:"default"`
	Description            types.String                                     `tfsdk:"description"`
	EvasiveBehavior        types.Bool                                       `tfsdk:"evasive_behavior"`
	FileTypeIdent          types.Bool                                       `tfsdk:"file_type_ident"`
	HasKnownVulnerability  types.Bool                                       `tfsdk:"has_known_vulnerability"`
	Id                     types.String                                     `tfsdk:"id"`
	Name                   types.String                                     `tfsdk:"name"`
	NoAppidCaching         types.Bool                                       `tfsdk:"no_appid_caching"`
	ParentApp              types.String                                     `tfsdk:"parent_app"`
	PervasiveUse           types.Bool                                       `tfsdk:"pervasive_use"`
	ProneToMisuse          types.Bool                                       `tfsdk:"prone_to_misuse"`
	Risk                   types.Int64                                      `tfsdk:"risk"`
	Signatures             []applicationListDsModel_yJkkSzS_SignatureObject `tfsdk:"signatures"`
	Subcategory            types.String                                     `tfsdk:"subcategory"`
	TcpHalfClosedTimeout   types.Int64                                      `tfsdk:"tcp_half_closed_timeout"`
	TcpTimeWaitTimeout     types.Int64                                      `tfsdk:"tcp_time_wait_timeout"`
	TcpTimeout             types.Int64                                      `tfsdk:"tcp_timeout"`
	Technology             types.String                                     `tfsdk:"technology"`
	Timeout                types.Int64                                      `tfsdk:"timeout"`
	TunnelApplications     types.Bool                                       `tfsdk:"tunnel_applications"`
	TunnelOtherApplication types.Bool                                       `tfsdk:"tunnel_other_application"`
	UdpTimeout             types.Int64                                      `tfsdk:"udp_timeout"`
	UsedByMalware          types.Bool                                       `tfsdk:"used_by_malware"`
	VirusIdent             types.Bool                                       `tfsdk:"virus_ident"`
}

type applicationListDsModel_yJkkSzS_DefaultObject struct {
	IdentByIcmp6Type  *applicationListDsModel_yJkkSzS_IdentByIcmp6TypeObject `tfsdk:"ident_by_icmp6_type"`
	IdentByIcmpType   *applicationListDsModel_yJkkSzS_IdentByIcmpTypeObject  `tfsdk:"ident_by_icmp_type"`
	IdentByIpProtocol types.String                                           `tfsdk:"ident_by_ip_protocol"`
	Ports             types.List                                             `tfsdk:"ports"`
}

type applicationListDsModel_yJkkSzS_IdentByIcmp6TypeObject struct {
	Code types.String `tfsdk:"code"`
	Type types.String `tfsdk:"type"`
}

type applicationListDsModel_yJkkSzS_IdentByIcmpTypeObject struct {
	Code types.String `tfsdk:"code"`
	Type types.String `tfsdk:"type"`
}

type applicationListDsModel_yJkkSzS_SignatureObject struct {
	AndConditions []applicationListDsModel_yJkkSzS_AndConditionObject `tfsdk:"and_conditions"`
	Comment       types.String                                        `tfsdk:"comment"`
	Name          types.String                                        `tfsdk:"name"`
	OrderFree     types.Bool                                          `tfsdk:"order_free"`
	Scope         types.String                                        `tfsdk:"scope"`
}

type applicationListDsModel_yJkkSzS_AndConditionObject struct {
	Name         types.String                                       `tfsdk:"name"`
	OrConditions []applicationListDsModel_yJkkSzS_OrConditionObject `tfsdk:"or_conditions"`
}

type applicationListDsModel_yJkkSzS_OrConditionObject struct {
	Name     types.String                                  `tfsdk:"name"`
	Operator applicationListDsModel_yJkkSzS_OperatorObject `tfsdk:"operator"`
}

type applicationListDsModel_yJkkSzS_OperatorObject struct {
	EqualTo      *applicationListDsModel_yJkkSzS_EqualToObject      `tfsdk:"equal_to"`
	GreaterThan  *applicationListDsModel_yJkkSzS_GreaterThanObject  `tfsdk:"greater_than"`
	LessThan     *applicationListDsModel_yJkkSzS_LessThanObject     `tfsdk:"less_than"`
	PatternMatch *applicationListDsModel_yJkkSzS_PatternMatchObject `tfsdk:"pattern_match"`
}

type applicationListDsModel_yJkkSzS_EqualToObject struct {
	Context  types.String `tfsdk:"context"`
	Mask     types.String `tfsdk:"mask"`
	Position types.String `tfsdk:"position"`
	Value    types.String `tfsdk:"value"`
}

type applicationListDsModel_yJkkSzS_GreaterThanObject struct {
	Context    types.String                                                `tfsdk:"context"`
	Qualifiers []applicationListDsModel_yJkkSzS_GreaterThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                                 `tfsdk:"value"`
}

type applicationListDsModel_yJkkSzS_GreaterThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type applicationListDsModel_yJkkSzS_LessThanObject struct {
	Context    types.String                                             `tfsdk:"context"`
	Qualifiers []applicationListDsModel_yJkkSzS_LessThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                              `tfsdk:"value"`
}

type applicationListDsModel_yJkkSzS_LessThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type applicationListDsModel_yJkkSzS_PatternMatchObject struct {
	Context    types.String                                                 `tfsdk:"context"`
	Pattern    types.String                                                 `tfsdk:"pattern"`
	Qualifiers []applicationListDsModel_yJkkSzS_PatternMatchQualifierObject `tfsdk:"qualifiers"`
}

type applicationListDsModel_yJkkSzS_PatternMatchQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (d *applicationListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application_list"
}

// Schema defines the schema for this listing data source.
func (d *applicationListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"able_to_transfer_file":true, "alg_disable_capability":true, "category":true, "consume_big_bandwidth":true, "data_ident":true, "default":true, "description":true, "evasive_behavior":true, "file_type_ident":true, "has_known_vulnerability":true, "id":true, "name":true, "no_appid_caching":true, "parent_app":true, "pervasive_use":true, "prone_to_misuse":true, "risk":true, "signature":true, "subcategory":true, "tcp_half_closed_timeout":true, "tcp_time_wait_timeout":true, "tcp_timeout":true, "technology":true, "timeout":true, "tunnel_applications":true, "tunnel_other_application":true, "udp_timeout":true, "used_by_malware":true, "virus_ident":true} forceNew:map[string]bool(nil)
						"able_to_transfer_file": dsschema.BoolAttribute{
							Description: "The AbleToTransferFile param.",
							Computed:    true,
						},
						"alg_disable_capability": dsschema.StringAttribute{
							Description: "The AlgDisableCapability param. String length must not exceed 127 characters.",
							Computed:    true,
						},
						"category": dsschema.StringAttribute{
							Description: "The Category param.",
							Computed:    true,
						},
						"consume_big_bandwidth": dsschema.BoolAttribute{
							Description: "The ConsumeBigBandwidth param.",
							Computed:    true,
						},
						"data_ident": dsschema.BoolAttribute{
							Description: "The DataIdent param.",
							Computed:    true,
						},
						"default": dsschema.SingleNestedAttribute{
							Description: "The Default param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"ident_by_icmp6_type":true, "ident_by_icmp_type":true, "ident_by_ip_protocol":true, "port":true} forceNew:map[string]bool(nil)
								"ident_by_icmp6_type": dsschema.SingleNestedAttribute{
									Description: "The IdentByIcmp6Type param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"code":true, "type":true} forceNew:map[string]bool(nil)
										"code": dsschema.StringAttribute{
											Description: "The Code param.",
											Computed:    true,
										},
										"type": dsschema.StringAttribute{
											Description: "The Type param.",
											Computed:    true,
										},
									},
								},
								"ident_by_icmp_type": dsschema.SingleNestedAttribute{
									Description: "The IdentByIcmpType param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"code":true, "type":true} forceNew:map[string]bool(nil)
										"code": dsschema.StringAttribute{
											Description: "The Code param.",
											Computed:    true,
										},
										"type": dsschema.StringAttribute{
											Description: "The Type param.",
											Computed:    true,
										},
									},
								},
								"ident_by_ip_protocol": dsschema.StringAttribute{
									Description: "The IdentByIpProtocol param.",
									Computed:    true,
								},
								"ports": dsschema.ListAttribute{
									Description: "The Ports param.",
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param. String length must not exceed 1023 characters.",
							Computed:    true,
						},
						"evasive_behavior": dsschema.BoolAttribute{
							Description: "The EvasiveBehavior param.",
							Computed:    true,
						},
						"file_type_ident": dsschema.BoolAttribute{
							Description: "The FileTypeIdent param.",
							Computed:    true,
						},
						"has_known_vulnerability": dsschema.BoolAttribute{
							Description: "The HasKnownVulnerability param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
							Computed:    true,
						},
						"no_appid_caching": dsschema.BoolAttribute{
							Description: "The NoAppidCaching param.",
							Computed:    true,
						},
						"parent_app": dsschema.StringAttribute{
							Description: "The ParentApp param. String length must not exceed 127 characters.",
							Computed:    true,
						},
						"pervasive_use": dsschema.BoolAttribute{
							Description: "The PervasiveUse param.",
							Computed:    true,
						},
						"prone_to_misuse": dsschema.BoolAttribute{
							Description: "The ProneToMisuse param.",
							Computed:    true,
						},
						"risk": dsschema.Int64Attribute{
							Description: "The Risk param. Value must be between 1 and 5.",
							Computed:    true,
						},
						"signatures": dsschema.ListNestedAttribute{
							Description: "The Signatures param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"and_condition":true, "comment":true, "name":true, "order_free":true, "scope":true} forceNew:map[string]bool(nil)
									"and_conditions": dsschema.ListNestedAttribute{
										Description: "The AndConditions param.",
										Computed:    true,
										NestedObject: dsschema.NestedAttributeObject{
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
												"name": dsschema.StringAttribute{
													Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
													Computed:    true,
												},
												"or_conditions": dsschema.ListNestedAttribute{
													Description: "The OrConditions param.",
													Computed:    true,
													NestedObject: dsschema.NestedAttributeObject{
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "operator":true} forceNew:map[string]bool(nil)
															"name": dsschema.StringAttribute{
																Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																Computed:    true,
															},
															"operator": dsschema.SingleNestedAttribute{
																Description: "The Operator param.",
																Computed:    true,
																Attributes: map[string]dsschema.Attribute{
																	// inputs:map[string]bool{} outputs:map[string]bool{"equal_to":true, "greater_than":true, "less_than":true, "pattern_match":true} forceNew:map[string]bool(nil)
																	"equal_to": dsschema.SingleNestedAttribute{
																		Description: "The EqualTo param.",
																		Computed:    true,
																		Attributes: map[string]dsschema.Attribute{
																			// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "mask":true, "position":true, "value":true} forceNew:map[string]bool(nil)
																			"context": dsschema.StringAttribute{
																				Description: "The Context param.",
																				Computed:    true,
																			},
																			"mask": dsschema.StringAttribute{
																				Description: "4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.",
																				Computed:    true,
																			},
																			"position": dsschema.StringAttribute{
																				Description: "The Position param. String length must not exceed 127 characters.",
																				Computed:    true,
																			},
																			"value": dsschema.StringAttribute{
																				Description: "The Value param. String length must not exceed 10 characters.",
																				Computed:    true,
																			},
																		},
																	},
																	"greater_than": dsschema.SingleNestedAttribute{
																		Description: "The GreaterThan param.",
																		Computed:    true,
																		Attributes: map[string]dsschema.Attribute{
																			// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																			"context": dsschema.StringAttribute{
																				Description: "The Context param. String length must not exceed 127 characters.",
																				Computed:    true,
																			},
																			"qualifiers": dsschema.ListNestedAttribute{
																				Description: "The Qualifiers param.",
																				Computed:    true,
																				NestedObject: dsschema.NestedAttributeObject{
																					Attributes: map[string]dsschema.Attribute{
																						// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																						"name": dsschema.StringAttribute{
																							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																							Computed:    true,
																						},
																						"value": dsschema.StringAttribute{
																							Description: "The Value param.",
																							Computed:    true,
																						},
																					},
																				},
																			},
																			"value": dsschema.Int64Attribute{
																				Description: "The Value param. Value must be between 0 and 4294967295.",
																				Computed:    true,
																			},
																		},
																	},
																	"less_than": dsschema.SingleNestedAttribute{
																		Description: "The LessThan param.",
																		Computed:    true,
																		Attributes: map[string]dsschema.Attribute{
																			// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																			"context": dsschema.StringAttribute{
																				Description: "The Context param. String length must not exceed 127 characters.",
																				Computed:    true,
																			},
																			"qualifiers": dsschema.ListNestedAttribute{
																				Description: "The Qualifiers param.",
																				Computed:    true,
																				NestedObject: dsschema.NestedAttributeObject{
																					Attributes: map[string]dsschema.Attribute{
																						// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																						"name": dsschema.StringAttribute{
																							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																							Computed:    true,
																						},
																						"value": dsschema.StringAttribute{
																							Description: "The Value param.",
																							Computed:    true,
																						},
																					},
																				},
																			},
																			"value": dsschema.Int64Attribute{
																				Description: "The Value param. Value must be between 0 and 4294967295.",
																				Computed:    true,
																			},
																		},
																	},
																	"pattern_match": dsschema.SingleNestedAttribute{
																		Description: "The PatternMatch param.",
																		Computed:    true,
																		Attributes: map[string]dsschema.Attribute{
																			// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "pattern":true, "qualifier":true} forceNew:map[string]bool(nil)
																			"context": dsschema.StringAttribute{
																				Description: "The Context param. String length must not exceed 127 characters.",
																				Computed:    true,
																			},
																			"pattern": dsschema.StringAttribute{
																				Description: "The Pattern param. String length must not exceed 127 characters.",
																				Computed:    true,
																			},
																			"qualifiers": dsschema.ListNestedAttribute{
																				Description: "The Qualifiers param.",
																				Computed:    true,
																				NestedObject: dsschema.NestedAttributeObject{
																					Attributes: map[string]dsschema.Attribute{
																						// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																						"name": dsschema.StringAttribute{
																							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																							Computed:    true,
																						},
																						"value": dsschema.StringAttribute{
																							Description: "The Value param.",
																							Computed:    true,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									"comment": dsschema.StringAttribute{
										Description: "The Comment param. String length must not exceed 256 characters.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
										Computed:    true,
									},
									"order_free": dsschema.BoolAttribute{
										Description: "The OrderFree param. Default: `false`.",
										Computed:    true,
									},
									"scope": dsschema.StringAttribute{
										Description: "The Scope param. String must be one of these: `\"protocol-data-unit\"`, `\"session\"`. Default: `\"protocol-data-unit\"`.",
										Computed:    true,
									},
								},
							},
						},
						"subcategory": dsschema.StringAttribute{
							Description: "The Subcategory param. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"tcp_half_closed_timeout": dsschema.Int64Attribute{
							Description: "timeout for half-close session in seconds. Value must be between 1 and 604800.",
							Computed:    true,
						},
						"tcp_time_wait_timeout": dsschema.Int64Attribute{
							Description: "timeout for session in time_wait state in seconds. Value must be between 1 and 600.",
							Computed:    true,
						},
						"tcp_timeout": dsschema.Int64Attribute{
							Description: "timeout in seconds. Value must be between 0 and 604800.",
							Computed:    true,
						},
						"technology": dsschema.StringAttribute{
							Description: "The Technology param. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"timeout": dsschema.Int64Attribute{
							Description: "timeout in seconds. Value must be between 0 and 604800.",
							Computed:    true,
						},
						"tunnel_applications": dsschema.BoolAttribute{
							Description: "The TunnelApplications param.",
							Computed:    true,
						},
						"tunnel_other_application": dsschema.BoolAttribute{
							Description: "The TunnelOtherApplication param.",
							Computed:    true,
						},
						"udp_timeout": dsschema.Int64Attribute{
							Description: "timeout in seconds. Value must be between 0 and 604800.",
							Computed:    true,
						},
						"used_by_malware": dsschema.BoolAttribute{
							Description: "The UsedByMalware param.",
							Computed:    true,
						},
						"virus_ident": dsschema.BoolAttribute{
							Description: "The VirusIdent param.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *applicationListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *applicationListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state applicationListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_application_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := kJVbXva.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]applicationListDsModel_yJkkSzS_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := applicationListDsModel_yJkkSzS_Config{}

			var1.AbleToTransferFile = types.BoolPointerValue(var0.AbleToTransferFile)

			var1.AlgDisableCapability = types.StringPointerValue(var0.AlgDisableCapability)

			var1.Category = types.StringValue(var0.Category)

			var1.ConsumeBigBandwidth = types.BoolPointerValue(var0.ConsumeBigBandwidth)

			var1.DataIdent = types.BoolPointerValue(var0.DataIdent)

			if var0.Default == nil {
				var1.Default = nil
			} else {
				var1.Default = &applicationListDsModel_yJkkSzS_DefaultObject{}

				if var0.Default.IdentByIcmp6Type == nil {
					var1.Default.IdentByIcmp6Type = nil
				} else {
					var1.Default.IdentByIcmp6Type = &applicationListDsModel_yJkkSzS_IdentByIcmp6TypeObject{}

					var1.Default.IdentByIcmp6Type.Code = types.StringPointerValue(var0.Default.IdentByIcmp6Type.Code)

					var1.Default.IdentByIcmp6Type.Type = types.StringValue(var0.Default.IdentByIcmp6Type.Type)
				}

				if var0.Default.IdentByIcmpType == nil {
					var1.Default.IdentByIcmpType = nil
				} else {
					var1.Default.IdentByIcmpType = &applicationListDsModel_yJkkSzS_IdentByIcmpTypeObject{}

					var1.Default.IdentByIcmpType.Code = types.StringPointerValue(var0.Default.IdentByIcmpType.Code)

					var1.Default.IdentByIcmpType.Type = types.StringValue(var0.Default.IdentByIcmpType.Type)
				}

				var1.Default.IdentByIpProtocol = types.StringPointerValue(var0.Default.IdentByIpProtocol)

				var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Default.Ports)
				var1.Default.Ports = var2
				resp.Diagnostics.Append(var3.Errors()...)
			}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.EvasiveBehavior = types.BoolPointerValue(var0.EvasiveBehavior)

			var1.FileTypeIdent = types.BoolPointerValue(var0.FileTypeIdent)

			var1.HasKnownVulnerability = types.BoolPointerValue(var0.HasKnownVulnerability)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.NoAppidCaching = types.BoolPointerValue(var0.NoAppidCaching)

			var1.ParentApp = types.StringPointerValue(var0.ParentApp)

			var1.PervasiveUse = types.BoolPointerValue(var0.PervasiveUse)

			var1.ProneToMisuse = types.BoolPointerValue(var0.ProneToMisuse)

			var1.Risk = types.Int64Value(var0.Risk)

			if len(var0.Signatures) == 0 {
				var1.Signatures = nil
			} else {
				var1.Signatures = make([]applicationListDsModel_yJkkSzS_SignatureObject, 0, len(var0.Signatures))
				for _, var4 := range var0.Signatures {
					var5 := applicationListDsModel_yJkkSzS_SignatureObject{}

					if len(var4.AndConditions) == 0 {
						var5.AndConditions = nil
					} else {
						var5.AndConditions = make([]applicationListDsModel_yJkkSzS_AndConditionObject, 0, len(var4.AndConditions))
						for _, var6 := range var4.AndConditions {
							var7 := applicationListDsModel_yJkkSzS_AndConditionObject{}

							var7.Name = types.StringValue(var6.Name)

							if len(var6.OrConditions) == 0 {
								var7.OrConditions = nil
							} else {
								var7.OrConditions = make([]applicationListDsModel_yJkkSzS_OrConditionObject, 0, len(var6.OrConditions))
								for _, var8 := range var6.OrConditions {
									var9 := applicationListDsModel_yJkkSzS_OrConditionObject{}

									var9.Name = types.StringValue(var8.Name)

									var9.Operator = applicationListDsModel_yJkkSzS_OperatorObject{}

									if var8.Operator.EqualTo == nil {
										var9.Operator.EqualTo = nil
									} else {
										var9.Operator.EqualTo = &applicationListDsModel_yJkkSzS_EqualToObject{}

										var9.Operator.EqualTo.Context = types.StringValue(var8.Operator.EqualTo.Context)

										var9.Operator.EqualTo.Mask = types.StringPointerValue(var8.Operator.EqualTo.Mask)

										var9.Operator.EqualTo.Position = types.StringPointerValue(var8.Operator.EqualTo.Position)

										var9.Operator.EqualTo.Value = types.StringValue(var8.Operator.EqualTo.Value)
									}

									if var8.Operator.GreaterThan == nil {
										var9.Operator.GreaterThan = nil
									} else {
										var9.Operator.GreaterThan = &applicationListDsModel_yJkkSzS_GreaterThanObject{}

										var9.Operator.GreaterThan.Context = types.StringValue(var8.Operator.GreaterThan.Context)

										if len(var8.Operator.GreaterThan.Qualifiers) == 0 {
											var9.Operator.GreaterThan.Qualifiers = nil
										} else {
											var9.Operator.GreaterThan.Qualifiers = make([]applicationListDsModel_yJkkSzS_GreaterThanQualifierObject, 0, len(var8.Operator.GreaterThan.Qualifiers))
											for _, var10 := range var8.Operator.GreaterThan.Qualifiers {
												var11 := applicationListDsModel_yJkkSzS_GreaterThanQualifierObject{}

												var11.Name = types.StringValue(var10.Name)

												var11.Value = types.StringValue(var10.Value)
												var9.Operator.GreaterThan.Qualifiers = append(var9.Operator.GreaterThan.Qualifiers, var11)
											}
										}

										var9.Operator.GreaterThan.Value = types.Int64Value(var8.Operator.GreaterThan.Value)
									}

									if var8.Operator.LessThan == nil {
										var9.Operator.LessThan = nil
									} else {
										var9.Operator.LessThan = &applicationListDsModel_yJkkSzS_LessThanObject{}

										var9.Operator.LessThan.Context = types.StringValue(var8.Operator.LessThan.Context)

										if len(var8.Operator.LessThan.Qualifiers) == 0 {
											var9.Operator.LessThan.Qualifiers = nil
										} else {
											var9.Operator.LessThan.Qualifiers = make([]applicationListDsModel_yJkkSzS_LessThanQualifierObject, 0, len(var8.Operator.LessThan.Qualifiers))
											for _, var12 := range var8.Operator.LessThan.Qualifiers {
												var13 := applicationListDsModel_yJkkSzS_LessThanQualifierObject{}

												var13.Name = types.StringValue(var12.Name)

												var13.Value = types.StringValue(var12.Value)
												var9.Operator.LessThan.Qualifiers = append(var9.Operator.LessThan.Qualifiers, var13)
											}
										}

										var9.Operator.LessThan.Value = types.Int64Value(var8.Operator.LessThan.Value)
									}

									if var8.Operator.PatternMatch == nil {
										var9.Operator.PatternMatch = nil
									} else {
										var9.Operator.PatternMatch = &applicationListDsModel_yJkkSzS_PatternMatchObject{}

										var9.Operator.PatternMatch.Context = types.StringValue(var8.Operator.PatternMatch.Context)

										var9.Operator.PatternMatch.Pattern = types.StringValue(var8.Operator.PatternMatch.Pattern)

										if len(var8.Operator.PatternMatch.Qualifiers) == 0 {
											var9.Operator.PatternMatch.Qualifiers = nil
										} else {
											var9.Operator.PatternMatch.Qualifiers = make([]applicationListDsModel_yJkkSzS_PatternMatchQualifierObject, 0, len(var8.Operator.PatternMatch.Qualifiers))
											for _, var14 := range var8.Operator.PatternMatch.Qualifiers {
												var15 := applicationListDsModel_yJkkSzS_PatternMatchQualifierObject{}

												var15.Name = types.StringValue(var14.Name)

												var15.Value = types.StringValue(var14.Value)
												var9.Operator.PatternMatch.Qualifiers = append(var9.Operator.PatternMatch.Qualifiers, var15)
											}
										}
									}
									var7.OrConditions = append(var7.OrConditions, var9)
								}
							}
							var5.AndConditions = append(var5.AndConditions, var7)
						}
					}

					var5.Comment = types.StringPointerValue(var4.Comment)

					var5.Name = types.StringValue(var4.Name)

					var5.OrderFree = types.BoolPointerValue(var4.OrderFree)

					var5.Scope = types.StringPointerValue(var4.Scope)
					var1.Signatures = append(var1.Signatures, var5)
				}
			}

			var1.Subcategory = types.StringValue(var0.Subcategory)

			var1.TcpHalfClosedTimeout = types.Int64PointerValue(var0.TcpHalfClosedTimeout)

			var1.TcpTimeWaitTimeout = types.Int64PointerValue(var0.TcpTimeWaitTimeout)

			var1.TcpTimeout = types.Int64PointerValue(var0.TcpTimeout)

			var1.Technology = types.StringValue(var0.Technology)

			var1.Timeout = types.Int64PointerValue(var0.Timeout)

			var1.TunnelApplications = types.BoolPointerValue(var0.TunnelApplications)

			var1.TunnelOtherApplication = types.BoolPointerValue(var0.TunnelOtherApplication)

			var1.UdpTimeout = types.Int64PointerValue(var0.UdpTimeout)

			var1.UsedByMalware = types.BoolPointerValue(var0.UsedByMalware)

			var1.VirusIdent = types.BoolPointerValue(var0.VirusIdent)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &applicationDataSource{}
	_ datasource.DataSourceWithConfigure = &applicationDataSource{}
)

func NewApplicationDataSource() datasource.DataSource {
	return &applicationDataSource{}
}

type applicationDataSource struct {
	client *scm.Client
}

// applicationDsModel is the model.
type applicationDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	AbleToTransferFile    types.Bool                                `tfsdk:"able_to_transfer_file"`
	AlgDisableCapability  types.String                              `tfsdk:"alg_disable_capability"`
	Category              types.String                              `tfsdk:"category"`
	ConsumeBigBandwidth   types.Bool                                `tfsdk:"consume_big_bandwidth"`
	DataIdent             types.Bool                                `tfsdk:"data_ident"`
	Default               *applicationDsModel_yJkkSzS_DefaultObject `tfsdk:"default"`
	Description           types.String                              `tfsdk:"description"`
	EvasiveBehavior       types.Bool                                `tfsdk:"evasive_behavior"`
	FileTypeIdent         types.Bool                                `tfsdk:"file_type_ident"`
	HasKnownVulnerability types.Bool                                `tfsdk:"has_known_vulnerability"`
	// omit input: id
	Name                   types.String                                 `tfsdk:"name"`
	NoAppidCaching         types.Bool                                   `tfsdk:"no_appid_caching"`
	ParentApp              types.String                                 `tfsdk:"parent_app"`
	PervasiveUse           types.Bool                                   `tfsdk:"pervasive_use"`
	ProneToMisuse          types.Bool                                   `tfsdk:"prone_to_misuse"`
	Risk                   types.Int64                                  `tfsdk:"risk"`
	Signatures             []applicationDsModel_yJkkSzS_SignatureObject `tfsdk:"signatures"`
	Subcategory            types.String                                 `tfsdk:"subcategory"`
	TcpHalfClosedTimeout   types.Int64                                  `tfsdk:"tcp_half_closed_timeout"`
	TcpTimeWaitTimeout     types.Int64                                  `tfsdk:"tcp_time_wait_timeout"`
	TcpTimeout             types.Int64                                  `tfsdk:"tcp_timeout"`
	Technology             types.String                                 `tfsdk:"technology"`
	Timeout                types.Int64                                  `tfsdk:"timeout"`
	TunnelApplications     types.Bool                                   `tfsdk:"tunnel_applications"`
	TunnelOtherApplication types.Bool                                   `tfsdk:"tunnel_other_application"`
	UdpTimeout             types.Int64                                  `tfsdk:"udp_timeout"`
	UsedByMalware          types.Bool                                   `tfsdk:"used_by_malware"`
	VirusIdent             types.Bool                                   `tfsdk:"virus_ident"`
}

type applicationDsModel_yJkkSzS_DefaultObject struct {
	IdentByIcmp6Type  *applicationDsModel_yJkkSzS_IdentByIcmp6TypeObject `tfsdk:"ident_by_icmp6_type"`
	IdentByIcmpType   *applicationDsModel_yJkkSzS_IdentByIcmpTypeObject  `tfsdk:"ident_by_icmp_type"`
	IdentByIpProtocol types.String                                       `tfsdk:"ident_by_ip_protocol"`
	Ports             types.List                                         `tfsdk:"ports"`
}

type applicationDsModel_yJkkSzS_IdentByIcmp6TypeObject struct {
	Code types.String `tfsdk:"code"`
	Type types.String `tfsdk:"type"`
}

type applicationDsModel_yJkkSzS_IdentByIcmpTypeObject struct {
	Code types.String `tfsdk:"code"`
	Type types.String `tfsdk:"type"`
}

type applicationDsModel_yJkkSzS_SignatureObject struct {
	AndConditions []applicationDsModel_yJkkSzS_AndConditionObject `tfsdk:"and_conditions"`
	Comment       types.String                                    `tfsdk:"comment"`
	Name          types.String                                    `tfsdk:"name"`
	OrderFree     types.Bool                                      `tfsdk:"order_free"`
	Scope         types.String                                    `tfsdk:"scope"`
}

type applicationDsModel_yJkkSzS_AndConditionObject struct {
	Name         types.String                                   `tfsdk:"name"`
	OrConditions []applicationDsModel_yJkkSzS_OrConditionObject `tfsdk:"or_conditions"`
}

type applicationDsModel_yJkkSzS_OrConditionObject struct {
	Name     types.String                              `tfsdk:"name"`
	Operator applicationDsModel_yJkkSzS_OperatorObject `tfsdk:"operator"`
}

type applicationDsModel_yJkkSzS_OperatorObject struct {
	EqualTo      *applicationDsModel_yJkkSzS_EqualToObject      `tfsdk:"equal_to"`
	GreaterThan  *applicationDsModel_yJkkSzS_GreaterThanObject  `tfsdk:"greater_than"`
	LessThan     *applicationDsModel_yJkkSzS_LessThanObject     `tfsdk:"less_than"`
	PatternMatch *applicationDsModel_yJkkSzS_PatternMatchObject `tfsdk:"pattern_match"`
}

type applicationDsModel_yJkkSzS_EqualToObject struct {
	Context  types.String `tfsdk:"context"`
	Mask     types.String `tfsdk:"mask"`
	Position types.String `tfsdk:"position"`
	Value    types.String `tfsdk:"value"`
}

type applicationDsModel_yJkkSzS_GreaterThanObject struct {
	Context    types.String                                            `tfsdk:"context"`
	Qualifiers []applicationDsModel_yJkkSzS_GreaterThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                             `tfsdk:"value"`
}

type applicationDsModel_yJkkSzS_GreaterThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type applicationDsModel_yJkkSzS_LessThanObject struct {
	Context    types.String                                         `tfsdk:"context"`
	Qualifiers []applicationDsModel_yJkkSzS_LessThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                          `tfsdk:"value"`
}

type applicationDsModel_yJkkSzS_LessThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type applicationDsModel_yJkkSzS_PatternMatchObject struct {
	Context    types.String                                             `tfsdk:"context"`
	Pattern    types.String                                             `tfsdk:"pattern"`
	Qualifiers []applicationDsModel_yJkkSzS_PatternMatchQualifierObject `tfsdk:"qualifiers"`
}

type applicationDsModel_yJkkSzS_PatternMatchQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (d *applicationDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application"
}

// Schema defines the schema for this data source.
func (d *applicationDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"able_to_transfer_file":true, "alg_disable_capability":true, "category":true, "consume_big_bandwidth":true, "data_ident":true, "default":true, "description":true, "evasive_behavior":true, "file_type_ident":true, "has_known_vulnerability":true, "id":true, "name":true, "no_appid_caching":true, "parent_app":true, "pervasive_use":true, "prone_to_misuse":true, "risk":true, "signature":true, "subcategory":true, "tcp_half_closed_timeout":true, "tcp_time_wait_timeout":true, "tcp_timeout":true, "technology":true, "tfid":true, "timeout":true, "tunnel_applications":true, "tunnel_other_application":true, "udp_timeout":true, "used_by_malware":true, "virus_ident":true} forceNew:map[string]bool{"id":true}
			"able_to_transfer_file": dsschema.BoolAttribute{
				Description: "The AbleToTransferFile param.",
				Computed:    true,
			},
			"alg_disable_capability": dsschema.StringAttribute{
				Description: "The AlgDisableCapability param. String length must not exceed 127 characters.",
				Computed:    true,
			},
			"category": dsschema.StringAttribute{
				Description: "The Category param.",
				Computed:    true,
			},
			"consume_big_bandwidth": dsschema.BoolAttribute{
				Description: "The ConsumeBigBandwidth param.",
				Computed:    true,
			},
			"data_ident": dsschema.BoolAttribute{
				Description: "The DataIdent param.",
				Computed:    true,
			},
			"default": dsschema.SingleNestedAttribute{
				Description: "The Default param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"ident_by_icmp6_type":true, "ident_by_icmp_type":true, "ident_by_ip_protocol":true, "port":true} forceNew:map[string]bool(nil)
					"ident_by_icmp6_type": dsschema.SingleNestedAttribute{
						Description: "The IdentByIcmp6Type param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"code":true, "type":true} forceNew:map[string]bool(nil)
							"code": dsschema.StringAttribute{
								Description: "The Code param.",
								Computed:    true,
							},
							"type": dsschema.StringAttribute{
								Description: "The Type param.",
								Computed:    true,
							},
						},
					},
					"ident_by_icmp_type": dsschema.SingleNestedAttribute{
						Description: "The IdentByIcmpType param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"code":true, "type":true} forceNew:map[string]bool(nil)
							"code": dsschema.StringAttribute{
								Description: "The Code param.",
								Computed:    true,
							},
							"type": dsschema.StringAttribute{
								Description: "The Type param.",
								Computed:    true,
							},
						},
					},
					"ident_by_ip_protocol": dsschema.StringAttribute{
						Description: "The IdentByIpProtocol param.",
						Computed:    true,
					},
					"ports": dsschema.ListAttribute{
						Description: "The Ports param.",
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param. String length must not exceed 1023 characters.",
				Computed:    true,
			},
			"evasive_behavior": dsschema.BoolAttribute{
				Description: "The EvasiveBehavior param.",
				Computed:    true,
			},
			"file_type_ident": dsschema.BoolAttribute{
				Description: "The FileTypeIdent param.",
				Computed:    true,
			},
			"has_known_vulnerability": dsschema.BoolAttribute{
				Description: "The HasKnownVulnerability param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Computed:    true,
			},
			"no_appid_caching": dsschema.BoolAttribute{
				Description: "The NoAppidCaching param.",
				Computed:    true,
			},
			"parent_app": dsschema.StringAttribute{
				Description: "The ParentApp param. String length must not exceed 127 characters.",
				Computed:    true,
			},
			"pervasive_use": dsschema.BoolAttribute{
				Description: "The PervasiveUse param.",
				Computed:    true,
			},
			"prone_to_misuse": dsschema.BoolAttribute{
				Description: "The ProneToMisuse param.",
				Computed:    true,
			},
			"risk": dsschema.Int64Attribute{
				Description: "The Risk param. Value must be between 1 and 5.",
				Computed:    true,
			},
			"signatures": dsschema.ListNestedAttribute{
				Description: "The Signatures param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"and_condition":true, "comment":true, "name":true, "order_free":true, "scope":true} forceNew:map[string]bool(nil)
						"and_conditions": dsschema.ListNestedAttribute{
							Description: "The AndConditions param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
									"name": dsschema.StringAttribute{
										Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
										Computed:    true,
									},
									"or_conditions": dsschema.ListNestedAttribute{
										Description: "The OrConditions param.",
										Computed:    true,
										NestedObject: dsschema.NestedAttributeObject{
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "operator":true} forceNew:map[string]bool(nil)
												"name": dsschema.StringAttribute{
													Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
													Computed:    true,
												},
												"operator": dsschema.SingleNestedAttribute{
													Description: "The Operator param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"equal_to":true, "greater_than":true, "less_than":true, "pattern_match":true} forceNew:map[string]bool(nil)
														"equal_to": dsschema.SingleNestedAttribute{
															Description: "The EqualTo param.",
															Computed:    true,
															Attributes: map[string]dsschema.Attribute{
																// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "mask":true, "position":true, "value":true} forceNew:map[string]bool(nil)
																"context": dsschema.StringAttribute{
																	Description: "The Context param.",
																	Computed:    true,
																},
																"mask": dsschema.StringAttribute{
																	Description: "4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.",
																	Computed:    true,
																},
																"position": dsschema.StringAttribute{
																	Description: "The Position param. String length must not exceed 127 characters.",
																	Computed:    true,
																},
																"value": dsschema.StringAttribute{
																	Description: "The Value param. String length must not exceed 10 characters.",
																	Computed:    true,
																},
															},
														},
														"greater_than": dsschema.SingleNestedAttribute{
															Description: "The GreaterThan param.",
															Computed:    true,
															Attributes: map[string]dsschema.Attribute{
																// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																"context": dsschema.StringAttribute{
																	Description: "The Context param. String length must not exceed 127 characters.",
																	Computed:    true,
																},
																"qualifiers": dsschema.ListNestedAttribute{
																	Description: "The Qualifiers param.",
																	Computed:    true,
																	NestedObject: dsschema.NestedAttributeObject{
																		Attributes: map[string]dsschema.Attribute{
																			// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																			"name": dsschema.StringAttribute{
																				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																				Computed:    true,
																			},
																			"value": dsschema.StringAttribute{
																				Description: "The Value param.",
																				Computed:    true,
																			},
																		},
																	},
																},
																"value": dsschema.Int64Attribute{
																	Description: "The Value param. Value must be between 0 and 4294967295.",
																	Computed:    true,
																},
															},
														},
														"less_than": dsschema.SingleNestedAttribute{
															Description: "The LessThan param.",
															Computed:    true,
															Attributes: map[string]dsschema.Attribute{
																// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																"context": dsschema.StringAttribute{
																	Description: "The Context param. String length must not exceed 127 characters.",
																	Computed:    true,
																},
																"qualifiers": dsschema.ListNestedAttribute{
																	Description: "The Qualifiers param.",
																	Computed:    true,
																	NestedObject: dsschema.NestedAttributeObject{
																		Attributes: map[string]dsschema.Attribute{
																			// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																			"name": dsschema.StringAttribute{
																				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																				Computed:    true,
																			},
																			"value": dsschema.StringAttribute{
																				Description: "The Value param.",
																				Computed:    true,
																			},
																		},
																	},
																},
																"value": dsschema.Int64Attribute{
																	Description: "The Value param. Value must be between 0 and 4294967295.",
																	Computed:    true,
																},
															},
														},
														"pattern_match": dsschema.SingleNestedAttribute{
															Description: "The PatternMatch param.",
															Computed:    true,
															Attributes: map[string]dsschema.Attribute{
																// inputs:map[string]bool{} outputs:map[string]bool{"context":true, "pattern":true, "qualifier":true} forceNew:map[string]bool(nil)
																"context": dsschema.StringAttribute{
																	Description: "The Context param. String length must not exceed 127 characters.",
																	Computed:    true,
																},
																"pattern": dsschema.StringAttribute{
																	Description: "The Pattern param. String length must not exceed 127 characters.",
																	Computed:    true,
																},
																"qualifiers": dsschema.ListNestedAttribute{
																	Description: "The Qualifiers param.",
																	Computed:    true,
																	NestedObject: dsschema.NestedAttributeObject{
																		Attributes: map[string]dsschema.Attribute{
																			// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																			"name": dsschema.StringAttribute{
																				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																				Computed:    true,
																			},
																			"value": dsschema.StringAttribute{
																				Description: "The Value param.",
																				Computed:    true,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"comment": dsschema.StringAttribute{
							Description: "The Comment param. String length must not exceed 256 characters.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
							Computed:    true,
						},
						"order_free": dsschema.BoolAttribute{
							Description: "The OrderFree param. Default: `false`.",
							Computed:    true,
						},
						"scope": dsschema.StringAttribute{
							Description: "The Scope param. String must be one of these: `\"protocol-data-unit\"`, `\"session\"`. Default: `\"protocol-data-unit\"`.",
							Computed:    true,
						},
					},
				},
			},
			"subcategory": dsschema.StringAttribute{
				Description: "The Subcategory param. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"tcp_half_closed_timeout": dsschema.Int64Attribute{
				Description: "timeout for half-close session in seconds. Value must be between 1 and 604800.",
				Computed:    true,
			},
			"tcp_time_wait_timeout": dsschema.Int64Attribute{
				Description: "timeout for session in time_wait state in seconds. Value must be between 1 and 600.",
				Computed:    true,
			},
			"tcp_timeout": dsschema.Int64Attribute{
				Description: "timeout in seconds. Value must be between 0 and 604800.",
				Computed:    true,
			},
			"technology": dsschema.StringAttribute{
				Description: "The Technology param. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"timeout": dsschema.Int64Attribute{
				Description: "timeout in seconds. Value must be between 0 and 604800.",
				Computed:    true,
			},
			"tunnel_applications": dsschema.BoolAttribute{
				Description: "The TunnelApplications param.",
				Computed:    true,
			},
			"tunnel_other_application": dsschema.BoolAttribute{
				Description: "The TunnelOtherApplication param.",
				Computed:    true,
			},
			"udp_timeout": dsschema.Int64Attribute{
				Description: "timeout in seconds. Value must be between 0 and 604800.",
				Computed:    true,
			},
			"used_by_malware": dsschema.BoolAttribute{
				Description: "The UsedByMalware param.",
				Computed:    true,
			},
			"virus_ident": dsschema.BoolAttribute{
				Description: "The VirusIdent param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *applicationDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *applicationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state applicationDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_application",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := kJVbXva.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AbleToTransferFile = types.BoolPointerValue(ans.AbleToTransferFile)

	state.AlgDisableCapability = types.StringPointerValue(ans.AlgDisableCapability)

	state.Category = types.StringValue(ans.Category)

	state.ConsumeBigBandwidth = types.BoolPointerValue(ans.ConsumeBigBandwidth)

	state.DataIdent = types.BoolPointerValue(ans.DataIdent)

	if ans.Default == nil {
		state.Default = nil
	} else {
		state.Default = &applicationDsModel_yJkkSzS_DefaultObject{}

		if ans.Default.IdentByIcmp6Type == nil {
			state.Default.IdentByIcmp6Type = nil
		} else {
			state.Default.IdentByIcmp6Type = &applicationDsModel_yJkkSzS_IdentByIcmp6TypeObject{}

			state.Default.IdentByIcmp6Type.Code = types.StringPointerValue(ans.Default.IdentByIcmp6Type.Code)

			state.Default.IdentByIcmp6Type.Type = types.StringValue(ans.Default.IdentByIcmp6Type.Type)
		}

		if ans.Default.IdentByIcmpType == nil {
			state.Default.IdentByIcmpType = nil
		} else {
			state.Default.IdentByIcmpType = &applicationDsModel_yJkkSzS_IdentByIcmpTypeObject{}

			state.Default.IdentByIcmpType.Code = types.StringPointerValue(ans.Default.IdentByIcmpType.Code)

			state.Default.IdentByIcmpType.Type = types.StringValue(ans.Default.IdentByIcmpType.Type)
		}

		state.Default.IdentByIpProtocol = types.StringPointerValue(ans.Default.IdentByIpProtocol)

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Default.Ports)
		state.Default.Ports = var0
		resp.Diagnostics.Append(var1.Errors()...)
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.EvasiveBehavior = types.BoolPointerValue(ans.EvasiveBehavior)

	state.FileTypeIdent = types.BoolPointerValue(ans.FileTypeIdent)

	state.HasKnownVulnerability = types.BoolPointerValue(ans.HasKnownVulnerability)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NoAppidCaching = types.BoolPointerValue(ans.NoAppidCaching)

	state.ParentApp = types.StringPointerValue(ans.ParentApp)

	state.PervasiveUse = types.BoolPointerValue(ans.PervasiveUse)

	state.ProneToMisuse = types.BoolPointerValue(ans.ProneToMisuse)

	state.Risk = types.Int64Value(ans.Risk)

	if len(ans.Signatures) == 0 {
		state.Signatures = nil
	} else {
		state.Signatures = make([]applicationDsModel_yJkkSzS_SignatureObject, 0, len(ans.Signatures))
		for _, var2 := range ans.Signatures {
			var3 := applicationDsModel_yJkkSzS_SignatureObject{}

			if len(var2.AndConditions) == 0 {
				var3.AndConditions = nil
			} else {
				var3.AndConditions = make([]applicationDsModel_yJkkSzS_AndConditionObject, 0, len(var2.AndConditions))
				for _, var4 := range var2.AndConditions {
					var5 := applicationDsModel_yJkkSzS_AndConditionObject{}

					var5.Name = types.StringValue(var4.Name)

					if len(var4.OrConditions) == 0 {
						var5.OrConditions = nil
					} else {
						var5.OrConditions = make([]applicationDsModel_yJkkSzS_OrConditionObject, 0, len(var4.OrConditions))
						for _, var6 := range var4.OrConditions {
							var7 := applicationDsModel_yJkkSzS_OrConditionObject{}

							var7.Name = types.StringValue(var6.Name)

							var7.Operator = applicationDsModel_yJkkSzS_OperatorObject{}

							if var6.Operator.EqualTo == nil {
								var7.Operator.EqualTo = nil
							} else {
								var7.Operator.EqualTo = &applicationDsModel_yJkkSzS_EqualToObject{}

								var7.Operator.EqualTo.Context = types.StringValue(var6.Operator.EqualTo.Context)

								var7.Operator.EqualTo.Mask = types.StringPointerValue(var6.Operator.EqualTo.Mask)

								var7.Operator.EqualTo.Position = types.StringPointerValue(var6.Operator.EqualTo.Position)

								var7.Operator.EqualTo.Value = types.StringValue(var6.Operator.EqualTo.Value)
							}

							if var6.Operator.GreaterThan == nil {
								var7.Operator.GreaterThan = nil
							} else {
								var7.Operator.GreaterThan = &applicationDsModel_yJkkSzS_GreaterThanObject{}

								var7.Operator.GreaterThan.Context = types.StringValue(var6.Operator.GreaterThan.Context)

								if len(var6.Operator.GreaterThan.Qualifiers) == 0 {
									var7.Operator.GreaterThan.Qualifiers = nil
								} else {
									var7.Operator.GreaterThan.Qualifiers = make([]applicationDsModel_yJkkSzS_GreaterThanQualifierObject, 0, len(var6.Operator.GreaterThan.Qualifiers))
									for _, var8 := range var6.Operator.GreaterThan.Qualifiers {
										var9 := applicationDsModel_yJkkSzS_GreaterThanQualifierObject{}

										var9.Name = types.StringValue(var8.Name)

										var9.Value = types.StringValue(var8.Value)
										var7.Operator.GreaterThan.Qualifiers = append(var7.Operator.GreaterThan.Qualifiers, var9)
									}
								}

								var7.Operator.GreaterThan.Value = types.Int64Value(var6.Operator.GreaterThan.Value)
							}

							if var6.Operator.LessThan == nil {
								var7.Operator.LessThan = nil
							} else {
								var7.Operator.LessThan = &applicationDsModel_yJkkSzS_LessThanObject{}

								var7.Operator.LessThan.Context = types.StringValue(var6.Operator.LessThan.Context)

								if len(var6.Operator.LessThan.Qualifiers) == 0 {
									var7.Operator.LessThan.Qualifiers = nil
								} else {
									var7.Operator.LessThan.Qualifiers = make([]applicationDsModel_yJkkSzS_LessThanQualifierObject, 0, len(var6.Operator.LessThan.Qualifiers))
									for _, var10 := range var6.Operator.LessThan.Qualifiers {
										var11 := applicationDsModel_yJkkSzS_LessThanQualifierObject{}

										var11.Name = types.StringValue(var10.Name)

										var11.Value = types.StringValue(var10.Value)
										var7.Operator.LessThan.Qualifiers = append(var7.Operator.LessThan.Qualifiers, var11)
									}
								}

								var7.Operator.LessThan.Value = types.Int64Value(var6.Operator.LessThan.Value)
							}

							if var6.Operator.PatternMatch == nil {
								var7.Operator.PatternMatch = nil
							} else {
								var7.Operator.PatternMatch = &applicationDsModel_yJkkSzS_PatternMatchObject{}

								var7.Operator.PatternMatch.Context = types.StringValue(var6.Operator.PatternMatch.Context)

								var7.Operator.PatternMatch.Pattern = types.StringValue(var6.Operator.PatternMatch.Pattern)

								if len(var6.Operator.PatternMatch.Qualifiers) == 0 {
									var7.Operator.PatternMatch.Qualifiers = nil
								} else {
									var7.Operator.PatternMatch.Qualifiers = make([]applicationDsModel_yJkkSzS_PatternMatchQualifierObject, 0, len(var6.Operator.PatternMatch.Qualifiers))
									for _, var12 := range var6.Operator.PatternMatch.Qualifiers {
										var13 := applicationDsModel_yJkkSzS_PatternMatchQualifierObject{}

										var13.Name = types.StringValue(var12.Name)

										var13.Value = types.StringValue(var12.Value)
										var7.Operator.PatternMatch.Qualifiers = append(var7.Operator.PatternMatch.Qualifiers, var13)
									}
								}
							}
							var5.OrConditions = append(var5.OrConditions, var7)
						}
					}
					var3.AndConditions = append(var3.AndConditions, var5)
				}
			}

			var3.Comment = types.StringPointerValue(var2.Comment)

			var3.Name = types.StringValue(var2.Name)

			var3.OrderFree = types.BoolPointerValue(var2.OrderFree)

			var3.Scope = types.StringPointerValue(var2.Scope)
			state.Signatures = append(state.Signatures, var3)
		}
	}

	state.Subcategory = types.StringValue(ans.Subcategory)

	state.TcpHalfClosedTimeout = types.Int64PointerValue(ans.TcpHalfClosedTimeout)

	state.TcpTimeWaitTimeout = types.Int64PointerValue(ans.TcpTimeWaitTimeout)

	state.TcpTimeout = types.Int64PointerValue(ans.TcpTimeout)

	state.Technology = types.StringValue(ans.Technology)

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	state.TunnelApplications = types.BoolPointerValue(ans.TunnelApplications)

	state.TunnelOtherApplication = types.BoolPointerValue(ans.TunnelOtherApplication)

	state.UdpTimeout = types.Int64PointerValue(ans.UdpTimeout)

	state.UsedByMalware = types.BoolPointerValue(ans.UsedByMalware)

	state.VirusIdent = types.BoolPointerValue(ans.VirusIdent)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &applicationResource{}
	_ resource.ResourceWithConfigure   = &applicationResource{}
	_ resource.ResourceWithImportState = &applicationResource{}
)

func NewApplicationResource() resource.Resource {
	return &applicationResource{}
}

type applicationResource struct {
	client *scm.Client
}

// applicationRsModel is the model.
type applicationRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	AbleToTransferFile     types.Bool                                   `tfsdk:"able_to_transfer_file"`
	AlgDisableCapability   types.String                                 `tfsdk:"alg_disable_capability"`
	Category               types.String                                 `tfsdk:"category"`
	ConsumeBigBandwidth    types.Bool                                   `tfsdk:"consume_big_bandwidth"`
	DataIdent              types.Bool                                   `tfsdk:"data_ident"`
	Default                *applicationRsModel_yJkkSzS_DefaultObject    `tfsdk:"default"`
	Description            types.String                                 `tfsdk:"description"`
	Device                 types.String                                 `tfsdk:"device"`
	EvasiveBehavior        types.Bool                                   `tfsdk:"evasive_behavior"`
	FileTypeIdent          types.Bool                                   `tfsdk:"file_type_ident"`
	Folder                 types.String                                 `tfsdk:"folder"`
	HasKnownVulnerability  types.Bool                                   `tfsdk:"has_known_vulnerability"`
	Id                     types.String                                 `tfsdk:"id"`
	Name                   types.String                                 `tfsdk:"name"`
	NoAppidCaching         types.Bool                                   `tfsdk:"no_appid_caching"`
	ParentApp              types.String                                 `tfsdk:"parent_app"`
	PervasiveUse           types.Bool                                   `tfsdk:"pervasive_use"`
	ProneToMisuse          types.Bool                                   `tfsdk:"prone_to_misuse"`
	Risk                   types.Int64                                  `tfsdk:"risk"`
	Signatures             []applicationRsModel_yJkkSzS_SignatureObject `tfsdk:"signatures"`
	Snippet                types.String                                 `tfsdk:"snippet"`
	Subcategory            types.String                                 `tfsdk:"subcategory"`
	TcpHalfClosedTimeout   types.Int64                                  `tfsdk:"tcp_half_closed_timeout"`
	TcpTimeWaitTimeout     types.Int64                                  `tfsdk:"tcp_time_wait_timeout"`
	TcpTimeout             types.Int64                                  `tfsdk:"tcp_timeout"`
	Technology             types.String                                 `tfsdk:"technology"`
	Timeout                types.Int64                                  `tfsdk:"timeout"`
	TunnelApplications     types.Bool                                   `tfsdk:"tunnel_applications"`
	TunnelOtherApplication types.Bool                                   `tfsdk:"tunnel_other_application"`
	UdpTimeout             types.Int64                                  `tfsdk:"udp_timeout"`
	UsedByMalware          types.Bool                                   `tfsdk:"used_by_malware"`
	VirusIdent             types.Bool                                   `tfsdk:"virus_ident"`

	// Output.
	// omit input: able_to_transfer_file
	// omit input: alg_disable_capability
	// omit input: category
	// omit input: consume_big_bandwidth
	// omit input: data_ident
	// omit input: default
	// omit input: description
	// omit input: evasive_behavior
	// omit input: file_type_ident
	// omit input: has_known_vulnerability
	// omit input: id
	// omit input: name
	// omit input: no_appid_caching
	// omit input: parent_app
	// omit input: pervasive_use
	// omit input: prone_to_misuse
	// omit input: risk
	// omit input: signatures
	// omit input: subcategory
	// omit input: tcp_half_closed_timeout
	// omit input: tcp_time_wait_timeout
	// omit input: tcp_timeout
	// omit input: technology
	// omit input: timeout
	// omit input: tunnel_applications
	// omit input: tunnel_other_application
	// omit input: udp_timeout
	// omit input: used_by_malware
	// omit input: virus_ident
}

type applicationRsModel_yJkkSzS_DefaultObject struct {
	IdentByIcmp6Type  *applicationRsModel_yJkkSzS_IdentByIcmp6TypeObject `tfsdk:"ident_by_icmp6_type"`
	IdentByIcmpType   *applicationRsModel_yJkkSzS_IdentByIcmpTypeObject  `tfsdk:"ident_by_icmp_type"`
	IdentByIpProtocol types.String                                       `tfsdk:"ident_by_ip_protocol"`
	Ports             types.List                                         `tfsdk:"ports"`
}

type applicationRsModel_yJkkSzS_IdentByIcmp6TypeObject struct {
	Code types.String `tfsdk:"code"`
	Type types.String `tfsdk:"type"`
}

type applicationRsModel_yJkkSzS_IdentByIcmpTypeObject struct {
	Code types.String `tfsdk:"code"`
	Type types.String `tfsdk:"type"`
}

type applicationRsModel_yJkkSzS_SignatureObject struct {
	AndConditions []applicationRsModel_yJkkSzS_AndConditionObject `tfsdk:"and_conditions"`
	Comment       types.String                                    `tfsdk:"comment"`
	Name          types.String                                    `tfsdk:"name"`
	OrderFree     types.Bool                                      `tfsdk:"order_free"`
	Scope         types.String                                    `tfsdk:"scope"`
}

type applicationRsModel_yJkkSzS_AndConditionObject struct {
	Name         types.String                                   `tfsdk:"name"`
	OrConditions []applicationRsModel_yJkkSzS_OrConditionObject `tfsdk:"or_conditions"`
}

type applicationRsModel_yJkkSzS_OrConditionObject struct {
	Name     types.String                              `tfsdk:"name"`
	Operator applicationRsModel_yJkkSzS_OperatorObject `tfsdk:"operator"`
}

type applicationRsModel_yJkkSzS_OperatorObject struct {
	EqualTo      *applicationRsModel_yJkkSzS_EqualToObject      `tfsdk:"equal_to"`
	GreaterThan  *applicationRsModel_yJkkSzS_GreaterThanObject  `tfsdk:"greater_than"`
	LessThan     *applicationRsModel_yJkkSzS_LessThanObject     `tfsdk:"less_than"`
	PatternMatch *applicationRsModel_yJkkSzS_PatternMatchObject `tfsdk:"pattern_match"`
}

type applicationRsModel_yJkkSzS_EqualToObject struct {
	Context  types.String `tfsdk:"context"`
	Mask     types.String `tfsdk:"mask"`
	Position types.String `tfsdk:"position"`
	Value    types.String `tfsdk:"value"`
}

type applicationRsModel_yJkkSzS_GreaterThanObject struct {
	Context    types.String                                            `tfsdk:"context"`
	Qualifiers []applicationRsModel_yJkkSzS_GreaterThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                             `tfsdk:"value"`
}

type applicationRsModel_yJkkSzS_GreaterThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type applicationRsModel_yJkkSzS_LessThanObject struct {
	Context    types.String                                         `tfsdk:"context"`
	Qualifiers []applicationRsModel_yJkkSzS_LessThanQualifierObject `tfsdk:"qualifiers"`
	Value      types.Int64                                          `tfsdk:"value"`
}

type applicationRsModel_yJkkSzS_LessThanQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

type applicationRsModel_yJkkSzS_PatternMatchObject struct {
	Context    types.String                                             `tfsdk:"context"`
	Pattern    types.String                                             `tfsdk:"pattern"`
	Qualifiers []applicationRsModel_yJkkSzS_PatternMatchQualifierObject `tfsdk:"qualifiers"`
}

type applicationRsModel_yJkkSzS_PatternMatchQualifierObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (r *applicationResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application"
}

// Schema defines the schema for this data source.
func (r *applicationResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"able_to_transfer_file":true, "alg_disable_capability":true, "category":true, "consume_big_bandwidth":true, "data_ident":true, "default":true, "description":true, "device":true, "evasive_behavior":true, "file_type_ident":true, "folder":true, "has_known_vulnerability":true, "id":true, "name":true, "no_appid_caching":true, "parent_app":true, "pervasive_use":true, "prone_to_misuse":true, "risk":true, "signature":true, "snippet":true, "subcategory":true, "tcp_half_closed_timeout":true, "tcp_time_wait_timeout":true, "tcp_timeout":true, "technology":true, "timeout":true, "tunnel_applications":true, "tunnel_other_application":true, "udp_timeout":true, "used_by_malware":true, "virus_ident":true} outputs:map[string]bool{"able_to_transfer_file":true, "alg_disable_capability":true, "category":true, "consume_big_bandwidth":true, "data_ident":true, "default":true, "description":true, "evasive_behavior":true, "file_type_ident":true, "has_known_vulnerability":true, "id":true, "name":true, "no_appid_caching":true, "parent_app":true, "pervasive_use":true, "prone_to_misuse":true, "risk":true, "signature":true, "subcategory":true, "tcp_half_closed_timeout":true, "tcp_time_wait_timeout":true, "tcp_timeout":true, "technology":true, "tfid":true, "timeout":true, "tunnel_applications":true, "tunnel_other_application":true, "udp_timeout":true, "used_by_malware":true, "virus_ident":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"able_to_transfer_file": rsschema.BoolAttribute{
				Description: "The AbleToTransferFile param.",
				Optional:    true,
			},
			"alg_disable_capability": rsschema.StringAttribute{
				Description: "The AlgDisableCapability param. String length must not exceed 127 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(127),
				},
			},
			"category": rsschema.StringAttribute{
				Description: "The Category param.",
				Required:    true,
			},
			"consume_big_bandwidth": rsschema.BoolAttribute{
				Description: "The ConsumeBigBandwidth param.",
				Optional:    true,
			},
			"data_ident": rsschema.BoolAttribute{
				Description: "The DataIdent param.",
				Optional:    true,
			},
			"default": rsschema.SingleNestedAttribute{
				Description: "The Default param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"ident_by_icmp6_type":true, "ident_by_icmp_type":true, "ident_by_ip_protocol":true, "port":true} outputs:map[string]bool{"ident_by_icmp6_type":true, "ident_by_icmp_type":true, "ident_by_ip_protocol":true, "port":true} forceNew:map[string]bool(nil)
					"ident_by_icmp6_type": rsschema.SingleNestedAttribute{
						Description: "The IdentByIcmp6Type param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"code":true, "type":true} outputs:map[string]bool{"code":true, "type":true} forceNew:map[string]bool(nil)
							"code": rsschema.StringAttribute{
								Description: "The Code param.",
								Optional:    true,
							},
							"type": rsschema.StringAttribute{
								Description: "The Type param.",
								Required:    true,
							},
						},
					},
					"ident_by_icmp_type": rsschema.SingleNestedAttribute{
						Description: "The IdentByIcmpType param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"code":true, "type":true} outputs:map[string]bool{"code":true, "type":true} forceNew:map[string]bool(nil)
							"code": rsschema.StringAttribute{
								Description: "The Code param.",
								Optional:    true,
							},
							"type": rsschema.StringAttribute{
								Description: "The Type param.",
								Required:    true,
							},
						},
					},
					"ident_by_ip_protocol": rsschema.StringAttribute{
						Description: "The IdentByIpProtocol param.",
						Optional:    true,
					},
					"ports": rsschema.ListAttribute{
						Description: "The Ports param.",
						Optional:    true,
						ElementType: types.StringType,
					},
				},
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param. String length must not exceed 1023 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1023),
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"evasive_behavior": rsschema.BoolAttribute{
				Description: "The EvasiveBehavior param.",
				Optional:    true,
			},
			"file_type_ident": rsschema.BoolAttribute{
				Description: "The FileTypeIdent param.",
				Optional:    true,
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"has_known_vulnerability": rsschema.BoolAttribute{
				Description: "The HasKnownVulnerability param.",
				Optional:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(31),
				},
			},
			"no_appid_caching": rsschema.BoolAttribute{
				Description: "The NoAppidCaching param.",
				Optional:    true,
			},
			"parent_app": rsschema.StringAttribute{
				Description: "The ParentApp param. String length must not exceed 127 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(127),
				},
			},
			"pervasive_use": rsschema.BoolAttribute{
				Description: "The PervasiveUse param.",
				Optional:    true,
			},
			"prone_to_misuse": rsschema.BoolAttribute{
				Description: "The ProneToMisuse param.",
				Optional:    true,
			},
			"risk": rsschema.Int64Attribute{
				Description: "The Risk param. Value must be between 1 and 5.",
				Required:    true,
				Validators: []validator.Int64{
					int64validator.Between(1, 5),
				},
			},
			"signatures": rsschema.ListNestedAttribute{
				Description: "The Signatures param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"and_condition":true, "comment":true, "name":true, "order_free":true, "scope":true} outputs:map[string]bool{"and_condition":true, "comment":true, "name":true, "order_free":true, "scope":true} forceNew:map[string]bool(nil)
						"and_conditions": rsschema.ListNestedAttribute{
							Description: "The AndConditions param.",
							Optional:    true,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"name":true, "or_condition":true} outputs:map[string]bool{"name":true, "or_condition":true} forceNew:map[string]bool(nil)
									"name": rsschema.StringAttribute{
										Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(31),
										},
									},
									"or_conditions": rsschema.ListNestedAttribute{
										Description: "The OrConditions param.",
										Optional:    true,
										NestedObject: rsschema.NestedAttributeObject{
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"name":true, "operator":true} outputs:map[string]bool{"name":true, "operator":true} forceNew:map[string]bool(nil)
												"name": rsschema.StringAttribute{
													Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
													Required:    true,
													Validators: []validator.String{
														stringvalidator.LengthAtMost(31),
													},
												},
												"operator": rsschema.SingleNestedAttribute{
													Description: "The Operator param.",
													Required:    true,
													Attributes: map[string]rsschema.Attribute{
														// inputs:map[string]bool{"equal_to":true, "greater_than":true, "less_than":true, "pattern_match":true} outputs:map[string]bool{"equal_to":true, "greater_than":true, "less_than":true, "pattern_match":true} forceNew:map[string]bool(nil)
														"equal_to": rsschema.SingleNestedAttribute{
															Description: "The EqualTo param.",
															Optional:    true,
															Attributes: map[string]rsschema.Attribute{
																// inputs:map[string]bool{"context":true, "mask":true, "position":true, "value":true} outputs:map[string]bool{"context":true, "mask":true, "position":true, "value":true} forceNew:map[string]bool(nil)
																"context": rsschema.StringAttribute{
																	Description: "The Context param.",
																	Required:    true,
																},
																"mask": rsschema.StringAttribute{
																	Description: "4-byte hex value. String length must not exceed 10 characters. String validation regex: `^[0][xX][0-9A-Fa-f]{8}$`.",
																	Optional:    true,
																	Validators: []validator.String{
																		stringvalidator.LengthAtMost(10),
																		stringvalidator.RegexMatches(regexp.MustCompile("^[0][xX][0-9A-Fa-f]{8}$"), ""),
																	},
																},
																"position": rsschema.StringAttribute{
																	Description: "The Position param. String length must not exceed 127 characters.",
																	Optional:    true,
																	Validators: []validator.String{
																		stringvalidator.LengthAtMost(127),
																	},
																},
																"value": rsschema.StringAttribute{
																	Description: "The Value param. String length must not exceed 10 characters.",
																	Required:    true,
																	Validators: []validator.String{
																		stringvalidator.LengthAtMost(10),
																	},
																},
															},
														},
														"greater_than": rsschema.SingleNestedAttribute{
															Description: "The GreaterThan param.",
															Optional:    true,
															Attributes: map[string]rsschema.Attribute{
																// inputs:map[string]bool{"context":true, "qualifier":true, "value":true} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																"context": rsschema.StringAttribute{
																	Description: "The Context param. String length must not exceed 127 characters.",
																	Required:    true,
																	Validators: []validator.String{
																		stringvalidator.LengthAtMost(127),
																	},
																},
																"qualifiers": rsschema.ListNestedAttribute{
																	Description: "The Qualifiers param.",
																	Optional:    true,
																	NestedObject: rsschema.NestedAttributeObject{
																		Attributes: map[string]rsschema.Attribute{
																			// inputs:map[string]bool{"name":true, "value":true} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																			"name": rsschema.StringAttribute{
																				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																				Required:    true,
																				Validators: []validator.String{
																					stringvalidator.LengthAtMost(31),
																				},
																			},
																			"value": rsschema.StringAttribute{
																				Description: "The Value param.",
																				Required:    true,
																			},
																		},
																	},
																},
																"value": rsschema.Int64Attribute{
																	Description: "The Value param. Value must be between 0 and 4294967295.",
																	Required:    true,
																	Validators: []validator.Int64{
																		int64validator.Between(0, 4294967295),
																	},
																},
															},
														},
														"less_than": rsschema.SingleNestedAttribute{
															Description: "The LessThan param.",
															Optional:    true,
															Attributes: map[string]rsschema.Attribute{
																// inputs:map[string]bool{"context":true, "qualifier":true, "value":true} outputs:map[string]bool{"context":true, "qualifier":true, "value":true} forceNew:map[string]bool(nil)
																"context": rsschema.StringAttribute{
																	Description: "The Context param. String length must not exceed 127 characters.",
																	Required:    true,
																	Validators: []validator.String{
																		stringvalidator.LengthAtMost(127),
																	},
																},
																"qualifiers": rsschema.ListNestedAttribute{
																	Description: "The Qualifiers param.",
																	Optional:    true,
																	NestedObject: rsschema.NestedAttributeObject{
																		Attributes: map[string]rsschema.Attribute{
																			// inputs:map[string]bool{"name":true, "value":true} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																			"name": rsschema.StringAttribute{
																				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																				Required:    true,
																				Validators: []validator.String{
																					stringvalidator.LengthAtMost(31),
																				},
																			},
																			"value": rsschema.StringAttribute{
																				Description: "The Value param.",
																				Required:    true,
																			},
																		},
																	},
																},
																"value": rsschema.Int64Attribute{
																	Description: "The Value param. Value must be between 0 and 4294967295.",
																	Required:    true,
																	Validators: []validator.Int64{
																		int64validator.Between(0, 4294967295),
																	},
																},
															},
														},
														"pattern_match": rsschema.SingleNestedAttribute{
															Description: "The PatternMatch param.",
															Optional:    true,
															Attributes: map[string]rsschema.Attribute{
																// inputs:map[string]bool{"context":true, "pattern":true, "qualifier":true} outputs:map[string]bool{"context":true, "pattern":true, "qualifier":true} forceNew:map[string]bool(nil)
																"context": rsschema.StringAttribute{
																	Description: "The Context param. String length must not exceed 127 characters.",
																	Required:    true,
																	Validators: []validator.String{
																		stringvalidator.LengthAtMost(127),
																	},
																},
																"pattern": rsschema.StringAttribute{
																	Description: "The Pattern param. String length must not exceed 127 characters.",
																	Required:    true,
																	Validators: []validator.String{
																		stringvalidator.LengthAtMost(127),
																	},
																},
																"qualifiers": rsschema.ListNestedAttribute{
																	Description: "The Qualifiers param.",
																	Optional:    true,
																	NestedObject: rsschema.NestedAttributeObject{
																		Attributes: map[string]rsschema.Attribute{
																			// inputs:map[string]bool{"name":true, "value":true} outputs:map[string]bool{"name":true, "value":true} forceNew:map[string]bool(nil)
																			"name": rsschema.StringAttribute{
																				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
																				Required:    true,
																				Validators: []validator.String{
																					stringvalidator.LengthAtMost(31),
																				},
																			},
																			"value": rsschema.StringAttribute{
																				Description: "The Value param.",
																				Required:    true,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"comment": rsschema.StringAttribute{
							Description: "The Comment param. String length must not exceed 256 characters.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.LengthAtMost(256),
							},
						},
						"name": rsschema.StringAttribute{
							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
							Required:    true,
							Validators: []validator.String{
								stringvalidator.LengthAtMost(31),
							},
						},
						"order_free": rsschema.BoolAttribute{
							Description: "The OrderFree param. Default: `false`.",
							Optional:    true,
							Computed:    true,
							Default:     booldefault.StaticBool(false),
						},
						"scope": rsschema.StringAttribute{
							Description: "The Scope param. String must be one of these: `\"protocol-data-unit\"`, `\"session\"`. Default: `\"protocol-data-unit\"`.",
							Optional:    true,
							Computed:    true,
							Default:     stringdefault.StaticString("protocol-data-unit"),
							Validators: []validator.String{
								stringvalidator.OneOf("protocol-data-unit", "session"),
							},
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"subcategory": rsschema.StringAttribute{
				Description: "The Subcategory param. String length must not exceed 63 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"tcp_half_closed_timeout": rsschema.Int64Attribute{
				Description: "timeout for half-close session in seconds. Value must be between 1 and 604800.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(1, 604800),
				},
			},
			"tcp_time_wait_timeout": rsschema.Int64Attribute{
				Description: "timeout for session in time_wait state in seconds. Value must be between 1 and 600.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(1, 600),
				},
			},
			"tcp_timeout": rsschema.Int64Attribute{
				Description: "timeout in seconds. Value must be between 0 and 604800.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(0, 604800),
				},
			},
			"technology": rsschema.StringAttribute{
				Description: "The Technology param. String length must not exceed 63 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"timeout": rsschema.Int64Attribute{
				Description: "timeout in seconds. Value must be between 0 and 604800.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(0, 604800),
				},
			},
			"tunnel_applications": rsschema.BoolAttribute{
				Description: "The TunnelApplications param.",
				Optional:    true,
			},
			"tunnel_other_application": rsschema.BoolAttribute{
				Description: "The TunnelOtherApplication param.",
				Optional:    true,
			},
			"udp_timeout": rsschema.Int64Attribute{
				Description: "timeout in seconds. Value must be between 0 and 604800.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(0, 604800),
				},
			},
			"used_by_malware": rsschema.BoolAttribute{
				Description: "The UsedByMalware param.",
				Optional:    true,
			},
			"virus_ident": rsschema.BoolAttribute{
				Description: "The VirusIdent param.",
				Optional:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *applicationResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *applicationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state applicationRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_application",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := kJVbXva.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &yJkkSzS.Config{}

	input.Request.AbleToTransferFile = state.AbleToTransferFile.ValueBoolPointer()

	input.Request.AlgDisableCapability = state.AlgDisableCapability.ValueStringPointer()

	input.Request.Category = state.Category.ValueString()

	input.Request.ConsumeBigBandwidth = state.ConsumeBigBandwidth.ValueBoolPointer()

	input.Request.DataIdent = state.DataIdent.ValueBoolPointer()

	if state.Default != nil {
		input.Request.Default = &yJkkSzS.DefaultObject{}

		if state.Default.IdentByIcmp6Type != nil {
			input.Request.Default.IdentByIcmp6Type = &yJkkSzS.IdentByIcmp6TypeObject{}

			input.Request.Default.IdentByIcmp6Type.Code = state.Default.IdentByIcmp6Type.Code.ValueStringPointer()

			input.Request.Default.IdentByIcmp6Type.Type = state.Default.IdentByIcmp6Type.Type.ValueString()
		}

		if state.Default.IdentByIcmpType != nil {
			input.Request.Default.IdentByIcmpType = &yJkkSzS.IdentByIcmpTypeObject{}

			input.Request.Default.IdentByIcmpType.Code = state.Default.IdentByIcmpType.Code.ValueStringPointer()

			input.Request.Default.IdentByIcmpType.Type = state.Default.IdentByIcmpType.Type.ValueString()
		}

		input.Request.Default.IdentByIpProtocol = state.Default.IdentByIpProtocol.ValueStringPointer()

		resp.Diagnostics.Append(state.Default.Ports.ElementsAs(ctx, &input.Request.Default.Ports, false)...)
		//if len(state.Default.Ports) != 0 {
		//    input.Request.Default.Ports = make([]string, 0, len(state.Default.Ports))
		//    for _, var0 := range state.Default.Ports {
		//        input.Request.Default.Ports = append(input.Request.Default.Ports, var0.ValueString())
		//    }
		//}
	}

	input.Request.Description = state.Description.ValueStringPointer()

	input.Request.EvasiveBehavior = state.EvasiveBehavior.ValueBoolPointer()

	input.Request.FileTypeIdent = state.FileTypeIdent.ValueBoolPointer()

	input.Request.HasKnownVulnerability = state.HasKnownVulnerability.ValueBoolPointer()

	input.Request.Name = state.Name.ValueString()

	input.Request.NoAppidCaching = state.NoAppidCaching.ValueBoolPointer()

	input.Request.ParentApp = state.ParentApp.ValueStringPointer()

	input.Request.PervasiveUse = state.PervasiveUse.ValueBoolPointer()

	input.Request.ProneToMisuse = state.ProneToMisuse.ValueBoolPointer()

	input.Request.Risk = state.Risk.ValueInt64()

	if len(state.Signatures) != 0 {
		input.Request.Signatures = make([]yJkkSzS.SignatureObject, 0, len(state.Signatures))
		for _, var1 := range state.Signatures {
			var var2 yJkkSzS.SignatureObject

			if len(var1.AndConditions) != 0 {
				var2.AndConditions = make([]yJkkSzS.AndConditionObject, 0, len(var1.AndConditions))
				for _, var3 := range var1.AndConditions {
					var var4 yJkkSzS.AndConditionObject

					var4.Name = var3.Name.ValueString()

					if len(var3.OrConditions) != 0 {
						var4.OrConditions = make([]yJkkSzS.OrConditionObject, 0, len(var3.OrConditions))
						for _, var5 := range var3.OrConditions {
							var var6 yJkkSzS.OrConditionObject

							var6.Name = var5.Name.ValueString()

							if var5.Operator.EqualTo != nil {
								var6.Operator.EqualTo = &yJkkSzS.EqualToObject{}

								var6.Operator.EqualTo.Context = var5.Operator.EqualTo.Context.ValueString()

								var6.Operator.EqualTo.Mask = var5.Operator.EqualTo.Mask.ValueStringPointer()

								var6.Operator.EqualTo.Position = var5.Operator.EqualTo.Position.ValueStringPointer()

								var6.Operator.EqualTo.Value = var5.Operator.EqualTo.Value.ValueString()
							}

							if var5.Operator.GreaterThan != nil {
								var6.Operator.GreaterThan = &yJkkSzS.GreaterThanObject{}

								var6.Operator.GreaterThan.Context = var5.Operator.GreaterThan.Context.ValueString()

								if len(var5.Operator.GreaterThan.Qualifiers) != 0 {
									var6.Operator.GreaterThan.Qualifiers = make([]yJkkSzS.GreaterThanQualifierObject, 0, len(var5.Operator.GreaterThan.Qualifiers))
									for _, var7 := range var5.Operator.GreaterThan.Qualifiers {
										var var8 yJkkSzS.GreaterThanQualifierObject

										var8.Name = var7.Name.ValueString()

										var8.Value = var7.Value.ValueString()
										var6.Operator.GreaterThan.Qualifiers = append(var6.Operator.GreaterThan.Qualifiers, var8)
									}
								}

								var6.Operator.GreaterThan.Value = var5.Operator.GreaterThan.Value.ValueInt64()
							}

							if var5.Operator.LessThan != nil {
								var6.Operator.LessThan = &yJkkSzS.LessThanObject{}

								var6.Operator.LessThan.Context = var5.Operator.LessThan.Context.ValueString()

								if len(var5.Operator.LessThan.Qualifiers) != 0 {
									var6.Operator.LessThan.Qualifiers = make([]yJkkSzS.LessThanQualifierObject, 0, len(var5.Operator.LessThan.Qualifiers))
									for _, var9 := range var5.Operator.LessThan.Qualifiers {
										var var10 yJkkSzS.LessThanQualifierObject

										var10.Name = var9.Name.ValueString()

										var10.Value = var9.Value.ValueString()
										var6.Operator.LessThan.Qualifiers = append(var6.Operator.LessThan.Qualifiers, var10)
									}
								}

								var6.Operator.LessThan.Value = var5.Operator.LessThan.Value.ValueInt64()
							}

							if var5.Operator.PatternMatch != nil {
								var6.Operator.PatternMatch = &yJkkSzS.PatternMatchObject{}

								var6.Operator.PatternMatch.Context = var5.Operator.PatternMatch.Context.ValueString()

								var6.Operator.PatternMatch.Pattern = var5.Operator.PatternMatch.Pattern.ValueString()

								if len(var5.Operator.PatternMatch.Qualifiers) != 0 {
									var6.Operator.PatternMatch.Qualifiers = make([]yJkkSzS.PatternMatchQualifierObject, 0, len(var5.Operator.PatternMatch.Qualifiers))
									for _, var11 := range var5.Operator.PatternMatch.Qualifiers {
										var var12 yJkkSzS.PatternMatchQualifierObject

										var12.Name = var11.Name.ValueString()

										var12.Value = var11.Value.ValueString()
										var6.Operator.PatternMatch.Qualifiers = append(var6.Operator.PatternMatch.Qualifiers, var12)
									}
								}
							}
							var4.OrConditions = append(var4.OrConditions, var6)
						}
					}
					var2.AndConditions = append(var2.AndConditions, var4)
				}
			}

			var2.Comment = var1.Comment.ValueStringPointer()

			var2.Name = var1.Name.ValueString()

			var2.OrderFree = var1.OrderFree.ValueBoolPointer()

			var2.Scope = var1.Scope.ValueStringPointer()
			input.Request.Signatures = append(input.Request.Signatures, var2)
		}
	}

	input.Request.Subcategory = state.Subcategory.ValueString()

	input.Request.TcpHalfClosedTimeout = state.TcpHalfClosedTimeout.ValueInt64Pointer()

	input.Request.TcpTimeWaitTimeout = state.TcpTimeWaitTimeout.ValueInt64Pointer()

	input.Request.TcpTimeout = state.TcpTimeout.ValueInt64Pointer()

	input.Request.Technology = state.Technology.ValueString()

	input.Request.Timeout = state.Timeout.ValueInt64Pointer()

	input.Request.TunnelApplications = state.TunnelApplications.ValueBoolPointer()

	input.Request.TunnelOtherApplication = state.TunnelOtherApplication.ValueBoolPointer()

	input.Request.UdpTimeout = state.UdpTimeout.ValueInt64Pointer()

	input.Request.UsedByMalware = state.UsedByMalware.ValueBoolPointer()

	input.Request.VirusIdent = state.VirusIdent.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AbleToTransferFile = types.BoolPointerValue(ans.AbleToTransferFile)

	state.AlgDisableCapability = types.StringPointerValue(ans.AlgDisableCapability)

	state.Category = types.StringValue(ans.Category)

	state.ConsumeBigBandwidth = types.BoolPointerValue(ans.ConsumeBigBandwidth)

	state.DataIdent = types.BoolPointerValue(ans.DataIdent)

	if ans.Default == nil {
		state.Default = nil
	} else {
		state.Default = &applicationRsModel_yJkkSzS_DefaultObject{}

		if ans.Default.IdentByIcmp6Type == nil {
			state.Default.IdentByIcmp6Type = nil
		} else {
			state.Default.IdentByIcmp6Type = &applicationRsModel_yJkkSzS_IdentByIcmp6TypeObject{}

			state.Default.IdentByIcmp6Type.Code = types.StringPointerValue(ans.Default.IdentByIcmp6Type.Code)

			state.Default.IdentByIcmp6Type.Type = types.StringValue(ans.Default.IdentByIcmp6Type.Type)
		}

		if ans.Default.IdentByIcmpType == nil {
			state.Default.IdentByIcmpType = nil
		} else {
			state.Default.IdentByIcmpType = &applicationRsModel_yJkkSzS_IdentByIcmpTypeObject{}

			state.Default.IdentByIcmpType.Code = types.StringPointerValue(ans.Default.IdentByIcmpType.Code)

			state.Default.IdentByIcmpType.Type = types.StringValue(ans.Default.IdentByIcmpType.Type)
		}

		state.Default.IdentByIpProtocol = types.StringPointerValue(ans.Default.IdentByIpProtocol)

		var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.Default.Ports)
		state.Default.Ports = var13
		resp.Diagnostics.Append(var14.Errors()...)
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.EvasiveBehavior = types.BoolPointerValue(ans.EvasiveBehavior)

	state.FileTypeIdent = types.BoolPointerValue(ans.FileTypeIdent)

	state.HasKnownVulnerability = types.BoolPointerValue(ans.HasKnownVulnerability)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NoAppidCaching = types.BoolPointerValue(ans.NoAppidCaching)

	state.ParentApp = types.StringPointerValue(ans.ParentApp)

	state.PervasiveUse = types.BoolPointerValue(ans.PervasiveUse)

	state.ProneToMisuse = types.BoolPointerValue(ans.ProneToMisuse)

	state.Risk = types.Int64Value(ans.Risk)

	if len(ans.Signatures) == 0 {
		state.Signatures = nil
	} else {
		state.Signatures = make([]applicationRsModel_yJkkSzS_SignatureObject, 0, len(ans.Signatures))
		for _, var15 := range ans.Signatures {
			var16 := applicationRsModel_yJkkSzS_SignatureObject{}

			if len(var15.AndConditions) == 0 {
				var16.AndConditions = nil
			} else {
				var16.AndConditions = make([]applicationRsModel_yJkkSzS_AndConditionObject, 0, len(var15.AndConditions))
				for _, var17 := range var15.AndConditions {
					var18 := applicationRsModel_yJkkSzS_AndConditionObject{}

					var18.Name = types.StringValue(var17.Name)

					if len(var17.OrConditions) == 0 {
						var18.OrConditions = nil
					} else {
						var18.OrConditions = make([]applicationRsModel_yJkkSzS_OrConditionObject, 0, len(var17.OrConditions))
						for _, var19 := range var17.OrConditions {
							var20 := applicationRsModel_yJkkSzS_OrConditionObject{}

							var20.Name = types.StringValue(var19.Name)

							var20.Operator = applicationRsModel_yJkkSzS_OperatorObject{}

							if var19.Operator.EqualTo == nil {
								var20.Operator.EqualTo = nil
							} else {
								var20.Operator.EqualTo = &applicationRsModel_yJkkSzS_EqualToObject{}

								var20.Operator.EqualTo.Context = types.StringValue(var19.Operator.EqualTo.Context)

								var20.Operator.EqualTo.Mask = types.StringPointerValue(var19.Operator.EqualTo.Mask)

								var20.Operator.EqualTo.Position = types.StringPointerValue(var19.Operator.EqualTo.Position)

								var20.Operator.EqualTo.Value = types.StringValue(var19.Operator.EqualTo.Value)
							}

							if var19.Operator.GreaterThan == nil {
								var20.Operator.GreaterThan = nil
							} else {
								var20.Operator.GreaterThan = &applicationRsModel_yJkkSzS_GreaterThanObject{}

								var20.Operator.GreaterThan.Context = types.StringValue(var19.Operator.GreaterThan.Context)

								if len(var19.Operator.GreaterThan.Qualifiers) == 0 {
									var20.Operator.GreaterThan.Qualifiers = nil
								} else {
									var20.Operator.GreaterThan.Qualifiers = make([]applicationRsModel_yJkkSzS_GreaterThanQualifierObject, 0, len(var19.Operator.GreaterThan.Qualifiers))
									for _, var21 := range var19.Operator.GreaterThan.Qualifiers {
										var22 := applicationRsModel_yJkkSzS_GreaterThanQualifierObject{}

										var22.Name = types.StringValue(var21.Name)

										var22.Value = types.StringValue(var21.Value)
										var20.Operator.GreaterThan.Qualifiers = append(var20.Operator.GreaterThan.Qualifiers, var22)
									}
								}

								var20.Operator.GreaterThan.Value = types.Int64Value(var19.Operator.GreaterThan.Value)
							}

							if var19.Operator.LessThan == nil {
								var20.Operator.LessThan = nil
							} else {
								var20.Operator.LessThan = &applicationRsModel_yJkkSzS_LessThanObject{}

								var20.Operator.LessThan.Context = types.StringValue(var19.Operator.LessThan.Context)

								if len(var19.Operator.LessThan.Qualifiers) == 0 {
									var20.Operator.LessThan.Qualifiers = nil
								} else {
									var20.Operator.LessThan.Qualifiers = make([]applicationRsModel_yJkkSzS_LessThanQualifierObject, 0, len(var19.Operator.LessThan.Qualifiers))
									for _, var23 := range var19.Operator.LessThan.Qualifiers {
										var24 := applicationRsModel_yJkkSzS_LessThanQualifierObject{}

										var24.Name = types.StringValue(var23.Name)

										var24.Value = types.StringValue(var23.Value)
										var20.Operator.LessThan.Qualifiers = append(var20.Operator.LessThan.Qualifiers, var24)
									}
								}

								var20.Operator.LessThan.Value = types.Int64Value(var19.Operator.LessThan.Value)
							}

							if var19.Operator.PatternMatch == nil {
								var20.Operator.PatternMatch = nil
							} else {
								var20.Operator.PatternMatch = &applicationRsModel_yJkkSzS_PatternMatchObject{}

								var20.Operator.PatternMatch.Context = types.StringValue(var19.Operator.PatternMatch.Context)

								var20.Operator.PatternMatch.Pattern = types.StringValue(var19.Operator.PatternMatch.Pattern)

								if len(var19.Operator.PatternMatch.Qualifiers) == 0 {
									var20.Operator.PatternMatch.Qualifiers = nil
								} else {
									var20.Operator.PatternMatch.Qualifiers = make([]applicationRsModel_yJkkSzS_PatternMatchQualifierObject, 0, len(var19.Operator.PatternMatch.Qualifiers))
									for _, var25 := range var19.Operator.PatternMatch.Qualifiers {
										var26 := applicationRsModel_yJkkSzS_PatternMatchQualifierObject{}

										var26.Name = types.StringValue(var25.Name)

										var26.Value = types.StringValue(var25.Value)
										var20.Operator.PatternMatch.Qualifiers = append(var20.Operator.PatternMatch.Qualifiers, var26)
									}
								}
							}
							var18.OrConditions = append(var18.OrConditions, var20)
						}
					}
					var16.AndConditions = append(var16.AndConditions, var18)
				}
			}

			var16.Comment = types.StringPointerValue(var15.Comment)

			var16.Name = types.StringValue(var15.Name)

			var16.OrderFree = types.BoolPointerValue(var15.OrderFree)

			var16.Scope = types.StringPointerValue(var15.Scope)
			state.Signatures = append(state.Signatures, var16)
		}
	}

	state.Subcategory = types.StringValue(ans.Subcategory)

	state.TcpHalfClosedTimeout = types.Int64PointerValue(ans.TcpHalfClosedTimeout)

	state.TcpTimeWaitTimeout = types.Int64PointerValue(ans.TcpTimeWaitTimeout)

	state.TcpTimeout = types.Int64PointerValue(ans.TcpTimeout)

	state.Technology = types.StringValue(ans.Technology)

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	state.TunnelApplications = types.BoolPointerValue(ans.TunnelApplications)

	state.TunnelOtherApplication = types.BoolPointerValue(ans.TunnelOtherApplication)

	state.UdpTimeout = types.Int64PointerValue(ans.UdpTimeout)

	state.UsedByMalware = types.BoolPointerValue(ans.UsedByMalware)

	state.VirusIdent = types.BoolPointerValue(ans.VirusIdent)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *applicationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state applicationRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_application",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := kJVbXva.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.AbleToTransferFile = types.BoolPointerValue(ans.AbleToTransferFile)

	state.AlgDisableCapability = types.StringPointerValue(ans.AlgDisableCapability)

	state.Category = types.StringValue(ans.Category)

	state.ConsumeBigBandwidth = types.BoolPointerValue(ans.ConsumeBigBandwidth)

	state.DataIdent = types.BoolPointerValue(ans.DataIdent)

	if ans.Default == nil {
		state.Default = nil
	} else {
		state.Default = &applicationRsModel_yJkkSzS_DefaultObject{}

		if ans.Default.IdentByIcmp6Type == nil {
			state.Default.IdentByIcmp6Type = nil
		} else {
			state.Default.IdentByIcmp6Type = &applicationRsModel_yJkkSzS_IdentByIcmp6TypeObject{}

			state.Default.IdentByIcmp6Type.Code = types.StringPointerValue(ans.Default.IdentByIcmp6Type.Code)

			state.Default.IdentByIcmp6Type.Type = types.StringValue(ans.Default.IdentByIcmp6Type.Type)
		}

		if ans.Default.IdentByIcmpType == nil {
			state.Default.IdentByIcmpType = nil
		} else {
			state.Default.IdentByIcmpType = &applicationRsModel_yJkkSzS_IdentByIcmpTypeObject{}

			state.Default.IdentByIcmpType.Code = types.StringPointerValue(ans.Default.IdentByIcmpType.Code)

			state.Default.IdentByIcmpType.Type = types.StringValue(ans.Default.IdentByIcmpType.Type)
		}

		state.Default.IdentByIpProtocol = types.StringPointerValue(ans.Default.IdentByIpProtocol)

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Default.Ports)
		state.Default.Ports = var0
		resp.Diagnostics.Append(var1.Errors()...)
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.EvasiveBehavior = types.BoolPointerValue(ans.EvasiveBehavior)

	state.FileTypeIdent = types.BoolPointerValue(ans.FileTypeIdent)

	state.HasKnownVulnerability = types.BoolPointerValue(ans.HasKnownVulnerability)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NoAppidCaching = types.BoolPointerValue(ans.NoAppidCaching)

	state.ParentApp = types.StringPointerValue(ans.ParentApp)

	state.PervasiveUse = types.BoolPointerValue(ans.PervasiveUse)

	state.ProneToMisuse = types.BoolPointerValue(ans.ProneToMisuse)

	state.Risk = types.Int64Value(ans.Risk)

	if len(ans.Signatures) == 0 {
		state.Signatures = nil
	} else {
		state.Signatures = make([]applicationRsModel_yJkkSzS_SignatureObject, 0, len(ans.Signatures))
		for _, var2 := range ans.Signatures {
			var3 := applicationRsModel_yJkkSzS_SignatureObject{}

			if len(var2.AndConditions) == 0 {
				var3.AndConditions = nil
			} else {
				var3.AndConditions = make([]applicationRsModel_yJkkSzS_AndConditionObject, 0, len(var2.AndConditions))
				for _, var4 := range var2.AndConditions {
					var5 := applicationRsModel_yJkkSzS_AndConditionObject{}

					var5.Name = types.StringValue(var4.Name)

					if len(var4.OrConditions) == 0 {
						var5.OrConditions = nil
					} else {
						var5.OrConditions = make([]applicationRsModel_yJkkSzS_OrConditionObject, 0, len(var4.OrConditions))
						for _, var6 := range var4.OrConditions {
							var7 := applicationRsModel_yJkkSzS_OrConditionObject{}

							var7.Name = types.StringValue(var6.Name)

							var7.Operator = applicationRsModel_yJkkSzS_OperatorObject{}

							if var6.Operator.EqualTo == nil {
								var7.Operator.EqualTo = nil
							} else {
								var7.Operator.EqualTo = &applicationRsModel_yJkkSzS_EqualToObject{}

								var7.Operator.EqualTo.Context = types.StringValue(var6.Operator.EqualTo.Context)

								var7.Operator.EqualTo.Mask = types.StringPointerValue(var6.Operator.EqualTo.Mask)

								var7.Operator.EqualTo.Position = types.StringPointerValue(var6.Operator.EqualTo.Position)

								var7.Operator.EqualTo.Value = types.StringValue(var6.Operator.EqualTo.Value)
							}

							if var6.Operator.GreaterThan == nil {
								var7.Operator.GreaterThan = nil
							} else {
								var7.Operator.GreaterThan = &applicationRsModel_yJkkSzS_GreaterThanObject{}

								var7.Operator.GreaterThan.Context = types.StringValue(var6.Operator.GreaterThan.Context)

								if len(var6.Operator.GreaterThan.Qualifiers) == 0 {
									var7.Operator.GreaterThan.Qualifiers = nil
								} else {
									var7.Operator.GreaterThan.Qualifiers = make([]applicationRsModel_yJkkSzS_GreaterThanQualifierObject, 0, len(var6.Operator.GreaterThan.Qualifiers))
									for _, var8 := range var6.Operator.GreaterThan.Qualifiers {
										var9 := applicationRsModel_yJkkSzS_GreaterThanQualifierObject{}

										var9.Name = types.StringValue(var8.Name)

										var9.Value = types.StringValue(var8.Value)
										var7.Operator.GreaterThan.Qualifiers = append(var7.Operator.GreaterThan.Qualifiers, var9)
									}
								}

								var7.Operator.GreaterThan.Value = types.Int64Value(var6.Operator.GreaterThan.Value)
							}

							if var6.Operator.LessThan == nil {
								var7.Operator.LessThan = nil
							} else {
								var7.Operator.LessThan = &applicationRsModel_yJkkSzS_LessThanObject{}

								var7.Operator.LessThan.Context = types.StringValue(var6.Operator.LessThan.Context)

								if len(var6.Operator.LessThan.Qualifiers) == 0 {
									var7.Operator.LessThan.Qualifiers = nil
								} else {
									var7.Operator.LessThan.Qualifiers = make([]applicationRsModel_yJkkSzS_LessThanQualifierObject, 0, len(var6.Operator.LessThan.Qualifiers))
									for _, var10 := range var6.Operator.LessThan.Qualifiers {
										var11 := applicationRsModel_yJkkSzS_LessThanQualifierObject{}

										var11.Name = types.StringValue(var10.Name)

										var11.Value = types.StringValue(var10.Value)
										var7.Operator.LessThan.Qualifiers = append(var7.Operator.LessThan.Qualifiers, var11)
									}
								}

								var7.Operator.LessThan.Value = types.Int64Value(var6.Operator.LessThan.Value)
							}

							if var6.Operator.PatternMatch == nil {
								var7.Operator.PatternMatch = nil
							} else {
								var7.Operator.PatternMatch = &applicationRsModel_yJkkSzS_PatternMatchObject{}

								var7.Operator.PatternMatch.Context = types.StringValue(var6.Operator.PatternMatch.Context)

								var7.Operator.PatternMatch.Pattern = types.StringValue(var6.Operator.PatternMatch.Pattern)

								if len(var6.Operator.PatternMatch.Qualifiers) == 0 {
									var7.Operator.PatternMatch.Qualifiers = nil
								} else {
									var7.Operator.PatternMatch.Qualifiers = make([]applicationRsModel_yJkkSzS_PatternMatchQualifierObject, 0, len(var6.Operator.PatternMatch.Qualifiers))
									for _, var12 := range var6.Operator.PatternMatch.Qualifiers {
										var13 := applicationRsModel_yJkkSzS_PatternMatchQualifierObject{}

										var13.Name = types.StringValue(var12.Name)

										var13.Value = types.StringValue(var12.Value)
										var7.Operator.PatternMatch.Qualifiers = append(var7.Operator.PatternMatch.Qualifiers, var13)
									}
								}
							}
							var5.OrConditions = append(var5.OrConditions, var7)
						}
					}
					var3.AndConditions = append(var3.AndConditions, var5)
				}
			}

			var3.Comment = types.StringPointerValue(var2.Comment)

			var3.Name = types.StringValue(var2.Name)

			var3.OrderFree = types.BoolPointerValue(var2.OrderFree)

			var3.Scope = types.StringPointerValue(var2.Scope)
			state.Signatures = append(state.Signatures, var3)
		}
	}

	state.Subcategory = types.StringValue(ans.Subcategory)

	state.TcpHalfClosedTimeout = types.Int64PointerValue(ans.TcpHalfClosedTimeout)

	state.TcpTimeWaitTimeout = types.Int64PointerValue(ans.TcpTimeWaitTimeout)

	state.TcpTimeout = types.Int64PointerValue(ans.TcpTimeout)

	state.Technology = types.StringValue(ans.Technology)

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	state.TunnelApplications = types.BoolPointerValue(ans.TunnelApplications)

	state.TunnelOtherApplication = types.BoolPointerValue(ans.TunnelOtherApplication)

	state.UdpTimeout = types.Int64PointerValue(ans.UdpTimeout)

	state.UsedByMalware = types.BoolPointerValue(ans.UsedByMalware)

	state.VirusIdent = types.BoolPointerValue(ans.VirusIdent)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *applicationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state applicationRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_application",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := kJVbXva.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &yJkkSzS.Config{}

	input.Request.AbleToTransferFile = plan.AbleToTransferFile.ValueBoolPointer()

	input.Request.AlgDisableCapability = plan.AlgDisableCapability.ValueStringPointer()

	input.Request.Category = plan.Category.ValueString()

	input.Request.ConsumeBigBandwidth = plan.ConsumeBigBandwidth.ValueBoolPointer()

	input.Request.DataIdent = plan.DataIdent.ValueBoolPointer()

	if plan.Default != nil {
		input.Request.Default = &yJkkSzS.DefaultObject{}

		if plan.Default.IdentByIcmp6Type != nil {
			input.Request.Default.IdentByIcmp6Type = &yJkkSzS.IdentByIcmp6TypeObject{}

			input.Request.Default.IdentByIcmp6Type.Code = plan.Default.IdentByIcmp6Type.Code.ValueStringPointer()

			input.Request.Default.IdentByIcmp6Type.Type = plan.Default.IdentByIcmp6Type.Type.ValueString()
		}

		if plan.Default.IdentByIcmpType != nil {
			input.Request.Default.IdentByIcmpType = &yJkkSzS.IdentByIcmpTypeObject{}

			input.Request.Default.IdentByIcmpType.Code = plan.Default.IdentByIcmpType.Code.ValueStringPointer()

			input.Request.Default.IdentByIcmpType.Type = plan.Default.IdentByIcmpType.Type.ValueString()
		}

		input.Request.Default.IdentByIpProtocol = plan.Default.IdentByIpProtocol.ValueStringPointer()

		resp.Diagnostics.Append(plan.Default.Ports.ElementsAs(ctx, &input.Request.Default.Ports, false)...)
		//if len(plan.Default.Ports) != 0 {
		//    input.Request.Default.Ports = make([]string, 0, len(plan.Default.Ports))
		//    for _, var0 := range plan.Default.Ports {
		//        input.Request.Default.Ports = append(input.Request.Default.Ports, var0.ValueString())
		//    }
		//}
	}

	input.Request.Description = plan.Description.ValueStringPointer()

	input.Request.EvasiveBehavior = plan.EvasiveBehavior.ValueBoolPointer()

	input.Request.FileTypeIdent = plan.FileTypeIdent.ValueBoolPointer()

	input.Request.HasKnownVulnerability = plan.HasKnownVulnerability.ValueBoolPointer()

	input.Request.Name = plan.Name.ValueString()

	input.Request.NoAppidCaching = plan.NoAppidCaching.ValueBoolPointer()

	input.Request.ParentApp = plan.ParentApp.ValueStringPointer()

	input.Request.PervasiveUse = plan.PervasiveUse.ValueBoolPointer()

	input.Request.ProneToMisuse = plan.ProneToMisuse.ValueBoolPointer()

	input.Request.Risk = plan.Risk.ValueInt64()

	if len(plan.Signatures) != 0 {
		input.Request.Signatures = make([]yJkkSzS.SignatureObject, 0, len(plan.Signatures))
		for _, var1 := range plan.Signatures {
			var var2 yJkkSzS.SignatureObject

			if len(var1.AndConditions) != 0 {
				var2.AndConditions = make([]yJkkSzS.AndConditionObject, 0, len(var1.AndConditions))
				for _, var3 := range var1.AndConditions {
					var var4 yJkkSzS.AndConditionObject

					var4.Name = var3.Name.ValueString()

					if len(var3.OrConditions) != 0 {
						var4.OrConditions = make([]yJkkSzS.OrConditionObject, 0, len(var3.OrConditions))
						for _, var5 := range var3.OrConditions {
							var var6 yJkkSzS.OrConditionObject

							var6.Name = var5.Name.ValueString()

							if var5.Operator.EqualTo != nil {
								var6.Operator.EqualTo = &yJkkSzS.EqualToObject{}

								var6.Operator.EqualTo.Context = var5.Operator.EqualTo.Context.ValueString()

								var6.Operator.EqualTo.Mask = var5.Operator.EqualTo.Mask.ValueStringPointer()

								var6.Operator.EqualTo.Position = var5.Operator.EqualTo.Position.ValueStringPointer()

								var6.Operator.EqualTo.Value = var5.Operator.EqualTo.Value.ValueString()
							}

							if var5.Operator.GreaterThan != nil {
								var6.Operator.GreaterThan = &yJkkSzS.GreaterThanObject{}

								var6.Operator.GreaterThan.Context = var5.Operator.GreaterThan.Context.ValueString()

								if len(var5.Operator.GreaterThan.Qualifiers) != 0 {
									var6.Operator.GreaterThan.Qualifiers = make([]yJkkSzS.GreaterThanQualifierObject, 0, len(var5.Operator.GreaterThan.Qualifiers))
									for _, var7 := range var5.Operator.GreaterThan.Qualifiers {
										var var8 yJkkSzS.GreaterThanQualifierObject

										var8.Name = var7.Name.ValueString()

										var8.Value = var7.Value.ValueString()
										var6.Operator.GreaterThan.Qualifiers = append(var6.Operator.GreaterThan.Qualifiers, var8)
									}
								}

								var6.Operator.GreaterThan.Value = var5.Operator.GreaterThan.Value.ValueInt64()
							}

							if var5.Operator.LessThan != nil {
								var6.Operator.LessThan = &yJkkSzS.LessThanObject{}

								var6.Operator.LessThan.Context = var5.Operator.LessThan.Context.ValueString()

								if len(var5.Operator.LessThan.Qualifiers) != 0 {
									var6.Operator.LessThan.Qualifiers = make([]yJkkSzS.LessThanQualifierObject, 0, len(var5.Operator.LessThan.Qualifiers))
									for _, var9 := range var5.Operator.LessThan.Qualifiers {
										var var10 yJkkSzS.LessThanQualifierObject

										var10.Name = var9.Name.ValueString()

										var10.Value = var9.Value.ValueString()
										var6.Operator.LessThan.Qualifiers = append(var6.Operator.LessThan.Qualifiers, var10)
									}
								}

								var6.Operator.LessThan.Value = var5.Operator.LessThan.Value.ValueInt64()
							}

							if var5.Operator.PatternMatch != nil {
								var6.Operator.PatternMatch = &yJkkSzS.PatternMatchObject{}

								var6.Operator.PatternMatch.Context = var5.Operator.PatternMatch.Context.ValueString()

								var6.Operator.PatternMatch.Pattern = var5.Operator.PatternMatch.Pattern.ValueString()

								if len(var5.Operator.PatternMatch.Qualifiers) != 0 {
									var6.Operator.PatternMatch.Qualifiers = make([]yJkkSzS.PatternMatchQualifierObject, 0, len(var5.Operator.PatternMatch.Qualifiers))
									for _, var11 := range var5.Operator.PatternMatch.Qualifiers {
										var var12 yJkkSzS.PatternMatchQualifierObject

										var12.Name = var11.Name.ValueString()

										var12.Value = var11.Value.ValueString()
										var6.Operator.PatternMatch.Qualifiers = append(var6.Operator.PatternMatch.Qualifiers, var12)
									}
								}
							}
							var4.OrConditions = append(var4.OrConditions, var6)
						}
					}
					var2.AndConditions = append(var2.AndConditions, var4)
				}
			}

			var2.Comment = var1.Comment.ValueStringPointer()

			var2.Name = var1.Name.ValueString()

			var2.OrderFree = var1.OrderFree.ValueBoolPointer()

			var2.Scope = var1.Scope.ValueStringPointer()
			input.Request.Signatures = append(input.Request.Signatures, var2)
		}
	}

	input.Request.Subcategory = plan.Subcategory.ValueString()

	input.Request.TcpHalfClosedTimeout = plan.TcpHalfClosedTimeout.ValueInt64Pointer()

	input.Request.TcpTimeWaitTimeout = plan.TcpTimeWaitTimeout.ValueInt64Pointer()

	input.Request.TcpTimeout = plan.TcpTimeout.ValueInt64Pointer()

	input.Request.Technology = plan.Technology.ValueString()

	input.Request.Timeout = plan.Timeout.ValueInt64Pointer()

	input.Request.TunnelApplications = plan.TunnelApplications.ValueBoolPointer()

	input.Request.TunnelOtherApplication = plan.TunnelOtherApplication.ValueBoolPointer()

	input.Request.UdpTimeout = plan.UdpTimeout.ValueInt64Pointer()

	input.Request.UsedByMalware = plan.UsedByMalware.ValueBoolPointer()

	input.Request.VirusIdent = plan.VirusIdent.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.AbleToTransferFile = types.BoolPointerValue(ans.AbleToTransferFile)

	state.AlgDisableCapability = types.StringPointerValue(ans.AlgDisableCapability)

	state.Category = types.StringValue(ans.Category)

	state.ConsumeBigBandwidth = types.BoolPointerValue(ans.ConsumeBigBandwidth)

	state.DataIdent = types.BoolPointerValue(ans.DataIdent)

	if ans.Default == nil {
		state.Default = nil
	} else {
		state.Default = &applicationRsModel_yJkkSzS_DefaultObject{}

		if ans.Default.IdentByIcmp6Type == nil {
			state.Default.IdentByIcmp6Type = nil
		} else {
			state.Default.IdentByIcmp6Type = &applicationRsModel_yJkkSzS_IdentByIcmp6TypeObject{}

			state.Default.IdentByIcmp6Type.Code = types.StringPointerValue(ans.Default.IdentByIcmp6Type.Code)

			state.Default.IdentByIcmp6Type.Type = types.StringValue(ans.Default.IdentByIcmp6Type.Type)
		}

		if ans.Default.IdentByIcmpType == nil {
			state.Default.IdentByIcmpType = nil
		} else {
			state.Default.IdentByIcmpType = &applicationRsModel_yJkkSzS_IdentByIcmpTypeObject{}

			state.Default.IdentByIcmpType.Code = types.StringPointerValue(ans.Default.IdentByIcmpType.Code)

			state.Default.IdentByIcmpType.Type = types.StringValue(ans.Default.IdentByIcmpType.Type)
		}

		state.Default.IdentByIpProtocol = types.StringPointerValue(ans.Default.IdentByIpProtocol)

		var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.Default.Ports)
		state.Default.Ports = var13
		resp.Diagnostics.Append(var14.Errors()...)
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.EvasiveBehavior = types.BoolPointerValue(ans.EvasiveBehavior)

	state.FileTypeIdent = types.BoolPointerValue(ans.FileTypeIdent)

	state.HasKnownVulnerability = types.BoolPointerValue(ans.HasKnownVulnerability)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NoAppidCaching = types.BoolPointerValue(ans.NoAppidCaching)

	state.ParentApp = types.StringPointerValue(ans.ParentApp)

	state.PervasiveUse = types.BoolPointerValue(ans.PervasiveUse)

	state.ProneToMisuse = types.BoolPointerValue(ans.ProneToMisuse)

	state.Risk = types.Int64Value(ans.Risk)

	if len(ans.Signatures) == 0 {
		state.Signatures = nil
	} else {
		state.Signatures = make([]applicationRsModel_yJkkSzS_SignatureObject, 0, len(ans.Signatures))
		for _, var15 := range ans.Signatures {
			var16 := applicationRsModel_yJkkSzS_SignatureObject{}

			if len(var15.AndConditions) == 0 {
				var16.AndConditions = nil
			} else {
				var16.AndConditions = make([]applicationRsModel_yJkkSzS_AndConditionObject, 0, len(var15.AndConditions))
				for _, var17 := range var15.AndConditions {
					var18 := applicationRsModel_yJkkSzS_AndConditionObject{}

					var18.Name = types.StringValue(var17.Name)

					if len(var17.OrConditions) == 0 {
						var18.OrConditions = nil
					} else {
						var18.OrConditions = make([]applicationRsModel_yJkkSzS_OrConditionObject, 0, len(var17.OrConditions))
						for _, var19 := range var17.OrConditions {
							var20 := applicationRsModel_yJkkSzS_OrConditionObject{}

							var20.Name = types.StringValue(var19.Name)

							var20.Operator = applicationRsModel_yJkkSzS_OperatorObject{}

							if var19.Operator.EqualTo == nil {
								var20.Operator.EqualTo = nil
							} else {
								var20.Operator.EqualTo = &applicationRsModel_yJkkSzS_EqualToObject{}

								var20.Operator.EqualTo.Context = types.StringValue(var19.Operator.EqualTo.Context)

								var20.Operator.EqualTo.Mask = types.StringPointerValue(var19.Operator.EqualTo.Mask)

								var20.Operator.EqualTo.Position = types.StringPointerValue(var19.Operator.EqualTo.Position)

								var20.Operator.EqualTo.Value = types.StringValue(var19.Operator.EqualTo.Value)
							}

							if var19.Operator.GreaterThan == nil {
								var20.Operator.GreaterThan = nil
							} else {
								var20.Operator.GreaterThan = &applicationRsModel_yJkkSzS_GreaterThanObject{}

								var20.Operator.GreaterThan.Context = types.StringValue(var19.Operator.GreaterThan.Context)

								if len(var19.Operator.GreaterThan.Qualifiers) == 0 {
									var20.Operator.GreaterThan.Qualifiers = nil
								} else {
									var20.Operator.GreaterThan.Qualifiers = make([]applicationRsModel_yJkkSzS_GreaterThanQualifierObject, 0, len(var19.Operator.GreaterThan.Qualifiers))
									for _, var21 := range var19.Operator.GreaterThan.Qualifiers {
										var22 := applicationRsModel_yJkkSzS_GreaterThanQualifierObject{}

										var22.Name = types.StringValue(var21.Name)

										var22.Value = types.StringValue(var21.Value)
										var20.Operator.GreaterThan.Qualifiers = append(var20.Operator.GreaterThan.Qualifiers, var22)
									}
								}

								var20.Operator.GreaterThan.Value = types.Int64Value(var19.Operator.GreaterThan.Value)
							}

							if var19.Operator.LessThan == nil {
								var20.Operator.LessThan = nil
							} else {
								var20.Operator.LessThan = &applicationRsModel_yJkkSzS_LessThanObject{}

								var20.Operator.LessThan.Context = types.StringValue(var19.Operator.LessThan.Context)

								if len(var19.Operator.LessThan.Qualifiers) == 0 {
									var20.Operator.LessThan.Qualifiers = nil
								} else {
									var20.Operator.LessThan.Qualifiers = make([]applicationRsModel_yJkkSzS_LessThanQualifierObject, 0, len(var19.Operator.LessThan.Qualifiers))
									for _, var23 := range var19.Operator.LessThan.Qualifiers {
										var24 := applicationRsModel_yJkkSzS_LessThanQualifierObject{}

										var24.Name = types.StringValue(var23.Name)

										var24.Value = types.StringValue(var23.Value)
										var20.Operator.LessThan.Qualifiers = append(var20.Operator.LessThan.Qualifiers, var24)
									}
								}

								var20.Operator.LessThan.Value = types.Int64Value(var19.Operator.LessThan.Value)
							}

							if var19.Operator.PatternMatch == nil {
								var20.Operator.PatternMatch = nil
							} else {
								var20.Operator.PatternMatch = &applicationRsModel_yJkkSzS_PatternMatchObject{}

								var20.Operator.PatternMatch.Context = types.StringValue(var19.Operator.PatternMatch.Context)

								var20.Operator.PatternMatch.Pattern = types.StringValue(var19.Operator.PatternMatch.Pattern)

								if len(var19.Operator.PatternMatch.Qualifiers) == 0 {
									var20.Operator.PatternMatch.Qualifiers = nil
								} else {
									var20.Operator.PatternMatch.Qualifiers = make([]applicationRsModel_yJkkSzS_PatternMatchQualifierObject, 0, len(var19.Operator.PatternMatch.Qualifiers))
									for _, var25 := range var19.Operator.PatternMatch.Qualifiers {
										var26 := applicationRsModel_yJkkSzS_PatternMatchQualifierObject{}

										var26.Name = types.StringValue(var25.Name)

										var26.Value = types.StringValue(var25.Value)
										var20.Operator.PatternMatch.Qualifiers = append(var20.Operator.PatternMatch.Qualifiers, var26)
									}
								}
							}
							var18.OrConditions = append(var18.OrConditions, var20)
						}
					}
					var16.AndConditions = append(var16.AndConditions, var18)
				}
			}

			var16.Comment = types.StringPointerValue(var15.Comment)

			var16.Name = types.StringValue(var15.Name)

			var16.OrderFree = types.BoolPointerValue(var15.OrderFree)

			var16.Scope = types.StringPointerValue(var15.Scope)
			state.Signatures = append(state.Signatures, var16)
		}
	}

	state.Subcategory = types.StringValue(ans.Subcategory)

	state.TcpHalfClosedTimeout = types.Int64PointerValue(ans.TcpHalfClosedTimeout)

	state.TcpTimeWaitTimeout = types.Int64PointerValue(ans.TcpTimeWaitTimeout)

	state.TcpTimeout = types.Int64PointerValue(ans.TcpTimeout)

	state.Technology = types.StringValue(ans.Technology)

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	state.TunnelApplications = types.BoolPointerValue(ans.TunnelApplications)

	state.TunnelOtherApplication = types.BoolPointerValue(ans.TunnelOtherApplication)

	state.UdpTimeout = types.Int64PointerValue(ans.UdpTimeout)

	state.UsedByMalware = types.BoolPointerValue(ans.UsedByMalware)

	state.VirusIdent = types.BoolPointerValue(ans.VirusIdent)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *applicationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_application",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := kJVbXva.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *applicationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
