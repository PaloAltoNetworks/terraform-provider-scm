package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	wugpput "github.com/paloaltonetworks/scm-go/netsec/schemas/application/filters"
	uIHLJPY "github.com/paloaltonetworks/scm-go/netsec/services/applicationfilters"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &applicationFilterListDataSource{}
	_ datasource.DataSourceWithConfigure = &applicationFilterListDataSource{}
)

func NewApplicationFilterListDataSource() datasource.DataSource {
	return &applicationFilterListDataSource{}
}

type applicationFilterListDataSource struct {
	client *scm.Client
}

// applicationFilterListDsModel is the model.
type applicationFilterListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []applicationFilterListDsModel_wugpput_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type applicationFilterListDsModel_wugpput_Config struct {
	Categories              types.List                                          `tfsdk:"categories"`
	Evasive                 types.Bool                                          `tfsdk:"evasive"`
	ExcessiveBandwidthUse   types.Bool                                          `tfsdk:"excessive_bandwidth_use"`
	Excludes                types.List                                          `tfsdk:"excludes"`
	HasKnownVulnerabilities types.Bool                                          `tfsdk:"has_known_vulnerabilities"`
	Id                      types.String                                        `tfsdk:"id"`
	IsSaas                  types.Bool                                          `tfsdk:"is_saas"`
	Name                    types.String                                        `tfsdk:"name"`
	NewAppid                types.Bool                                          `tfsdk:"new_appid"`
	Pervasive               types.Bool                                          `tfsdk:"pervasive"`
	ProneToMisuse           types.Bool                                          `tfsdk:"prone_to_misuse"`
	Risks                   types.List                                          `tfsdk:"risks"`
	SaasCertifications      types.List                                          `tfsdk:"saas_certifications"`
	SaasRisks               types.List                                          `tfsdk:"saas_risks"`
	Subcategories           types.List                                          `tfsdk:"subcategories"`
	Tagging                 *applicationFilterListDsModel_wugpput_TaggingObject `tfsdk:"tagging"`
	Technologies            types.List                                          `tfsdk:"technologies"`
	TransfersFiles          types.Bool                                          `tfsdk:"transfers_files"`
	TunnelsOtherApps        types.Bool                                          `tfsdk:"tunnels_other_apps"`
	UsedByMalware           types.Bool                                          `tfsdk:"used_by_malware"`
}

type applicationFilterListDsModel_wugpput_TaggingObject struct {
	NoTag types.Bool `tfsdk:"no_tag"`
	Tags  types.List `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (d *applicationFilterListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application_filter_list"
}

// Schema defines the schema for this listing data source.
func (d *applicationFilterListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"category":true, "evasive":true, "excessive_bandwidth_use":true, "exclude":true, "has_known_vulnerabilities":true, "id":true, "is_saas":true, "name":true, "new_appid":true, "pervasive":true, "prone_to_misuse":true, "risk":true, "saas_certifications":true, "saas_risk":true, "subcategory":true, "tagging":true, "technology":true, "transfers_files":true, "tunnels_other_apps":true, "used_by_malware":true} forceNew:map[string]bool(nil)
						"categories": dsschema.ListAttribute{
							Description: "The Categories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"evasive": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"excessive_bandwidth_use": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"excludes": dsschema.ListAttribute{
							Description: "The Excludes param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"has_known_vulnerabilities": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"is_saas": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
							Computed:    true,
						},
						"new_appid": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"pervasive": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"prone_to_misuse": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"risks": dsschema.ListAttribute{
							Description: "The Risks param. Individual elements in this list are subject to additional validation. Value must be between 1 and 5.",
							Computed:    true,
							ElementType: types.Int64Type,
						},
						"saas_certifications": dsschema.ListAttribute{
							Description: "The SaasCertifications param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"saas_risks": dsschema.ListAttribute{
							Description: "The SaasRisks param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"subcategories": dsschema.ListAttribute{
							Description: "The Subcategories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"tagging": dsschema.SingleNestedAttribute{
							Description: "The Tagging param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"no_tag":true, "tag":true} forceNew:map[string]bool(nil)
								"no_tag": dsschema.BoolAttribute{
									Description: "The NoTag param.",
									Computed:    true,
								},
								"tags": dsschema.ListAttribute{
									Description: "The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters.",
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"technologies": dsschema.ListAttribute{
							Description: "The Technologies param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"transfers_files": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"tunnels_other_apps": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
						"used_by_malware": dsschema.BoolAttribute{
							Description: "only True is a valid value.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *applicationFilterListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *applicationFilterListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state applicationFilterListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_application_filter_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := uIHLJPY.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]applicationFilterListDsModel_wugpput_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := applicationFilterListDsModel_wugpput_Config{}

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Categories)
			var1.Categories = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Evasive = types.BoolPointerValue(var0.Evasive)

			var1.ExcessiveBandwidthUse = types.BoolPointerValue(var0.ExcessiveBandwidthUse)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Excludes)
			var1.Excludes = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.HasKnownVulnerabilities = types.BoolPointerValue(var0.HasKnownVulnerabilities)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.IsSaas = types.BoolPointerValue(var0.IsSaas)

			var1.Name = types.StringValue(var0.Name)

			var1.NewAppid = types.BoolPointerValue(var0.NewAppid)

			var1.Pervasive = types.BoolPointerValue(var0.Pervasive)

			var1.ProneToMisuse = types.BoolPointerValue(var0.ProneToMisuse)

			var6, var7 := types.ListValueFrom(ctx, types.Int64Type, var0.Risks)
			var1.Risks = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.SaasCertifications)
			var1.SaasCertifications = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.SaasRisks)
			var1.SaasRisks = var10
			resp.Diagnostics.Append(var11.Errors()...)

			var12, var13 := types.ListValueFrom(ctx, types.StringType, var0.Subcategories)
			var1.Subcategories = var12
			resp.Diagnostics.Append(var13.Errors()...)

			if var0.Tagging == nil {
				var1.Tagging = nil
			} else {
				var1.Tagging = &applicationFilterListDsModel_wugpput_TaggingObject{}

				var1.Tagging.NoTag = types.BoolPointerValue(var0.Tagging.NoTag)

				var14, var15 := types.ListValueFrom(ctx, types.StringType, var0.Tagging.Tags)
				var1.Tagging.Tags = var14
				resp.Diagnostics.Append(var15.Errors()...)
			}

			var16, var17 := types.ListValueFrom(ctx, types.StringType, var0.Technologies)
			var1.Technologies = var16
			resp.Diagnostics.Append(var17.Errors()...)

			var1.TransfersFiles = types.BoolPointerValue(var0.TransfersFiles)

			var1.TunnelsOtherApps = types.BoolPointerValue(var0.TunnelsOtherApps)

			var1.UsedByMalware = types.BoolPointerValue(var0.UsedByMalware)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &applicationFilterDataSource{}
	_ datasource.DataSourceWithConfigure = &applicationFilterDataSource{}
)

func NewApplicationFilterDataSource() datasource.DataSource {
	return &applicationFilterDataSource{}
}

type applicationFilterDataSource struct {
	client *scm.Client
}

// applicationFilterDsModel is the model.
type applicationFilterDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Categories              types.List `tfsdk:"categories"`
	Evasive                 types.Bool `tfsdk:"evasive"`
	ExcessiveBandwidthUse   types.Bool `tfsdk:"excessive_bandwidth_use"`
	Excludes                types.List `tfsdk:"excludes"`
	HasKnownVulnerabilities types.Bool `tfsdk:"has_known_vulnerabilities"`
	// omit input: id
	IsSaas             types.Bool                                      `tfsdk:"is_saas"`
	Name               types.String                                    `tfsdk:"name"`
	NewAppid           types.Bool                                      `tfsdk:"new_appid"`
	Pervasive          types.Bool                                      `tfsdk:"pervasive"`
	ProneToMisuse      types.Bool                                      `tfsdk:"prone_to_misuse"`
	Risks              types.List                                      `tfsdk:"risks"`
	SaasCertifications types.List                                      `tfsdk:"saas_certifications"`
	SaasRisks          types.List                                      `tfsdk:"saas_risks"`
	Subcategories      types.List                                      `tfsdk:"subcategories"`
	Tagging            *applicationFilterDsModel_wugpput_TaggingObject `tfsdk:"tagging"`
	Technologies       types.List                                      `tfsdk:"technologies"`
	TransfersFiles     types.Bool                                      `tfsdk:"transfers_files"`
	TunnelsOtherApps   types.Bool                                      `tfsdk:"tunnels_other_apps"`
	UsedByMalware      types.Bool                                      `tfsdk:"used_by_malware"`
}

type applicationFilterDsModel_wugpput_TaggingObject struct {
	NoTag types.Bool `tfsdk:"no_tag"`
	Tags  types.List `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (d *applicationFilterDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application_filter"
}

// Schema defines the schema for this data source.
func (d *applicationFilterDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"category":true, "evasive":true, "excessive_bandwidth_use":true, "exclude":true, "has_known_vulnerabilities":true, "id":true, "is_saas":true, "name":true, "new_appid":true, "pervasive":true, "prone_to_misuse":true, "risk":true, "saas_certifications":true, "saas_risk":true, "subcategory":true, "tagging":true, "technology":true, "tfid":true, "transfers_files":true, "tunnels_other_apps":true, "used_by_malware":true} forceNew:map[string]bool{"id":true}
			"categories": dsschema.ListAttribute{
				Description: "The Categories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"evasive": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"excessive_bandwidth_use": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"excludes": dsschema.ListAttribute{
				Description: "The Excludes param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"has_known_vulnerabilities": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"is_saas": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Computed:    true,
			},
			"new_appid": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"pervasive": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"prone_to_misuse": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"risks": dsschema.ListAttribute{
				Description: "The Risks param. Individual elements in this list are subject to additional validation. Value must be between 1 and 5.",
				Computed:    true,
				ElementType: types.Int64Type,
			},
			"saas_certifications": dsschema.ListAttribute{
				Description: "The SaasCertifications param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"saas_risks": dsschema.ListAttribute{
				Description: "The SaasRisks param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"subcategories": dsschema.ListAttribute{
				Description: "The Subcategories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tagging": dsschema.SingleNestedAttribute{
				Description: "The Tagging param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"no_tag":true, "tag":true} forceNew:map[string]bool(nil)
					"no_tag": dsschema.BoolAttribute{
						Description: "The NoTag param.",
						Computed:    true,
					},
					"tags": dsschema.ListAttribute{
						Description: "The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters.",
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"technologies": dsschema.ListAttribute{
				Description: "The Technologies param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"transfers_files": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"tunnels_other_apps": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
			"used_by_malware": dsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *applicationFilterDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *applicationFilterDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state applicationFilterDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_application_filter",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := uIHLJPY.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Evasive = types.BoolPointerValue(ans.Evasive)

	state.ExcessiveBandwidthUse = types.BoolPointerValue(ans.ExcessiveBandwidthUse)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Excludes)
	state.Excludes = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.HasKnownVulnerabilities = types.BoolPointerValue(ans.HasKnownVulnerabilities)

	state.Id = types.StringPointerValue(ans.Id)

	state.IsSaas = types.BoolPointerValue(ans.IsSaas)

	state.Name = types.StringValue(ans.Name)

	state.NewAppid = types.BoolPointerValue(ans.NewAppid)

	state.Pervasive = types.BoolPointerValue(ans.Pervasive)

	state.ProneToMisuse = types.BoolPointerValue(ans.ProneToMisuse)

	var4, var5 := types.ListValueFrom(ctx, types.Int64Type, ans.Risks)
	state.Risks = var4
	resp.Diagnostics.Append(var5.Errors()...)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.SaasCertifications)
	state.SaasCertifications = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.SaasRisks)
	state.SaasRisks = var8
	resp.Diagnostics.Append(var9.Errors()...)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Subcategories)
	state.Subcategories = var10
	resp.Diagnostics.Append(var11.Errors()...)

	if ans.Tagging == nil {
		state.Tagging = nil
	} else {
		state.Tagging = &applicationFilterDsModel_wugpput_TaggingObject{}

		state.Tagging.NoTag = types.BoolPointerValue(ans.Tagging.NoTag)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.Tagging.Tags)
		state.Tagging.Tags = var12
		resp.Diagnostics.Append(var13.Errors()...)
	}

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Technologies)
	state.Technologies = var14
	resp.Diagnostics.Append(var15.Errors()...)

	state.TransfersFiles = types.BoolPointerValue(ans.TransfersFiles)

	state.TunnelsOtherApps = types.BoolPointerValue(ans.TunnelsOtherApps)

	state.UsedByMalware = types.BoolPointerValue(ans.UsedByMalware)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &applicationFilterResource{}
	_ resource.ResourceWithConfigure   = &applicationFilterResource{}
	_ resource.ResourceWithImportState = &applicationFilterResource{}
)

func NewApplicationFilterResource() resource.Resource {
	return &applicationFilterResource{}
}

type applicationFilterResource struct {
	client *scm.Client
}

// applicationFilterRsModel is the model.
type applicationFilterRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Categories              types.List                                      `tfsdk:"categories"`
	Device                  types.String                                    `tfsdk:"device"`
	Evasive                 types.Bool                                      `tfsdk:"evasive"`
	ExcessiveBandwidthUse   types.Bool                                      `tfsdk:"excessive_bandwidth_use"`
	Excludes                types.List                                      `tfsdk:"excludes"`
	Folder                  types.String                                    `tfsdk:"folder"`
	HasKnownVulnerabilities types.Bool                                      `tfsdk:"has_known_vulnerabilities"`
	Id                      types.String                                    `tfsdk:"id"`
	IsSaas                  types.Bool                                      `tfsdk:"is_saas"`
	Name                    types.String                                    `tfsdk:"name"`
	NewAppid                types.Bool                                      `tfsdk:"new_appid"`
	Pervasive               types.Bool                                      `tfsdk:"pervasive"`
	ProneToMisuse           types.Bool                                      `tfsdk:"prone_to_misuse"`
	Risks                   types.List                                      `tfsdk:"risks"`
	SaasCertifications      types.List                                      `tfsdk:"saas_certifications"`
	SaasRisks               types.List                                      `tfsdk:"saas_risks"`
	Snippet                 types.String                                    `tfsdk:"snippet"`
	Subcategories           types.List                                      `tfsdk:"subcategories"`
	Tagging                 *applicationFilterRsModel_wugpput_TaggingObject `tfsdk:"tagging"`
	Technologies            types.List                                      `tfsdk:"technologies"`
	TransfersFiles          types.Bool                                      `tfsdk:"transfers_files"`
	TunnelsOtherApps        types.Bool                                      `tfsdk:"tunnels_other_apps"`
	UsedByMalware           types.Bool                                      `tfsdk:"used_by_malware"`

	// Output.
	// omit input: categories
	// omit input: evasive
	// omit input: excessive_bandwidth_use
	// omit input: excludes
	// omit input: has_known_vulnerabilities
	// omit input: id
	// omit input: is_saas
	// omit input: name
	// omit input: new_appid
	// omit input: pervasive
	// omit input: prone_to_misuse
	// omit input: risks
	// omit input: saas_certifications
	// omit input: saas_risks
	// omit input: subcategories
	// omit input: tagging
	// omit input: technologies
	// omit input: transfers_files
	// omit input: tunnels_other_apps
	// omit input: used_by_malware
}

type applicationFilterRsModel_wugpput_TaggingObject struct {
	NoTag types.Bool `tfsdk:"no_tag"`
	Tags  types.List `tfsdk:"tags"`
}

// Metadata returns the data source type name.
func (r *applicationFilterResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_application_filter"
}

// Schema defines the schema for this data source.
func (r *applicationFilterResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"category":true, "device":true, "evasive":true, "excessive_bandwidth_use":true, "exclude":true, "folder":true, "has_known_vulnerabilities":true, "id":true, "is_saas":true, "name":true, "new_appid":true, "pervasive":true, "prone_to_misuse":true, "risk":true, "saas_certifications":true, "saas_risk":true, "snippet":true, "subcategory":true, "tagging":true, "technology":true, "transfers_files":true, "tunnels_other_apps":true, "used_by_malware":true} outputs:map[string]bool{"category":true, "evasive":true, "excessive_bandwidth_use":true, "exclude":true, "has_known_vulnerabilities":true, "id":true, "is_saas":true, "name":true, "new_appid":true, "pervasive":true, "prone_to_misuse":true, "risk":true, "saas_certifications":true, "saas_risk":true, "subcategory":true, "tagging":true, "technology":true, "tfid":true, "transfers_files":true, "tunnels_other_apps":true, "used_by_malware":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"categories": rsschema.ListAttribute{
				Description: "The Categories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(
						stringvalidator.LengthAtMost(128),
					),
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"evasive": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"excessive_bandwidth_use": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"excludes": rsschema.ListAttribute{
				Description: "The Excludes param. Individual elements in this list are subject to additional validation. String length must not exceed 63 characters.",
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(
						stringvalidator.LengthAtMost(63),
					),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"has_known_vulnerabilities": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"is_saas": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(31),
				},
			},
			"new_appid": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"pervasive": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"prone_to_misuse": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"risks": rsschema.ListAttribute{
				Description: "The Risks param. Individual elements in this list are subject to additional validation. Value must be between 1 and 5.",
				Optional:    true,
				ElementType: types.Int64Type,
				Validators: []validator.List{
					listvalidator.ValueInt64sAre(
						int64validator.Between(1, 5),
					),
				},
			},
			"saas_certifications": rsschema.ListAttribute{
				Description: "The SaasCertifications param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(
						stringvalidator.LengthAtMost(32),
					),
				},
			},
			"saas_risks": rsschema.ListAttribute{
				Description: "The SaasRisks param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(
						stringvalidator.LengthAtMost(32),
					),
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"subcategories": rsschema.ListAttribute{
				Description: "The Subcategories param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(
						stringvalidator.LengthAtMost(128),
					),
				},
			},
			"tagging": rsschema.SingleNestedAttribute{
				Description: "The Tagging param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"no_tag":true, "tag":true} outputs:map[string]bool{"no_tag":true, "tag":true} forceNew:map[string]bool(nil)
					"no_tag": rsschema.BoolAttribute{
						Description: "The NoTag param. Ensure that only one of the following is specified: `no_tag`, `tag`",
						Optional:    true,
						Validators: []validator.Bool{
							boolvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("tag"),
							),
						},
					},
					"tags": rsschema.ListAttribute{
						Description: "The Tags param. Individual elements in this list are subject to additional validation. String length must not exceed 127 characters. Ensure that only one of the following is specified: `no_tag`, `tag`",
						Optional:    true,
						ElementType: types.StringType,
						Validators: []validator.List{
							listvalidator.ValueStringsAre(
								stringvalidator.LengthAtMost(127),
							),
						},
					},
				},
			},
			"technologies": rsschema.ListAttribute{
				Description: "The Technologies param. Individual elements in this list are subject to additional validation. String length must not exceed 128 characters.",
				Optional:    true,
				ElementType: types.StringType,
				Validators: []validator.List{
					listvalidator.ValueStringsAre(
						stringvalidator.LengthAtMost(128),
					),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"transfers_files": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"tunnels_other_apps": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
			"used_by_malware": rsschema.BoolAttribute{
				Description: "only True is a valid value.",
				Optional:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *applicationFilterResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *applicationFilterResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state applicationFilterRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_application_filter",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &wugpput.Config{}

	resp.Diagnostics.Append(state.Categories.ElementsAs(ctx, &input.Request.Categories, false)...)
	//if len(state.Categories) != 0 {
	//    input.Request.Categories = make([]string, 0, len(state.Categories))
	//    for _, var0 := range state.Categories {
	//        input.Request.Categories = append(input.Request.Categories, var0.ValueString())
	//    }
	//}

	input.Request.Evasive = state.Evasive.ValueBoolPointer()

	input.Request.ExcessiveBandwidthUse = state.ExcessiveBandwidthUse.ValueBoolPointer()

	resp.Diagnostics.Append(state.Excludes.ElementsAs(ctx, &input.Request.Excludes, false)...)
	//if len(state.Excludes) != 0 {
	//    input.Request.Excludes = make([]string, 0, len(state.Excludes))
	//    for _, var1 := range state.Excludes {
	//        input.Request.Excludes = append(input.Request.Excludes, var1.ValueString())
	//    }
	//}

	input.Request.HasKnownVulnerabilities = state.HasKnownVulnerabilities.ValueBoolPointer()

	input.Request.IsSaas = state.IsSaas.ValueBoolPointer()

	input.Request.Name = state.Name.ValueString()

	input.Request.NewAppid = state.NewAppid.ValueBoolPointer()

	input.Request.Pervasive = state.Pervasive.ValueBoolPointer()

	input.Request.ProneToMisuse = state.ProneToMisuse.ValueBoolPointer()

	resp.Diagnostics.Append(state.Risks.ElementsAs(ctx, &input.Request.Risks, false)...)
	//if len(state.Risks) != 0 {
	//    input.Request.Risks = make([]int64, 0, len(state.Risks))
	//    for _, var2 := range state.Risks {
	//        input.Request.Risks = append(input.Request.Risks, var2.ValueInt64())
	//    }
	//}

	resp.Diagnostics.Append(state.SaasCertifications.ElementsAs(ctx, &input.Request.SaasCertifications, false)...)
	//if len(state.SaasCertifications) != 0 {
	//    input.Request.SaasCertifications = make([]string, 0, len(state.SaasCertifications))
	//    for _, var3 := range state.SaasCertifications {
	//        input.Request.SaasCertifications = append(input.Request.SaasCertifications, var3.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.SaasRisks.ElementsAs(ctx, &input.Request.SaasRisks, false)...)
	//if len(state.SaasRisks) != 0 {
	//    input.Request.SaasRisks = make([]string, 0, len(state.SaasRisks))
	//    for _, var4 := range state.SaasRisks {
	//        input.Request.SaasRisks = append(input.Request.SaasRisks, var4.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Subcategories.ElementsAs(ctx, &input.Request.Subcategories, false)...)
	//if len(state.Subcategories) != 0 {
	//    input.Request.Subcategories = make([]string, 0, len(state.Subcategories))
	//    for _, var5 := range state.Subcategories {
	//        input.Request.Subcategories = append(input.Request.Subcategories, var5.ValueString())
	//    }
	//}

	if state.Tagging != nil {
		input.Request.Tagging = &wugpput.TaggingObject{}

		input.Request.Tagging.NoTag = state.Tagging.NoTag.ValueBoolPointer()

		resp.Diagnostics.Append(state.Tagging.Tags.ElementsAs(ctx, &input.Request.Tagging.Tags, false)...)
		//if len(state.Tagging.Tags) != 0 {
		//    input.Request.Tagging.Tags = make([]string, 0, len(state.Tagging.Tags))
		//    for _, var6 := range state.Tagging.Tags {
		//        input.Request.Tagging.Tags = append(input.Request.Tagging.Tags, var6.ValueString())
		//    }
		//}
	}

	resp.Diagnostics.Append(state.Technologies.ElementsAs(ctx, &input.Request.Technologies, false)...)
	//if len(state.Technologies) != 0 {
	//    input.Request.Technologies = make([]string, 0, len(state.Technologies))
	//    for _, var7 := range state.Technologies {
	//        input.Request.Technologies = append(input.Request.Technologies, var7.ValueString())
	//    }
	//}

	input.Request.TransfersFiles = state.TransfersFiles.ValueBoolPointer()

	input.Request.TunnelsOtherApps = state.TunnelsOtherApps.ValueBoolPointer()

	input.Request.UsedByMalware = state.UsedByMalware.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var8
	resp.Diagnostics.Append(var9.Errors()...)

	state.Evasive = types.BoolPointerValue(ans.Evasive)

	state.ExcessiveBandwidthUse = types.BoolPointerValue(ans.ExcessiveBandwidthUse)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Excludes)
	state.Excludes = var10
	resp.Diagnostics.Append(var11.Errors()...)

	state.HasKnownVulnerabilities = types.BoolPointerValue(ans.HasKnownVulnerabilities)

	state.Id = types.StringPointerValue(ans.Id)

	state.IsSaas = types.BoolPointerValue(ans.IsSaas)

	state.Name = types.StringValue(ans.Name)

	state.NewAppid = types.BoolPointerValue(ans.NewAppid)

	state.Pervasive = types.BoolPointerValue(ans.Pervasive)

	state.ProneToMisuse = types.BoolPointerValue(ans.ProneToMisuse)

	var12, var13 := types.ListValueFrom(ctx, types.Int64Type, ans.Risks)
	state.Risks = var12
	resp.Diagnostics.Append(var13.Errors()...)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.SaasCertifications)
	state.SaasCertifications = var14
	resp.Diagnostics.Append(var15.Errors()...)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.SaasRisks)
	state.SaasRisks = var16
	resp.Diagnostics.Append(var17.Errors()...)

	var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Subcategories)
	state.Subcategories = var18
	resp.Diagnostics.Append(var19.Errors()...)

	if ans.Tagging == nil {
		state.Tagging = nil
	} else {
		state.Tagging = &applicationFilterRsModel_wugpput_TaggingObject{}

		state.Tagging.NoTag = types.BoolPointerValue(ans.Tagging.NoTag)

		var20, var21 := types.ListValueFrom(ctx, types.StringType, ans.Tagging.Tags)
		state.Tagging.Tags = var20
		resp.Diagnostics.Append(var21.Errors()...)
	}

	var22, var23 := types.ListValueFrom(ctx, types.StringType, ans.Technologies)
	state.Technologies = var22
	resp.Diagnostics.Append(var23.Errors()...)

	state.TransfersFiles = types.BoolPointerValue(ans.TransfersFiles)

	state.TunnelsOtherApps = types.BoolPointerValue(ans.TunnelsOtherApps)

	state.UsedByMalware = types.BoolPointerValue(ans.UsedByMalware)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *applicationFilterResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state applicationFilterRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_application_filter",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Evasive = types.BoolPointerValue(ans.Evasive)

	state.ExcessiveBandwidthUse = types.BoolPointerValue(ans.ExcessiveBandwidthUse)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Excludes)
	state.Excludes = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.HasKnownVulnerabilities = types.BoolPointerValue(ans.HasKnownVulnerabilities)

	state.Id = types.StringPointerValue(ans.Id)

	state.IsSaas = types.BoolPointerValue(ans.IsSaas)

	state.Name = types.StringValue(ans.Name)

	state.NewAppid = types.BoolPointerValue(ans.NewAppid)

	state.Pervasive = types.BoolPointerValue(ans.Pervasive)

	state.ProneToMisuse = types.BoolPointerValue(ans.ProneToMisuse)

	var4, var5 := types.ListValueFrom(ctx, types.Int64Type, ans.Risks)
	state.Risks = var4
	resp.Diagnostics.Append(var5.Errors()...)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.SaasCertifications)
	state.SaasCertifications = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.SaasRisks)
	state.SaasRisks = var8
	resp.Diagnostics.Append(var9.Errors()...)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Subcategories)
	state.Subcategories = var10
	resp.Diagnostics.Append(var11.Errors()...)

	if ans.Tagging == nil {
		state.Tagging = nil
	} else {
		state.Tagging = &applicationFilterRsModel_wugpput_TaggingObject{}

		state.Tagging.NoTag = types.BoolPointerValue(ans.Tagging.NoTag)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.Tagging.Tags)
		state.Tagging.Tags = var12
		resp.Diagnostics.Append(var13.Errors()...)
	}

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Technologies)
	state.Technologies = var14
	resp.Diagnostics.Append(var15.Errors()...)

	state.TransfersFiles = types.BoolPointerValue(ans.TransfersFiles)

	state.TunnelsOtherApps = types.BoolPointerValue(ans.TunnelsOtherApps)

	state.UsedByMalware = types.BoolPointerValue(ans.UsedByMalware)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *applicationFilterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state applicationFilterRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_application_filter",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &wugpput.Config{}

	resp.Diagnostics.Append(plan.Categories.ElementsAs(ctx, &input.Request.Categories, false)...)
	//if len(plan.Categories) != 0 {
	//    input.Request.Categories = make([]string, 0, len(plan.Categories))
	//    for _, var0 := range plan.Categories {
	//        input.Request.Categories = append(input.Request.Categories, var0.ValueString())
	//    }
	//}

	input.Request.Evasive = plan.Evasive.ValueBoolPointer()

	input.Request.ExcessiveBandwidthUse = plan.ExcessiveBandwidthUse.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Excludes.ElementsAs(ctx, &input.Request.Excludes, false)...)
	//if len(plan.Excludes) != 0 {
	//    input.Request.Excludes = make([]string, 0, len(plan.Excludes))
	//    for _, var1 := range plan.Excludes {
	//        input.Request.Excludes = append(input.Request.Excludes, var1.ValueString())
	//    }
	//}

	input.Request.HasKnownVulnerabilities = plan.HasKnownVulnerabilities.ValueBoolPointer()

	input.Request.IsSaas = plan.IsSaas.ValueBoolPointer()

	input.Request.Name = plan.Name.ValueString()

	input.Request.NewAppid = plan.NewAppid.ValueBoolPointer()

	input.Request.Pervasive = plan.Pervasive.ValueBoolPointer()

	input.Request.ProneToMisuse = plan.ProneToMisuse.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Risks.ElementsAs(ctx, &input.Request.Risks, false)...)
	//if len(plan.Risks) != 0 {
	//    input.Request.Risks = make([]int64, 0, len(plan.Risks))
	//    for _, var2 := range plan.Risks {
	//        input.Request.Risks = append(input.Request.Risks, var2.ValueInt64())
	//    }
	//}

	resp.Diagnostics.Append(plan.SaasCertifications.ElementsAs(ctx, &input.Request.SaasCertifications, false)...)
	//if len(plan.SaasCertifications) != 0 {
	//    input.Request.SaasCertifications = make([]string, 0, len(plan.SaasCertifications))
	//    for _, var3 := range plan.SaasCertifications {
	//        input.Request.SaasCertifications = append(input.Request.SaasCertifications, var3.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.SaasRisks.ElementsAs(ctx, &input.Request.SaasRisks, false)...)
	//if len(plan.SaasRisks) != 0 {
	//    input.Request.SaasRisks = make([]string, 0, len(plan.SaasRisks))
	//    for _, var4 := range plan.SaasRisks {
	//        input.Request.SaasRisks = append(input.Request.SaasRisks, var4.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Subcategories.ElementsAs(ctx, &input.Request.Subcategories, false)...)
	//if len(plan.Subcategories) != 0 {
	//    input.Request.Subcategories = make([]string, 0, len(plan.Subcategories))
	//    for _, var5 := range plan.Subcategories {
	//        input.Request.Subcategories = append(input.Request.Subcategories, var5.ValueString())
	//    }
	//}

	if plan.Tagging != nil {
		input.Request.Tagging = &wugpput.TaggingObject{}

		input.Request.Tagging.NoTag = plan.Tagging.NoTag.ValueBoolPointer()

		resp.Diagnostics.Append(plan.Tagging.Tags.ElementsAs(ctx, &input.Request.Tagging.Tags, false)...)
		//if len(plan.Tagging.Tags) != 0 {
		//    input.Request.Tagging.Tags = make([]string, 0, len(plan.Tagging.Tags))
		//    for _, var6 := range plan.Tagging.Tags {
		//        input.Request.Tagging.Tags = append(input.Request.Tagging.Tags, var6.ValueString())
		//    }
		//}
	}

	resp.Diagnostics.Append(plan.Technologies.ElementsAs(ctx, &input.Request.Technologies, false)...)
	//if len(plan.Technologies) != 0 {
	//    input.Request.Technologies = make([]string, 0, len(plan.Technologies))
	//    for _, var7 := range plan.Technologies {
	//        input.Request.Technologies = append(input.Request.Technologies, var7.ValueString())
	//    }
	//}

	input.Request.TransfersFiles = plan.TransfersFiles.ValueBoolPointer()

	input.Request.TunnelsOtherApps = plan.TunnelsOtherApps.ValueBoolPointer()

	input.Request.UsedByMalware = plan.UsedByMalware.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var8
	resp.Diagnostics.Append(var9.Errors()...)

	state.Evasive = types.BoolPointerValue(ans.Evasive)

	state.ExcessiveBandwidthUse = types.BoolPointerValue(ans.ExcessiveBandwidthUse)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Excludes)
	state.Excludes = var10
	resp.Diagnostics.Append(var11.Errors()...)

	state.HasKnownVulnerabilities = types.BoolPointerValue(ans.HasKnownVulnerabilities)

	state.Id = types.StringPointerValue(ans.Id)

	state.IsSaas = types.BoolPointerValue(ans.IsSaas)

	state.Name = types.StringValue(ans.Name)

	state.NewAppid = types.BoolPointerValue(ans.NewAppid)

	state.Pervasive = types.BoolPointerValue(ans.Pervasive)

	state.ProneToMisuse = types.BoolPointerValue(ans.ProneToMisuse)

	var12, var13 := types.ListValueFrom(ctx, types.Int64Type, ans.Risks)
	state.Risks = var12
	resp.Diagnostics.Append(var13.Errors()...)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.SaasCertifications)
	state.SaasCertifications = var14
	resp.Diagnostics.Append(var15.Errors()...)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.SaasRisks)
	state.SaasRisks = var16
	resp.Diagnostics.Append(var17.Errors()...)

	var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Subcategories)
	state.Subcategories = var18
	resp.Diagnostics.Append(var19.Errors()...)

	if ans.Tagging == nil {
		state.Tagging = nil
	} else {
		state.Tagging = &applicationFilterRsModel_wugpput_TaggingObject{}

		state.Tagging.NoTag = types.BoolPointerValue(ans.Tagging.NoTag)

		var20, var21 := types.ListValueFrom(ctx, types.StringType, ans.Tagging.Tags)
		state.Tagging.Tags = var20
		resp.Diagnostics.Append(var21.Errors()...)
	}

	var22, var23 := types.ListValueFrom(ctx, types.StringType, ans.Technologies)
	state.Technologies = var22
	resp.Diagnostics.Append(var23.Errors()...)

	state.TransfersFiles = types.BoolPointerValue(ans.TransfersFiles)

	state.TunnelsOtherApps = types.BoolPointerValue(ans.TunnelsOtherApps)

	state.UsedByMalware = types.BoolPointerValue(ans.UsedByMalware)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *applicationFilterResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_application_filter",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *applicationFilterResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
