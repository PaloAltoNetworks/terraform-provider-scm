package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	eumQbRC "github.com/paloaltonetworks/scm-go/netsec/schemas/authentication/profiles"
	lhPcfTR "github.com/paloaltonetworks/scm-go/netsec/services/authenticationprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &authenticationProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &authenticationProfileListDataSource{}
)

func NewAuthenticationProfileListDataSource() datasource.DataSource {
	return &authenticationProfileListDataSource{}
}

type authenticationProfileListDataSource struct {
	client *scm.Client
}

// authenticationProfileListDsModel is the model.
type authenticationProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []authenticationProfileListDsModel_eumQbRC_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type authenticationProfileListDsModel_eumQbRC_Config struct {
	AllowList        types.List                                                      `tfsdk:"allow_list"`
	Id               types.String                                                    `tfsdk:"id"`
	Lockout          *authenticationProfileListDsModel_eumQbRC_LockoutObject         `tfsdk:"lockout"`
	Method           *authenticationProfileListDsModel_eumQbRC_MethodObject          `tfsdk:"method"`
	MultiFactorAuth  *authenticationProfileListDsModel_eumQbRC_MultiFactorAuthObject `tfsdk:"multi_factor_auth"`
	Name             types.String                                                    `tfsdk:"name"`
	SingleSignOn     *authenticationProfileListDsModel_eumQbRC_SingleSignOnObject    `tfsdk:"single_sign_on"`
	UserDomain       types.String                                                    `tfsdk:"user_domain"`
	UsernameModifier types.String                                                    `tfsdk:"username_modifier"`
}

type authenticationProfileListDsModel_eumQbRC_LockoutObject struct {
	FailedAttempts types.Int64 `tfsdk:"failed_attempts"`
	LockoutTime    types.Int64 `tfsdk:"lockout_time"`
}

type authenticationProfileListDsModel_eumQbRC_MethodObject struct {
	Cloud         *authenticationProfileListDsModel_eumQbRC_CloudObject    `tfsdk:"cloud"`
	Kerberos      *authenticationProfileListDsModel_eumQbRC_KerberosObject `tfsdk:"kerberos"`
	Ldap          *authenticationProfileListDsModel_eumQbRC_LdapObject     `tfsdk:"ldap"`
	LocalDatabase types.Bool                                               `tfsdk:"local_database"`
	Radius        *authenticationProfileListDsModel_eumQbRC_RadiusObject   `tfsdk:"radius"`
	SamlIdp       *authenticationProfileListDsModel_eumQbRC_SamlIdpObject  `tfsdk:"saml_idp"`
	Tacplus       *authenticationProfileListDsModel_eumQbRC_TacplusObject  `tfsdk:"tacplus"`
}

type authenticationProfileListDsModel_eumQbRC_CloudObject struct {
	ProfileName types.String `tfsdk:"profile_name"`
}

type authenticationProfileListDsModel_eumQbRC_KerberosObject struct {
	Realm         types.String `tfsdk:"realm"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileListDsModel_eumQbRC_LdapObject struct {
	LoginAttribute types.String `tfsdk:"login_attribute"`
	PasswdExpDays  types.Int64  `tfsdk:"passwd_exp_days"`
	ServerProfile  types.String `tfsdk:"server_profile"`
}

type authenticationProfileListDsModel_eumQbRC_RadiusObject struct {
	Checkgroup    types.Bool   `tfsdk:"checkgroup"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileListDsModel_eumQbRC_SamlIdpObject struct {
	AttributeNameUsergroup    types.String `tfsdk:"attribute_name_usergroup"`
	AttributeNameUsername     types.String `tfsdk:"attribute_name_username"`
	CertificateProfile        types.String `tfsdk:"certificate_profile"`
	EnableSingleLogout        types.Bool   `tfsdk:"enable_single_logout"`
	RequestSigningCertificate types.String `tfsdk:"request_signing_certificate"`
	ServerProfile             types.String `tfsdk:"server_profile"`
}

type authenticationProfileListDsModel_eumQbRC_TacplusObject struct {
	Checkgroup    types.Bool   `tfsdk:"checkgroup"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileListDsModel_eumQbRC_MultiFactorAuthObject struct {
	Factors   types.List `tfsdk:"factors"`
	MfaEnable types.Bool `tfsdk:"mfa_enable"`
}

type authenticationProfileListDsModel_eumQbRC_SingleSignOnObject struct {
	KerberosKeytab types.String `tfsdk:"kerberos_keytab"`
	Realm          types.String `tfsdk:"realm"`
}

// Metadata returns the data source type name.
func (d *authenticationProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_authentication_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *authenticationProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"allow_list":true, "id":true, "lockout":true, "method":true, "multi_factor_auth":true, "name":true, "single_sign_on":true, "user_domain":true, "username_modifier":true} forceNew:map[string]bool(nil)
						"allow_list": dsschema.ListAttribute{
							Description: "The AllowList param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"lockout": dsschema.SingleNestedAttribute{
							Description: "The Lockout param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"failed_attempts":true, "lockout_time":true} forceNew:map[string]bool(nil)
								"failed_attempts": dsschema.Int64Attribute{
									Description: "The FailedAttempts param. Value must be between 0 and 10.",
									Computed:    true,
								},
								"lockout_time": dsschema.Int64Attribute{
									Description: "The LockoutTime param. Value must be between 0 and 60.",
									Computed:    true,
								},
							},
						},
						"method": dsschema.SingleNestedAttribute{
							Description: "The Method param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"cloud":true, "kerberos":true, "ldap":true, "local_database":true, "radius":true, "saml_idp":true, "tacplus":true} forceNew:map[string]bool(nil)
								"cloud": dsschema.SingleNestedAttribute{
									Description: "The Cloud param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"profile_name":true} forceNew:map[string]bool(nil)
										"profile_name": dsschema.StringAttribute{
											Description: "The tenant profile name.",
											Computed:    true,
										},
									},
								},
								"kerberos": dsschema.SingleNestedAttribute{
									Description: "The Kerberos param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"realm":true, "server_profile":true} forceNew:map[string]bool(nil)
										"realm": dsschema.StringAttribute{
											Description: "The Realm param.",
											Computed:    true,
										},
										"server_profile": dsschema.StringAttribute{
											Description: "The ServerProfile param.",
											Computed:    true,
										},
									},
								},
								"ldap": dsschema.SingleNestedAttribute{
									Description: "The Ldap param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"login_attribute":true, "passwd_exp_days":true, "server_profile":true} forceNew:map[string]bool(nil)
										"login_attribute": dsschema.StringAttribute{
											Description: "The LoginAttribute param.",
											Computed:    true,
										},
										"passwd_exp_days": dsschema.Int64Attribute{
											Description: "The PasswdExpDays param.",
											Computed:    true,
										},
										"server_profile": dsschema.StringAttribute{
											Description: "The ServerProfile param.",
											Computed:    true,
										},
									},
								},
								"local_database": dsschema.BoolAttribute{
									Description: "The LocalDatabase param. Default: `false`.",
									Computed:    true,
								},
								"radius": dsschema.SingleNestedAttribute{
									Description: "The Radius param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"checkgroup":true, "server_profile":true} forceNew:map[string]bool(nil)
										"checkgroup": dsschema.BoolAttribute{
											Description: "The Checkgroup param.",
											Computed:    true,
										},
										"server_profile": dsschema.StringAttribute{
											Description: "The ServerProfile param.",
											Computed:    true,
										},
									},
								},
								"saml_idp": dsschema.SingleNestedAttribute{
									Description: "The SamlIdp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"attribute_name_usergroup":true, "attribute_name_username":true, "certificate_profile":true, "enable_single_logout":true, "request_signing_certificate":true, "server_profile":true} forceNew:map[string]bool(nil)
										"attribute_name_usergroup": dsschema.StringAttribute{
											Description: "The AttributeNameUsergroup param. String length must be between 1 and 63 characters.",
											Computed:    true,
										},
										"attribute_name_username": dsschema.StringAttribute{
											Description: "The AttributeNameUsername param. String length must be between 1 and 63 characters.",
											Computed:    true,
										},
										"certificate_profile": dsschema.StringAttribute{
											Description: "The CertificateProfile param. String length must not exceed 31 characters.",
											Computed:    true,
										},
										"enable_single_logout": dsschema.BoolAttribute{
											Description: "The EnableSingleLogout param.",
											Computed:    true,
										},
										"request_signing_certificate": dsschema.StringAttribute{
											Description: "The RequestSigningCertificate param. String length must not exceed 64 characters.",
											Computed:    true,
										},
										"server_profile": dsschema.StringAttribute{
											Description: "The ServerProfile param. String length must not exceed 63 characters.",
											Computed:    true,
										},
									},
								},
								"tacplus": dsschema.SingleNestedAttribute{
									Description: "The Tacplus param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"checkgroup":true, "server_profile":true} forceNew:map[string]bool(nil)
										"checkgroup": dsschema.BoolAttribute{
											Description: "The Checkgroup param.",
											Computed:    true,
										},
										"server_profile": dsschema.StringAttribute{
											Description: "The ServerProfile param.",
											Computed:    true,
										},
									},
								},
							},
						},
						"multi_factor_auth": dsschema.SingleNestedAttribute{
							Description: "The MultiFactorAuth param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"factors":true, "mfa_enable":true} forceNew:map[string]bool(nil)
								"factors": dsschema.ListAttribute{
									Description: "The Factors param.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"mfa_enable": dsschema.BoolAttribute{
									Description: "The MfaEnable param.",
									Computed:    true,
								},
							},
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"single_sign_on": dsschema.SingleNestedAttribute{
							Description: "The SingleSignOn param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"kerberos_keytab":true, "realm":true} forceNew:map[string]bool(nil)
								"kerberos_keytab": dsschema.StringAttribute{
									Description: "The KerberosKeytab param. String length must not exceed 8192 characters.",
									Computed:    true,
								},
								"realm": dsschema.StringAttribute{
									Description: "The Realm param. String length must not exceed 127 characters.",
									Computed:    true,
								},
							},
						},
						"user_domain": dsschema.StringAttribute{
							Description: "The UserDomain param. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"username_modifier": dsschema.StringAttribute{
							Description: "The UsernameModifier param. String must be one of these: `\"%USERINPUT%\"`, `\"%USERINPUT%@%USERDOMAIN%\"`, `\"%USERDOMAIN%\\\\%USERINPUT%\"`.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *authenticationProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *authenticationProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state authenticationProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_authentication_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := lhPcfTR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]authenticationProfileListDsModel_eumQbRC_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := authenticationProfileListDsModel_eumQbRC_Config{}

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.AllowList)
			var1.AllowList = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Id = types.StringPointerValue(var0.Id)

			if var0.Lockout == nil {
				var1.Lockout = nil
			} else {
				var1.Lockout = &authenticationProfileListDsModel_eumQbRC_LockoutObject{}

				var1.Lockout.FailedAttempts = types.Int64PointerValue(var0.Lockout.FailedAttempts)

				var1.Lockout.LockoutTime = types.Int64PointerValue(var0.Lockout.LockoutTime)
			}

			if var0.Method == nil {
				var1.Method = nil
			} else {
				var1.Method = &authenticationProfileListDsModel_eumQbRC_MethodObject{}

				if var0.Method.Cloud == nil {
					var1.Method.Cloud = nil
				} else {
					var1.Method.Cloud = &authenticationProfileListDsModel_eumQbRC_CloudObject{}

					var1.Method.Cloud.ProfileName = types.StringPointerValue(var0.Method.Cloud.ProfileName)
				}

				if var0.Method.Kerberos == nil {
					var1.Method.Kerberos = nil
				} else {
					var1.Method.Kerberos = &authenticationProfileListDsModel_eumQbRC_KerberosObject{}

					var1.Method.Kerberos.Realm = types.StringPointerValue(var0.Method.Kerberos.Realm)

					var1.Method.Kerberos.ServerProfile = types.StringPointerValue(var0.Method.Kerberos.ServerProfile)
				}

				if var0.Method.Ldap == nil {
					var1.Method.Ldap = nil
				} else {
					var1.Method.Ldap = &authenticationProfileListDsModel_eumQbRC_LdapObject{}

					var1.Method.Ldap.LoginAttribute = types.StringPointerValue(var0.Method.Ldap.LoginAttribute)

					var1.Method.Ldap.PasswdExpDays = types.Int64PointerValue(var0.Method.Ldap.PasswdExpDays)

					var1.Method.Ldap.ServerProfile = types.StringPointerValue(var0.Method.Ldap.ServerProfile)
				}

				var1.Method.LocalDatabase = types.BoolValue(var0.Method.LocalDatabase != nil)

				if var0.Method.Radius == nil {
					var1.Method.Radius = nil
				} else {
					var1.Method.Radius = &authenticationProfileListDsModel_eumQbRC_RadiusObject{}

					var1.Method.Radius.Checkgroup = types.BoolPointerValue(var0.Method.Radius.Checkgroup)

					var1.Method.Radius.ServerProfile = types.StringPointerValue(var0.Method.Radius.ServerProfile)
				}

				if var0.Method.SamlIdp == nil {
					var1.Method.SamlIdp = nil
				} else {
					var1.Method.SamlIdp = &authenticationProfileListDsModel_eumQbRC_SamlIdpObject{}

					var1.Method.SamlIdp.AttributeNameUsergroup = types.StringPointerValue(var0.Method.SamlIdp.AttributeNameUsergroup)

					var1.Method.SamlIdp.AttributeNameUsername = types.StringPointerValue(var0.Method.SamlIdp.AttributeNameUsername)

					var1.Method.SamlIdp.CertificateProfile = types.StringPointerValue(var0.Method.SamlIdp.CertificateProfile)

					var1.Method.SamlIdp.EnableSingleLogout = types.BoolPointerValue(var0.Method.SamlIdp.EnableSingleLogout)

					var1.Method.SamlIdp.RequestSigningCertificate = types.StringPointerValue(var0.Method.SamlIdp.RequestSigningCertificate)

					var1.Method.SamlIdp.ServerProfile = types.StringPointerValue(var0.Method.SamlIdp.ServerProfile)
				}

				if var0.Method.Tacplus == nil {
					var1.Method.Tacplus = nil
				} else {
					var1.Method.Tacplus = &authenticationProfileListDsModel_eumQbRC_TacplusObject{}

					var1.Method.Tacplus.Checkgroup = types.BoolPointerValue(var0.Method.Tacplus.Checkgroup)

					var1.Method.Tacplus.ServerProfile = types.StringPointerValue(var0.Method.Tacplus.ServerProfile)
				}
			}

			if var0.MultiFactorAuth == nil {
				var1.MultiFactorAuth = nil
			} else {
				var1.MultiFactorAuth = &authenticationProfileListDsModel_eumQbRC_MultiFactorAuthObject{}

				var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.MultiFactorAuth.Factors)
				var1.MultiFactorAuth.Factors = var4
				resp.Diagnostics.Append(var5.Errors()...)

				var1.MultiFactorAuth.MfaEnable = types.BoolPointerValue(var0.MultiFactorAuth.MfaEnable)
			}

			var1.Name = types.StringValue(var0.Name)

			if var0.SingleSignOn == nil {
				var1.SingleSignOn = nil
			} else {
				var1.SingleSignOn = &authenticationProfileListDsModel_eumQbRC_SingleSignOnObject{}

				var1.SingleSignOn.KerberosKeytab = types.StringPointerValue(var0.SingleSignOn.KerberosKeytab)

				var1.SingleSignOn.Realm = types.StringPointerValue(var0.SingleSignOn.Realm)
			}

			var1.UserDomain = types.StringPointerValue(var0.UserDomain)

			var1.UsernameModifier = types.StringPointerValue(var0.UsernameModifier)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &authenticationProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &authenticationProfileDataSource{}
)

func NewAuthenticationProfileDataSource() datasource.DataSource {
	return &authenticationProfileDataSource{}
}

type authenticationProfileDataSource struct {
	client *scm.Client
}

// authenticationProfileDsModel is the model.
type authenticationProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	AllowList types.List `tfsdk:"allow_list"`
	// omit input: id
	Lockout          *authenticationProfileDsModel_eumQbRC_LockoutObject         `tfsdk:"lockout"`
	Method           *authenticationProfileDsModel_eumQbRC_MethodObject          `tfsdk:"method"`
	MultiFactorAuth  *authenticationProfileDsModel_eumQbRC_MultiFactorAuthObject `tfsdk:"multi_factor_auth"`
	Name             types.String                                                `tfsdk:"name"`
	SingleSignOn     *authenticationProfileDsModel_eumQbRC_SingleSignOnObject    `tfsdk:"single_sign_on"`
	UserDomain       types.String                                                `tfsdk:"user_domain"`
	UsernameModifier types.String                                                `tfsdk:"username_modifier"`
}

type authenticationProfileDsModel_eumQbRC_LockoutObject struct {
	FailedAttempts types.Int64 `tfsdk:"failed_attempts"`
	LockoutTime    types.Int64 `tfsdk:"lockout_time"`
}

type authenticationProfileDsModel_eumQbRC_MethodObject struct {
	Cloud         *authenticationProfileDsModel_eumQbRC_CloudObject    `tfsdk:"cloud"`
	Kerberos      *authenticationProfileDsModel_eumQbRC_KerberosObject `tfsdk:"kerberos"`
	Ldap          *authenticationProfileDsModel_eumQbRC_LdapObject     `tfsdk:"ldap"`
	LocalDatabase types.Bool                                           `tfsdk:"local_database"`
	Radius        *authenticationProfileDsModel_eumQbRC_RadiusObject   `tfsdk:"radius"`
	SamlIdp       *authenticationProfileDsModel_eumQbRC_SamlIdpObject  `tfsdk:"saml_idp"`
	Tacplus       *authenticationProfileDsModel_eumQbRC_TacplusObject  `tfsdk:"tacplus"`
}

type authenticationProfileDsModel_eumQbRC_CloudObject struct {
	ProfileName types.String `tfsdk:"profile_name"`
}

type authenticationProfileDsModel_eumQbRC_KerberosObject struct {
	Realm         types.String `tfsdk:"realm"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileDsModel_eumQbRC_LdapObject struct {
	LoginAttribute types.String `tfsdk:"login_attribute"`
	PasswdExpDays  types.Int64  `tfsdk:"passwd_exp_days"`
	ServerProfile  types.String `tfsdk:"server_profile"`
}

type authenticationProfileDsModel_eumQbRC_RadiusObject struct {
	Checkgroup    types.Bool   `tfsdk:"checkgroup"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileDsModel_eumQbRC_SamlIdpObject struct {
	AttributeNameUsergroup    types.String `tfsdk:"attribute_name_usergroup"`
	AttributeNameUsername     types.String `tfsdk:"attribute_name_username"`
	CertificateProfile        types.String `tfsdk:"certificate_profile"`
	EnableSingleLogout        types.Bool   `tfsdk:"enable_single_logout"`
	RequestSigningCertificate types.String `tfsdk:"request_signing_certificate"`
	ServerProfile             types.String `tfsdk:"server_profile"`
}

type authenticationProfileDsModel_eumQbRC_TacplusObject struct {
	Checkgroup    types.Bool   `tfsdk:"checkgroup"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileDsModel_eumQbRC_MultiFactorAuthObject struct {
	Factors   types.List `tfsdk:"factors"`
	MfaEnable types.Bool `tfsdk:"mfa_enable"`
}

type authenticationProfileDsModel_eumQbRC_SingleSignOnObject struct {
	KerberosKeytab types.String `tfsdk:"kerberos_keytab"`
	Realm          types.String `tfsdk:"realm"`
}

// Metadata returns the data source type name.
func (d *authenticationProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_authentication_profile"
}

// Schema defines the schema for this data source.
func (d *authenticationProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"allow_list":true, "id":true, "lockout":true, "method":true, "multi_factor_auth":true, "name":true, "single_sign_on":true, "tfid":true, "user_domain":true, "username_modifier":true} forceNew:map[string]bool{"id":true}
			"allow_list": dsschema.ListAttribute{
				Description: "The AllowList param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"lockout": dsschema.SingleNestedAttribute{
				Description: "The Lockout param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"failed_attempts":true, "lockout_time":true} forceNew:map[string]bool(nil)
					"failed_attempts": dsschema.Int64Attribute{
						Description: "The FailedAttempts param. Value must be between 0 and 10.",
						Computed:    true,
					},
					"lockout_time": dsschema.Int64Attribute{
						Description: "The LockoutTime param. Value must be between 0 and 60.",
						Computed:    true,
					},
				},
			},
			"method": dsschema.SingleNestedAttribute{
				Description: "The Method param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"cloud":true, "kerberos":true, "ldap":true, "local_database":true, "radius":true, "saml_idp":true, "tacplus":true} forceNew:map[string]bool(nil)
					"cloud": dsschema.SingleNestedAttribute{
						Description: "The Cloud param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"profile_name":true} forceNew:map[string]bool(nil)
							"profile_name": dsschema.StringAttribute{
								Description: "The tenant profile name.",
								Computed:    true,
							},
						},
					},
					"kerberos": dsschema.SingleNestedAttribute{
						Description: "The Kerberos param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"realm":true, "server_profile":true} forceNew:map[string]bool(nil)
							"realm": dsschema.StringAttribute{
								Description: "The Realm param.",
								Computed:    true,
							},
							"server_profile": dsschema.StringAttribute{
								Description: "The ServerProfile param.",
								Computed:    true,
							},
						},
					},
					"ldap": dsschema.SingleNestedAttribute{
						Description: "The Ldap param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"login_attribute":true, "passwd_exp_days":true, "server_profile":true} forceNew:map[string]bool(nil)
							"login_attribute": dsschema.StringAttribute{
								Description: "The LoginAttribute param.",
								Computed:    true,
							},
							"passwd_exp_days": dsschema.Int64Attribute{
								Description: "The PasswdExpDays param.",
								Computed:    true,
							},
							"server_profile": dsschema.StringAttribute{
								Description: "The ServerProfile param.",
								Computed:    true,
							},
						},
					},
					"local_database": dsschema.BoolAttribute{
						Description: "The LocalDatabase param. Default: `false`.",
						Computed:    true,
					},
					"radius": dsschema.SingleNestedAttribute{
						Description: "The Radius param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"checkgroup":true, "server_profile":true} forceNew:map[string]bool(nil)
							"checkgroup": dsschema.BoolAttribute{
								Description: "The Checkgroup param.",
								Computed:    true,
							},
							"server_profile": dsschema.StringAttribute{
								Description: "The ServerProfile param.",
								Computed:    true,
							},
						},
					},
					"saml_idp": dsschema.SingleNestedAttribute{
						Description: "The SamlIdp param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"attribute_name_usergroup":true, "attribute_name_username":true, "certificate_profile":true, "enable_single_logout":true, "request_signing_certificate":true, "server_profile":true} forceNew:map[string]bool(nil)
							"attribute_name_usergroup": dsschema.StringAttribute{
								Description: "The AttributeNameUsergroup param. String length must be between 1 and 63 characters.",
								Computed:    true,
							},
							"attribute_name_username": dsschema.StringAttribute{
								Description: "The AttributeNameUsername param. String length must be between 1 and 63 characters.",
								Computed:    true,
							},
							"certificate_profile": dsschema.StringAttribute{
								Description: "The CertificateProfile param. String length must not exceed 31 characters.",
								Computed:    true,
							},
							"enable_single_logout": dsschema.BoolAttribute{
								Description: "The EnableSingleLogout param.",
								Computed:    true,
							},
							"request_signing_certificate": dsschema.StringAttribute{
								Description: "The RequestSigningCertificate param. String length must not exceed 64 characters.",
								Computed:    true,
							},
							"server_profile": dsschema.StringAttribute{
								Description: "The ServerProfile param. String length must not exceed 63 characters.",
								Computed:    true,
							},
						},
					},
					"tacplus": dsschema.SingleNestedAttribute{
						Description: "The Tacplus param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"checkgroup":true, "server_profile":true} forceNew:map[string]bool(nil)
							"checkgroup": dsschema.BoolAttribute{
								Description: "The Checkgroup param.",
								Computed:    true,
							},
							"server_profile": dsschema.StringAttribute{
								Description: "The ServerProfile param.",
								Computed:    true,
							},
						},
					},
				},
			},
			"multi_factor_auth": dsschema.SingleNestedAttribute{
				Description: "The MultiFactorAuth param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"factors":true, "mfa_enable":true} forceNew:map[string]bool(nil)
					"factors": dsschema.ListAttribute{
						Description: "The Factors param.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"mfa_enable": dsschema.BoolAttribute{
						Description: "The MfaEnable param.",
						Computed:    true,
					},
				},
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"single_sign_on": dsschema.SingleNestedAttribute{
				Description: "The SingleSignOn param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"kerberos_keytab":true, "realm":true} forceNew:map[string]bool(nil)
					"kerberos_keytab": dsschema.StringAttribute{
						Description: "The KerberosKeytab param. String length must not exceed 8192 characters.",
						Computed:    true,
					},
					"realm": dsschema.StringAttribute{
						Description: "The Realm param. String length must not exceed 127 characters.",
						Computed:    true,
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"user_domain": dsschema.StringAttribute{
				Description: "The UserDomain param. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"username_modifier": dsschema.StringAttribute{
				Description: "The UsernameModifier param. String must be one of these: `\"%USERINPUT%\"`, `\"%USERINPUT%@%USERDOMAIN%\"`, `\"%USERDOMAIN%\\\\%USERINPUT%\"`.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *authenticationProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *authenticationProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state authenticationProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_authentication_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := lhPcfTR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.AllowList)
	state.AllowList = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Lockout == nil {
		state.Lockout = nil
	} else {
		state.Lockout = &authenticationProfileDsModel_eumQbRC_LockoutObject{}

		state.Lockout.FailedAttempts = types.Int64PointerValue(ans.Lockout.FailedAttempts)

		state.Lockout.LockoutTime = types.Int64PointerValue(ans.Lockout.LockoutTime)
	}

	if ans.Method == nil {
		state.Method = nil
	} else {
		state.Method = &authenticationProfileDsModel_eumQbRC_MethodObject{}

		if ans.Method.Cloud == nil {
			state.Method.Cloud = nil
		} else {
			state.Method.Cloud = &authenticationProfileDsModel_eumQbRC_CloudObject{}

			state.Method.Cloud.ProfileName = types.StringPointerValue(ans.Method.Cloud.ProfileName)
		}

		if ans.Method.Kerberos == nil {
			state.Method.Kerberos = nil
		} else {
			state.Method.Kerberos = &authenticationProfileDsModel_eumQbRC_KerberosObject{}

			state.Method.Kerberos.Realm = types.StringPointerValue(ans.Method.Kerberos.Realm)

			state.Method.Kerberos.ServerProfile = types.StringPointerValue(ans.Method.Kerberos.ServerProfile)
		}

		if ans.Method.Ldap == nil {
			state.Method.Ldap = nil
		} else {
			state.Method.Ldap = &authenticationProfileDsModel_eumQbRC_LdapObject{}

			state.Method.Ldap.LoginAttribute = types.StringPointerValue(ans.Method.Ldap.LoginAttribute)

			state.Method.Ldap.PasswdExpDays = types.Int64PointerValue(ans.Method.Ldap.PasswdExpDays)

			state.Method.Ldap.ServerProfile = types.StringPointerValue(ans.Method.Ldap.ServerProfile)
		}

		state.Method.LocalDatabase = types.BoolValue(ans.Method.LocalDatabase != nil)

		if ans.Method.Radius == nil {
			state.Method.Radius = nil
		} else {
			state.Method.Radius = &authenticationProfileDsModel_eumQbRC_RadiusObject{}

			state.Method.Radius.Checkgroup = types.BoolPointerValue(ans.Method.Radius.Checkgroup)

			state.Method.Radius.ServerProfile = types.StringPointerValue(ans.Method.Radius.ServerProfile)
		}

		if ans.Method.SamlIdp == nil {
			state.Method.SamlIdp = nil
		} else {
			state.Method.SamlIdp = &authenticationProfileDsModel_eumQbRC_SamlIdpObject{}

			state.Method.SamlIdp.AttributeNameUsergroup = types.StringPointerValue(ans.Method.SamlIdp.AttributeNameUsergroup)

			state.Method.SamlIdp.AttributeNameUsername = types.StringPointerValue(ans.Method.SamlIdp.AttributeNameUsername)

			state.Method.SamlIdp.CertificateProfile = types.StringPointerValue(ans.Method.SamlIdp.CertificateProfile)

			state.Method.SamlIdp.EnableSingleLogout = types.BoolPointerValue(ans.Method.SamlIdp.EnableSingleLogout)

			state.Method.SamlIdp.RequestSigningCertificate = types.StringPointerValue(ans.Method.SamlIdp.RequestSigningCertificate)

			state.Method.SamlIdp.ServerProfile = types.StringPointerValue(ans.Method.SamlIdp.ServerProfile)
		}

		if ans.Method.Tacplus == nil {
			state.Method.Tacplus = nil
		} else {
			state.Method.Tacplus = &authenticationProfileDsModel_eumQbRC_TacplusObject{}

			state.Method.Tacplus.Checkgroup = types.BoolPointerValue(ans.Method.Tacplus.Checkgroup)

			state.Method.Tacplus.ServerProfile = types.StringPointerValue(ans.Method.Tacplus.ServerProfile)
		}
	}

	if ans.MultiFactorAuth == nil {
		state.MultiFactorAuth = nil
	} else {
		state.MultiFactorAuth = &authenticationProfileDsModel_eumQbRC_MultiFactorAuthObject{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.MultiFactorAuth.Factors)
		state.MultiFactorAuth.Factors = var2
		resp.Diagnostics.Append(var3.Errors()...)

		state.MultiFactorAuth.MfaEnable = types.BoolPointerValue(ans.MultiFactorAuth.MfaEnable)
	}

	state.Name = types.StringValue(ans.Name)

	if ans.SingleSignOn == nil {
		state.SingleSignOn = nil
	} else {
		state.SingleSignOn = &authenticationProfileDsModel_eumQbRC_SingleSignOnObject{}

		state.SingleSignOn.KerberosKeytab = types.StringPointerValue(ans.SingleSignOn.KerberosKeytab)

		state.SingleSignOn.Realm = types.StringPointerValue(ans.SingleSignOn.Realm)
	}

	state.UserDomain = types.StringPointerValue(ans.UserDomain)

	state.UsernameModifier = types.StringPointerValue(ans.UsernameModifier)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &authenticationProfileResource{}
	_ resource.ResourceWithConfigure   = &authenticationProfileResource{}
	_ resource.ResourceWithImportState = &authenticationProfileResource{}
)

func NewAuthenticationProfileResource() resource.Resource {
	return &authenticationProfileResource{}
}

type authenticationProfileResource struct {
	client *scm.Client
}

// authenticationProfileRsModel is the model.
type authenticationProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	AllowList        types.List                                                  `tfsdk:"allow_list"`
	Device           types.String                                                `tfsdk:"device"`
	Folder           types.String                                                `tfsdk:"folder"`
	Id               types.String                                                `tfsdk:"id"`
	Lockout          *authenticationProfileRsModel_eumQbRC_LockoutObject         `tfsdk:"lockout"`
	Method           *authenticationProfileRsModel_eumQbRC_MethodObject          `tfsdk:"method"`
	MultiFactorAuth  *authenticationProfileRsModel_eumQbRC_MultiFactorAuthObject `tfsdk:"multi_factor_auth"`
	Name             types.String                                                `tfsdk:"name"`
	SingleSignOn     *authenticationProfileRsModel_eumQbRC_SingleSignOnObject    `tfsdk:"single_sign_on"`
	Snippet          types.String                                                `tfsdk:"snippet"`
	UserDomain       types.String                                                `tfsdk:"user_domain"`
	UsernameModifier types.String                                                `tfsdk:"username_modifier"`

	// Output.
	// omit input: allow_list
	// omit input: id
	// omit input: lockout
	// omit input: method
	// omit input: multi_factor_auth
	// omit input: name
	// omit input: single_sign_on
	// omit input: user_domain
	// omit input: username_modifier
}

type authenticationProfileRsModel_eumQbRC_LockoutObject struct {
	FailedAttempts types.Int64 `tfsdk:"failed_attempts"`
	LockoutTime    types.Int64 `tfsdk:"lockout_time"`
}

type authenticationProfileRsModel_eumQbRC_MethodObject struct {
	Cloud         *authenticationProfileRsModel_eumQbRC_CloudObject    `tfsdk:"cloud"`
	Kerberos      *authenticationProfileRsModel_eumQbRC_KerberosObject `tfsdk:"kerberos"`
	Ldap          *authenticationProfileRsModel_eumQbRC_LdapObject     `tfsdk:"ldap"`
	LocalDatabase types.Bool                                           `tfsdk:"local_database"`
	Radius        *authenticationProfileRsModel_eumQbRC_RadiusObject   `tfsdk:"radius"`
	SamlIdp       *authenticationProfileRsModel_eumQbRC_SamlIdpObject  `tfsdk:"saml_idp"`
	Tacplus       *authenticationProfileRsModel_eumQbRC_TacplusObject  `tfsdk:"tacplus"`
}

type authenticationProfileRsModel_eumQbRC_CloudObject struct {
	ProfileName types.String `tfsdk:"profile_name"`
}

type authenticationProfileRsModel_eumQbRC_KerberosObject struct {
	Realm         types.String `tfsdk:"realm"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileRsModel_eumQbRC_LdapObject struct {
	LoginAttribute types.String `tfsdk:"login_attribute"`
	PasswdExpDays  types.Int64  `tfsdk:"passwd_exp_days"`
	ServerProfile  types.String `tfsdk:"server_profile"`
}

type authenticationProfileRsModel_eumQbRC_RadiusObject struct {
	Checkgroup    types.Bool   `tfsdk:"checkgroup"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileRsModel_eumQbRC_SamlIdpObject struct {
	AttributeNameUsergroup    types.String `tfsdk:"attribute_name_usergroup"`
	AttributeNameUsername     types.String `tfsdk:"attribute_name_username"`
	CertificateProfile        types.String `tfsdk:"certificate_profile"`
	EnableSingleLogout        types.Bool   `tfsdk:"enable_single_logout"`
	RequestSigningCertificate types.String `tfsdk:"request_signing_certificate"`
	ServerProfile             types.String `tfsdk:"server_profile"`
}

type authenticationProfileRsModel_eumQbRC_TacplusObject struct {
	Checkgroup    types.Bool   `tfsdk:"checkgroup"`
	ServerProfile types.String `tfsdk:"server_profile"`
}

type authenticationProfileRsModel_eumQbRC_MultiFactorAuthObject struct {
	Factors   types.List `tfsdk:"factors"`
	MfaEnable types.Bool `tfsdk:"mfa_enable"`
}

type authenticationProfileRsModel_eumQbRC_SingleSignOnObject struct {
	KerberosKeytab types.String `tfsdk:"kerberos_keytab"`
	Realm          types.String `tfsdk:"realm"`
}

// Metadata returns the data source type name.
func (r *authenticationProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_authentication_profile"
}

// Schema defines the schema for this data source.
func (r *authenticationProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"allow_list":true, "device":true, "folder":true, "id":true, "lockout":true, "method":true, "multi_factor_auth":true, "name":true, "single_sign_on":true, "snippet":true, "user_domain":true, "username_modifier":true} outputs:map[string]bool{"allow_list":true, "id":true, "lockout":true, "method":true, "multi_factor_auth":true, "name":true, "single_sign_on":true, "tfid":true, "user_domain":true, "username_modifier":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"allow_list": rsschema.ListAttribute{
				Description: "The AllowList param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"lockout": rsschema.SingleNestedAttribute{
				Description: "The Lockout param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"failed_attempts":true, "lockout_time":true} outputs:map[string]bool{"failed_attempts":true, "lockout_time":true} forceNew:map[string]bool(nil)
					"failed_attempts": rsschema.Int64Attribute{
						Description: "The FailedAttempts param. Value must be between 0 and 10.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(0, 10),
						},
					},
					"lockout_time": rsschema.Int64Attribute{
						Description: "The LockoutTime param. Value must be between 0 and 60.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(0, 60),
						},
					},
				},
			},
			"method": rsschema.SingleNestedAttribute{
				Description: "The Method param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"cloud":true, "kerberos":true, "ldap":true, "local_database":true, "radius":true, "saml_idp":true, "tacplus":true} outputs:map[string]bool{"cloud":true, "kerberos":true, "ldap":true, "local_database":true, "radius":true, "saml_idp":true, "tacplus":true} forceNew:map[string]bool(nil)
					"cloud": rsschema.SingleNestedAttribute{
						Description: "The Cloud param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`",
						Optional:    true,
						Validators: []validator.Object{
							objectvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("kerberos"),
								path.MatchRelative().AtParent().AtName("ldap"),
								path.MatchRelative().AtParent().AtName("local_database"),
								path.MatchRelative().AtParent().AtName("radius"),
								path.MatchRelative().AtParent().AtName("saml_idp"),
								path.MatchRelative().AtParent().AtName("tacplus"),
							),
						},
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"profile_name":true} outputs:map[string]bool{"profile_name":true} forceNew:map[string]bool(nil)
							"profile_name": rsschema.StringAttribute{
								Description: "The tenant profile name.",
								Optional:    true,
							},
						},
					},
					"kerberos": rsschema.SingleNestedAttribute{
						Description: "The Kerberos param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"realm":true, "server_profile":true} outputs:map[string]bool{"realm":true, "server_profile":true} forceNew:map[string]bool(nil)
							"realm": rsschema.StringAttribute{
								Description: "The Realm param.",
								Optional:    true,
							},
							"server_profile": rsschema.StringAttribute{
								Description: "The ServerProfile param.",
								Optional:    true,
							},
						},
					},
					"ldap": rsschema.SingleNestedAttribute{
						Description: "The Ldap param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"login_attribute":true, "passwd_exp_days":true, "server_profile":true} outputs:map[string]bool{"login_attribute":true, "passwd_exp_days":true, "server_profile":true} forceNew:map[string]bool(nil)
							"login_attribute": rsschema.StringAttribute{
								Description: "The LoginAttribute param.",
								Optional:    true,
							},
							"passwd_exp_days": rsschema.Int64Attribute{
								Description: "The PasswdExpDays param.",
								Optional:    true,
							},
							"server_profile": rsschema.StringAttribute{
								Description: "The ServerProfile param.",
								Optional:    true,
							},
						},
					},
					"local_database": rsschema.BoolAttribute{
						Description: "The LocalDatabase param. Default: `false`. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"radius": rsschema.SingleNestedAttribute{
						Description: "The Radius param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"checkgroup":true, "server_profile":true} outputs:map[string]bool{"checkgroup":true, "server_profile":true} forceNew:map[string]bool(nil)
							"checkgroup": rsschema.BoolAttribute{
								Description: "The Checkgroup param.",
								Optional:    true,
							},
							"server_profile": rsschema.StringAttribute{
								Description: "The ServerProfile param.",
								Optional:    true,
							},
						},
					},
					"saml_idp": rsschema.SingleNestedAttribute{
						Description: "The SamlIdp param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"attribute_name_usergroup":true, "attribute_name_username":true, "certificate_profile":true, "enable_single_logout":true, "request_signing_certificate":true, "server_profile":true} outputs:map[string]bool{"attribute_name_usergroup":true, "attribute_name_username":true, "certificate_profile":true, "enable_single_logout":true, "request_signing_certificate":true, "server_profile":true} forceNew:map[string]bool(nil)
							"attribute_name_usergroup": rsschema.StringAttribute{
								Description: "The AttributeNameUsergroup param. String length must be between 1 and 63 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthBetween(1, 63),
								},
							},
							"attribute_name_username": rsschema.StringAttribute{
								Description: "The AttributeNameUsername param. String length must be between 1 and 63 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthBetween(1, 63),
								},
							},
							"certificate_profile": rsschema.StringAttribute{
								Description: "The CertificateProfile param. String length must not exceed 31 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(31),
								},
							},
							"enable_single_logout": rsschema.BoolAttribute{
								Description: "The EnableSingleLogout param.",
								Optional:    true,
							},
							"request_signing_certificate": rsschema.StringAttribute{
								Description: "The RequestSigningCertificate param. String length must not exceed 64 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(64),
								},
							},
							"server_profile": rsschema.StringAttribute{
								Description: "The ServerProfile param. String length must not exceed 63 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(63),
								},
							},
						},
					},
					"tacplus": rsschema.SingleNestedAttribute{
						Description: "The Tacplus param. Ensure that only one of the following is specified: `cloud`, `kerberos`, `ldap`, `local_database`, `radius`, `saml_idp`, `tacplus`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"checkgroup":true, "server_profile":true} outputs:map[string]bool{"checkgroup":true, "server_profile":true} forceNew:map[string]bool(nil)
							"checkgroup": rsschema.BoolAttribute{
								Description: "The Checkgroup param.",
								Optional:    true,
							},
							"server_profile": rsschema.StringAttribute{
								Description: "The ServerProfile param.",
								Optional:    true,
							},
						},
					},
				},
			},
			"multi_factor_auth": rsschema.SingleNestedAttribute{
				Description: "The MultiFactorAuth param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"factors":true, "mfa_enable":true} outputs:map[string]bool{"factors":true, "mfa_enable":true} forceNew:map[string]bool(nil)
					"factors": rsschema.ListAttribute{
						Description: "The Factors param.",
						Optional:    true,
						ElementType: types.StringType,
					},
					"mfa_enable": rsschema.BoolAttribute{
						Description: "The MfaEnable param.",
						Optional:    true,
					},
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"single_sign_on": rsschema.SingleNestedAttribute{
				Description: "The SingleSignOn param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"kerberos_keytab":true, "realm":true} outputs:map[string]bool{"kerberos_keytab":true, "realm":true} forceNew:map[string]bool(nil)
					"kerberos_keytab": rsschema.StringAttribute{
						Description: "The KerberosKeytab param. String length must not exceed 8192 characters.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.LengthAtMost(8192),
						},
					},
					"realm": rsschema.StringAttribute{
						Description: "The Realm param. String length must not exceed 127 characters.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.LengthAtMost(127),
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"user_domain": rsschema.StringAttribute{
				Description: "The UserDomain param. String length must not exceed 63 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"username_modifier": rsschema.StringAttribute{
				Description: "The UsernameModifier param. String must be one of these: `\"%USERINPUT%\"`, `\"%USERINPUT%@%USERDOMAIN%\"`, `\"%USERDOMAIN%\\\\%USERINPUT%\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("%USERINPUT%", "%USERINPUT%@%USERDOMAIN%", "%USERDOMAIN%\\%USERINPUT%"),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *authenticationProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *authenticationProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state authenticationProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_authentication_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := lhPcfTR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &eumQbRC.Config{}

	resp.Diagnostics.Append(state.AllowList.ElementsAs(ctx, &input.Request.AllowList, false)...)
	//if len(state.AllowList) != 0 {
	//    input.Request.AllowList = make([]string, 0, len(state.AllowList))
	//    for _, var0 := range state.AllowList {
	//        input.Request.AllowList = append(input.Request.AllowList, var0.ValueString())
	//    }
	//}

	if state.Lockout != nil {
		input.Request.Lockout = &eumQbRC.LockoutObject{}

		input.Request.Lockout.FailedAttempts = state.Lockout.FailedAttempts.ValueInt64Pointer()

		input.Request.Lockout.LockoutTime = state.Lockout.LockoutTime.ValueInt64Pointer()
	}

	if state.Method != nil {
		input.Request.Method = &eumQbRC.MethodObject{}

		if state.Method.Cloud != nil {
			input.Request.Method.Cloud = &eumQbRC.CloudObject{}

			input.Request.Method.Cloud.ProfileName = state.Method.Cloud.ProfileName.ValueStringPointer()
		}

		if state.Method.Kerberos != nil {
			input.Request.Method.Kerberos = &eumQbRC.KerberosObject{}

			input.Request.Method.Kerberos.Realm = state.Method.Kerberos.Realm.ValueStringPointer()

			input.Request.Method.Kerberos.ServerProfile = state.Method.Kerberos.ServerProfile.ValueStringPointer()
		}

		if state.Method.Ldap != nil {
			input.Request.Method.Ldap = &eumQbRC.LdapObject{}

			input.Request.Method.Ldap.LoginAttribute = state.Method.Ldap.LoginAttribute.ValueStringPointer()

			input.Request.Method.Ldap.PasswdExpDays = state.Method.Ldap.PasswdExpDays.ValueInt64Pointer()

			input.Request.Method.Ldap.ServerProfile = state.Method.Ldap.ServerProfile.ValueStringPointer()
		}

		if !state.Method.LocalDatabase.IsNull() && state.Method.LocalDatabase.ValueBool() {
			input.Request.Method.LocalDatabase = map[string]interface{}{}
		}

		if state.Method.Radius != nil {
			input.Request.Method.Radius = &eumQbRC.RadiusObject{}

			input.Request.Method.Radius.Checkgroup = state.Method.Radius.Checkgroup.ValueBoolPointer()

			input.Request.Method.Radius.ServerProfile = state.Method.Radius.ServerProfile.ValueStringPointer()
		}

		if state.Method.SamlIdp != nil {
			input.Request.Method.SamlIdp = &eumQbRC.SamlIdpObject{}

			input.Request.Method.SamlIdp.AttributeNameUsergroup = state.Method.SamlIdp.AttributeNameUsergroup.ValueStringPointer()

			input.Request.Method.SamlIdp.AttributeNameUsername = state.Method.SamlIdp.AttributeNameUsername.ValueStringPointer()

			input.Request.Method.SamlIdp.CertificateProfile = state.Method.SamlIdp.CertificateProfile.ValueStringPointer()

			input.Request.Method.SamlIdp.EnableSingleLogout = state.Method.SamlIdp.EnableSingleLogout.ValueBoolPointer()

			input.Request.Method.SamlIdp.RequestSigningCertificate = state.Method.SamlIdp.RequestSigningCertificate.ValueStringPointer()

			input.Request.Method.SamlIdp.ServerProfile = state.Method.SamlIdp.ServerProfile.ValueStringPointer()
		}

		if state.Method.Tacplus != nil {
			input.Request.Method.Tacplus = &eumQbRC.TacplusObject{}

			input.Request.Method.Tacplus.Checkgroup = state.Method.Tacplus.Checkgroup.ValueBoolPointer()

			input.Request.Method.Tacplus.ServerProfile = state.Method.Tacplus.ServerProfile.ValueStringPointer()
		}
	}

	if state.MultiFactorAuth != nil {
		input.Request.MultiFactorAuth = &eumQbRC.MultiFactorAuthObject{}

		resp.Diagnostics.Append(state.MultiFactorAuth.Factors.ElementsAs(ctx, &input.Request.MultiFactorAuth.Factors, false)...)
		//if len(state.MultiFactorAuth.Factors) != 0 {
		//    input.Request.MultiFactorAuth.Factors = make([]string, 0, len(state.MultiFactorAuth.Factors))
		//    for _, var1 := range state.MultiFactorAuth.Factors {
		//        input.Request.MultiFactorAuth.Factors = append(input.Request.MultiFactorAuth.Factors, var1.ValueString())
		//    }
		//}

		input.Request.MultiFactorAuth.MfaEnable = state.MultiFactorAuth.MfaEnable.ValueBoolPointer()
	}

	input.Request.Name = state.Name.ValueString()

	if state.SingleSignOn != nil {
		input.Request.SingleSignOn = &eumQbRC.SingleSignOnObject{}

		input.Request.SingleSignOn.KerberosKeytab = state.SingleSignOn.KerberosKeytab.ValueStringPointer()

		input.Request.SingleSignOn.Realm = state.SingleSignOn.Realm.ValueStringPointer()
	}

	input.Request.UserDomain = state.UserDomain.ValueStringPointer()

	input.Request.UsernameModifier = state.UsernameModifier.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.AllowList)
	state.AllowList = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Lockout == nil {
		state.Lockout = nil
	} else {
		state.Lockout = &authenticationProfileRsModel_eumQbRC_LockoutObject{}

		state.Lockout.FailedAttempts = types.Int64PointerValue(ans.Lockout.FailedAttempts)

		state.Lockout.LockoutTime = types.Int64PointerValue(ans.Lockout.LockoutTime)
	}

	if ans.Method == nil {
		state.Method = nil
	} else {
		state.Method = &authenticationProfileRsModel_eumQbRC_MethodObject{}

		if ans.Method.Cloud == nil {
			state.Method.Cloud = nil
		} else {
			state.Method.Cloud = &authenticationProfileRsModel_eumQbRC_CloudObject{}

			state.Method.Cloud.ProfileName = types.StringPointerValue(ans.Method.Cloud.ProfileName)
		}

		if ans.Method.Kerberos == nil {
			state.Method.Kerberos = nil
		} else {
			state.Method.Kerberos = &authenticationProfileRsModel_eumQbRC_KerberosObject{}

			state.Method.Kerberos.Realm = types.StringPointerValue(ans.Method.Kerberos.Realm)

			state.Method.Kerberos.ServerProfile = types.StringPointerValue(ans.Method.Kerberos.ServerProfile)
		}

		if ans.Method.Ldap == nil {
			state.Method.Ldap = nil
		} else {
			state.Method.Ldap = &authenticationProfileRsModel_eumQbRC_LdapObject{}

			state.Method.Ldap.LoginAttribute = types.StringPointerValue(ans.Method.Ldap.LoginAttribute)

			state.Method.Ldap.PasswdExpDays = types.Int64PointerValue(ans.Method.Ldap.PasswdExpDays)

			state.Method.Ldap.ServerProfile = types.StringPointerValue(ans.Method.Ldap.ServerProfile)
		}

		state.Method.LocalDatabase = types.BoolValue(ans.Method.LocalDatabase != nil)

		if ans.Method.Radius == nil {
			state.Method.Radius = nil
		} else {
			state.Method.Radius = &authenticationProfileRsModel_eumQbRC_RadiusObject{}

			state.Method.Radius.Checkgroup = types.BoolPointerValue(ans.Method.Radius.Checkgroup)

			state.Method.Radius.ServerProfile = types.StringPointerValue(ans.Method.Radius.ServerProfile)
		}

		if ans.Method.SamlIdp == nil {
			state.Method.SamlIdp = nil
		} else {
			state.Method.SamlIdp = &authenticationProfileRsModel_eumQbRC_SamlIdpObject{}

			state.Method.SamlIdp.AttributeNameUsergroup = types.StringPointerValue(ans.Method.SamlIdp.AttributeNameUsergroup)

			state.Method.SamlIdp.AttributeNameUsername = types.StringPointerValue(ans.Method.SamlIdp.AttributeNameUsername)

			state.Method.SamlIdp.CertificateProfile = types.StringPointerValue(ans.Method.SamlIdp.CertificateProfile)

			state.Method.SamlIdp.EnableSingleLogout = types.BoolPointerValue(ans.Method.SamlIdp.EnableSingleLogout)

			state.Method.SamlIdp.RequestSigningCertificate = types.StringPointerValue(ans.Method.SamlIdp.RequestSigningCertificate)

			state.Method.SamlIdp.ServerProfile = types.StringPointerValue(ans.Method.SamlIdp.ServerProfile)
		}

		if ans.Method.Tacplus == nil {
			state.Method.Tacplus = nil
		} else {
			state.Method.Tacplus = &authenticationProfileRsModel_eumQbRC_TacplusObject{}

			state.Method.Tacplus.Checkgroup = types.BoolPointerValue(ans.Method.Tacplus.Checkgroup)

			state.Method.Tacplus.ServerProfile = types.StringPointerValue(ans.Method.Tacplus.ServerProfile)
		}
	}

	if ans.MultiFactorAuth == nil {
		state.MultiFactorAuth = nil
	} else {
		state.MultiFactorAuth = &authenticationProfileRsModel_eumQbRC_MultiFactorAuthObject{}

		var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.MultiFactorAuth.Factors)
		state.MultiFactorAuth.Factors = var4
		resp.Diagnostics.Append(var5.Errors()...)

		state.MultiFactorAuth.MfaEnable = types.BoolPointerValue(ans.MultiFactorAuth.MfaEnable)
	}

	state.Name = types.StringValue(ans.Name)

	if ans.SingleSignOn == nil {
		state.SingleSignOn = nil
	} else {
		state.SingleSignOn = &authenticationProfileRsModel_eumQbRC_SingleSignOnObject{}

		state.SingleSignOn.KerberosKeytab = types.StringPointerValue(ans.SingleSignOn.KerberosKeytab)

		state.SingleSignOn.Realm = types.StringPointerValue(ans.SingleSignOn.Realm)
	}

	state.UserDomain = types.StringPointerValue(ans.UserDomain)

	state.UsernameModifier = types.StringPointerValue(ans.UsernameModifier)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *authenticationProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state authenticationProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_authentication_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := lhPcfTR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.AllowList)
	state.AllowList = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Lockout == nil {
		state.Lockout = nil
	} else {
		state.Lockout = &authenticationProfileRsModel_eumQbRC_LockoutObject{}

		state.Lockout.FailedAttempts = types.Int64PointerValue(ans.Lockout.FailedAttempts)

		state.Lockout.LockoutTime = types.Int64PointerValue(ans.Lockout.LockoutTime)
	}

	if ans.Method == nil {
		state.Method = nil
	} else {
		state.Method = &authenticationProfileRsModel_eumQbRC_MethodObject{}

		if ans.Method.Cloud == nil {
			state.Method.Cloud = nil
		} else {
			state.Method.Cloud = &authenticationProfileRsModel_eumQbRC_CloudObject{}

			state.Method.Cloud.ProfileName = types.StringPointerValue(ans.Method.Cloud.ProfileName)
		}

		if ans.Method.Kerberos == nil {
			state.Method.Kerberos = nil
		} else {
			state.Method.Kerberos = &authenticationProfileRsModel_eumQbRC_KerberosObject{}

			state.Method.Kerberos.Realm = types.StringPointerValue(ans.Method.Kerberos.Realm)

			state.Method.Kerberos.ServerProfile = types.StringPointerValue(ans.Method.Kerberos.ServerProfile)
		}

		if ans.Method.Ldap == nil {
			state.Method.Ldap = nil
		} else {
			state.Method.Ldap = &authenticationProfileRsModel_eumQbRC_LdapObject{}

			state.Method.Ldap.LoginAttribute = types.StringPointerValue(ans.Method.Ldap.LoginAttribute)

			state.Method.Ldap.PasswdExpDays = types.Int64PointerValue(ans.Method.Ldap.PasswdExpDays)

			state.Method.Ldap.ServerProfile = types.StringPointerValue(ans.Method.Ldap.ServerProfile)
		}

		state.Method.LocalDatabase = types.BoolValue(ans.Method.LocalDatabase != nil)

		if ans.Method.Radius == nil {
			state.Method.Radius = nil
		} else {
			state.Method.Radius = &authenticationProfileRsModel_eumQbRC_RadiusObject{}

			state.Method.Radius.Checkgroup = types.BoolPointerValue(ans.Method.Radius.Checkgroup)

			state.Method.Radius.ServerProfile = types.StringPointerValue(ans.Method.Radius.ServerProfile)
		}

		if ans.Method.SamlIdp == nil {
			state.Method.SamlIdp = nil
		} else {
			state.Method.SamlIdp = &authenticationProfileRsModel_eumQbRC_SamlIdpObject{}

			state.Method.SamlIdp.AttributeNameUsergroup = types.StringPointerValue(ans.Method.SamlIdp.AttributeNameUsergroup)

			state.Method.SamlIdp.AttributeNameUsername = types.StringPointerValue(ans.Method.SamlIdp.AttributeNameUsername)

			state.Method.SamlIdp.CertificateProfile = types.StringPointerValue(ans.Method.SamlIdp.CertificateProfile)

			state.Method.SamlIdp.EnableSingleLogout = types.BoolPointerValue(ans.Method.SamlIdp.EnableSingleLogout)

			state.Method.SamlIdp.RequestSigningCertificate = types.StringPointerValue(ans.Method.SamlIdp.RequestSigningCertificate)

			state.Method.SamlIdp.ServerProfile = types.StringPointerValue(ans.Method.SamlIdp.ServerProfile)
		}

		if ans.Method.Tacplus == nil {
			state.Method.Tacplus = nil
		} else {
			state.Method.Tacplus = &authenticationProfileRsModel_eumQbRC_TacplusObject{}

			state.Method.Tacplus.Checkgroup = types.BoolPointerValue(ans.Method.Tacplus.Checkgroup)

			state.Method.Tacplus.ServerProfile = types.StringPointerValue(ans.Method.Tacplus.ServerProfile)
		}
	}

	if ans.MultiFactorAuth == nil {
		state.MultiFactorAuth = nil
	} else {
		state.MultiFactorAuth = &authenticationProfileRsModel_eumQbRC_MultiFactorAuthObject{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.MultiFactorAuth.Factors)
		state.MultiFactorAuth.Factors = var2
		resp.Diagnostics.Append(var3.Errors()...)

		state.MultiFactorAuth.MfaEnable = types.BoolPointerValue(ans.MultiFactorAuth.MfaEnable)
	}

	state.Name = types.StringValue(ans.Name)

	if ans.SingleSignOn == nil {
		state.SingleSignOn = nil
	} else {
		state.SingleSignOn = &authenticationProfileRsModel_eumQbRC_SingleSignOnObject{}

		state.SingleSignOn.KerberosKeytab = types.StringPointerValue(ans.SingleSignOn.KerberosKeytab)

		state.SingleSignOn.Realm = types.StringPointerValue(ans.SingleSignOn.Realm)
	}

	state.UserDomain = types.StringPointerValue(ans.UserDomain)

	state.UsernameModifier = types.StringPointerValue(ans.UsernameModifier)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *authenticationProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state authenticationProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_authentication_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := lhPcfTR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &eumQbRC.Config{}

	resp.Diagnostics.Append(plan.AllowList.ElementsAs(ctx, &input.Request.AllowList, false)...)
	//if len(plan.AllowList) != 0 {
	//    input.Request.AllowList = make([]string, 0, len(plan.AllowList))
	//    for _, var0 := range plan.AllowList {
	//        input.Request.AllowList = append(input.Request.AllowList, var0.ValueString())
	//    }
	//}

	if plan.Lockout != nil {
		input.Request.Lockout = &eumQbRC.LockoutObject{}

		input.Request.Lockout.FailedAttempts = plan.Lockout.FailedAttempts.ValueInt64Pointer()

		input.Request.Lockout.LockoutTime = plan.Lockout.LockoutTime.ValueInt64Pointer()
	}

	if plan.Method != nil {
		input.Request.Method = &eumQbRC.MethodObject{}

		if plan.Method.Cloud != nil {
			input.Request.Method.Cloud = &eumQbRC.CloudObject{}

			input.Request.Method.Cloud.ProfileName = plan.Method.Cloud.ProfileName.ValueStringPointer()
		}

		if plan.Method.Kerberos != nil {
			input.Request.Method.Kerberos = &eumQbRC.KerberosObject{}

			input.Request.Method.Kerberos.Realm = plan.Method.Kerberos.Realm.ValueStringPointer()

			input.Request.Method.Kerberos.ServerProfile = plan.Method.Kerberos.ServerProfile.ValueStringPointer()
		}

		if plan.Method.Ldap != nil {
			input.Request.Method.Ldap = &eumQbRC.LdapObject{}

			input.Request.Method.Ldap.LoginAttribute = plan.Method.Ldap.LoginAttribute.ValueStringPointer()

			input.Request.Method.Ldap.PasswdExpDays = plan.Method.Ldap.PasswdExpDays.ValueInt64Pointer()

			input.Request.Method.Ldap.ServerProfile = plan.Method.Ldap.ServerProfile.ValueStringPointer()
		}

		if !plan.Method.LocalDatabase.IsNull() && plan.Method.LocalDatabase.ValueBool() {
			input.Request.Method.LocalDatabase = map[string]interface{}{}
		}

		if plan.Method.Radius != nil {
			input.Request.Method.Radius = &eumQbRC.RadiusObject{}

			input.Request.Method.Radius.Checkgroup = plan.Method.Radius.Checkgroup.ValueBoolPointer()

			input.Request.Method.Radius.ServerProfile = plan.Method.Radius.ServerProfile.ValueStringPointer()
		}

		if plan.Method.SamlIdp != nil {
			input.Request.Method.SamlIdp = &eumQbRC.SamlIdpObject{}

			input.Request.Method.SamlIdp.AttributeNameUsergroup = plan.Method.SamlIdp.AttributeNameUsergroup.ValueStringPointer()

			input.Request.Method.SamlIdp.AttributeNameUsername = plan.Method.SamlIdp.AttributeNameUsername.ValueStringPointer()

			input.Request.Method.SamlIdp.CertificateProfile = plan.Method.SamlIdp.CertificateProfile.ValueStringPointer()

			input.Request.Method.SamlIdp.EnableSingleLogout = plan.Method.SamlIdp.EnableSingleLogout.ValueBoolPointer()

			input.Request.Method.SamlIdp.RequestSigningCertificate = plan.Method.SamlIdp.RequestSigningCertificate.ValueStringPointer()

			input.Request.Method.SamlIdp.ServerProfile = plan.Method.SamlIdp.ServerProfile.ValueStringPointer()
		}

		if plan.Method.Tacplus != nil {
			input.Request.Method.Tacplus = &eumQbRC.TacplusObject{}

			input.Request.Method.Tacplus.Checkgroup = plan.Method.Tacplus.Checkgroup.ValueBoolPointer()

			input.Request.Method.Tacplus.ServerProfile = plan.Method.Tacplus.ServerProfile.ValueStringPointer()
		}
	}

	if plan.MultiFactorAuth != nil {
		input.Request.MultiFactorAuth = &eumQbRC.MultiFactorAuthObject{}

		resp.Diagnostics.Append(plan.MultiFactorAuth.Factors.ElementsAs(ctx, &input.Request.MultiFactorAuth.Factors, false)...)
		//if len(plan.MultiFactorAuth.Factors) != 0 {
		//    input.Request.MultiFactorAuth.Factors = make([]string, 0, len(plan.MultiFactorAuth.Factors))
		//    for _, var1 := range plan.MultiFactorAuth.Factors {
		//        input.Request.MultiFactorAuth.Factors = append(input.Request.MultiFactorAuth.Factors, var1.ValueString())
		//    }
		//}

		input.Request.MultiFactorAuth.MfaEnable = plan.MultiFactorAuth.MfaEnable.ValueBoolPointer()
	}

	input.Request.Name = plan.Name.ValueString()

	if plan.SingleSignOn != nil {
		input.Request.SingleSignOn = &eumQbRC.SingleSignOnObject{}

		input.Request.SingleSignOn.KerberosKeytab = plan.SingleSignOn.KerberosKeytab.ValueStringPointer()

		input.Request.SingleSignOn.Realm = plan.SingleSignOn.Realm.ValueStringPointer()
	}

	input.Request.UserDomain = plan.UserDomain.ValueStringPointer()

	input.Request.UsernameModifier = plan.UsernameModifier.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.AllowList)
	state.AllowList = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Lockout == nil {
		state.Lockout = nil
	} else {
		state.Lockout = &authenticationProfileRsModel_eumQbRC_LockoutObject{}

		state.Lockout.FailedAttempts = types.Int64PointerValue(ans.Lockout.FailedAttempts)

		state.Lockout.LockoutTime = types.Int64PointerValue(ans.Lockout.LockoutTime)
	}

	if ans.Method == nil {
		state.Method = nil
	} else {
		state.Method = &authenticationProfileRsModel_eumQbRC_MethodObject{}

		if ans.Method.Cloud == nil {
			state.Method.Cloud = nil
		} else {
			state.Method.Cloud = &authenticationProfileRsModel_eumQbRC_CloudObject{}

			state.Method.Cloud.ProfileName = types.StringPointerValue(ans.Method.Cloud.ProfileName)
		}

		if ans.Method.Kerberos == nil {
			state.Method.Kerberos = nil
		} else {
			state.Method.Kerberos = &authenticationProfileRsModel_eumQbRC_KerberosObject{}

			state.Method.Kerberos.Realm = types.StringPointerValue(ans.Method.Kerberos.Realm)

			state.Method.Kerberos.ServerProfile = types.StringPointerValue(ans.Method.Kerberos.ServerProfile)
		}

		if ans.Method.Ldap == nil {
			state.Method.Ldap = nil
		} else {
			state.Method.Ldap = &authenticationProfileRsModel_eumQbRC_LdapObject{}

			state.Method.Ldap.LoginAttribute = types.StringPointerValue(ans.Method.Ldap.LoginAttribute)

			state.Method.Ldap.PasswdExpDays = types.Int64PointerValue(ans.Method.Ldap.PasswdExpDays)

			state.Method.Ldap.ServerProfile = types.StringPointerValue(ans.Method.Ldap.ServerProfile)
		}

		state.Method.LocalDatabase = types.BoolValue(ans.Method.LocalDatabase != nil)

		if ans.Method.Radius == nil {
			state.Method.Radius = nil
		} else {
			state.Method.Radius = &authenticationProfileRsModel_eumQbRC_RadiusObject{}

			state.Method.Radius.Checkgroup = types.BoolPointerValue(ans.Method.Radius.Checkgroup)

			state.Method.Radius.ServerProfile = types.StringPointerValue(ans.Method.Radius.ServerProfile)
		}

		if ans.Method.SamlIdp == nil {
			state.Method.SamlIdp = nil
		} else {
			state.Method.SamlIdp = &authenticationProfileRsModel_eumQbRC_SamlIdpObject{}

			state.Method.SamlIdp.AttributeNameUsergroup = types.StringPointerValue(ans.Method.SamlIdp.AttributeNameUsergroup)

			state.Method.SamlIdp.AttributeNameUsername = types.StringPointerValue(ans.Method.SamlIdp.AttributeNameUsername)

			state.Method.SamlIdp.CertificateProfile = types.StringPointerValue(ans.Method.SamlIdp.CertificateProfile)

			state.Method.SamlIdp.EnableSingleLogout = types.BoolPointerValue(ans.Method.SamlIdp.EnableSingleLogout)

			state.Method.SamlIdp.RequestSigningCertificate = types.StringPointerValue(ans.Method.SamlIdp.RequestSigningCertificate)

			state.Method.SamlIdp.ServerProfile = types.StringPointerValue(ans.Method.SamlIdp.ServerProfile)
		}

		if ans.Method.Tacplus == nil {
			state.Method.Tacplus = nil
		} else {
			state.Method.Tacplus = &authenticationProfileRsModel_eumQbRC_TacplusObject{}

			state.Method.Tacplus.Checkgroup = types.BoolPointerValue(ans.Method.Tacplus.Checkgroup)

			state.Method.Tacplus.ServerProfile = types.StringPointerValue(ans.Method.Tacplus.ServerProfile)
		}
	}

	if ans.MultiFactorAuth == nil {
		state.MultiFactorAuth = nil
	} else {
		state.MultiFactorAuth = &authenticationProfileRsModel_eumQbRC_MultiFactorAuthObject{}

		var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.MultiFactorAuth.Factors)
		state.MultiFactorAuth.Factors = var4
		resp.Diagnostics.Append(var5.Errors()...)

		state.MultiFactorAuth.MfaEnable = types.BoolPointerValue(ans.MultiFactorAuth.MfaEnable)
	}

	state.Name = types.StringValue(ans.Name)

	if ans.SingleSignOn == nil {
		state.SingleSignOn = nil
	} else {
		state.SingleSignOn = &authenticationProfileRsModel_eumQbRC_SingleSignOnObject{}

		state.SingleSignOn.KerberosKeytab = types.StringPointerValue(ans.SingleSignOn.KerberosKeytab)

		state.SingleSignOn.Realm = types.StringPointerValue(ans.SingleSignOn.Realm)
	}

	state.UserDomain = types.StringPointerValue(ans.UserDomain)

	state.UsernameModifier = types.StringPointerValue(ans.UsernameModifier)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *authenticationProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_authentication_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := lhPcfTR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *authenticationProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
