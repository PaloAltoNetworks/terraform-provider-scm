package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	ljnPEAA "github.com/paloaltonetworks/scm-go/netsec/schemas/authentication/rules"
	xNwmFxK "github.com/paloaltonetworks/scm-go/netsec/services/authenticationrules"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &authenticationRuleListDataSource{}
	_ datasource.DataSourceWithConfigure = &authenticationRuleListDataSource{}
)

func NewAuthenticationRuleListDataSource() datasource.DataSource {
	return &authenticationRuleListDataSource{}
}

type authenticationRuleListDataSource struct {
	client *scm.Client
}

// authenticationRuleListDsModel is the model.
type authenticationRuleListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device   types.String `tfsdk:"device"`
	Folder   types.String `tfsdk:"folder"`
	Limit    types.Int64  `tfsdk:"limit"`
	Name     types.String `tfsdk:"name"`
	Offset   types.Int64  `tfsdk:"offset"`
	Position types.String `tfsdk:"position"`
	Snippet  types.String `tfsdk:"snippet"`

	// Output.
	Data []authenticationRuleListDsModel_ljnPEAA_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type authenticationRuleListDsModel_ljnPEAA_Config struct {
	AuthenticationEnforcement types.String `tfsdk:"authentication_enforcement"`
	Categories                types.List   `tfsdk:"categories"`
	Description               types.String `tfsdk:"description"`
	DestinationHips           types.List   `tfsdk:"destination_hips"`
	Destinations              types.List   `tfsdk:"destinations"`
	Disabled                  types.Bool   `tfsdk:"disabled"`
	Froms                     types.List   `tfsdk:"froms"`
	GroupTag                  types.String `tfsdk:"group_tag"`
	HipProfiles               types.List   `tfsdk:"hip_profiles"`
	Id                        types.String `tfsdk:"id"`
	LogAuthenticationTimeout  types.Bool   `tfsdk:"log_authentication_timeout"`
	LogSetting                types.String `tfsdk:"log_setting"`
	Name                      types.String `tfsdk:"name"`
	NegateDestination         types.Bool   `tfsdk:"negate_destination"`
	NegateSource              types.Bool   `tfsdk:"negate_source"`
	Services                  types.List   `tfsdk:"services"`
	SourceHips                types.List   `tfsdk:"source_hips"`
	SourceUsers               types.List   `tfsdk:"source_users"`
	Sources                   types.List   `tfsdk:"sources"`
	Tags                      types.List   `tfsdk:"tags"`
	Timeout                   types.Int64  `tfsdk:"timeout"`
	Tos                       types.List   `tfsdk:"tos"`
}

// Metadata returns the data source type name.
func (d *authenticationRuleListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_authentication_rule_list"
}

// Schema defines the schema for this listing data source.
func (d *authenticationRuleListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"authentication_enforcement":true, "category":true, "description":true, "destination":true, "destination_hip":true, "disabled":true, "from":true, "group_tag":true, "hip_profiles":true, "id":true, "log_authentication_timeout":true, "log_setting":true, "name":true, "negate_destination":true, "negate_source":true, "service":true, "source":true, "source_hip":true, "source_user":true, "tag":true, "timeout":true, "to":true} forceNew:map[string]bool(nil)
						"authentication_enforcement": dsschema.StringAttribute{
							Description: "the authentication profile name to apply to authentication rule.",
							Computed:    true,
						},
						"categories": dsschema.ListAttribute{
							Description: "The Categories param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"destination_hips": dsschema.ListAttribute{
							Description: "The DestinationHips param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"destinations": dsschema.ListAttribute{
							Description: "The Destinations param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"disabled": dsschema.BoolAttribute{
							Description: "The Disabled param. Default: `false`.",
							Computed:    true,
						},
						"froms": dsschema.ListAttribute{
							Description: "The Froms param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"group_tag": dsschema.StringAttribute{
							Description: "The GroupTag param.",
							Computed:    true,
						},
						"hip_profiles": dsschema.ListAttribute{
							Description: "The HipProfiles param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"log_authentication_timeout": dsschema.BoolAttribute{
							Description: "The LogAuthenticationTimeout param. Default: `false`.",
							Computed:    true,
						},
						"log_setting": dsschema.StringAttribute{
							Description: "The LogSetting param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"negate_destination": dsschema.BoolAttribute{
							Description: "The NegateDestination param. Default: `false`.",
							Computed:    true,
						},
						"negate_source": dsschema.BoolAttribute{
							Description: "The NegateSource param. Default: `false`.",
							Computed:    true,
						},
						"services": dsschema.ListAttribute{
							Description: "The Services param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"source_hips": dsschema.ListAttribute{
							Description: "The SourceHips param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"source_users": dsschema.ListAttribute{
							Description: "The SourceUsers param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"sources": dsschema.ListAttribute{
							Description: "The Sources param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"tags": dsschema.ListAttribute{
							Description: "The Tags param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"timeout": dsschema.Int64Attribute{
							Description: "The Timeout param. Value must be between 1 and 1440.",
							Computed:    true,
						},
						"tos": dsschema.ListAttribute{
							Description: "The Tos param.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"position": dsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *authenticationRuleListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *authenticationRuleListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state authenticationRuleListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_authentication_rule_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"position":                    state.Position.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := xNwmFxK.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Position = state.Position.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]authenticationRuleListDsModel_ljnPEAA_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := authenticationRuleListDsModel_ljnPEAA_Config{}

			var1.AuthenticationEnforcement = types.StringPointerValue(var0.AuthenticationEnforcement)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Categories)
			var1.Categories = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Description = types.StringPointerValue(var0.Description)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.DestinationHips)
			var1.DestinationHips = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Destinations)
			var1.Destinations = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var1.Disabled = types.BoolPointerValue(var0.Disabled)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.Froms)
			var1.Froms = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var1.GroupTag = types.StringPointerValue(var0.GroupTag)

			var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.HipProfiles)
			var1.HipProfiles = var10
			resp.Diagnostics.Append(var11.Errors()...)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.LogAuthenticationTimeout = types.BoolPointerValue(var0.LogAuthenticationTimeout)

			var1.LogSetting = types.StringPointerValue(var0.LogSetting)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.NegateDestination = types.BoolPointerValue(var0.NegateDestination)

			var1.NegateSource = types.BoolPointerValue(var0.NegateSource)

			var12, var13 := types.ListValueFrom(ctx, types.StringType, var0.Services)
			var1.Services = var12
			resp.Diagnostics.Append(var13.Errors()...)

			var14, var15 := types.ListValueFrom(ctx, types.StringType, var0.SourceHips)
			var1.SourceHips = var14
			resp.Diagnostics.Append(var15.Errors()...)

			var16, var17 := types.ListValueFrom(ctx, types.StringType, var0.SourceUsers)
			var1.SourceUsers = var16
			resp.Diagnostics.Append(var17.Errors()...)

			var18, var19 := types.ListValueFrom(ctx, types.StringType, var0.Sources)
			var1.Sources = var18
			resp.Diagnostics.Append(var19.Errors()...)

			var20, var21 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var20
			resp.Diagnostics.Append(var21.Errors()...)

			var1.Timeout = types.Int64PointerValue(var0.Timeout)

			var22, var23 := types.ListValueFrom(ctx, types.StringType, var0.Tos)
			var1.Tos = var22
			resp.Diagnostics.Append(var23.Errors()...)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &authenticationRuleDataSource{}
	_ datasource.DataSourceWithConfigure = &authenticationRuleDataSource{}
)

func NewAuthenticationRuleDataSource() datasource.DataSource {
	return &authenticationRuleDataSource{}
}

type authenticationRuleDataSource struct {
	client *scm.Client
}

// authenticationRuleDsModel is the model.
type authenticationRuleDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	AuthenticationEnforcement types.String `tfsdk:"authentication_enforcement"`
	Categories                types.List   `tfsdk:"categories"`
	Description               types.String `tfsdk:"description"`
	DestinationHips           types.List   `tfsdk:"destination_hips"`
	Destinations              types.List   `tfsdk:"destinations"`
	Disabled                  types.Bool   `tfsdk:"disabled"`
	Froms                     types.List   `tfsdk:"froms"`
	GroupTag                  types.String `tfsdk:"group_tag"`
	HipProfiles               types.List   `tfsdk:"hip_profiles"`
	// omit input: id
	LogAuthenticationTimeout types.Bool   `tfsdk:"log_authentication_timeout"`
	LogSetting               types.String `tfsdk:"log_setting"`
	Name                     types.String `tfsdk:"name"`
	NegateDestination        types.Bool   `tfsdk:"negate_destination"`
	NegateSource             types.Bool   `tfsdk:"negate_source"`
	Services                 types.List   `tfsdk:"services"`
	SourceHips               types.List   `tfsdk:"source_hips"`
	SourceUsers              types.List   `tfsdk:"source_users"`
	Sources                  types.List   `tfsdk:"sources"`
	Tags                     types.List   `tfsdk:"tags"`
	Timeout                  types.Int64  `tfsdk:"timeout"`
	Tos                      types.List   `tfsdk:"tos"`
}

// Metadata returns the data source type name.
func (d *authenticationRuleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_authentication_rule"
}

// Schema defines the schema for this data source.
func (d *authenticationRuleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"authentication_enforcement":true, "category":true, "description":true, "destination":true, "destination_hip":true, "disabled":true, "from":true, "group_tag":true, "hip_profiles":true, "id":true, "log_authentication_timeout":true, "log_setting":true, "name":true, "negate_destination":true, "negate_source":true, "service":true, "source":true, "source_hip":true, "source_user":true, "tag":true, "tfid":true, "timeout":true, "to":true} forceNew:map[string]bool{"id":true}
			"authentication_enforcement": dsschema.StringAttribute{
				Description: "the authentication profile name to apply to authentication rule.",
				Computed:    true,
			},
			"categories": dsschema.ListAttribute{
				Description: "The Categories param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"destination_hips": dsschema.ListAttribute{
				Description: "The DestinationHips param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"destinations": dsschema.ListAttribute{
				Description: "The Destinations param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"disabled": dsschema.BoolAttribute{
				Description: "The Disabled param. Default: `false`.",
				Computed:    true,
			},
			"froms": dsschema.ListAttribute{
				Description: "The Froms param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"group_tag": dsschema.StringAttribute{
				Description: "The GroupTag param.",
				Computed:    true,
			},
			"hip_profiles": dsschema.ListAttribute{
				Description: "The HipProfiles param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"log_authentication_timeout": dsschema.BoolAttribute{
				Description: "The LogAuthenticationTimeout param. Default: `false`.",
				Computed:    true,
			},
			"log_setting": dsschema.StringAttribute{
				Description: "The LogSetting param.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"negate_destination": dsschema.BoolAttribute{
				Description: "The NegateDestination param. Default: `false`.",
				Computed:    true,
			},
			"negate_source": dsschema.BoolAttribute{
				Description: "The NegateSource param. Default: `false`.",
				Computed:    true,
			},
			"services": dsschema.ListAttribute{
				Description: "The Services param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"source_hips": dsschema.ListAttribute{
				Description: "The SourceHips param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"source_users": dsschema.ListAttribute{
				Description: "The SourceUsers param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"sources": dsschema.ListAttribute{
				Description: "The Sources param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tags": dsschema.ListAttribute{
				Description: "The Tags param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"timeout": dsschema.Int64Attribute{
				Description: "The Timeout param. Value must be between 1 and 1440.",
				Computed:    true,
			},
			"tos": dsschema.ListAttribute{
				Description: "The Tos param.",
				Computed:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (d *authenticationRuleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *authenticationRuleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state authenticationRuleDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_authentication_rule",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := xNwmFxK.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AuthenticationEnforcement = types.StringPointerValue(ans.AuthenticationEnforcement)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Description = types.StringPointerValue(ans.Description)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.DestinationHips)
	state.DestinationHips = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var6
	resp.Diagnostics.Append(var7.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.HipProfiles)
	state.HipProfiles = var8
	resp.Diagnostics.Append(var9.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.LogAuthenticationTimeout = types.BoolPointerValue(ans.LogAuthenticationTimeout)

	state.LogSetting = types.StringPointerValue(ans.LogSetting)

	state.Name = types.StringPointerValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Services)
	state.Services = var10
	resp.Diagnostics.Append(var11.Errors()...)

	var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.SourceHips)
	state.SourceHips = var12
	resp.Diagnostics.Append(var13.Errors()...)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.SourceUsers)
	state.SourceUsers = var14
	resp.Diagnostics.Append(var15.Errors()...)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var16
	resp.Diagnostics.Append(var17.Errors()...)

	var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var18
	resp.Diagnostics.Append(var19.Errors()...)

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	var20, var21 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var20
	resp.Diagnostics.Append(var21.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &authenticationRuleResource{}
	_ resource.ResourceWithConfigure   = &authenticationRuleResource{}
	_ resource.ResourceWithImportState = &authenticationRuleResource{}
)

func NewAuthenticationRuleResource() resource.Resource {
	return &authenticationRuleResource{}
}

type authenticationRuleResource struct {
	client *scm.Client
}

// authenticationRuleRsModel is the model.
type authenticationRuleRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	AuthenticationEnforcement types.String `tfsdk:"authentication_enforcement"`
	Categories                types.List   `tfsdk:"categories"`
	Description               types.String `tfsdk:"description"`
	DestinationHips           types.List   `tfsdk:"destination_hips"`
	Destinations              types.List   `tfsdk:"destinations"`
	Device                    types.String `tfsdk:"device"`
	Disabled                  types.Bool   `tfsdk:"disabled"`
	Folder                    types.String `tfsdk:"folder"`
	Froms                     types.List   `tfsdk:"froms"`
	GroupTag                  types.String `tfsdk:"group_tag"`
	HipProfiles               types.List   `tfsdk:"hip_profiles"`
	Id                        types.String `tfsdk:"id"`
	LogAuthenticationTimeout  types.Bool   `tfsdk:"log_authentication_timeout"`
	LogSetting                types.String `tfsdk:"log_setting"`
	Name                      types.String `tfsdk:"name"`
	NegateDestination         types.Bool   `tfsdk:"negate_destination"`
	NegateSource              types.Bool   `tfsdk:"negate_source"`
	Position                  types.String `tfsdk:"position"`
	Services                  types.List   `tfsdk:"services"`
	Snippet                   types.String `tfsdk:"snippet"`
	SourceHips                types.List   `tfsdk:"source_hips"`
	SourceUsers               types.List   `tfsdk:"source_users"`
	Sources                   types.List   `tfsdk:"sources"`
	Tags                      types.List   `tfsdk:"tags"`
	Timeout                   types.Int64  `tfsdk:"timeout"`
	Tos                       types.List   `tfsdk:"tos"`

	// Output.
	// omit input: authentication_enforcement
	// omit input: categories
	// omit input: description
	// omit input: destination_hips
	// omit input: destinations
	// omit input: disabled
	// omit input: froms
	// omit input: group_tag
	// omit input: hip_profiles
	// omit input: id
	// omit input: log_authentication_timeout
	// omit input: log_setting
	// omit input: name
	// omit input: negate_destination
	// omit input: negate_source
	// omit input: services
	// omit input: source_hips
	// omit input: source_users
	// omit input: sources
	// omit input: tags
	// omit input: timeout
	// omit input: tos
}

// Metadata returns the data source type name.
func (r *authenticationRuleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_authentication_rule"
}

// Schema defines the schema for this data source.
func (r *authenticationRuleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"authentication_enforcement":true, "category":true, "description":true, "destination":true, "destination_hip":true, "device":true, "disabled":true, "folder":true, "from":true, "group_tag":true, "hip_profiles":true, "id":true, "log_authentication_timeout":true, "log_setting":true, "name":true, "negate_destination":true, "negate_source":true, "position":true, "service":true, "snippet":true, "source":true, "source_hip":true, "source_user":true, "tag":true, "timeout":true, "to":true} outputs:map[string]bool{"authentication_enforcement":true, "category":true, "description":true, "destination":true, "destination_hip":true, "disabled":true, "from":true, "group_tag":true, "hip_profiles":true, "id":true, "log_authentication_timeout":true, "log_setting":true, "name":true, "negate_destination":true, "negate_source":true, "service":true, "source":true, "source_hip":true, "source_user":true, "tag":true, "tfid":true, "timeout":true, "to":true} forceNew:map[string]bool{"device":true, "folder":true, "position":true, "snippet":true}
			"authentication_enforcement": rsschema.StringAttribute{
				Description: "the authentication profile name to apply to authentication rule.",
				Optional:    true,
			},
			"categories": rsschema.ListAttribute{
				Description: "The Categories param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"destination_hips": rsschema.ListAttribute{
				Description: "The DestinationHips param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"destinations": rsschema.ListAttribute{
				Description: "The Destinations param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"disabled": rsschema.BoolAttribute{
				Description: "The Disabled param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"froms": rsschema.ListAttribute{
				Description: "The Froms param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"group_tag": rsschema.StringAttribute{
				Description: "The GroupTag param.",
				Optional:    true,
			},
			"hip_profiles": rsschema.ListAttribute{
				Description: "The HipProfiles param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"log_authentication_timeout": rsschema.BoolAttribute{
				Description: "The LogAuthenticationTimeout param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"log_setting": rsschema.StringAttribute{
				Description: "The LogSetting param.",
				Optional:    true,
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"negate_destination": rsschema.BoolAttribute{
				Description: "The NegateDestination param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"negate_source": rsschema.BoolAttribute{
				Description: "The NegateSource param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"position": rsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("pre"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("pre", "post"),
				},
			},
			"services": rsschema.ListAttribute{
				Description: "The Services param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"source_hips": rsschema.ListAttribute{
				Description: "The SourceHips param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"source_users": rsschema.ListAttribute{
				Description: "The SourceUsers param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"sources": rsschema.ListAttribute{
				Description: "The Sources param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tags": rsschema.ListAttribute{
				Description: "The Tags param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"timeout": rsschema.Int64Attribute{
				Description: "The Timeout param. Value must be between 1 and 1440.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(1, 1440),
				},
			},
			"tos": rsschema.ListAttribute{
				Description: "The Tos param.",
				Optional:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (r *authenticationRuleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *authenticationRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state authenticationRuleRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_authentication_rule",
		"terraform_provider_function": "Create",
		"position":                    state.Position.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.CreateInput{}

	input.Position = state.Position.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &ljnPEAA.Config{}

	input.Request.AuthenticationEnforcement = state.AuthenticationEnforcement.ValueStringPointer()

	resp.Diagnostics.Append(state.Categories.ElementsAs(ctx, &input.Request.Categories, false)...)
	//if len(state.Categories) != 0 {
	//    input.Request.Categories = make([]string, 0, len(state.Categories))
	//    for _, var0 := range state.Categories {
	//        input.Request.Categories = append(input.Request.Categories, var0.ValueString())
	//    }
	//}

	input.Request.Description = state.Description.ValueStringPointer()

	resp.Diagnostics.Append(state.DestinationHips.ElementsAs(ctx, &input.Request.DestinationHips, false)...)
	//if len(state.DestinationHips) != 0 {
	//    input.Request.DestinationHips = make([]string, 0, len(state.DestinationHips))
	//    for _, var1 := range state.DestinationHips {
	//        input.Request.DestinationHips = append(input.Request.DestinationHips, var1.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Destinations.ElementsAs(ctx, &input.Request.Destinations, false)...)
	//if len(state.Destinations) != 0 {
	//    input.Request.Destinations = make([]string, 0, len(state.Destinations))
	//    for _, var2 := range state.Destinations {
	//        input.Request.Destinations = append(input.Request.Destinations, var2.ValueString())
	//    }
	//}

	input.Request.Disabled = state.Disabled.ValueBoolPointer()

	resp.Diagnostics.Append(state.Froms.ElementsAs(ctx, &input.Request.Froms, false)...)
	//if len(state.Froms) != 0 {
	//    input.Request.Froms = make([]string, 0, len(state.Froms))
	//    for _, var3 := range state.Froms {
	//        input.Request.Froms = append(input.Request.Froms, var3.ValueString())
	//    }
	//}

	input.Request.GroupTag = state.GroupTag.ValueStringPointer()

	resp.Diagnostics.Append(state.HipProfiles.ElementsAs(ctx, &input.Request.HipProfiles, false)...)
	//if len(state.HipProfiles) != 0 {
	//    input.Request.HipProfiles = make([]string, 0, len(state.HipProfiles))
	//    for _, var4 := range state.HipProfiles {
	//        input.Request.HipProfiles = append(input.Request.HipProfiles, var4.ValueString())
	//    }
	//}

	input.Request.LogAuthenticationTimeout = state.LogAuthenticationTimeout.ValueBoolPointer()

	input.Request.LogSetting = state.LogSetting.ValueStringPointer()

	input.Request.Name = state.Name.ValueStringPointer()

	input.Request.NegateDestination = state.NegateDestination.ValueBoolPointer()

	input.Request.NegateSource = state.NegateSource.ValueBoolPointer()

	resp.Diagnostics.Append(state.Services.ElementsAs(ctx, &input.Request.Services, false)...)
	//if len(state.Services) != 0 {
	//    input.Request.Services = make([]string, 0, len(state.Services))
	//    for _, var5 := range state.Services {
	//        input.Request.Services = append(input.Request.Services, var5.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.SourceHips.ElementsAs(ctx, &input.Request.SourceHips, false)...)
	//if len(state.SourceHips) != 0 {
	//    input.Request.SourceHips = make([]string, 0, len(state.SourceHips))
	//    for _, var6 := range state.SourceHips {
	//        input.Request.SourceHips = append(input.Request.SourceHips, var6.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.SourceUsers.ElementsAs(ctx, &input.Request.SourceUsers, false)...)
	//if len(state.SourceUsers) != 0 {
	//    input.Request.SourceUsers = make([]string, 0, len(state.SourceUsers))
	//    for _, var7 := range state.SourceUsers {
	//        input.Request.SourceUsers = append(input.Request.SourceUsers, var7.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Sources.ElementsAs(ctx, &input.Request.Sources, false)...)
	//if len(state.Sources) != 0 {
	//    input.Request.Sources = make([]string, 0, len(state.Sources))
	//    for _, var8 := range state.Sources {
	//        input.Request.Sources = append(input.Request.Sources, var8.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Tags.ElementsAs(ctx, &input.Request.Tags, false)...)
	//if len(state.Tags) != 0 {
	//    input.Request.Tags = make([]string, 0, len(state.Tags))
	//    for _, var9 := range state.Tags {
	//        input.Request.Tags = append(input.Request.Tags, var9.ValueString())
	//    }
	//}

	input.Request.Timeout = state.Timeout.ValueInt64Pointer()

	resp.Diagnostics.Append(state.Tos.ElementsAs(ctx, &input.Request.Tos, false)...)
	//if len(state.Tos) != 0 {
	//    input.Request.Tos = make([]string, 0, len(state.Tos))
	//    for _, var10 := range state.Tos {
	//        input.Request.Tos = append(input.Request.Tos, var10.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AuthenticationEnforcement = types.StringPointerValue(ans.AuthenticationEnforcement)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var11
	resp.Diagnostics.Append(var12.Errors()...)

	state.Description = types.StringPointerValue(ans.Description)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.DestinationHips)
	state.DestinationHips = var13
	resp.Diagnostics.Append(var14.Errors()...)

	var15, var16 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var15
	resp.Diagnostics.Append(var16.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var17, var18 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var17
	resp.Diagnostics.Append(var18.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	var19, var20 := types.ListValueFrom(ctx, types.StringType, ans.HipProfiles)
	state.HipProfiles = var19
	resp.Diagnostics.Append(var20.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.LogAuthenticationTimeout = types.BoolPointerValue(ans.LogAuthenticationTimeout)

	state.LogSetting = types.StringPointerValue(ans.LogSetting)

	state.Name = types.StringPointerValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	var21, var22 := types.ListValueFrom(ctx, types.StringType, ans.Services)
	state.Services = var21
	resp.Diagnostics.Append(var22.Errors()...)

	var23, var24 := types.ListValueFrom(ctx, types.StringType, ans.SourceHips)
	state.SourceHips = var23
	resp.Diagnostics.Append(var24.Errors()...)

	var25, var26 := types.ListValueFrom(ctx, types.StringType, ans.SourceUsers)
	state.SourceUsers = var25
	resp.Diagnostics.Append(var26.Errors()...)

	var27, var28 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var27
	resp.Diagnostics.Append(var28.Errors()...)

	var29, var30 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var29
	resp.Diagnostics.Append(var30.Errors()...)

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	var31, var32 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var31
	resp.Diagnostics.Append(var32.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *authenticationRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state authenticationRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_authentication_rule",
		"locMap":                      map[string]int{"device": 3, "folder": 1, "id": 4, "position": 0, "snippet": 2},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ReadInput{}

	input.Id = tokens[4]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Position = types.StringNull()
	} else {
		state.Position = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[2])
	}

	if tokens[3] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[3])
	}
	state.Tfid = savestate.Tfid

	state.AuthenticationEnforcement = types.StringPointerValue(ans.AuthenticationEnforcement)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Description = types.StringPointerValue(ans.Description)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.DestinationHips)
	state.DestinationHips = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var6
	resp.Diagnostics.Append(var7.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.HipProfiles)
	state.HipProfiles = var8
	resp.Diagnostics.Append(var9.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.LogAuthenticationTimeout = types.BoolPointerValue(ans.LogAuthenticationTimeout)

	state.LogSetting = types.StringPointerValue(ans.LogSetting)

	state.Name = types.StringPointerValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Services)
	state.Services = var10
	resp.Diagnostics.Append(var11.Errors()...)

	var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.SourceHips)
	state.SourceHips = var12
	resp.Diagnostics.Append(var13.Errors()...)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.SourceUsers)
	state.SourceUsers = var14
	resp.Diagnostics.Append(var15.Errors()...)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var16
	resp.Diagnostics.Append(var17.Errors()...)

	var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var18
	resp.Diagnostics.Append(var19.Errors()...)

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	var20, var21 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var20
	resp.Diagnostics.Append(var21.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *authenticationRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state authenticationRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_authentication_rule",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.UpdateInput{}

	if tokens[4] != "" {
		input.Id = tokens[4]
	}
	input.Request = &ljnPEAA.Config{}

	input.Request.AuthenticationEnforcement = plan.AuthenticationEnforcement.ValueStringPointer()

	resp.Diagnostics.Append(plan.Categories.ElementsAs(ctx, &input.Request.Categories, false)...)
	//if len(plan.Categories) != 0 {
	//    input.Request.Categories = make([]string, 0, len(plan.Categories))
	//    for _, var0 := range plan.Categories {
	//        input.Request.Categories = append(input.Request.Categories, var0.ValueString())
	//    }
	//}

	input.Request.Description = plan.Description.ValueStringPointer()

	resp.Diagnostics.Append(plan.DestinationHips.ElementsAs(ctx, &input.Request.DestinationHips, false)...)
	//if len(plan.DestinationHips) != 0 {
	//    input.Request.DestinationHips = make([]string, 0, len(plan.DestinationHips))
	//    for _, var1 := range plan.DestinationHips {
	//        input.Request.DestinationHips = append(input.Request.DestinationHips, var1.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Destinations.ElementsAs(ctx, &input.Request.Destinations, false)...)
	//if len(plan.Destinations) != 0 {
	//    input.Request.Destinations = make([]string, 0, len(plan.Destinations))
	//    for _, var2 := range plan.Destinations {
	//        input.Request.Destinations = append(input.Request.Destinations, var2.ValueString())
	//    }
	//}

	input.Request.Disabled = plan.Disabled.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Froms.ElementsAs(ctx, &input.Request.Froms, false)...)
	//if len(plan.Froms) != 0 {
	//    input.Request.Froms = make([]string, 0, len(plan.Froms))
	//    for _, var3 := range plan.Froms {
	//        input.Request.Froms = append(input.Request.Froms, var3.ValueString())
	//    }
	//}

	input.Request.GroupTag = plan.GroupTag.ValueStringPointer()

	resp.Diagnostics.Append(plan.HipProfiles.ElementsAs(ctx, &input.Request.HipProfiles, false)...)
	//if len(plan.HipProfiles) != 0 {
	//    input.Request.HipProfiles = make([]string, 0, len(plan.HipProfiles))
	//    for _, var4 := range plan.HipProfiles {
	//        input.Request.HipProfiles = append(input.Request.HipProfiles, var4.ValueString())
	//    }
	//}

	input.Request.LogAuthenticationTimeout = plan.LogAuthenticationTimeout.ValueBoolPointer()

	input.Request.LogSetting = plan.LogSetting.ValueStringPointer()

	input.Request.Name = plan.Name.ValueStringPointer()

	input.Request.NegateDestination = plan.NegateDestination.ValueBoolPointer()

	input.Request.NegateSource = plan.NegateSource.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Services.ElementsAs(ctx, &input.Request.Services, false)...)
	//if len(plan.Services) != 0 {
	//    input.Request.Services = make([]string, 0, len(plan.Services))
	//    for _, var5 := range plan.Services {
	//        input.Request.Services = append(input.Request.Services, var5.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.SourceHips.ElementsAs(ctx, &input.Request.SourceHips, false)...)
	//if len(plan.SourceHips) != 0 {
	//    input.Request.SourceHips = make([]string, 0, len(plan.SourceHips))
	//    for _, var6 := range plan.SourceHips {
	//        input.Request.SourceHips = append(input.Request.SourceHips, var6.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.SourceUsers.ElementsAs(ctx, &input.Request.SourceUsers, false)...)
	//if len(plan.SourceUsers) != 0 {
	//    input.Request.SourceUsers = make([]string, 0, len(plan.SourceUsers))
	//    for _, var7 := range plan.SourceUsers {
	//        input.Request.SourceUsers = append(input.Request.SourceUsers, var7.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Sources.ElementsAs(ctx, &input.Request.Sources, false)...)
	//if len(plan.Sources) != 0 {
	//    input.Request.Sources = make([]string, 0, len(plan.Sources))
	//    for _, var8 := range plan.Sources {
	//        input.Request.Sources = append(input.Request.Sources, var8.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Tags.ElementsAs(ctx, &input.Request.Tags, false)...)
	//if len(plan.Tags) != 0 {
	//    input.Request.Tags = make([]string, 0, len(plan.Tags))
	//    for _, var9 := range plan.Tags {
	//        input.Request.Tags = append(input.Request.Tags, var9.ValueString())
	//    }
	//}

	input.Request.Timeout = plan.Timeout.ValueInt64Pointer()

	resp.Diagnostics.Append(plan.Tos.ElementsAs(ctx, &input.Request.Tos, false)...)
	//if len(plan.Tos) != 0 {
	//    input.Request.Tos = make([]string, 0, len(plan.Tos))
	//    for _, var10 := range plan.Tos {
	//        input.Request.Tos = append(input.Request.Tos, var10.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.AuthenticationEnforcement = types.StringPointerValue(ans.AuthenticationEnforcement)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var11
	resp.Diagnostics.Append(var12.Errors()...)

	state.Description = types.StringPointerValue(ans.Description)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.DestinationHips)
	state.DestinationHips = var13
	resp.Diagnostics.Append(var14.Errors()...)

	var15, var16 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var15
	resp.Diagnostics.Append(var16.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var17, var18 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var17
	resp.Diagnostics.Append(var18.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	var19, var20 := types.ListValueFrom(ctx, types.StringType, ans.HipProfiles)
	state.HipProfiles = var19
	resp.Diagnostics.Append(var20.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.LogAuthenticationTimeout = types.BoolPointerValue(ans.LogAuthenticationTimeout)

	state.LogSetting = types.StringPointerValue(ans.LogSetting)

	state.Name = types.StringPointerValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	var21, var22 := types.ListValueFrom(ctx, types.StringType, ans.Services)
	state.Services = var21
	resp.Diagnostics.Append(var22.Errors()...)

	var23, var24 := types.ListValueFrom(ctx, types.StringType, ans.SourceHips)
	state.SourceHips = var23
	resp.Diagnostics.Append(var24.Errors()...)

	var25, var26 := types.ListValueFrom(ctx, types.StringType, ans.SourceUsers)
	state.SourceUsers = var25
	resp.Diagnostics.Append(var26.Errors()...)

	var27, var28 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var27
	resp.Diagnostics.Append(var28.Errors()...)

	var29, var30 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var29
	resp.Diagnostics.Append(var30.Errors()...)

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	var31, var32 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var31
	resp.Diagnostics.Append(var32.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *authenticationRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_authentication_rule",
		"locMap":                      map[string]int{"device": 3, "folder": 1, "id": 4, "position": 0, "snippet": 2},
		"tokens":                      tokens,
	})

	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.DeleteInput{}

	input.Id = tokens[4]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *authenticationRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
