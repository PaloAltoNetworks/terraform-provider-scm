package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	dvnOhnM "github.com/paloaltonetworks/scm-go/netsec/services/autotagactions"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &autoTagActionsListDataSource{}
	_ datasource.DataSourceWithConfigure = &autoTagActionsListDataSource{}
)

func NewAutoTagActionsListDataSource() datasource.DataSource {
	return &autoTagActionsListDataSource{}
}

type autoTagActionsListDataSource struct {
	client *scm.Client
}

// autoTagActionsListDsModel is the model.
type autoTagActionsListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Limit  types.Int64  `tfsdk:"limit"`
	Name   types.String `tfsdk:"name"`
	Offset types.Int64  `tfsdk:"offset"`

	// Output.
	Data []autoTagActionsListDsModel_tephihM_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type autoTagActionsListDsModel_tephihM_Config struct {
	Actions        []autoTagActionsListDsModel_tephihM_ActionsObject `tfsdk:"actions"`
	Description    types.String                                      `tfsdk:"description"`
	Filter         types.String                                      `tfsdk:"filter"`
	LogType        types.String                                      `tfsdk:"log_type"`
	Name           types.String                                      `tfsdk:"name"`
	Quarantine     types.Bool                                        `tfsdk:"quarantine"`
	SendToPanorama types.Bool                                        `tfsdk:"send_to_panorama"`
}

type autoTagActionsListDsModel_tephihM_ActionsObject struct {
	Name types.String                                 `tfsdk:"name"`
	Type autoTagActionsListDsModel_tephihM_TypeObject `tfsdk:"type"`
}

type autoTagActionsListDsModel_tephihM_TypeObject struct {
	Tagging autoTagActionsListDsModel_tephihM_TaggingObject `tfsdk:"tagging"`
}

type autoTagActionsListDsModel_tephihM_TaggingObject struct {
	Action  types.String `tfsdk:"action"`
	Tags    types.List   `tfsdk:"tags"`
	Target  types.String `tfsdk:"target"`
	Timeout types.Int64  `tfsdk:"timeout"`
}

// Metadata returns the data source type name.
func (d *autoTagActionsListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_auto_tag_actions_list"
}

// Schema defines the schema for this listing data source.
func (d *autoTagActionsListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"limit":true, "name":true, "offset":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"limit":true, "name":true, "offset":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"actions":true, "description":true, "filter":true, "log_type":true, "name":true, "quarantine":true, "send_to_panorama":true} forceNew:map[string]bool(nil)
						"actions": dsschema.ListNestedAttribute{
							Description: "The Actions param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "type":true} forceNew:map[string]bool(nil)
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"type": dsschema.SingleNestedAttribute{
										Description: "The Type param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"tagging":true} forceNew:map[string]bool(nil)
											"tagging": dsschema.SingleNestedAttribute{
												Description: "The Tagging param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "tags":true, "target":true, "timeout":true} forceNew:map[string]bool(nil)
													"action": dsschema.StringAttribute{
														Description: "Add or Remove tag option. String must be one of these: `\"add-tag\"`, `\"remove-tag\"`.",
														Computed:    true,
													},
													"tags": dsschema.ListAttribute{
														Description: "Tags for address object. List must contain at most 64 elements.",
														Computed:    true,
														ElementType: types.StringType,
													},
													"target": dsschema.StringAttribute{
														Description: "Source or Destination Address, User, X-Forwarded-For Address.",
														Computed:    true,
													},
													"timeout": dsschema.Int64Attribute{
														Description: "The Timeout param.",
														Computed:    true,
													},
												},
											},
										},
									},
								},
							},
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param. String length must not exceed 1023 characters.",
							Computed:    true,
						},
						"filter": dsschema.StringAttribute{
							Description: "Tag based filter defining group membership e.g. `tag1 AND tag2 OR tag3`. String length must not exceed 2047 characters.",
							Computed:    true,
						},
						"log_type": dsschema.StringAttribute{
							Description: "The LogType param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"quarantine": dsschema.BoolAttribute{
							Description: "The Quarantine param.",
							Computed:    true,
						},
						"send_to_panorama": dsschema.BoolAttribute{
							Description: "The SendToPanorama param.",
							Computed:    true,
						},
					},
				},
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *autoTagActionsListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *autoTagActionsListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state autoTagActionsListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_auto_tag_actions_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := dvnOhnM.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]autoTagActionsListDsModel_tephihM_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := autoTagActionsListDsModel_tephihM_Config{}

			if len(var0.Actions) == 0 {
				var1.Actions = nil
			} else {
				var1.Actions = make([]autoTagActionsListDsModel_tephihM_ActionsObject, 0, len(var0.Actions))
				for _, var2 := range var0.Actions {
					var3 := autoTagActionsListDsModel_tephihM_ActionsObject{}

					var3.Name = types.StringValue(var2.Name)

					var3.Type = autoTagActionsListDsModel_tephihM_TypeObject{}

					var3.Type.Tagging = autoTagActionsListDsModel_tephihM_TaggingObject{}

					var3.Type.Tagging.Action = types.StringValue(var2.Type.Tagging.Action)

					var4, var5 := types.ListValueFrom(ctx, types.StringType, var2.Type.Tagging.Tags)
					var3.Type.Tagging.Tags = var4
					resp.Diagnostics.Append(var5.Errors()...)

					var3.Type.Tagging.Target = types.StringValue(var2.Type.Tagging.Target)

					var3.Type.Tagging.Timeout = types.Int64PointerValue(var2.Type.Tagging.Timeout)
					var1.Actions = append(var1.Actions, var3)
				}
			}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Filter = types.StringValue(var0.Filter)

			var1.LogType = types.StringValue(var0.LogType)

			var1.Name = types.StringValue(var0.Name)

			var1.Quarantine = types.BoolPointerValue(var0.Quarantine)

			var1.SendToPanorama = types.BoolPointerValue(var0.SendToPanorama)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
