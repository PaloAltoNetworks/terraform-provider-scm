package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	dEowMJz "github.com/paloaltonetworks/scm-go/netsec/schemas/certificate/profiles"
	gOMQArS "github.com/paloaltonetworks/scm-go/netsec/services/certificateprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &certificateProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &certificateProfileListDataSource{}
)

func NewCertificateProfileListDataSource() datasource.DataSource {
	return &certificateProfileListDataSource{}
}

type certificateProfileListDataSource struct {
	client *scm.Client
}

// certificateProfileListDsModel is the model.
type certificateProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []certificateProfileListDsModel_dEowMJz_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type certificateProfileListDsModel_dEowMJz_Config struct {
	BlockExpiredCert         types.Bool                                                  `tfsdk:"block_expired_cert"`
	BlockTimeoutCert         types.Bool                                                  `tfsdk:"block_timeout_cert"`
	BlockUnauthenticatedCert types.Bool                                                  `tfsdk:"block_unauthenticated_cert"`
	BlockUnknownCert         types.Bool                                                  `tfsdk:"block_unknown_cert"`
	CaCertificates           []certificateProfileListDsModel_dEowMJz_CaCertificateObject `tfsdk:"ca_certificates"`
	CertStatusTimeout        types.String                                                `tfsdk:"cert_status_timeout"`
	CrlReceiveTimeout        types.String                                                `tfsdk:"crl_receive_timeout"`
	Domain                   types.String                                                `tfsdk:"domain"`
	Id                       types.String                                                `tfsdk:"id"`
	Name                     types.String                                                `tfsdk:"name"`
	OcspReceiveTimeout       types.String                                                `tfsdk:"ocsp_receive_timeout"`
	UseCrl                   types.Bool                                                  `tfsdk:"use_crl"`
	UseOcsp                  types.Bool                                                  `tfsdk:"use_ocsp"`
	UsernameField            *certificateProfileListDsModel_dEowMJz_UsernameFieldObject  `tfsdk:"username_field"`
}

type certificateProfileListDsModel_dEowMJz_CaCertificateObject struct {
	DefaultOcspUrl types.String `tfsdk:"default_ocsp_url"`
	Name           types.String `tfsdk:"name"`
	OcspVerifyCert types.String `tfsdk:"ocsp_verify_cert"`
	TemplateName   types.String `tfsdk:"template_name"`
}

type certificateProfileListDsModel_dEowMJz_UsernameFieldObject struct {
	Subject    types.String `tfsdk:"subject"`
	SubjectAlt types.String `tfsdk:"subject_alt"`
}

// Metadata returns the data source type name.
func (d *certificateProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *certificateProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"block_expired_cert":true, "block_timeout_cert":true, "block_unauthenticated_cert":true, "block_unknown_cert":true, "ca_certificates":true, "cert_status_timeout":true, "crl_receive_timeout":true, "domain":true, "id":true, "name":true, "ocsp_receive_timeout":true, "use_crl":true, "use_ocsp":true, "username_field":true} forceNew:map[string]bool(nil)
						"block_expired_cert": dsschema.BoolAttribute{
							Description: "The BlockExpiredCert param.",
							Computed:    true,
						},
						"block_timeout_cert": dsschema.BoolAttribute{
							Description: "The BlockTimeoutCert param.",
							Computed:    true,
						},
						"block_unauthenticated_cert": dsschema.BoolAttribute{
							Description: "The BlockUnauthenticatedCert param.",
							Computed:    true,
						},
						"block_unknown_cert": dsschema.BoolAttribute{
							Description: "The BlockUnknownCert param.",
							Computed:    true,
						},
						"ca_certificates": dsschema.ListNestedAttribute{
							Description: "The CaCertificates param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"default_ocsp_url":true, "name":true, "ocsp_verify_cert":true, "template_name":true} forceNew:map[string]bool(nil)
									"default_ocsp_url": dsschema.StringAttribute{
										Description: "The DefaultOcspUrl param.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"ocsp_verify_cert": dsschema.StringAttribute{
										Description: "The OcspVerifyCert param.",
										Computed:    true,
									},
									"template_name": dsschema.StringAttribute{
										Description: "The TemplateName param.",
										Computed:    true,
									},
								},
							},
						},
						"cert_status_timeout": dsschema.StringAttribute{
							Description: "The CertStatusTimeout param.",
							Computed:    true,
						},
						"crl_receive_timeout": dsschema.StringAttribute{
							Description: "The CrlReceiveTimeout param.",
							Computed:    true,
						},
						"domain": dsschema.StringAttribute{
							Description: "The Domain param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"ocsp_receive_timeout": dsschema.StringAttribute{
							Description: "The OcspReceiveTimeout param.",
							Computed:    true,
						},
						"use_crl": dsschema.BoolAttribute{
							Description: "The UseCrl param.",
							Computed:    true,
						},
						"use_ocsp": dsschema.BoolAttribute{
							Description: "The UseOcsp param.",
							Computed:    true,
						},
						"username_field": dsschema.SingleNestedAttribute{
							Description: "The UsernameField param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"subject":true, "subject_alt":true} forceNew:map[string]bool(nil)
								"subject": dsschema.StringAttribute{
									Description: "The Subject param. String must be one of these: `\"common-name\"`.",
									Computed:    true,
								},
								"subject_alt": dsschema.StringAttribute{
									Description: "The SubjectAlt param. String must be one of these: `\"email\"`.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *certificateProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *certificateProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state certificateProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_certificate_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := gOMQArS.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]certificateProfileListDsModel_dEowMJz_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := certificateProfileListDsModel_dEowMJz_Config{}

			var1.BlockExpiredCert = types.BoolPointerValue(var0.BlockExpiredCert)

			var1.BlockTimeoutCert = types.BoolPointerValue(var0.BlockTimeoutCert)

			var1.BlockUnauthenticatedCert = types.BoolPointerValue(var0.BlockUnauthenticatedCert)

			var1.BlockUnknownCert = types.BoolPointerValue(var0.BlockUnknownCert)

			if len(var0.CaCertificates) == 0 {
				var1.CaCertificates = nil
			} else {
				var1.CaCertificates = make([]certificateProfileListDsModel_dEowMJz_CaCertificateObject, 0, len(var0.CaCertificates))
				for _, var2 := range var0.CaCertificates {
					var3 := certificateProfileListDsModel_dEowMJz_CaCertificateObject{}

					var3.DefaultOcspUrl = types.StringPointerValue(var2.DefaultOcspUrl)

					var3.Name = types.StringPointerValue(var2.Name)

					var3.OcspVerifyCert = types.StringPointerValue(var2.OcspVerifyCert)

					var3.TemplateName = types.StringPointerValue(var2.TemplateName)
					var1.CaCertificates = append(var1.CaCertificates, var3)
				}
			}

			var1.CertStatusTimeout = types.StringPointerValue(var0.CertStatusTimeout)

			var1.CrlReceiveTimeout = types.StringPointerValue(var0.CrlReceiveTimeout)

			var1.Domain = types.StringPointerValue(var0.Domain)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.OcspReceiveTimeout = types.StringPointerValue(var0.OcspReceiveTimeout)

			var1.UseCrl = types.BoolPointerValue(var0.UseCrl)

			var1.UseOcsp = types.BoolPointerValue(var0.UseOcsp)

			if var0.UsernameField == nil {
				var1.UsernameField = nil
			} else {
				var1.UsernameField = &certificateProfileListDsModel_dEowMJz_UsernameFieldObject{}

				var1.UsernameField.Subject = types.StringPointerValue(var0.UsernameField.Subject)

				var1.UsernameField.SubjectAlt = types.StringPointerValue(var0.UsernameField.SubjectAlt)
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &certificateProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &certificateProfileDataSource{}
)

func NewCertificateProfileDataSource() datasource.DataSource {
	return &certificateProfileDataSource{}
}

type certificateProfileDataSource struct {
	client *scm.Client
}

// certificateProfileDsModel is the model.
type certificateProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	BlockExpiredCert         types.Bool                                              `tfsdk:"block_expired_cert"`
	BlockTimeoutCert         types.Bool                                              `tfsdk:"block_timeout_cert"`
	BlockUnauthenticatedCert types.Bool                                              `tfsdk:"block_unauthenticated_cert"`
	BlockUnknownCert         types.Bool                                              `tfsdk:"block_unknown_cert"`
	CaCertificates           []certificateProfileDsModel_dEowMJz_CaCertificateObject `tfsdk:"ca_certificates"`
	CertStatusTimeout        types.String                                            `tfsdk:"cert_status_timeout"`
	CrlReceiveTimeout        types.String                                            `tfsdk:"crl_receive_timeout"`
	Domain                   types.String                                            `tfsdk:"domain"`
	// omit input: id
	Name               types.String                                           `tfsdk:"name"`
	OcspReceiveTimeout types.String                                           `tfsdk:"ocsp_receive_timeout"`
	UseCrl             types.Bool                                             `tfsdk:"use_crl"`
	UseOcsp            types.Bool                                             `tfsdk:"use_ocsp"`
	UsernameField      *certificateProfileDsModel_dEowMJz_UsernameFieldObject `tfsdk:"username_field"`
}

type certificateProfileDsModel_dEowMJz_CaCertificateObject struct {
	DefaultOcspUrl types.String `tfsdk:"default_ocsp_url"`
	Name           types.String `tfsdk:"name"`
	OcspVerifyCert types.String `tfsdk:"ocsp_verify_cert"`
	TemplateName   types.String `tfsdk:"template_name"`
}

type certificateProfileDsModel_dEowMJz_UsernameFieldObject struct {
	Subject    types.String `tfsdk:"subject"`
	SubjectAlt types.String `tfsdk:"subject_alt"`
}

// Metadata returns the data source type name.
func (d *certificateProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate_profile"
}

// Schema defines the schema for this data source.
func (d *certificateProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"block_expired_cert":true, "block_timeout_cert":true, "block_unauthenticated_cert":true, "block_unknown_cert":true, "ca_certificates":true, "cert_status_timeout":true, "crl_receive_timeout":true, "domain":true, "id":true, "name":true, "ocsp_receive_timeout":true, "tfid":true, "use_crl":true, "use_ocsp":true, "username_field":true} forceNew:map[string]bool{"id":true}
			"block_expired_cert": dsschema.BoolAttribute{
				Description: "The BlockExpiredCert param.",
				Computed:    true,
			},
			"block_timeout_cert": dsschema.BoolAttribute{
				Description: "The BlockTimeoutCert param.",
				Computed:    true,
			},
			"block_unauthenticated_cert": dsschema.BoolAttribute{
				Description: "The BlockUnauthenticatedCert param.",
				Computed:    true,
			},
			"block_unknown_cert": dsschema.BoolAttribute{
				Description: "The BlockUnknownCert param.",
				Computed:    true,
			},
			"ca_certificates": dsschema.ListNestedAttribute{
				Description: "The CaCertificates param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"default_ocsp_url":true, "name":true, "ocsp_verify_cert":true, "template_name":true} forceNew:map[string]bool(nil)
						"default_ocsp_url": dsschema.StringAttribute{
							Description: "The DefaultOcspUrl param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"ocsp_verify_cert": dsschema.StringAttribute{
							Description: "The OcspVerifyCert param.",
							Computed:    true,
						},
						"template_name": dsschema.StringAttribute{
							Description: "The TemplateName param.",
							Computed:    true,
						},
					},
				},
			},
			"cert_status_timeout": dsschema.StringAttribute{
				Description: "The CertStatusTimeout param.",
				Computed:    true,
			},
			"crl_receive_timeout": dsschema.StringAttribute{
				Description: "The CrlReceiveTimeout param.",
				Computed:    true,
			},
			"domain": dsschema.StringAttribute{
				Description: "The Domain param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"ocsp_receive_timeout": dsschema.StringAttribute{
				Description: "The OcspReceiveTimeout param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"use_crl": dsschema.BoolAttribute{
				Description: "The UseCrl param.",
				Computed:    true,
			},
			"use_ocsp": dsschema.BoolAttribute{
				Description: "The UseOcsp param.",
				Computed:    true,
			},
			"username_field": dsschema.SingleNestedAttribute{
				Description: "The UsernameField param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"subject":true, "subject_alt":true} forceNew:map[string]bool(nil)
					"subject": dsschema.StringAttribute{
						Description: "The Subject param. String must be one of these: `\"common-name\"`.",
						Computed:    true,
					},
					"subject_alt": dsschema.StringAttribute{
						Description: "The SubjectAlt param. String must be one of these: `\"email\"`.",
						Computed:    true,
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (d *certificateProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *certificateProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state certificateProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_certificate_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := gOMQArS.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.BlockExpiredCert = types.BoolPointerValue(ans.BlockExpiredCert)

	state.BlockTimeoutCert = types.BoolPointerValue(ans.BlockTimeoutCert)

	state.BlockUnauthenticatedCert = types.BoolPointerValue(ans.BlockUnauthenticatedCert)

	state.BlockUnknownCert = types.BoolPointerValue(ans.BlockUnknownCert)

	if len(ans.CaCertificates) == 0 {
		state.CaCertificates = nil
	} else {
		state.CaCertificates = make([]certificateProfileDsModel_dEowMJz_CaCertificateObject, 0, len(ans.CaCertificates))
		for _, var0 := range ans.CaCertificates {
			var1 := certificateProfileDsModel_dEowMJz_CaCertificateObject{}

			var1.DefaultOcspUrl = types.StringPointerValue(var0.DefaultOcspUrl)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.OcspVerifyCert = types.StringPointerValue(var0.OcspVerifyCert)

			var1.TemplateName = types.StringPointerValue(var0.TemplateName)
			state.CaCertificates = append(state.CaCertificates, var1)
		}
	}

	state.CertStatusTimeout = types.StringPointerValue(ans.CertStatusTimeout)

	state.CrlReceiveTimeout = types.StringPointerValue(ans.CrlReceiveTimeout)

	state.Domain = types.StringPointerValue(ans.Domain)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.OcspReceiveTimeout = types.StringPointerValue(ans.OcspReceiveTimeout)

	state.UseCrl = types.BoolPointerValue(ans.UseCrl)

	state.UseOcsp = types.BoolPointerValue(ans.UseOcsp)

	if ans.UsernameField == nil {
		state.UsernameField = nil
	} else {
		state.UsernameField = &certificateProfileDsModel_dEowMJz_UsernameFieldObject{}

		state.UsernameField.Subject = types.StringPointerValue(ans.UsernameField.Subject)

		state.UsernameField.SubjectAlt = types.StringPointerValue(ans.UsernameField.SubjectAlt)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &certificateProfileResource{}
	_ resource.ResourceWithConfigure   = &certificateProfileResource{}
	_ resource.ResourceWithImportState = &certificateProfileResource{}
)

func NewCertificateProfileResource() resource.Resource {
	return &certificateProfileResource{}
}

type certificateProfileResource struct {
	client *scm.Client
}

// certificateProfileRsModel is the model.
type certificateProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	BlockExpiredCert         types.Bool                                              `tfsdk:"block_expired_cert"`
	BlockTimeoutCert         types.Bool                                              `tfsdk:"block_timeout_cert"`
	BlockUnauthenticatedCert types.Bool                                              `tfsdk:"block_unauthenticated_cert"`
	BlockUnknownCert         types.Bool                                              `tfsdk:"block_unknown_cert"`
	CaCertificates           []certificateProfileRsModel_dEowMJz_CaCertificateObject `tfsdk:"ca_certificates"`
	CertStatusTimeout        types.String                                            `tfsdk:"cert_status_timeout"`
	CrlReceiveTimeout        types.String                                            `tfsdk:"crl_receive_timeout"`
	Device                   types.String                                            `tfsdk:"device"`
	Domain                   types.String                                            `tfsdk:"domain"`
	Folder                   types.String                                            `tfsdk:"folder"`
	Id                       types.String                                            `tfsdk:"id"`
	Name                     types.String                                            `tfsdk:"name"`
	OcspReceiveTimeout       types.String                                            `tfsdk:"ocsp_receive_timeout"`
	Snippet                  types.String                                            `tfsdk:"snippet"`
	UseCrl                   types.Bool                                              `tfsdk:"use_crl"`
	UseOcsp                  types.Bool                                              `tfsdk:"use_ocsp"`
	UsernameField            *certificateProfileRsModel_dEowMJz_UsernameFieldObject  `tfsdk:"username_field"`

	// Output.
	// omit input: block_expired_cert
	// omit input: block_timeout_cert
	// omit input: block_unauthenticated_cert
	// omit input: block_unknown_cert
	// omit input: ca_certificates
	// omit input: cert_status_timeout
	// omit input: crl_receive_timeout
	// omit input: domain
	// omit input: id
	// omit input: name
	// omit input: ocsp_receive_timeout
	// omit input: use_crl
	// omit input: use_ocsp
	// omit input: username_field
}

type certificateProfileRsModel_dEowMJz_CaCertificateObject struct {
	DefaultOcspUrl types.String `tfsdk:"default_ocsp_url"`
	Name           types.String `tfsdk:"name"`
	OcspVerifyCert types.String `tfsdk:"ocsp_verify_cert"`
	TemplateName   types.String `tfsdk:"template_name"`
}

type certificateProfileRsModel_dEowMJz_UsernameFieldObject struct {
	Subject    types.String `tfsdk:"subject"`
	SubjectAlt types.String `tfsdk:"subject_alt"`
}

// Metadata returns the data source type name.
func (r *certificateProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate_profile"
}

// Schema defines the schema for this data source.
func (r *certificateProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"block_expired_cert":true, "block_timeout_cert":true, "block_unauthenticated_cert":true, "block_unknown_cert":true, "ca_certificates":true, "cert_status_timeout":true, "crl_receive_timeout":true, "device":true, "domain":true, "folder":true, "id":true, "name":true, "ocsp_receive_timeout":true, "snippet":true, "use_crl":true, "use_ocsp":true, "username_field":true} outputs:map[string]bool{"block_expired_cert":true, "block_timeout_cert":true, "block_unauthenticated_cert":true, "block_unknown_cert":true, "ca_certificates":true, "cert_status_timeout":true, "crl_receive_timeout":true, "domain":true, "id":true, "name":true, "ocsp_receive_timeout":true, "tfid":true, "use_crl":true, "use_ocsp":true, "username_field":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"block_expired_cert": rsschema.BoolAttribute{
				Description: "The BlockExpiredCert param.",
				Optional:    true,
			},
			"block_timeout_cert": rsschema.BoolAttribute{
				Description: "The BlockTimeoutCert param.",
				Optional:    true,
			},
			"block_unauthenticated_cert": rsschema.BoolAttribute{
				Description: "The BlockUnauthenticatedCert param.",
				Optional:    true,
			},
			"block_unknown_cert": rsschema.BoolAttribute{
				Description: "The BlockUnknownCert param.",
				Optional:    true,
			},
			"ca_certificates": rsschema.ListNestedAttribute{
				Description: "The CaCertificates param.",
				Required:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"default_ocsp_url":true, "name":true, "ocsp_verify_cert":true, "template_name":true} outputs:map[string]bool{"default_ocsp_url":true, "name":true, "ocsp_verify_cert":true, "template_name":true} forceNew:map[string]bool(nil)
						"default_ocsp_url": rsschema.StringAttribute{
							Description: "The DefaultOcspUrl param.",
							Optional:    true,
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
						"ocsp_verify_cert": rsschema.StringAttribute{
							Description: "The OcspVerifyCert param.",
							Optional:    true,
						},
						"template_name": rsschema.StringAttribute{
							Description: "The TemplateName param.",
							Optional:    true,
						},
					},
				},
			},
			"cert_status_timeout": rsschema.StringAttribute{
				Description: "The CertStatusTimeout param.",
				Optional:    true,
			},
			"crl_receive_timeout": rsschema.StringAttribute{
				Description: "The CrlReceiveTimeout param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"domain": rsschema.StringAttribute{
				Description: "The Domain param.",
				Optional:    true,
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"ocsp_receive_timeout": rsschema.StringAttribute{
				Description: "The OcspReceiveTimeout param.",
				Optional:    true,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"use_crl": rsschema.BoolAttribute{
				Description: "The UseCrl param.",
				Optional:    true,
			},
			"use_ocsp": rsschema.BoolAttribute{
				Description: "The UseOcsp param.",
				Optional:    true,
			},
			"username_field": rsschema.SingleNestedAttribute{
				Description: "The UsernameField param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"subject":true, "subject_alt":true} outputs:map[string]bool{"subject":true, "subject_alt":true} forceNew:map[string]bool(nil)
					"subject": rsschema.StringAttribute{
						Description: "The Subject param. String must be one of these: `\"common-name\"`.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.OneOf("common-name"),
						},
					},
					"subject_alt": rsschema.StringAttribute{
						Description: "The SubjectAlt param. String must be one of these: `\"email\"`.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.OneOf("email"),
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *certificateProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *certificateProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state certificateProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_certificate_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := gOMQArS.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &dEowMJz.Config{}

	input.Request.BlockExpiredCert = state.BlockExpiredCert.ValueBoolPointer()

	input.Request.BlockTimeoutCert = state.BlockTimeoutCert.ValueBoolPointer()

	input.Request.BlockUnauthenticatedCert = state.BlockUnauthenticatedCert.ValueBoolPointer()

	input.Request.BlockUnknownCert = state.BlockUnknownCert.ValueBoolPointer()

	if len(state.CaCertificates) != 0 {
		input.Request.CaCertificates = make([]dEowMJz.CaCertificateObject, 0, len(state.CaCertificates))
		for _, var0 := range state.CaCertificates {
			var var1 dEowMJz.CaCertificateObject

			var1.DefaultOcspUrl = var0.DefaultOcspUrl.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()

			var1.OcspVerifyCert = var0.OcspVerifyCert.ValueStringPointer()

			var1.TemplateName = var0.TemplateName.ValueStringPointer()
			input.Request.CaCertificates = append(input.Request.CaCertificates, var1)
		}
	}

	input.Request.CertStatusTimeout = state.CertStatusTimeout.ValueStringPointer()

	input.Request.CrlReceiveTimeout = state.CrlReceiveTimeout.ValueStringPointer()

	input.Request.Domain = state.Domain.ValueStringPointer()

	input.Request.Name = state.Name.ValueString()

	input.Request.OcspReceiveTimeout = state.OcspReceiveTimeout.ValueStringPointer()

	input.Request.UseCrl = state.UseCrl.ValueBoolPointer()

	input.Request.UseOcsp = state.UseOcsp.ValueBoolPointer()

	if state.UsernameField != nil {
		input.Request.UsernameField = &dEowMJz.UsernameFieldObject{}

		input.Request.UsernameField.Subject = state.UsernameField.Subject.ValueStringPointer()

		input.Request.UsernameField.SubjectAlt = state.UsernameField.SubjectAlt.ValueStringPointer()
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.BlockExpiredCert = types.BoolPointerValue(ans.BlockExpiredCert)

	state.BlockTimeoutCert = types.BoolPointerValue(ans.BlockTimeoutCert)

	state.BlockUnauthenticatedCert = types.BoolPointerValue(ans.BlockUnauthenticatedCert)

	state.BlockUnknownCert = types.BoolPointerValue(ans.BlockUnknownCert)

	if len(ans.CaCertificates) == 0 {
		state.CaCertificates = nil
	} else {
		state.CaCertificates = make([]certificateProfileRsModel_dEowMJz_CaCertificateObject, 0, len(ans.CaCertificates))
		for _, var2 := range ans.CaCertificates {
			var3 := certificateProfileRsModel_dEowMJz_CaCertificateObject{}

			var3.DefaultOcspUrl = types.StringPointerValue(var2.DefaultOcspUrl)

			var3.Name = types.StringPointerValue(var2.Name)

			var3.OcspVerifyCert = types.StringPointerValue(var2.OcspVerifyCert)

			var3.TemplateName = types.StringPointerValue(var2.TemplateName)
			state.CaCertificates = append(state.CaCertificates, var3)
		}
	}

	state.CertStatusTimeout = types.StringPointerValue(ans.CertStatusTimeout)

	state.CrlReceiveTimeout = types.StringPointerValue(ans.CrlReceiveTimeout)

	state.Domain = types.StringPointerValue(ans.Domain)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.OcspReceiveTimeout = types.StringPointerValue(ans.OcspReceiveTimeout)

	state.UseCrl = types.BoolPointerValue(ans.UseCrl)

	state.UseOcsp = types.BoolPointerValue(ans.UseOcsp)

	if ans.UsernameField == nil {
		state.UsernameField = nil
	} else {
		state.UsernameField = &certificateProfileRsModel_dEowMJz_UsernameFieldObject{}

		state.UsernameField.Subject = types.StringPointerValue(ans.UsernameField.Subject)

		state.UsernameField.SubjectAlt = types.StringPointerValue(ans.UsernameField.SubjectAlt)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *certificateProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state certificateProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_certificate_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := gOMQArS.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.BlockExpiredCert = types.BoolPointerValue(ans.BlockExpiredCert)

	state.BlockTimeoutCert = types.BoolPointerValue(ans.BlockTimeoutCert)

	state.BlockUnauthenticatedCert = types.BoolPointerValue(ans.BlockUnauthenticatedCert)

	state.BlockUnknownCert = types.BoolPointerValue(ans.BlockUnknownCert)

	if len(ans.CaCertificates) == 0 {
		state.CaCertificates = nil
	} else {
		state.CaCertificates = make([]certificateProfileRsModel_dEowMJz_CaCertificateObject, 0, len(ans.CaCertificates))
		for _, var0 := range ans.CaCertificates {
			var1 := certificateProfileRsModel_dEowMJz_CaCertificateObject{}

			var1.DefaultOcspUrl = types.StringPointerValue(var0.DefaultOcspUrl)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.OcspVerifyCert = types.StringPointerValue(var0.OcspVerifyCert)

			var1.TemplateName = types.StringPointerValue(var0.TemplateName)
			state.CaCertificates = append(state.CaCertificates, var1)
		}
	}

	state.CertStatusTimeout = types.StringPointerValue(ans.CertStatusTimeout)

	state.CrlReceiveTimeout = types.StringPointerValue(ans.CrlReceiveTimeout)

	state.Domain = types.StringPointerValue(ans.Domain)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.OcspReceiveTimeout = types.StringPointerValue(ans.OcspReceiveTimeout)

	state.UseCrl = types.BoolPointerValue(ans.UseCrl)

	state.UseOcsp = types.BoolPointerValue(ans.UseOcsp)

	if ans.UsernameField == nil {
		state.UsernameField = nil
	} else {
		state.UsernameField = &certificateProfileRsModel_dEowMJz_UsernameFieldObject{}

		state.UsernameField.Subject = types.StringPointerValue(ans.UsernameField.Subject)

		state.UsernameField.SubjectAlt = types.StringPointerValue(ans.UsernameField.SubjectAlt)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *certificateProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state certificateProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_certificate_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := gOMQArS.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &dEowMJz.Config{}

	input.Request.BlockExpiredCert = plan.BlockExpiredCert.ValueBoolPointer()

	input.Request.BlockTimeoutCert = plan.BlockTimeoutCert.ValueBoolPointer()

	input.Request.BlockUnauthenticatedCert = plan.BlockUnauthenticatedCert.ValueBoolPointer()

	input.Request.BlockUnknownCert = plan.BlockUnknownCert.ValueBoolPointer()

	if len(plan.CaCertificates) != 0 {
		input.Request.CaCertificates = make([]dEowMJz.CaCertificateObject, 0, len(plan.CaCertificates))
		for _, var0 := range plan.CaCertificates {
			var var1 dEowMJz.CaCertificateObject

			var1.DefaultOcspUrl = var0.DefaultOcspUrl.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()

			var1.OcspVerifyCert = var0.OcspVerifyCert.ValueStringPointer()

			var1.TemplateName = var0.TemplateName.ValueStringPointer()
			input.Request.CaCertificates = append(input.Request.CaCertificates, var1)
		}
	}

	input.Request.CertStatusTimeout = plan.CertStatusTimeout.ValueStringPointer()

	input.Request.CrlReceiveTimeout = plan.CrlReceiveTimeout.ValueStringPointer()

	input.Request.Domain = plan.Domain.ValueStringPointer()

	input.Request.Name = plan.Name.ValueString()

	input.Request.OcspReceiveTimeout = plan.OcspReceiveTimeout.ValueStringPointer()

	input.Request.UseCrl = plan.UseCrl.ValueBoolPointer()

	input.Request.UseOcsp = plan.UseOcsp.ValueBoolPointer()

	if plan.UsernameField != nil {
		input.Request.UsernameField = &dEowMJz.UsernameFieldObject{}

		input.Request.UsernameField.Subject = plan.UsernameField.Subject.ValueStringPointer()

		input.Request.UsernameField.SubjectAlt = plan.UsernameField.SubjectAlt.ValueStringPointer()
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.BlockExpiredCert = types.BoolPointerValue(ans.BlockExpiredCert)

	state.BlockTimeoutCert = types.BoolPointerValue(ans.BlockTimeoutCert)

	state.BlockUnauthenticatedCert = types.BoolPointerValue(ans.BlockUnauthenticatedCert)

	state.BlockUnknownCert = types.BoolPointerValue(ans.BlockUnknownCert)

	if len(ans.CaCertificates) == 0 {
		state.CaCertificates = nil
	} else {
		state.CaCertificates = make([]certificateProfileRsModel_dEowMJz_CaCertificateObject, 0, len(ans.CaCertificates))
		for _, var2 := range ans.CaCertificates {
			var3 := certificateProfileRsModel_dEowMJz_CaCertificateObject{}

			var3.DefaultOcspUrl = types.StringPointerValue(var2.DefaultOcspUrl)

			var3.Name = types.StringPointerValue(var2.Name)

			var3.OcspVerifyCert = types.StringPointerValue(var2.OcspVerifyCert)

			var3.TemplateName = types.StringPointerValue(var2.TemplateName)
			state.CaCertificates = append(state.CaCertificates, var3)
		}
	}

	state.CertStatusTimeout = types.StringPointerValue(ans.CertStatusTimeout)

	state.CrlReceiveTimeout = types.StringPointerValue(ans.CrlReceiveTimeout)

	state.Domain = types.StringPointerValue(ans.Domain)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.OcspReceiveTimeout = types.StringPointerValue(ans.OcspReceiveTimeout)

	state.UseCrl = types.BoolPointerValue(ans.UseCrl)

	state.UseOcsp = types.BoolPointerValue(ans.UseOcsp)

	if ans.UsernameField == nil {
		state.UsernameField = nil
	} else {
		state.UsernameField = &certificateProfileRsModel_dEowMJz_UsernameFieldObject{}

		state.UsernameField.Subject = types.StringPointerValue(ans.UsernameField.Subject)

		state.UsernameField.SubjectAlt = types.StringPointerValue(ans.UsernameField.SubjectAlt)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *certificateProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_certificate_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := gOMQArS.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := gOMQArS.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *certificateProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
