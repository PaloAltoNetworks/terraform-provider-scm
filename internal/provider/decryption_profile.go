package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	wugpput "github.com/paloaltonetworks/scm-go/netsec/schemas/decryption/profiles"
	uIHLJPY "github.com/paloaltonetworks/scm-go/netsec/services/decryptionprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &decryptionProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &decryptionProfileListDataSource{}
)

func NewDecryptionProfileListDataSource() datasource.DataSource {
	return &decryptionProfileListDataSource{}
}

type decryptionProfileListDataSource struct {
	client *scm.Client
}

// decryptionProfileListDsModel is the model.
type decryptionProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []decryptionProfileListDsModel_wugpput_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type decryptionProfileListDsModel_wugpput_Config struct {
	Id                  types.String                                                    `tfsdk:"id"`
	Name                types.String                                                    `tfsdk:"name"`
	SslForwardProxy     *decryptionProfileListDsModel_wugpput_SslForwardProxyObject     `tfsdk:"ssl_forward_proxy"`
	SslInboundProxy     *decryptionProfileListDsModel_wugpput_SslInboundProxyObject     `tfsdk:"ssl_inbound_proxy"`
	SslNoProxy          *decryptionProfileListDsModel_wugpput_SslNoProxyObject          `tfsdk:"ssl_no_proxy"`
	SslProtocolSettings *decryptionProfileListDsModel_wugpput_SslProtocolSettingsObject `tfsdk:"ssl_protocol_settings"`
}

type decryptionProfileListDsModel_wugpput_SslForwardProxyObject struct {
	AutoIncludeAltname            types.Bool `tfsdk:"auto_include_altname"`
	BlockClientCert               types.Bool `tfsdk:"block_client_cert"`
	BlockExpiredCertificate       types.Bool `tfsdk:"block_expired_certificate"`
	BlockTimeoutCert              types.Bool `tfsdk:"block_timeout_cert"`
	BlockTls13DowngradeNoResource types.Bool `tfsdk:"block_tls13_downgrade_no_resource"`
	BlockUnknownCert              types.Bool `tfsdk:"block_unknown_cert"`
	BlockUnsupportedCipher        types.Bool `tfsdk:"block_unsupported_cipher"`
	BlockUnsupportedVersion       types.Bool `tfsdk:"block_unsupported_version"`
	BlockUntrustedIssuer          types.Bool `tfsdk:"block_untrusted_issuer"`
	RestrictCertExts              types.Bool `tfsdk:"restrict_cert_exts"`
	StripAlpn                     types.Bool `tfsdk:"strip_alpn"`
}

type decryptionProfileListDsModel_wugpput_SslInboundProxyObject struct {
	BlockIfHsmUnavailable   types.Bool `tfsdk:"block_if_hsm_unavailable"`
	BlockIfNoResource       types.Bool `tfsdk:"block_if_no_resource"`
	BlockUnsupportedCipher  types.Bool `tfsdk:"block_unsupported_cipher"`
	BlockUnsupportedVersion types.Bool `tfsdk:"block_unsupported_version"`
}

type decryptionProfileListDsModel_wugpput_SslNoProxyObject struct {
	BlockExpiredCertificate types.Bool `tfsdk:"block_expired_certificate"`
	BlockUntrustedIssuer    types.Bool `tfsdk:"block_untrusted_issuer"`
}

type decryptionProfileListDsModel_wugpput_SslProtocolSettingsObject struct {
	AuthAlgoMd5             types.Bool   `tfsdk:"auth_algo_md5"`
	AuthAlgoSha1            types.Bool   `tfsdk:"auth_algo_sha1"`
	AuthAlgoSha256          types.Bool   `tfsdk:"auth_algo_sha256"`
	AuthAlgoSha384          types.Bool   `tfsdk:"auth_algo_sha384"`
	EncAlgo3des             types.Bool   `tfsdk:"enc_algo_3des"`
	EncAlgoAes128Cbc        types.Bool   `tfsdk:"enc_algo_aes_128_cbc"`
	EncAlgoAes128Gcm        types.Bool   `tfsdk:"enc_algo_aes_128_gcm"`
	EncAlgoAes256Cbc        types.Bool   `tfsdk:"enc_algo_aes_256_cbc"`
	EncAlgoAes256Gcm        types.Bool   `tfsdk:"enc_algo_aes_256_gcm"`
	EncAlgoChacha20Poly1305 types.Bool   `tfsdk:"enc_algo_chacha20_poly1305"`
	EncAlgoRc4              types.Bool   `tfsdk:"enc_algo_rc4"`
	KeyxchgAlgoDhe          types.Bool   `tfsdk:"keyxchg_algo_dhe"`
	KeyxchgAlgoEcdhe        types.Bool   `tfsdk:"keyxchg_algo_ecdhe"`
	KeyxchgAlgoRsa          types.Bool   `tfsdk:"keyxchg_algo_rsa"`
	MaxVersion              types.String `tfsdk:"max_version"`
	MinVersion              types.String `tfsdk:"min_version"`
}

// Metadata returns the data source type name.
func (d *decryptionProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_decryption_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *decryptionProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"id":true, "name":true, "ssl_forward_proxy":true, "ssl_inbound_proxy":true, "ssl_no_proxy":true, "ssl_protocol_settings":true} forceNew:map[string]bool(nil)
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Must start with alphanumeric char and should contain only alphanemeric, underscore, hyphen, dot or space. String validation regex: `^[A-Za-z0-9]{1}[A-Za-z0-9_\\-\\.\\s]{0,}$`.",
							Computed:    true,
						},
						"ssl_forward_proxy": dsschema.SingleNestedAttribute{
							Description: "The SslForwardProxy param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"auto_include_altname":true, "block_client_cert":true, "block_expired_certificate":true, "block_timeout_cert":true, "block_tls13_downgrade_no_resource":true, "block_unknown_cert":true, "block_unsupported_cipher":true, "block_unsupported_version":true, "block_untrusted_issuer":true, "restrict_cert_exts":true, "strip_alpn":true} forceNew:map[string]bool(nil)
								"auto_include_altname": dsschema.BoolAttribute{
									Description: "The AutoIncludeAltname param. Default: `false`.",
									Computed:    true,
								},
								"block_client_cert": dsschema.BoolAttribute{
									Description: "The BlockClientCert param. Default: `false`.",
									Computed:    true,
								},
								"block_expired_certificate": dsschema.BoolAttribute{
									Description: "The BlockExpiredCertificate param. Default: `false`.",
									Computed:    true,
								},
								"block_timeout_cert": dsschema.BoolAttribute{
									Description: "The BlockTimeoutCert param. Default: `false`.",
									Computed:    true,
								},
								"block_tls13_downgrade_no_resource": dsschema.BoolAttribute{
									Description: "The BlockTls13DowngradeNoResource param. Default: `false`.",
									Computed:    true,
								},
								"block_unknown_cert": dsschema.BoolAttribute{
									Description: "The BlockUnknownCert param. Default: `false`.",
									Computed:    true,
								},
								"block_unsupported_cipher": dsschema.BoolAttribute{
									Description: "The BlockUnsupportedCipher param. Default: `false`.",
									Computed:    true,
								},
								"block_unsupported_version": dsschema.BoolAttribute{
									Description: "The BlockUnsupportedVersion param. Default: `false`.",
									Computed:    true,
								},
								"block_untrusted_issuer": dsschema.BoolAttribute{
									Description: "The BlockUntrustedIssuer param. Default: `false`.",
									Computed:    true,
								},
								"restrict_cert_exts": dsschema.BoolAttribute{
									Description: "The RestrictCertExts param. Default: `false`.",
									Computed:    true,
								},
								"strip_alpn": dsschema.BoolAttribute{
									Description: "The StripAlpn param. Default: `false`.",
									Computed:    true,
								},
							},
						},
						"ssl_inbound_proxy": dsschema.SingleNestedAttribute{
							Description: "The SslInboundProxy param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"block_if_hsm_unavailable":true, "block_if_no_resource":true, "block_unsupported_cipher":true, "block_unsupported_version":true} forceNew:map[string]bool(nil)
								"block_if_hsm_unavailable": dsschema.BoolAttribute{
									Description: "The BlockIfHsmUnavailable param. Default: `false`.",
									Computed:    true,
								},
								"block_if_no_resource": dsschema.BoolAttribute{
									Description: "The BlockIfNoResource param. Default: `false`.",
									Computed:    true,
								},
								"block_unsupported_cipher": dsschema.BoolAttribute{
									Description: "The BlockUnsupportedCipher param. Default: `false`.",
									Computed:    true,
								},
								"block_unsupported_version": dsschema.BoolAttribute{
									Description: "The BlockUnsupportedVersion param. Default: `false`.",
									Computed:    true,
								},
							},
						},
						"ssl_no_proxy": dsschema.SingleNestedAttribute{
							Description: "The SslNoProxy param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"block_expired_certificate":true, "block_untrusted_issuer":true} forceNew:map[string]bool(nil)
								"block_expired_certificate": dsschema.BoolAttribute{
									Description: "The BlockExpiredCertificate param. Default: `false`.",
									Computed:    true,
								},
								"block_untrusted_issuer": dsschema.BoolAttribute{
									Description: "The BlockUntrustedIssuer param. Default: `false`.",
									Computed:    true,
								},
							},
						},
						"ssl_protocol_settings": dsschema.SingleNestedAttribute{
							Description: "The SslProtocolSettings param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"auth_algo_md5":true, "auth_algo_sha1":true, "auth_algo_sha256":true, "auth_algo_sha384":true, "enc_algo_3des":true, "enc_algo_aes_128_cbc":true, "enc_algo_aes_128_gcm":true, "enc_algo_aes_256_cbc":true, "enc_algo_aes_256_gcm":true, "enc_algo_chacha20_poly1305":true, "enc_algo_rc4":true, "keyxchg_algo_dhe":true, "keyxchg_algo_ecdhe":true, "keyxchg_algo_rsa":true, "max_version":true, "min_version":true} forceNew:map[string]bool(nil)
								"auth_algo_md5": dsschema.BoolAttribute{
									Description: "The AuthAlgoMd5 param. Default: `true`.",
									Computed:    true,
								},
								"auth_algo_sha1": dsschema.BoolAttribute{
									Description: "The AuthAlgoSha1 param. Default: `true`.",
									Computed:    true,
								},
								"auth_algo_sha256": dsschema.BoolAttribute{
									Description: "The AuthAlgoSha256 param. Default: `true`.",
									Computed:    true,
								},
								"auth_algo_sha384": dsschema.BoolAttribute{
									Description: "The AuthAlgoSha384 param. Default: `true`.",
									Computed:    true,
								},
								"enc_algo_3des": dsschema.BoolAttribute{
									Description: "The EncAlgo3des param. Default: `true`.",
									Computed:    true,
								},
								"enc_algo_aes_128_cbc": dsschema.BoolAttribute{
									Description: "The EncAlgoAes128Cbc param. Default: `true`.",
									Computed:    true,
								},
								"enc_algo_aes_128_gcm": dsschema.BoolAttribute{
									Description: "The EncAlgoAes128Gcm param. Default: `true`.",
									Computed:    true,
								},
								"enc_algo_aes_256_cbc": dsschema.BoolAttribute{
									Description: "The EncAlgoAes256Cbc param. Default: `true`.",
									Computed:    true,
								},
								"enc_algo_aes_256_gcm": dsschema.BoolAttribute{
									Description: "The EncAlgoAes256Gcm param. Default: `true`.",
									Computed:    true,
								},
								"enc_algo_chacha20_poly1305": dsschema.BoolAttribute{
									Description: "The EncAlgoChacha20Poly1305 param. Default: `true`.",
									Computed:    true,
								},
								"enc_algo_rc4": dsschema.BoolAttribute{
									Description: "The EncAlgoRc4 param. Default: `true`.",
									Computed:    true,
								},
								"keyxchg_algo_dhe": dsschema.BoolAttribute{
									Description: "The KeyxchgAlgoDhe param. Default: `true`.",
									Computed:    true,
								},
								"keyxchg_algo_ecdhe": dsschema.BoolAttribute{
									Description: "The KeyxchgAlgoEcdhe param. Default: `true`.",
									Computed:    true,
								},
								"keyxchg_algo_rsa": dsschema.BoolAttribute{
									Description: "The KeyxchgAlgoRsa param. Default: `true`.",
									Computed:    true,
								},
								"max_version": dsschema.StringAttribute{
									Description: "The MaxVersion param. String must be one of these: `\"sslv3\"`, `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`, `\"max\"`. Default: `\"tls1-2\"`.",
									Computed:    true,
								},
								"min_version": dsschema.StringAttribute{
									Description: "The MinVersion param. String must be one of these: `\"sslv3\"`, `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`. Default: `\"tls1-0\"`.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *decryptionProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *decryptionProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state decryptionProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_decryption_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := uIHLJPY.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]decryptionProfileListDsModel_wugpput_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := decryptionProfileListDsModel_wugpput_Config{}

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			if var0.SslForwardProxy == nil {
				var1.SslForwardProxy = nil
			} else {
				var1.SslForwardProxy = &decryptionProfileListDsModel_wugpput_SslForwardProxyObject{}

				var1.SslForwardProxy.AutoIncludeAltname = types.BoolPointerValue(var0.SslForwardProxy.AutoIncludeAltname)

				var1.SslForwardProxy.BlockClientCert = types.BoolPointerValue(var0.SslForwardProxy.BlockClientCert)

				var1.SslForwardProxy.BlockExpiredCertificate = types.BoolPointerValue(var0.SslForwardProxy.BlockExpiredCertificate)

				var1.SslForwardProxy.BlockTimeoutCert = types.BoolPointerValue(var0.SslForwardProxy.BlockTimeoutCert)

				var1.SslForwardProxy.BlockTls13DowngradeNoResource = types.BoolPointerValue(var0.SslForwardProxy.BlockTls13DowngradeNoResource)

				var1.SslForwardProxy.BlockUnknownCert = types.BoolPointerValue(var0.SslForwardProxy.BlockUnknownCert)

				var1.SslForwardProxy.BlockUnsupportedCipher = types.BoolPointerValue(var0.SslForwardProxy.BlockUnsupportedCipher)

				var1.SslForwardProxy.BlockUnsupportedVersion = types.BoolPointerValue(var0.SslForwardProxy.BlockUnsupportedVersion)

				var1.SslForwardProxy.BlockUntrustedIssuer = types.BoolPointerValue(var0.SslForwardProxy.BlockUntrustedIssuer)

				var1.SslForwardProxy.RestrictCertExts = types.BoolPointerValue(var0.SslForwardProxy.RestrictCertExts)

				var1.SslForwardProxy.StripAlpn = types.BoolPointerValue(var0.SslForwardProxy.StripAlpn)
			}

			if var0.SslInboundProxy == nil {
				var1.SslInboundProxy = nil
			} else {
				var1.SslInboundProxy = &decryptionProfileListDsModel_wugpput_SslInboundProxyObject{}

				var1.SslInboundProxy.BlockIfHsmUnavailable = types.BoolPointerValue(var0.SslInboundProxy.BlockIfHsmUnavailable)

				var1.SslInboundProxy.BlockIfNoResource = types.BoolPointerValue(var0.SslInboundProxy.BlockIfNoResource)

				var1.SslInboundProxy.BlockUnsupportedCipher = types.BoolPointerValue(var0.SslInboundProxy.BlockUnsupportedCipher)

				var1.SslInboundProxy.BlockUnsupportedVersion = types.BoolPointerValue(var0.SslInboundProxy.BlockUnsupportedVersion)
			}

			if var0.SslNoProxy == nil {
				var1.SslNoProxy = nil
			} else {
				var1.SslNoProxy = &decryptionProfileListDsModel_wugpput_SslNoProxyObject{}

				var1.SslNoProxy.BlockExpiredCertificate = types.BoolPointerValue(var0.SslNoProxy.BlockExpiredCertificate)

				var1.SslNoProxy.BlockUntrustedIssuer = types.BoolPointerValue(var0.SslNoProxy.BlockUntrustedIssuer)
			}

			if var0.SslProtocolSettings == nil {
				var1.SslProtocolSettings = nil
			} else {
				var1.SslProtocolSettings = &decryptionProfileListDsModel_wugpput_SslProtocolSettingsObject{}

				var1.SslProtocolSettings.AuthAlgoMd5 = types.BoolPointerValue(var0.SslProtocolSettings.AuthAlgoMd5)

				var1.SslProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(var0.SslProtocolSettings.AuthAlgoSha1)

				var1.SslProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(var0.SslProtocolSettings.AuthAlgoSha256)

				var1.SslProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(var0.SslProtocolSettings.AuthAlgoSha384)

				var1.SslProtocolSettings.EncAlgo3des = types.BoolPointerValue(var0.SslProtocolSettings.EncAlgo3des)

				var1.SslProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(var0.SslProtocolSettings.EncAlgoAes128Cbc)

				var1.SslProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(var0.SslProtocolSettings.EncAlgoAes128Gcm)

				var1.SslProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(var0.SslProtocolSettings.EncAlgoAes256Cbc)

				var1.SslProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(var0.SslProtocolSettings.EncAlgoAes256Gcm)

				var1.SslProtocolSettings.EncAlgoChacha20Poly1305 = types.BoolPointerValue(var0.SslProtocolSettings.EncAlgoChacha20Poly1305)

				var1.SslProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(var0.SslProtocolSettings.EncAlgoRc4)

				var1.SslProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(var0.SslProtocolSettings.KeyxchgAlgoDhe)

				var1.SslProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(var0.SslProtocolSettings.KeyxchgAlgoEcdhe)

				var1.SslProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(var0.SslProtocolSettings.KeyxchgAlgoRsa)

				var1.SslProtocolSettings.MaxVersion = types.StringPointerValue(var0.SslProtocolSettings.MaxVersion)

				var1.SslProtocolSettings.MinVersion = types.StringPointerValue(var0.SslProtocolSettings.MinVersion)
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &decryptionProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &decryptionProfileDataSource{}
)

func NewDecryptionProfileDataSource() datasource.DataSource {
	return &decryptionProfileDataSource{}
}

type decryptionProfileDataSource struct {
	client *scm.Client
}

// decryptionProfileDsModel is the model.
type decryptionProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	// omit input: id
	Name                types.String                                                `tfsdk:"name"`
	SslForwardProxy     *decryptionProfileDsModel_wugpput_SslForwardProxyObject     `tfsdk:"ssl_forward_proxy"`
	SslInboundProxy     *decryptionProfileDsModel_wugpput_SslInboundProxyObject     `tfsdk:"ssl_inbound_proxy"`
	SslNoProxy          *decryptionProfileDsModel_wugpput_SslNoProxyObject          `tfsdk:"ssl_no_proxy"`
	SslProtocolSettings *decryptionProfileDsModel_wugpput_SslProtocolSettingsObject `tfsdk:"ssl_protocol_settings"`
}

type decryptionProfileDsModel_wugpput_SslForwardProxyObject struct {
	AutoIncludeAltname            types.Bool `tfsdk:"auto_include_altname"`
	BlockClientCert               types.Bool `tfsdk:"block_client_cert"`
	BlockExpiredCertificate       types.Bool `tfsdk:"block_expired_certificate"`
	BlockTimeoutCert              types.Bool `tfsdk:"block_timeout_cert"`
	BlockTls13DowngradeNoResource types.Bool `tfsdk:"block_tls13_downgrade_no_resource"`
	BlockUnknownCert              types.Bool `tfsdk:"block_unknown_cert"`
	BlockUnsupportedCipher        types.Bool `tfsdk:"block_unsupported_cipher"`
	BlockUnsupportedVersion       types.Bool `tfsdk:"block_unsupported_version"`
	BlockUntrustedIssuer          types.Bool `tfsdk:"block_untrusted_issuer"`
	RestrictCertExts              types.Bool `tfsdk:"restrict_cert_exts"`
	StripAlpn                     types.Bool `tfsdk:"strip_alpn"`
}

type decryptionProfileDsModel_wugpput_SslInboundProxyObject struct {
	BlockIfHsmUnavailable   types.Bool `tfsdk:"block_if_hsm_unavailable"`
	BlockIfNoResource       types.Bool `tfsdk:"block_if_no_resource"`
	BlockUnsupportedCipher  types.Bool `tfsdk:"block_unsupported_cipher"`
	BlockUnsupportedVersion types.Bool `tfsdk:"block_unsupported_version"`
}

type decryptionProfileDsModel_wugpput_SslNoProxyObject struct {
	BlockExpiredCertificate types.Bool `tfsdk:"block_expired_certificate"`
	BlockUntrustedIssuer    types.Bool `tfsdk:"block_untrusted_issuer"`
}

type decryptionProfileDsModel_wugpput_SslProtocolSettingsObject struct {
	AuthAlgoMd5             types.Bool   `tfsdk:"auth_algo_md5"`
	AuthAlgoSha1            types.Bool   `tfsdk:"auth_algo_sha1"`
	AuthAlgoSha256          types.Bool   `tfsdk:"auth_algo_sha256"`
	AuthAlgoSha384          types.Bool   `tfsdk:"auth_algo_sha384"`
	EncAlgo3des             types.Bool   `tfsdk:"enc_algo_3des"`
	EncAlgoAes128Cbc        types.Bool   `tfsdk:"enc_algo_aes_128_cbc"`
	EncAlgoAes128Gcm        types.Bool   `tfsdk:"enc_algo_aes_128_gcm"`
	EncAlgoAes256Cbc        types.Bool   `tfsdk:"enc_algo_aes_256_cbc"`
	EncAlgoAes256Gcm        types.Bool   `tfsdk:"enc_algo_aes_256_gcm"`
	EncAlgoChacha20Poly1305 types.Bool   `tfsdk:"enc_algo_chacha20_poly1305"`
	EncAlgoRc4              types.Bool   `tfsdk:"enc_algo_rc4"`
	KeyxchgAlgoDhe          types.Bool   `tfsdk:"keyxchg_algo_dhe"`
	KeyxchgAlgoEcdhe        types.Bool   `tfsdk:"keyxchg_algo_ecdhe"`
	KeyxchgAlgoRsa          types.Bool   `tfsdk:"keyxchg_algo_rsa"`
	MaxVersion              types.String `tfsdk:"max_version"`
	MinVersion              types.String `tfsdk:"min_version"`
}

// Metadata returns the data source type name.
func (d *decryptionProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_decryption_profile"
}

// Schema defines the schema for this data source.
func (d *decryptionProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"id":true, "name":true, "ssl_forward_proxy":true, "ssl_inbound_proxy":true, "ssl_no_proxy":true, "ssl_protocol_settings":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Must start with alphanumeric char and should contain only alphanemeric, underscore, hyphen, dot or space. String validation regex: `^[A-Za-z0-9]{1}[A-Za-z0-9_\\-\\.\\s]{0,}$`.",
				Computed:    true,
			},
			"ssl_forward_proxy": dsschema.SingleNestedAttribute{
				Description: "The SslForwardProxy param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"auto_include_altname":true, "block_client_cert":true, "block_expired_certificate":true, "block_timeout_cert":true, "block_tls13_downgrade_no_resource":true, "block_unknown_cert":true, "block_unsupported_cipher":true, "block_unsupported_version":true, "block_untrusted_issuer":true, "restrict_cert_exts":true, "strip_alpn":true} forceNew:map[string]bool(nil)
					"auto_include_altname": dsschema.BoolAttribute{
						Description: "The AutoIncludeAltname param. Default: `false`.",
						Computed:    true,
					},
					"block_client_cert": dsschema.BoolAttribute{
						Description: "The BlockClientCert param. Default: `false`.",
						Computed:    true,
					},
					"block_expired_certificate": dsschema.BoolAttribute{
						Description: "The BlockExpiredCertificate param. Default: `false`.",
						Computed:    true,
					},
					"block_timeout_cert": dsschema.BoolAttribute{
						Description: "The BlockTimeoutCert param. Default: `false`.",
						Computed:    true,
					},
					"block_tls13_downgrade_no_resource": dsschema.BoolAttribute{
						Description: "The BlockTls13DowngradeNoResource param. Default: `false`.",
						Computed:    true,
					},
					"block_unknown_cert": dsschema.BoolAttribute{
						Description: "The BlockUnknownCert param. Default: `false`.",
						Computed:    true,
					},
					"block_unsupported_cipher": dsschema.BoolAttribute{
						Description: "The BlockUnsupportedCipher param. Default: `false`.",
						Computed:    true,
					},
					"block_unsupported_version": dsschema.BoolAttribute{
						Description: "The BlockUnsupportedVersion param. Default: `false`.",
						Computed:    true,
					},
					"block_untrusted_issuer": dsschema.BoolAttribute{
						Description: "The BlockUntrustedIssuer param. Default: `false`.",
						Computed:    true,
					},
					"restrict_cert_exts": dsschema.BoolAttribute{
						Description: "The RestrictCertExts param. Default: `false`.",
						Computed:    true,
					},
					"strip_alpn": dsschema.BoolAttribute{
						Description: "The StripAlpn param. Default: `false`.",
						Computed:    true,
					},
				},
			},
			"ssl_inbound_proxy": dsschema.SingleNestedAttribute{
				Description: "The SslInboundProxy param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"block_if_hsm_unavailable":true, "block_if_no_resource":true, "block_unsupported_cipher":true, "block_unsupported_version":true} forceNew:map[string]bool(nil)
					"block_if_hsm_unavailable": dsschema.BoolAttribute{
						Description: "The BlockIfHsmUnavailable param. Default: `false`.",
						Computed:    true,
					},
					"block_if_no_resource": dsschema.BoolAttribute{
						Description: "The BlockIfNoResource param. Default: `false`.",
						Computed:    true,
					},
					"block_unsupported_cipher": dsschema.BoolAttribute{
						Description: "The BlockUnsupportedCipher param. Default: `false`.",
						Computed:    true,
					},
					"block_unsupported_version": dsschema.BoolAttribute{
						Description: "The BlockUnsupportedVersion param. Default: `false`.",
						Computed:    true,
					},
				},
			},
			"ssl_no_proxy": dsschema.SingleNestedAttribute{
				Description: "The SslNoProxy param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"block_expired_certificate":true, "block_untrusted_issuer":true} forceNew:map[string]bool(nil)
					"block_expired_certificate": dsschema.BoolAttribute{
						Description: "The BlockExpiredCertificate param. Default: `false`.",
						Computed:    true,
					},
					"block_untrusted_issuer": dsschema.BoolAttribute{
						Description: "The BlockUntrustedIssuer param. Default: `false`.",
						Computed:    true,
					},
				},
			},
			"ssl_protocol_settings": dsschema.SingleNestedAttribute{
				Description: "The SslProtocolSettings param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"auth_algo_md5":true, "auth_algo_sha1":true, "auth_algo_sha256":true, "auth_algo_sha384":true, "enc_algo_3des":true, "enc_algo_aes_128_cbc":true, "enc_algo_aes_128_gcm":true, "enc_algo_aes_256_cbc":true, "enc_algo_aes_256_gcm":true, "enc_algo_chacha20_poly1305":true, "enc_algo_rc4":true, "keyxchg_algo_dhe":true, "keyxchg_algo_ecdhe":true, "keyxchg_algo_rsa":true, "max_version":true, "min_version":true} forceNew:map[string]bool(nil)
					"auth_algo_md5": dsschema.BoolAttribute{
						Description: "The AuthAlgoMd5 param. Default: `true`.",
						Computed:    true,
					},
					"auth_algo_sha1": dsschema.BoolAttribute{
						Description: "The AuthAlgoSha1 param. Default: `true`.",
						Computed:    true,
					},
					"auth_algo_sha256": dsschema.BoolAttribute{
						Description: "The AuthAlgoSha256 param. Default: `true`.",
						Computed:    true,
					},
					"auth_algo_sha384": dsschema.BoolAttribute{
						Description: "The AuthAlgoSha384 param. Default: `true`.",
						Computed:    true,
					},
					"enc_algo_3des": dsschema.BoolAttribute{
						Description: "The EncAlgo3des param. Default: `true`.",
						Computed:    true,
					},
					"enc_algo_aes_128_cbc": dsschema.BoolAttribute{
						Description: "The EncAlgoAes128Cbc param. Default: `true`.",
						Computed:    true,
					},
					"enc_algo_aes_128_gcm": dsschema.BoolAttribute{
						Description: "The EncAlgoAes128Gcm param. Default: `true`.",
						Computed:    true,
					},
					"enc_algo_aes_256_cbc": dsschema.BoolAttribute{
						Description: "The EncAlgoAes256Cbc param. Default: `true`.",
						Computed:    true,
					},
					"enc_algo_aes_256_gcm": dsschema.BoolAttribute{
						Description: "The EncAlgoAes256Gcm param. Default: `true`.",
						Computed:    true,
					},
					"enc_algo_chacha20_poly1305": dsschema.BoolAttribute{
						Description: "The EncAlgoChacha20Poly1305 param. Default: `true`.",
						Computed:    true,
					},
					"enc_algo_rc4": dsschema.BoolAttribute{
						Description: "The EncAlgoRc4 param. Default: `true`.",
						Computed:    true,
					},
					"keyxchg_algo_dhe": dsschema.BoolAttribute{
						Description: "The KeyxchgAlgoDhe param. Default: `true`.",
						Computed:    true,
					},
					"keyxchg_algo_ecdhe": dsschema.BoolAttribute{
						Description: "The KeyxchgAlgoEcdhe param. Default: `true`.",
						Computed:    true,
					},
					"keyxchg_algo_rsa": dsschema.BoolAttribute{
						Description: "The KeyxchgAlgoRsa param. Default: `true`.",
						Computed:    true,
					},
					"max_version": dsschema.StringAttribute{
						Description: "The MaxVersion param. String must be one of these: `\"sslv3\"`, `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`, `\"max\"`. Default: `\"tls1-2\"`.",
						Computed:    true,
					},
					"min_version": dsschema.StringAttribute{
						Description: "The MinVersion param. String must be one of these: `\"sslv3\"`, `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`. Default: `\"tls1-0\"`.",
						Computed:    true,
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *decryptionProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *decryptionProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state decryptionProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_decryption_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := uIHLJPY.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if ans.SslForwardProxy == nil {
		state.SslForwardProxy = nil
	} else {
		state.SslForwardProxy = &decryptionProfileDsModel_wugpput_SslForwardProxyObject{}

		state.SslForwardProxy.AutoIncludeAltname = types.BoolPointerValue(ans.SslForwardProxy.AutoIncludeAltname)

		state.SslForwardProxy.BlockClientCert = types.BoolPointerValue(ans.SslForwardProxy.BlockClientCert)

		state.SslForwardProxy.BlockExpiredCertificate = types.BoolPointerValue(ans.SslForwardProxy.BlockExpiredCertificate)

		state.SslForwardProxy.BlockTimeoutCert = types.BoolPointerValue(ans.SslForwardProxy.BlockTimeoutCert)

		state.SslForwardProxy.BlockTls13DowngradeNoResource = types.BoolPointerValue(ans.SslForwardProxy.BlockTls13DowngradeNoResource)

		state.SslForwardProxy.BlockUnknownCert = types.BoolPointerValue(ans.SslForwardProxy.BlockUnknownCert)

		state.SslForwardProxy.BlockUnsupportedCipher = types.BoolPointerValue(ans.SslForwardProxy.BlockUnsupportedCipher)

		state.SslForwardProxy.BlockUnsupportedVersion = types.BoolPointerValue(ans.SslForwardProxy.BlockUnsupportedVersion)

		state.SslForwardProxy.BlockUntrustedIssuer = types.BoolPointerValue(ans.SslForwardProxy.BlockUntrustedIssuer)

		state.SslForwardProxy.RestrictCertExts = types.BoolPointerValue(ans.SslForwardProxy.RestrictCertExts)

		state.SslForwardProxy.StripAlpn = types.BoolPointerValue(ans.SslForwardProxy.StripAlpn)
	}

	if ans.SslInboundProxy == nil {
		state.SslInboundProxy = nil
	} else {
		state.SslInboundProxy = &decryptionProfileDsModel_wugpput_SslInboundProxyObject{}

		state.SslInboundProxy.BlockIfHsmUnavailable = types.BoolPointerValue(ans.SslInboundProxy.BlockIfHsmUnavailable)

		state.SslInboundProxy.BlockIfNoResource = types.BoolPointerValue(ans.SslInboundProxy.BlockIfNoResource)

		state.SslInboundProxy.BlockUnsupportedCipher = types.BoolPointerValue(ans.SslInboundProxy.BlockUnsupportedCipher)

		state.SslInboundProxy.BlockUnsupportedVersion = types.BoolPointerValue(ans.SslInboundProxy.BlockUnsupportedVersion)
	}

	if ans.SslNoProxy == nil {
		state.SslNoProxy = nil
	} else {
		state.SslNoProxy = &decryptionProfileDsModel_wugpput_SslNoProxyObject{}

		state.SslNoProxy.BlockExpiredCertificate = types.BoolPointerValue(ans.SslNoProxy.BlockExpiredCertificate)

		state.SslNoProxy.BlockUntrustedIssuer = types.BoolPointerValue(ans.SslNoProxy.BlockUntrustedIssuer)
	}

	if ans.SslProtocolSettings == nil {
		state.SslProtocolSettings = nil
	} else {
		state.SslProtocolSettings = &decryptionProfileDsModel_wugpput_SslProtocolSettingsObject{}

		state.SslProtocolSettings.AuthAlgoMd5 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoMd5)

		state.SslProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha1)

		state.SslProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha256)

		state.SslProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha384)

		state.SslProtocolSettings.EncAlgo3des = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgo3des)

		state.SslProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes128Cbc)

		state.SslProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes128Gcm)

		state.SslProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes256Cbc)

		state.SslProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes256Gcm)

		state.SslProtocolSettings.EncAlgoChacha20Poly1305 = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoChacha20Poly1305)

		state.SslProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoRc4)

		state.SslProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoDhe)

		state.SslProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoEcdhe)

		state.SslProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoRsa)

		state.SslProtocolSettings.MaxVersion = types.StringPointerValue(ans.SslProtocolSettings.MaxVersion)

		state.SslProtocolSettings.MinVersion = types.StringPointerValue(ans.SslProtocolSettings.MinVersion)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &decryptionProfileResource{}
	_ resource.ResourceWithConfigure   = &decryptionProfileResource{}
	_ resource.ResourceWithImportState = &decryptionProfileResource{}
)

func NewDecryptionProfileResource() resource.Resource {
	return &decryptionProfileResource{}
}

type decryptionProfileResource struct {
	client *scm.Client
}

// decryptionProfileRsModel is the model.
type decryptionProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device              types.String                                                `tfsdk:"device"`
	Folder              types.String                                                `tfsdk:"folder"`
	Id                  types.String                                                `tfsdk:"id"`
	Name                types.String                                                `tfsdk:"name"`
	Snippet             types.String                                                `tfsdk:"snippet"`
	SslForwardProxy     *decryptionProfileRsModel_wugpput_SslForwardProxyObject     `tfsdk:"ssl_forward_proxy"`
	SslInboundProxy     *decryptionProfileRsModel_wugpput_SslInboundProxyObject     `tfsdk:"ssl_inbound_proxy"`
	SslNoProxy          *decryptionProfileRsModel_wugpput_SslNoProxyObject          `tfsdk:"ssl_no_proxy"`
	SslProtocolSettings *decryptionProfileRsModel_wugpput_SslProtocolSettingsObject `tfsdk:"ssl_protocol_settings"`

	// Output.
	// omit input: id
	// omit input: name
	// omit input: ssl_forward_proxy
	// omit input: ssl_inbound_proxy
	// omit input: ssl_no_proxy
	// omit input: ssl_protocol_settings
}

type decryptionProfileRsModel_wugpput_SslForwardProxyObject struct {
	AutoIncludeAltname            types.Bool `tfsdk:"auto_include_altname"`
	BlockClientCert               types.Bool `tfsdk:"block_client_cert"`
	BlockExpiredCertificate       types.Bool `tfsdk:"block_expired_certificate"`
	BlockTimeoutCert              types.Bool `tfsdk:"block_timeout_cert"`
	BlockTls13DowngradeNoResource types.Bool `tfsdk:"block_tls13_downgrade_no_resource"`
	BlockUnknownCert              types.Bool `tfsdk:"block_unknown_cert"`
	BlockUnsupportedCipher        types.Bool `tfsdk:"block_unsupported_cipher"`
	BlockUnsupportedVersion       types.Bool `tfsdk:"block_unsupported_version"`
	BlockUntrustedIssuer          types.Bool `tfsdk:"block_untrusted_issuer"`
	RestrictCertExts              types.Bool `tfsdk:"restrict_cert_exts"`
	StripAlpn                     types.Bool `tfsdk:"strip_alpn"`
}

type decryptionProfileRsModel_wugpput_SslInboundProxyObject struct {
	BlockIfHsmUnavailable   types.Bool `tfsdk:"block_if_hsm_unavailable"`
	BlockIfNoResource       types.Bool `tfsdk:"block_if_no_resource"`
	BlockUnsupportedCipher  types.Bool `tfsdk:"block_unsupported_cipher"`
	BlockUnsupportedVersion types.Bool `tfsdk:"block_unsupported_version"`
}

type decryptionProfileRsModel_wugpput_SslNoProxyObject struct {
	BlockExpiredCertificate types.Bool `tfsdk:"block_expired_certificate"`
	BlockUntrustedIssuer    types.Bool `tfsdk:"block_untrusted_issuer"`
}

type decryptionProfileRsModel_wugpput_SslProtocolSettingsObject struct {
	AuthAlgoMd5             types.Bool   `tfsdk:"auth_algo_md5"`
	AuthAlgoSha1            types.Bool   `tfsdk:"auth_algo_sha1"`
	AuthAlgoSha256          types.Bool   `tfsdk:"auth_algo_sha256"`
	AuthAlgoSha384          types.Bool   `tfsdk:"auth_algo_sha384"`
	EncAlgo3des             types.Bool   `tfsdk:"enc_algo_3des"`
	EncAlgoAes128Cbc        types.Bool   `tfsdk:"enc_algo_aes_128_cbc"`
	EncAlgoAes128Gcm        types.Bool   `tfsdk:"enc_algo_aes_128_gcm"`
	EncAlgoAes256Cbc        types.Bool   `tfsdk:"enc_algo_aes_256_cbc"`
	EncAlgoAes256Gcm        types.Bool   `tfsdk:"enc_algo_aes_256_gcm"`
	EncAlgoChacha20Poly1305 types.Bool   `tfsdk:"enc_algo_chacha20_poly1305"`
	EncAlgoRc4              types.Bool   `tfsdk:"enc_algo_rc4"`
	KeyxchgAlgoDhe          types.Bool   `tfsdk:"keyxchg_algo_dhe"`
	KeyxchgAlgoEcdhe        types.Bool   `tfsdk:"keyxchg_algo_ecdhe"`
	KeyxchgAlgoRsa          types.Bool   `tfsdk:"keyxchg_algo_rsa"`
	MaxVersion              types.String `tfsdk:"max_version"`
	MinVersion              types.String `tfsdk:"min_version"`
}

// Metadata returns the data source type name.
func (r *decryptionProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_decryption_profile"
}

// Schema defines the schema for this data source.
func (r *decryptionProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "id":true, "name":true, "snippet":true, "ssl_forward_proxy":true, "ssl_inbound_proxy":true, "ssl_no_proxy":true, "ssl_protocol_settings":true} outputs:map[string]bool{"id":true, "name":true, "ssl_forward_proxy":true, "ssl_inbound_proxy":true, "ssl_no_proxy":true, "ssl_protocol_settings":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Must start with alphanumeric char and should contain only alphanemeric, underscore, hyphen, dot or space. String validation regex: `^[A-Za-z0-9]{1}[A-Za-z0-9_\\-\\.\\s]{0,}$`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[A-Za-z0-9]{1}[A-Za-z0-9_\\-\\.\\s]{0,}$"), ""),
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"ssl_forward_proxy": rsschema.SingleNestedAttribute{
				Description: "The SslForwardProxy param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"auto_include_altname":true, "block_client_cert":true, "block_expired_certificate":true, "block_timeout_cert":true, "block_tls13_downgrade_no_resource":true, "block_unknown_cert":true, "block_unsupported_cipher":true, "block_unsupported_version":true, "block_untrusted_issuer":true, "restrict_cert_exts":true, "strip_alpn":true} outputs:map[string]bool{"auto_include_altname":true, "block_client_cert":true, "block_expired_certificate":true, "block_timeout_cert":true, "block_tls13_downgrade_no_resource":true, "block_unknown_cert":true, "block_unsupported_cipher":true, "block_unsupported_version":true, "block_untrusted_issuer":true, "restrict_cert_exts":true, "strip_alpn":true} forceNew:map[string]bool(nil)
					"auto_include_altname": rsschema.BoolAttribute{
						Description: "The AutoIncludeAltname param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_client_cert": rsschema.BoolAttribute{
						Description: "The BlockClientCert param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_expired_certificate": rsschema.BoolAttribute{
						Description: "The BlockExpiredCertificate param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_timeout_cert": rsschema.BoolAttribute{
						Description: "The BlockTimeoutCert param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_tls13_downgrade_no_resource": rsschema.BoolAttribute{
						Description: "The BlockTls13DowngradeNoResource param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_unknown_cert": rsschema.BoolAttribute{
						Description: "The BlockUnknownCert param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_unsupported_cipher": rsschema.BoolAttribute{
						Description: "The BlockUnsupportedCipher param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_unsupported_version": rsschema.BoolAttribute{
						Description: "The BlockUnsupportedVersion param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_untrusted_issuer": rsschema.BoolAttribute{
						Description: "The BlockUntrustedIssuer param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"restrict_cert_exts": rsschema.BoolAttribute{
						Description: "The RestrictCertExts param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"strip_alpn": rsschema.BoolAttribute{
						Description: "The StripAlpn param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
				},
			},
			"ssl_inbound_proxy": rsschema.SingleNestedAttribute{
				Description: "The SslInboundProxy param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"block_if_hsm_unavailable":true, "block_if_no_resource":true, "block_unsupported_cipher":true, "block_unsupported_version":true} outputs:map[string]bool{"block_if_hsm_unavailable":true, "block_if_no_resource":true, "block_unsupported_cipher":true, "block_unsupported_version":true} forceNew:map[string]bool(nil)
					"block_if_hsm_unavailable": rsschema.BoolAttribute{
						Description: "The BlockIfHsmUnavailable param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_if_no_resource": rsschema.BoolAttribute{
						Description: "The BlockIfNoResource param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_unsupported_cipher": rsschema.BoolAttribute{
						Description: "The BlockUnsupportedCipher param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_unsupported_version": rsschema.BoolAttribute{
						Description: "The BlockUnsupportedVersion param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
				},
			},
			"ssl_no_proxy": rsschema.SingleNestedAttribute{
				Description: "The SslNoProxy param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"block_expired_certificate":true, "block_untrusted_issuer":true} outputs:map[string]bool{"block_expired_certificate":true, "block_untrusted_issuer":true} forceNew:map[string]bool(nil)
					"block_expired_certificate": rsschema.BoolAttribute{
						Description: "The BlockExpiredCertificate param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
					"block_untrusted_issuer": rsschema.BoolAttribute{
						Description: "The BlockUntrustedIssuer param. Default: `false`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
				},
			},
			"ssl_protocol_settings": rsschema.SingleNestedAttribute{
				Description: "The SslProtocolSettings param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"auth_algo_md5":true, "auth_algo_sha1":true, "auth_algo_sha256":true, "auth_algo_sha384":true, "enc_algo_3des":true, "enc_algo_aes_128_cbc":true, "enc_algo_aes_128_gcm":true, "enc_algo_aes_256_cbc":true, "enc_algo_aes_256_gcm":true, "enc_algo_chacha20_poly1305":true, "enc_algo_rc4":true, "keyxchg_algo_dhe":true, "keyxchg_algo_ecdhe":true, "keyxchg_algo_rsa":true, "max_version":true, "min_version":true} outputs:map[string]bool{"auth_algo_md5":true, "auth_algo_sha1":true, "auth_algo_sha256":true, "auth_algo_sha384":true, "enc_algo_3des":true, "enc_algo_aes_128_cbc":true, "enc_algo_aes_128_gcm":true, "enc_algo_aes_256_cbc":true, "enc_algo_aes_256_gcm":true, "enc_algo_chacha20_poly1305":true, "enc_algo_rc4":true, "keyxchg_algo_dhe":true, "keyxchg_algo_ecdhe":true, "keyxchg_algo_rsa":true, "max_version":true, "min_version":true} forceNew:map[string]bool(nil)
					"auth_algo_md5": rsschema.BoolAttribute{
						Description: "The AuthAlgoMd5 param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"auth_algo_sha1": rsschema.BoolAttribute{
						Description: "The AuthAlgoSha1 param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"auth_algo_sha256": rsschema.BoolAttribute{
						Description: "The AuthAlgoSha256 param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"auth_algo_sha384": rsschema.BoolAttribute{
						Description: "The AuthAlgoSha384 param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"enc_algo_3des": rsschema.BoolAttribute{
						Description: "The EncAlgo3des param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"enc_algo_aes_128_cbc": rsschema.BoolAttribute{
						Description: "The EncAlgoAes128Cbc param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"enc_algo_aes_128_gcm": rsschema.BoolAttribute{
						Description: "The EncAlgoAes128Gcm param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"enc_algo_aes_256_cbc": rsschema.BoolAttribute{
						Description: "The EncAlgoAes256Cbc param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"enc_algo_aes_256_gcm": rsschema.BoolAttribute{
						Description: "The EncAlgoAes256Gcm param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"enc_algo_chacha20_poly1305": rsschema.BoolAttribute{
						Description: "The EncAlgoChacha20Poly1305 param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"enc_algo_rc4": rsschema.BoolAttribute{
						Description: "The EncAlgoRc4 param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"keyxchg_algo_dhe": rsschema.BoolAttribute{
						Description: "The KeyxchgAlgoDhe param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"keyxchg_algo_ecdhe": rsschema.BoolAttribute{
						Description: "The KeyxchgAlgoEcdhe param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"keyxchg_algo_rsa": rsschema.BoolAttribute{
						Description: "The KeyxchgAlgoRsa param. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"max_version": rsschema.StringAttribute{
						Description: "The MaxVersion param. String must be one of these: `\"sslv3\"`, `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`, `\"max\"`. Default: `\"tls1-2\"`.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("tls1-2"),
						Validators: []validator.String{
							stringvalidator.OneOf("sslv3", "tls1-0", "tls1-1", "tls1-2", "tls1-3", "max"),
						},
					},
					"min_version": rsschema.StringAttribute{
						Description: "The MinVersion param. String must be one of these: `\"sslv3\"`, `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`. Default: `\"tls1-0\"`.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("tls1-0"),
						Validators: []validator.String{
							stringvalidator.OneOf("sslv3", "tls1-0", "tls1-1", "tls1-2", "tls1-3"),
						},
					},
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *decryptionProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *decryptionProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state decryptionProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_decryption_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &wugpput.Config{}

	input.Request.Name = state.Name.ValueString()

	if state.SslForwardProxy != nil {
		input.Request.SslForwardProxy = &wugpput.SslForwardProxyObject{}

		input.Request.SslForwardProxy.AutoIncludeAltname = state.SslForwardProxy.AutoIncludeAltname.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockClientCert = state.SslForwardProxy.BlockClientCert.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockExpiredCertificate = state.SslForwardProxy.BlockExpiredCertificate.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockTimeoutCert = state.SslForwardProxy.BlockTimeoutCert.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockTls13DowngradeNoResource = state.SslForwardProxy.BlockTls13DowngradeNoResource.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockUnknownCert = state.SslForwardProxy.BlockUnknownCert.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockUnsupportedCipher = state.SslForwardProxy.BlockUnsupportedCipher.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockUnsupportedVersion = state.SslForwardProxy.BlockUnsupportedVersion.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockUntrustedIssuer = state.SslForwardProxy.BlockUntrustedIssuer.ValueBoolPointer()

		input.Request.SslForwardProxy.RestrictCertExts = state.SslForwardProxy.RestrictCertExts.ValueBoolPointer()

		input.Request.SslForwardProxy.StripAlpn = state.SslForwardProxy.StripAlpn.ValueBoolPointer()
	}

	if state.SslInboundProxy != nil {
		input.Request.SslInboundProxy = &wugpput.SslInboundProxyObject{}

		input.Request.SslInboundProxy.BlockIfHsmUnavailable = state.SslInboundProxy.BlockIfHsmUnavailable.ValueBoolPointer()

		input.Request.SslInboundProxy.BlockIfNoResource = state.SslInboundProxy.BlockIfNoResource.ValueBoolPointer()

		input.Request.SslInboundProxy.BlockUnsupportedCipher = state.SslInboundProxy.BlockUnsupportedCipher.ValueBoolPointer()

		input.Request.SslInboundProxy.BlockUnsupportedVersion = state.SslInboundProxy.BlockUnsupportedVersion.ValueBoolPointer()
	}

	if state.SslNoProxy != nil {
		input.Request.SslNoProxy = &wugpput.SslNoProxyObject{}

		input.Request.SslNoProxy.BlockExpiredCertificate = state.SslNoProxy.BlockExpiredCertificate.ValueBoolPointer()

		input.Request.SslNoProxy.BlockUntrustedIssuer = state.SslNoProxy.BlockUntrustedIssuer.ValueBoolPointer()
	}

	if state.SslProtocolSettings != nil {
		input.Request.SslProtocolSettings = &wugpput.SslProtocolSettingsObject{}

		input.Request.SslProtocolSettings.AuthAlgoMd5 = state.SslProtocolSettings.AuthAlgoMd5.ValueBoolPointer()

		input.Request.SslProtocolSettings.AuthAlgoSha1 = state.SslProtocolSettings.AuthAlgoSha1.ValueBoolPointer()

		input.Request.SslProtocolSettings.AuthAlgoSha256 = state.SslProtocolSettings.AuthAlgoSha256.ValueBoolPointer()

		input.Request.SslProtocolSettings.AuthAlgoSha384 = state.SslProtocolSettings.AuthAlgoSha384.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgo3des = state.SslProtocolSettings.EncAlgo3des.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoAes128Cbc = state.SslProtocolSettings.EncAlgoAes128Cbc.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoAes128Gcm = state.SslProtocolSettings.EncAlgoAes128Gcm.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoAes256Cbc = state.SslProtocolSettings.EncAlgoAes256Cbc.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoAes256Gcm = state.SslProtocolSettings.EncAlgoAes256Gcm.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoChacha20Poly1305 = state.SslProtocolSettings.EncAlgoChacha20Poly1305.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoRc4 = state.SslProtocolSettings.EncAlgoRc4.ValueBoolPointer()

		input.Request.SslProtocolSettings.KeyxchgAlgoDhe = state.SslProtocolSettings.KeyxchgAlgoDhe.ValueBoolPointer()

		input.Request.SslProtocolSettings.KeyxchgAlgoEcdhe = state.SslProtocolSettings.KeyxchgAlgoEcdhe.ValueBoolPointer()

		input.Request.SslProtocolSettings.KeyxchgAlgoRsa = state.SslProtocolSettings.KeyxchgAlgoRsa.ValueBoolPointer()

		input.Request.SslProtocolSettings.MaxVersion = state.SslProtocolSettings.MaxVersion.ValueStringPointer()

		input.Request.SslProtocolSettings.MinVersion = state.SslProtocolSettings.MinVersion.ValueStringPointer()
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if ans.SslForwardProxy == nil {
		state.SslForwardProxy = nil
	} else {
		state.SslForwardProxy = &decryptionProfileRsModel_wugpput_SslForwardProxyObject{}

		state.SslForwardProxy.AutoIncludeAltname = types.BoolPointerValue(ans.SslForwardProxy.AutoIncludeAltname)

		state.SslForwardProxy.BlockClientCert = types.BoolPointerValue(ans.SslForwardProxy.BlockClientCert)

		state.SslForwardProxy.BlockExpiredCertificate = types.BoolPointerValue(ans.SslForwardProxy.BlockExpiredCertificate)

		state.SslForwardProxy.BlockTimeoutCert = types.BoolPointerValue(ans.SslForwardProxy.BlockTimeoutCert)

		state.SslForwardProxy.BlockTls13DowngradeNoResource = types.BoolPointerValue(ans.SslForwardProxy.BlockTls13DowngradeNoResource)

		state.SslForwardProxy.BlockUnknownCert = types.BoolPointerValue(ans.SslForwardProxy.BlockUnknownCert)

		state.SslForwardProxy.BlockUnsupportedCipher = types.BoolPointerValue(ans.SslForwardProxy.BlockUnsupportedCipher)

		state.SslForwardProxy.BlockUnsupportedVersion = types.BoolPointerValue(ans.SslForwardProxy.BlockUnsupportedVersion)

		state.SslForwardProxy.BlockUntrustedIssuer = types.BoolPointerValue(ans.SslForwardProxy.BlockUntrustedIssuer)

		state.SslForwardProxy.RestrictCertExts = types.BoolPointerValue(ans.SslForwardProxy.RestrictCertExts)

		state.SslForwardProxy.StripAlpn = types.BoolPointerValue(ans.SslForwardProxy.StripAlpn)
	}

	if ans.SslInboundProxy == nil {
		state.SslInboundProxy = nil
	} else {
		state.SslInboundProxy = &decryptionProfileRsModel_wugpput_SslInboundProxyObject{}

		state.SslInboundProxy.BlockIfHsmUnavailable = types.BoolPointerValue(ans.SslInboundProxy.BlockIfHsmUnavailable)

		state.SslInboundProxy.BlockIfNoResource = types.BoolPointerValue(ans.SslInboundProxy.BlockIfNoResource)

		state.SslInboundProxy.BlockUnsupportedCipher = types.BoolPointerValue(ans.SslInboundProxy.BlockUnsupportedCipher)

		state.SslInboundProxy.BlockUnsupportedVersion = types.BoolPointerValue(ans.SslInboundProxy.BlockUnsupportedVersion)
	}

	if ans.SslNoProxy == nil {
		state.SslNoProxy = nil
	} else {
		state.SslNoProxy = &decryptionProfileRsModel_wugpput_SslNoProxyObject{}

		state.SslNoProxy.BlockExpiredCertificate = types.BoolPointerValue(ans.SslNoProxy.BlockExpiredCertificate)

		state.SslNoProxy.BlockUntrustedIssuer = types.BoolPointerValue(ans.SslNoProxy.BlockUntrustedIssuer)
	}

	if ans.SslProtocolSettings == nil {
		state.SslProtocolSettings = nil
	} else {
		state.SslProtocolSettings = &decryptionProfileRsModel_wugpput_SslProtocolSettingsObject{}

		state.SslProtocolSettings.AuthAlgoMd5 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoMd5)

		state.SslProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha1)

		state.SslProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha256)

		state.SslProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha384)

		state.SslProtocolSettings.EncAlgo3des = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgo3des)

		state.SslProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes128Cbc)

		state.SslProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes128Gcm)

		state.SslProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes256Cbc)

		state.SslProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes256Gcm)

		state.SslProtocolSettings.EncAlgoChacha20Poly1305 = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoChacha20Poly1305)

		state.SslProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoRc4)

		state.SslProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoDhe)

		state.SslProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoEcdhe)

		state.SslProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoRsa)

		state.SslProtocolSettings.MaxVersion = types.StringPointerValue(ans.SslProtocolSettings.MaxVersion)

		state.SslProtocolSettings.MinVersion = types.StringPointerValue(ans.SslProtocolSettings.MinVersion)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *decryptionProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state decryptionProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_decryption_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if ans.SslForwardProxy == nil {
		state.SslForwardProxy = nil
	} else {
		state.SslForwardProxy = &decryptionProfileRsModel_wugpput_SslForwardProxyObject{}

		state.SslForwardProxy.AutoIncludeAltname = types.BoolPointerValue(ans.SslForwardProxy.AutoIncludeAltname)

		state.SslForwardProxy.BlockClientCert = types.BoolPointerValue(ans.SslForwardProxy.BlockClientCert)

		state.SslForwardProxy.BlockExpiredCertificate = types.BoolPointerValue(ans.SslForwardProxy.BlockExpiredCertificate)

		state.SslForwardProxy.BlockTimeoutCert = types.BoolPointerValue(ans.SslForwardProxy.BlockTimeoutCert)

		state.SslForwardProxy.BlockTls13DowngradeNoResource = types.BoolPointerValue(ans.SslForwardProxy.BlockTls13DowngradeNoResource)

		state.SslForwardProxy.BlockUnknownCert = types.BoolPointerValue(ans.SslForwardProxy.BlockUnknownCert)

		state.SslForwardProxy.BlockUnsupportedCipher = types.BoolPointerValue(ans.SslForwardProxy.BlockUnsupportedCipher)

		state.SslForwardProxy.BlockUnsupportedVersion = types.BoolPointerValue(ans.SslForwardProxy.BlockUnsupportedVersion)

		state.SslForwardProxy.BlockUntrustedIssuer = types.BoolPointerValue(ans.SslForwardProxy.BlockUntrustedIssuer)

		state.SslForwardProxy.RestrictCertExts = types.BoolPointerValue(ans.SslForwardProxy.RestrictCertExts)

		state.SslForwardProxy.StripAlpn = types.BoolPointerValue(ans.SslForwardProxy.StripAlpn)
	}

	if ans.SslInboundProxy == nil {
		state.SslInboundProxy = nil
	} else {
		state.SslInboundProxy = &decryptionProfileRsModel_wugpput_SslInboundProxyObject{}

		state.SslInboundProxy.BlockIfHsmUnavailable = types.BoolPointerValue(ans.SslInboundProxy.BlockIfHsmUnavailable)

		state.SslInboundProxy.BlockIfNoResource = types.BoolPointerValue(ans.SslInboundProxy.BlockIfNoResource)

		state.SslInboundProxy.BlockUnsupportedCipher = types.BoolPointerValue(ans.SslInboundProxy.BlockUnsupportedCipher)

		state.SslInboundProxy.BlockUnsupportedVersion = types.BoolPointerValue(ans.SslInboundProxy.BlockUnsupportedVersion)
	}

	if ans.SslNoProxy == nil {
		state.SslNoProxy = nil
	} else {
		state.SslNoProxy = &decryptionProfileRsModel_wugpput_SslNoProxyObject{}

		state.SslNoProxy.BlockExpiredCertificate = types.BoolPointerValue(ans.SslNoProxy.BlockExpiredCertificate)

		state.SslNoProxy.BlockUntrustedIssuer = types.BoolPointerValue(ans.SslNoProxy.BlockUntrustedIssuer)
	}

	if ans.SslProtocolSettings == nil {
		state.SslProtocolSettings = nil
	} else {
		state.SslProtocolSettings = &decryptionProfileRsModel_wugpput_SslProtocolSettingsObject{}

		state.SslProtocolSettings.AuthAlgoMd5 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoMd5)

		state.SslProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha1)

		state.SslProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha256)

		state.SslProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha384)

		state.SslProtocolSettings.EncAlgo3des = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgo3des)

		state.SslProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes128Cbc)

		state.SslProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes128Gcm)

		state.SslProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes256Cbc)

		state.SslProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes256Gcm)

		state.SslProtocolSettings.EncAlgoChacha20Poly1305 = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoChacha20Poly1305)

		state.SslProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoRc4)

		state.SslProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoDhe)

		state.SslProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoEcdhe)

		state.SslProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoRsa)

		state.SslProtocolSettings.MaxVersion = types.StringPointerValue(ans.SslProtocolSettings.MaxVersion)

		state.SslProtocolSettings.MinVersion = types.StringPointerValue(ans.SslProtocolSettings.MinVersion)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *decryptionProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state decryptionProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_decryption_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &wugpput.Config{}

	input.Request.Name = plan.Name.ValueString()

	if plan.SslForwardProxy != nil {
		input.Request.SslForwardProxy = &wugpput.SslForwardProxyObject{}

		input.Request.SslForwardProxy.AutoIncludeAltname = plan.SslForwardProxy.AutoIncludeAltname.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockClientCert = plan.SslForwardProxy.BlockClientCert.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockExpiredCertificate = plan.SslForwardProxy.BlockExpiredCertificate.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockTimeoutCert = plan.SslForwardProxy.BlockTimeoutCert.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockTls13DowngradeNoResource = plan.SslForwardProxy.BlockTls13DowngradeNoResource.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockUnknownCert = plan.SslForwardProxy.BlockUnknownCert.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockUnsupportedCipher = plan.SslForwardProxy.BlockUnsupportedCipher.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockUnsupportedVersion = plan.SslForwardProxy.BlockUnsupportedVersion.ValueBoolPointer()

		input.Request.SslForwardProxy.BlockUntrustedIssuer = plan.SslForwardProxy.BlockUntrustedIssuer.ValueBoolPointer()

		input.Request.SslForwardProxy.RestrictCertExts = plan.SslForwardProxy.RestrictCertExts.ValueBoolPointer()

		input.Request.SslForwardProxy.StripAlpn = plan.SslForwardProxy.StripAlpn.ValueBoolPointer()
	}

	if plan.SslInboundProxy != nil {
		input.Request.SslInboundProxy = &wugpput.SslInboundProxyObject{}

		input.Request.SslInboundProxy.BlockIfHsmUnavailable = plan.SslInboundProxy.BlockIfHsmUnavailable.ValueBoolPointer()

		input.Request.SslInboundProxy.BlockIfNoResource = plan.SslInboundProxy.BlockIfNoResource.ValueBoolPointer()

		input.Request.SslInboundProxy.BlockUnsupportedCipher = plan.SslInboundProxy.BlockUnsupportedCipher.ValueBoolPointer()

		input.Request.SslInboundProxy.BlockUnsupportedVersion = plan.SslInboundProxy.BlockUnsupportedVersion.ValueBoolPointer()
	}

	if plan.SslNoProxy != nil {
		input.Request.SslNoProxy = &wugpput.SslNoProxyObject{}

		input.Request.SslNoProxy.BlockExpiredCertificate = plan.SslNoProxy.BlockExpiredCertificate.ValueBoolPointer()

		input.Request.SslNoProxy.BlockUntrustedIssuer = plan.SslNoProxy.BlockUntrustedIssuer.ValueBoolPointer()
	}

	if plan.SslProtocolSettings != nil {
		input.Request.SslProtocolSettings = &wugpput.SslProtocolSettingsObject{}

		input.Request.SslProtocolSettings.AuthAlgoMd5 = plan.SslProtocolSettings.AuthAlgoMd5.ValueBoolPointer()

		input.Request.SslProtocolSettings.AuthAlgoSha1 = plan.SslProtocolSettings.AuthAlgoSha1.ValueBoolPointer()

		input.Request.SslProtocolSettings.AuthAlgoSha256 = plan.SslProtocolSettings.AuthAlgoSha256.ValueBoolPointer()

		input.Request.SslProtocolSettings.AuthAlgoSha384 = plan.SslProtocolSettings.AuthAlgoSha384.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgo3des = plan.SslProtocolSettings.EncAlgo3des.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoAes128Cbc = plan.SslProtocolSettings.EncAlgoAes128Cbc.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoAes128Gcm = plan.SslProtocolSettings.EncAlgoAes128Gcm.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoAes256Cbc = plan.SslProtocolSettings.EncAlgoAes256Cbc.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoAes256Gcm = plan.SslProtocolSettings.EncAlgoAes256Gcm.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoChacha20Poly1305 = plan.SslProtocolSettings.EncAlgoChacha20Poly1305.ValueBoolPointer()

		input.Request.SslProtocolSettings.EncAlgoRc4 = plan.SslProtocolSettings.EncAlgoRc4.ValueBoolPointer()

		input.Request.SslProtocolSettings.KeyxchgAlgoDhe = plan.SslProtocolSettings.KeyxchgAlgoDhe.ValueBoolPointer()

		input.Request.SslProtocolSettings.KeyxchgAlgoEcdhe = plan.SslProtocolSettings.KeyxchgAlgoEcdhe.ValueBoolPointer()

		input.Request.SslProtocolSettings.KeyxchgAlgoRsa = plan.SslProtocolSettings.KeyxchgAlgoRsa.ValueBoolPointer()

		input.Request.SslProtocolSettings.MaxVersion = plan.SslProtocolSettings.MaxVersion.ValueStringPointer()

		input.Request.SslProtocolSettings.MinVersion = plan.SslProtocolSettings.MinVersion.ValueStringPointer()
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if ans.SslForwardProxy == nil {
		state.SslForwardProxy = nil
	} else {
		state.SslForwardProxy = &decryptionProfileRsModel_wugpput_SslForwardProxyObject{}

		state.SslForwardProxy.AutoIncludeAltname = types.BoolPointerValue(ans.SslForwardProxy.AutoIncludeAltname)

		state.SslForwardProxy.BlockClientCert = types.BoolPointerValue(ans.SslForwardProxy.BlockClientCert)

		state.SslForwardProxy.BlockExpiredCertificate = types.BoolPointerValue(ans.SslForwardProxy.BlockExpiredCertificate)

		state.SslForwardProxy.BlockTimeoutCert = types.BoolPointerValue(ans.SslForwardProxy.BlockTimeoutCert)

		state.SslForwardProxy.BlockTls13DowngradeNoResource = types.BoolPointerValue(ans.SslForwardProxy.BlockTls13DowngradeNoResource)

		state.SslForwardProxy.BlockUnknownCert = types.BoolPointerValue(ans.SslForwardProxy.BlockUnknownCert)

		state.SslForwardProxy.BlockUnsupportedCipher = types.BoolPointerValue(ans.SslForwardProxy.BlockUnsupportedCipher)

		state.SslForwardProxy.BlockUnsupportedVersion = types.BoolPointerValue(ans.SslForwardProxy.BlockUnsupportedVersion)

		state.SslForwardProxy.BlockUntrustedIssuer = types.BoolPointerValue(ans.SslForwardProxy.BlockUntrustedIssuer)

		state.SslForwardProxy.RestrictCertExts = types.BoolPointerValue(ans.SslForwardProxy.RestrictCertExts)

		state.SslForwardProxy.StripAlpn = types.BoolPointerValue(ans.SslForwardProxy.StripAlpn)
	}

	if ans.SslInboundProxy == nil {
		state.SslInboundProxy = nil
	} else {
		state.SslInboundProxy = &decryptionProfileRsModel_wugpput_SslInboundProxyObject{}

		state.SslInboundProxy.BlockIfHsmUnavailable = types.BoolPointerValue(ans.SslInboundProxy.BlockIfHsmUnavailable)

		state.SslInboundProxy.BlockIfNoResource = types.BoolPointerValue(ans.SslInboundProxy.BlockIfNoResource)

		state.SslInboundProxy.BlockUnsupportedCipher = types.BoolPointerValue(ans.SslInboundProxy.BlockUnsupportedCipher)

		state.SslInboundProxy.BlockUnsupportedVersion = types.BoolPointerValue(ans.SslInboundProxy.BlockUnsupportedVersion)
	}

	if ans.SslNoProxy == nil {
		state.SslNoProxy = nil
	} else {
		state.SslNoProxy = &decryptionProfileRsModel_wugpput_SslNoProxyObject{}

		state.SslNoProxy.BlockExpiredCertificate = types.BoolPointerValue(ans.SslNoProxy.BlockExpiredCertificate)

		state.SslNoProxy.BlockUntrustedIssuer = types.BoolPointerValue(ans.SslNoProxy.BlockUntrustedIssuer)
	}

	if ans.SslProtocolSettings == nil {
		state.SslProtocolSettings = nil
	} else {
		state.SslProtocolSettings = &decryptionProfileRsModel_wugpput_SslProtocolSettingsObject{}

		state.SslProtocolSettings.AuthAlgoMd5 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoMd5)

		state.SslProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha1)

		state.SslProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha256)

		state.SslProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(ans.SslProtocolSettings.AuthAlgoSha384)

		state.SslProtocolSettings.EncAlgo3des = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgo3des)

		state.SslProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes128Cbc)

		state.SslProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes128Gcm)

		state.SslProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes256Cbc)

		state.SslProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoAes256Gcm)

		state.SslProtocolSettings.EncAlgoChacha20Poly1305 = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoChacha20Poly1305)

		state.SslProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(ans.SslProtocolSettings.EncAlgoRc4)

		state.SslProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoDhe)

		state.SslProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoEcdhe)

		state.SslProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(ans.SslProtocolSettings.KeyxchgAlgoRsa)

		state.SslProtocolSettings.MaxVersion = types.StringPointerValue(ans.SslProtocolSettings.MaxVersion)

		state.SslProtocolSettings.MinVersion = types.StringPointerValue(ans.SslProtocolSettings.MinVersion)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *decryptionProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_decryption_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *decryptionProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
