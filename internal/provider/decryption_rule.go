package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	tephihM "github.com/paloaltonetworks/scm-go/netsec/schemas/decryption/rules"
	dvnOhnM "github.com/paloaltonetworks/scm-go/netsec/services/decryptionrules"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &decryptionRuleListDataSource{}
	_ datasource.DataSourceWithConfigure = &decryptionRuleListDataSource{}
)

func NewDecryptionRuleListDataSource() datasource.DataSource {
	return &decryptionRuleListDataSource{}
}

type decryptionRuleListDataSource struct {
	client *scm.Client
}

// decryptionRuleListDsModel is the model.
type decryptionRuleListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device   types.String `tfsdk:"device"`
	Folder   types.String `tfsdk:"folder"`
	Limit    types.Int64  `tfsdk:"limit"`
	Name     types.String `tfsdk:"name"`
	Offset   types.Int64  `tfsdk:"offset"`
	Position types.String `tfsdk:"position"`
	Snippet  types.String `tfsdk:"snippet"`

	// Output.
	Data []decryptionRuleListDsModel_tephihM_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type decryptionRuleListDsModel_tephihM_Config struct {
	Action            types.String                                  `tfsdk:"action"`
	Categories        types.List                                    `tfsdk:"categories"`
	Description       types.String                                  `tfsdk:"description"`
	DestinationHips   types.List                                    `tfsdk:"destination_hips"`
	Destinations      types.List                                    `tfsdk:"destinations"`
	Disabled          types.Bool                                    `tfsdk:"disabled"`
	Froms             types.List                                    `tfsdk:"froms"`
	Id                types.String                                  `tfsdk:"id"`
	LogFail           types.Bool                                    `tfsdk:"log_fail"`
	LogSetting        types.String                                  `tfsdk:"log_setting"`
	LogSuccess        types.Bool                                    `tfsdk:"log_success"`
	Name              types.String                                  `tfsdk:"name"`
	NegateDestination types.Bool                                    `tfsdk:"negate_destination"`
	NegateSource      types.Bool                                    `tfsdk:"negate_source"`
	Profile           types.String                                  `tfsdk:"profile"`
	Services          types.List                                    `tfsdk:"services"`
	SourceHips        types.List                                    `tfsdk:"source_hips"`
	SourceUsers       types.List                                    `tfsdk:"source_users"`
	Sources           types.List                                    `tfsdk:"sources"`
	Tags              types.List                                    `tfsdk:"tags"`
	Tos               types.List                                    `tfsdk:"tos"`
	Type              *decryptionRuleListDsModel_tephihM_TypeObject `tfsdk:"type"`
}

type decryptionRuleListDsModel_tephihM_TypeObject struct {
	SslForwardProxy      types.Bool   `tfsdk:"ssl_forward_proxy"`
	SslInboundInspection types.String `tfsdk:"ssl_inbound_inspection"`
}

// Metadata returns the data source type name.
func (d *decryptionRuleListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_decryption_rule_list"
}

// Schema defines the schema for this listing data source.
func (d *decryptionRuleListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "category":true, "description":true, "destination":true, "destination_hip":true, "disabled":true, "from":true, "id":true, "log_fail":true, "log_setting":true, "log_success":true, "name":true, "negate_destination":true, "negate_source":true, "profile":true, "service":true, "source":true, "source_hip":true, "source_user":true, "tag":true, "to":true, "type":true} forceNew:map[string]bool(nil)
						"action": dsschema.StringAttribute{
							Description: "The Action param. String must be one of these: `\"decrypt\"`, `\"no-decrypt\"`.",
							Computed:    true,
						},
						"categories": dsschema.ListAttribute{
							Description: "The Categories param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"destination_hips": dsschema.ListAttribute{
							Description: "The DestinationHips param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"destinations": dsschema.ListAttribute{
							Description: "The Destinations param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"disabled": dsschema.BoolAttribute{
							Description: "The Disabled param.",
							Computed:    true,
						},
						"froms": dsschema.ListAttribute{
							Description: "The Froms param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"log_fail": dsschema.BoolAttribute{
							Description: "The LogFail param.",
							Computed:    true,
						},
						"log_setting": dsschema.StringAttribute{
							Description: "The LogSetting param.",
							Computed:    true,
						},
						"log_success": dsschema.BoolAttribute{
							Description: "The LogSuccess param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"negate_destination": dsschema.BoolAttribute{
							Description: "The NegateDestination param.",
							Computed:    true,
						},
						"negate_source": dsschema.BoolAttribute{
							Description: "The NegateSource param.",
							Computed:    true,
						},
						"profile": dsschema.StringAttribute{
							Description: "The Profile param.",
							Computed:    true,
						},
						"services": dsschema.ListAttribute{
							Description: "The Services param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"source_hips": dsschema.ListAttribute{
							Description: "The SourceHips param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"source_users": dsschema.ListAttribute{
							Description: "The SourceUsers param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"sources": dsschema.ListAttribute{
							Description: "The Sources param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"tags": dsschema.ListAttribute{
							Description: "The Tags param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"tos": dsschema.ListAttribute{
							Description: "The Tos param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"type": dsschema.SingleNestedAttribute{
							Description: "The Type param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"ssl_forward_proxy":true, "ssl_inbound_inspection":true} forceNew:map[string]bool(nil)
								"ssl_forward_proxy": dsschema.BoolAttribute{
									Description: "The SslForwardProxy param.",
									Computed:    true,
								},
								"ssl_inbound_inspection": dsschema.StringAttribute{
									Description: "add the certificate name for SSL inbound inspection.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"position": dsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *decryptionRuleListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *decryptionRuleListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state decryptionRuleListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_decryption_rule_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"position":                    state.Position.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := dvnOhnM.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Position = state.Position.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]decryptionRuleListDsModel_tephihM_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := decryptionRuleListDsModel_tephihM_Config{}

			var1.Action = types.StringValue(var0.Action)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Categories)
			var1.Categories = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Description = types.StringPointerValue(var0.Description)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.DestinationHips)
			var1.DestinationHips = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Destinations)
			var1.Destinations = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var1.Disabled = types.BoolPointerValue(var0.Disabled)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.Froms)
			var1.Froms = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.LogFail = types.BoolPointerValue(var0.LogFail)

			var1.LogSetting = types.StringPointerValue(var0.LogSetting)

			var1.LogSuccess = types.BoolPointerValue(var0.LogSuccess)

			var1.Name = types.StringValue(var0.Name)

			var1.NegateDestination = types.BoolPointerValue(var0.NegateDestination)

			var1.NegateSource = types.BoolPointerValue(var0.NegateSource)

			var1.Profile = types.StringPointerValue(var0.Profile)

			var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.Services)
			var1.Services = var10
			resp.Diagnostics.Append(var11.Errors()...)

			var12, var13 := types.ListValueFrom(ctx, types.StringType, var0.SourceHips)
			var1.SourceHips = var12
			resp.Diagnostics.Append(var13.Errors()...)

			var14, var15 := types.ListValueFrom(ctx, types.StringType, var0.SourceUsers)
			var1.SourceUsers = var14
			resp.Diagnostics.Append(var15.Errors()...)

			var16, var17 := types.ListValueFrom(ctx, types.StringType, var0.Sources)
			var1.Sources = var16
			resp.Diagnostics.Append(var17.Errors()...)

			var18, var19 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var18
			resp.Diagnostics.Append(var19.Errors()...)

			var20, var21 := types.ListValueFrom(ctx, types.StringType, var0.Tos)
			var1.Tos = var20
			resp.Diagnostics.Append(var21.Errors()...)

			if var0.Type == nil {
				var1.Type = nil
			} else {
				var1.Type = &decryptionRuleListDsModel_tephihM_TypeObject{}

				if var0.Type.SslForwardProxy != nil {
					var1.Type.SslForwardProxy = types.BoolValue(true)
				} else {
					var1.Type.SslForwardProxy = types.BoolPointerValue(nil)
				}
				//var1.Type.SslForwardProxy = types.BoolValue(var0.Type.SslForwardProxy != nil)

				var1.Type.SslInboundInspection = types.StringPointerValue(var0.Type.SslInboundInspection)
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &decryptionRuleDataSource{}
	_ datasource.DataSourceWithConfigure = &decryptionRuleDataSource{}
)

func NewDecryptionRuleDataSource() datasource.DataSource {
	return &decryptionRuleDataSource{}
}

type decryptionRuleDataSource struct {
	client *scm.Client
}

// decryptionRuleDsModel is the model.
type decryptionRuleDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Action          types.String `tfsdk:"action"`
	Categories      types.List   `tfsdk:"categories"`
	Description     types.String `tfsdk:"description"`
	DestinationHips types.List   `tfsdk:"destination_hips"`
	Destinations    types.List   `tfsdk:"destinations"`
	Disabled        types.Bool   `tfsdk:"disabled"`
	Froms           types.List   `tfsdk:"froms"`
	// omit input: id
	LogFail           types.Bool                                `tfsdk:"log_fail"`
	LogSetting        types.String                              `tfsdk:"log_setting"`
	LogSuccess        types.Bool                                `tfsdk:"log_success"`
	Name              types.String                              `tfsdk:"name"`
	NegateDestination types.Bool                                `tfsdk:"negate_destination"`
	NegateSource      types.Bool                                `tfsdk:"negate_source"`
	Profile           types.String                              `tfsdk:"profile"`
	Services          types.List                                `tfsdk:"services"`
	SourceHips        types.List                                `tfsdk:"source_hips"`
	SourceUsers       types.List                                `tfsdk:"source_users"`
	Sources           types.List                                `tfsdk:"sources"`
	Tags              types.List                                `tfsdk:"tags"`
	Tos               types.List                                `tfsdk:"tos"`
	Type              *decryptionRuleDsModel_tephihM_TypeObject `tfsdk:"type"`
}

type decryptionRuleDsModel_tephihM_TypeObject struct {
	SslForwardProxy      types.Bool   `tfsdk:"ssl_forward_proxy"`
	SslInboundInspection types.String `tfsdk:"ssl_inbound_inspection"`
}

// Metadata returns the data source type name.
func (d *decryptionRuleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_decryption_rule"
}

// Schema defines the schema for this data source.
func (d *decryptionRuleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"action":true, "category":true, "description":true, "destination":true, "destination_hip":true, "disabled":true, "from":true, "id":true, "log_fail":true, "log_setting":true, "log_success":true, "name":true, "negate_destination":true, "negate_source":true, "profile":true, "service":true, "source":true, "source_hip":true, "source_user":true, "tag":true, "tfid":true, "to":true, "type":true} forceNew:map[string]bool{"id":true}
			"action": dsschema.StringAttribute{
				Description: "The Action param. String must be one of these: `\"decrypt\"`, `\"no-decrypt\"`.",
				Computed:    true,
			},
			"categories": dsschema.ListAttribute{
				Description: "The Categories param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"destination_hips": dsschema.ListAttribute{
				Description: "The DestinationHips param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"destinations": dsschema.ListAttribute{
				Description: "The Destinations param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"disabled": dsschema.BoolAttribute{
				Description: "The Disabled param.",
				Computed:    true,
			},
			"froms": dsschema.ListAttribute{
				Description: "The Froms param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"log_fail": dsschema.BoolAttribute{
				Description: "The LogFail param.",
				Computed:    true,
			},
			"log_setting": dsschema.StringAttribute{
				Description: "The LogSetting param.",
				Computed:    true,
			},
			"log_success": dsschema.BoolAttribute{
				Description: "The LogSuccess param.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"negate_destination": dsschema.BoolAttribute{
				Description: "The NegateDestination param.",
				Computed:    true,
			},
			"negate_source": dsschema.BoolAttribute{
				Description: "The NegateSource param.",
				Computed:    true,
			},
			"profile": dsschema.StringAttribute{
				Description: "The Profile param.",
				Computed:    true,
			},
			"services": dsschema.ListAttribute{
				Description: "The Services param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"source_hips": dsschema.ListAttribute{
				Description: "The SourceHips param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"source_users": dsschema.ListAttribute{
				Description: "The SourceUsers param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"sources": dsschema.ListAttribute{
				Description: "The Sources param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tags": dsschema.ListAttribute{
				Description: "The Tags param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"tos": dsschema.ListAttribute{
				Description: "The Tos param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"type": dsschema.SingleNestedAttribute{
				Description: "The Type param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"ssl_forward_proxy":true, "ssl_inbound_inspection":true} forceNew:map[string]bool(nil)
					"ssl_forward_proxy": dsschema.BoolAttribute{
						Description: "The SslForwardProxy param.",
						Computed:    true,
					},
					"ssl_inbound_inspection": dsschema.StringAttribute{
						Description: "add the certificate name for SSL inbound inspection.",
						Computed:    true,
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (d *decryptionRuleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *decryptionRuleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state decryptionRuleDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_decryption_rule",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := dvnOhnM.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Action = types.StringValue(ans.Action)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Description = types.StringPointerValue(ans.Description)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.DestinationHips)
	state.DestinationHips = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var6
	resp.Diagnostics.Append(var7.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.LogFail = types.BoolPointerValue(ans.LogFail)

	state.LogSetting = types.StringPointerValue(ans.LogSetting)

	state.LogSuccess = types.BoolPointerValue(ans.LogSuccess)

	state.Name = types.StringValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	state.Profile = types.StringPointerValue(ans.Profile)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Services)
	state.Services = var8
	resp.Diagnostics.Append(var9.Errors()...)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.SourceHips)
	state.SourceHips = var10
	resp.Diagnostics.Append(var11.Errors()...)

	var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.SourceUsers)
	state.SourceUsers = var12
	resp.Diagnostics.Append(var13.Errors()...)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var14
	resp.Diagnostics.Append(var15.Errors()...)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var16
	resp.Diagnostics.Append(var17.Errors()...)

	var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var18
	resp.Diagnostics.Append(var19.Errors()...)

	if ans.Type == nil {
		state.Type = nil
	} else {
		state.Type = &decryptionRuleDsModel_tephihM_TypeObject{}

		if ans.Type.SslForwardProxy != nil {
			state.Type.SslForwardProxy = types.BoolValue(true)
		} else {
			state.Type.SslForwardProxy = types.BoolPointerValue(nil)
		}
		//state.Type.SslForwardProxy = types.BoolValue(ans.Type.SslForwardProxy != nil)

		state.Type.SslInboundInspection = types.StringPointerValue(ans.Type.SslInboundInspection)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &decryptionRuleResource{}
	_ resource.ResourceWithConfigure   = &decryptionRuleResource{}
	_ resource.ResourceWithImportState = &decryptionRuleResource{}
)

func NewDecryptionRuleResource() resource.Resource {
	return &decryptionRuleResource{}
}

type decryptionRuleResource struct {
	client *scm.Client
}

// decryptionRuleRsModel is the model.
type decryptionRuleRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Action            types.String                              `tfsdk:"action"`
	Categories        types.List                                `tfsdk:"categories"`
	Description       types.String                              `tfsdk:"description"`
	DestinationHips   types.List                                `tfsdk:"destination_hips"`
	Destinations      types.List                                `tfsdk:"destinations"`
	Device            types.String                              `tfsdk:"device"`
	Disabled          types.Bool                                `tfsdk:"disabled"`
	Folder            types.String                              `tfsdk:"folder"`
	Froms             types.List                                `tfsdk:"froms"`
	Id                types.String                              `tfsdk:"id"`
	LogFail           types.Bool                                `tfsdk:"log_fail"`
	LogSetting        types.String                              `tfsdk:"log_setting"`
	LogSuccess        types.Bool                                `tfsdk:"log_success"`
	Name              types.String                              `tfsdk:"name"`
	NegateDestination types.Bool                                `tfsdk:"negate_destination"`
	NegateSource      types.Bool                                `tfsdk:"negate_source"`
	Position          types.String                              `tfsdk:"position"`
	Profile           types.String                              `tfsdk:"profile"`
	Services          types.List                                `tfsdk:"services"`
	Snippet           types.String                              `tfsdk:"snippet"`
	SourceHips        types.List                                `tfsdk:"source_hips"`
	SourceUsers       types.List                                `tfsdk:"source_users"`
	Sources           types.List                                `tfsdk:"sources"`
	Tags              types.List                                `tfsdk:"tags"`
	Tos               types.List                                `tfsdk:"tos"`
	Type              *decryptionRuleRsModel_tephihM_TypeObject `tfsdk:"type"`

	// Output.
	// omit input: action
	// omit input: categories
	// omit input: description
	// omit input: destination_hips
	// omit input: destinations
	// omit input: disabled
	// omit input: froms
	// omit input: id
	// omit input: log_fail
	// omit input: log_setting
	// omit input: log_success
	// omit input: name
	// omit input: negate_destination
	// omit input: negate_source
	// omit input: profile
	// omit input: services
	// omit input: source_hips
	// omit input: source_users
	// omit input: sources
	// omit input: tags
	// omit input: tos
	// omit input: type
}

type decryptionRuleRsModel_tephihM_TypeObject struct {
	SslForwardProxy      types.Bool   `tfsdk:"ssl_forward_proxy"`
	SslInboundInspection types.String `tfsdk:"ssl_inbound_inspection"`
}

// Metadata returns the data source type name.
func (r *decryptionRuleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_decryption_rule"
}

// Schema defines the schema for this data source.
func (r *decryptionRuleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"action":true, "category":true, "description":true, "destination":true, "destination_hip":true, "device":true, "disabled":true, "folder":true, "from":true, "id":true, "log_fail":true, "log_setting":true, "log_success":true, "name":true, "negate_destination":true, "negate_source":true, "position":true, "profile":true, "service":true, "snippet":true, "source":true, "source_hip":true, "source_user":true, "tag":true, "to":true, "type":true} outputs:map[string]bool{"action":true, "category":true, "description":true, "destination":true, "destination_hip":true, "disabled":true, "from":true, "id":true, "log_fail":true, "log_setting":true, "log_success":true, "name":true, "negate_destination":true, "negate_source":true, "profile":true, "service":true, "source":true, "source_hip":true, "source_user":true, "tag":true, "tfid":true, "to":true, "type":true} forceNew:map[string]bool{"device":true, "folder":true, "position":true, "snippet":true}
			"action": rsschema.StringAttribute{
				Description: "The Action param. String must be one of these: `\"decrypt\"`, `\"no-decrypt\"`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("decrypt", "no-decrypt"),
				},
			},
			"categories": rsschema.ListAttribute{
				Description: "The Categories param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"destination_hips": rsschema.ListAttribute{
				Description: "The DestinationHips param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"destinations": rsschema.ListAttribute{
				Description: "The Destinations param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"disabled": rsschema.BoolAttribute{
				Description: "The Disabled param.",
				Optional:    true,
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"froms": rsschema.ListAttribute{
				Description: "The Froms param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"log_fail": rsschema.BoolAttribute{
				Description: "The LogFail param.",
				Optional:    true,
			},
			"log_setting": rsschema.StringAttribute{
				Description: "The LogSetting param.",
				Optional:    true,
			},
			"log_success": rsschema.BoolAttribute{
				Description: "The LogSuccess param.",
				Optional:    true,
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"negate_destination": rsschema.BoolAttribute{
				Description: "The NegateDestination param.",
				Optional:    true,
			},
			"negate_source": rsschema.BoolAttribute{
				Description: "The NegateSource param.",
				Optional:    true,
			},
			"position": rsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("pre"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("pre", "post"),
				},
			},
			"profile": rsschema.StringAttribute{
				Description: "The Profile param.",
				Optional:    true,
			},
			"services": rsschema.ListAttribute{
				Description: "The Services param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"source_hips": rsschema.ListAttribute{
				Description: "The SourceHips param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"source_users": rsschema.ListAttribute{
				Description: "The SourceUsers param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"sources": rsschema.ListAttribute{
				Description: "The Sources param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"tags": rsschema.ListAttribute{
				Description: "The Tags param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"tos": rsschema.ListAttribute{
				Description: "The Tos param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"type": rsschema.SingleNestedAttribute{
				Description: "The Type param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"ssl_forward_proxy":true, "ssl_inbound_inspection":true} outputs:map[string]bool{"ssl_forward_proxy":true, "ssl_inbound_inspection":true} forceNew:map[string]bool(nil)
					"ssl_forward_proxy": rsschema.BoolAttribute{
						Description: "The SslForwardProxy param. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`",
						Optional:    true,
						Validators: []validator.Bool{
							boolvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("ssl_inbound_inspection"),
							),
						},
					},
					"ssl_inbound_inspection": rsschema.StringAttribute{
						Description: "add the certificate name for SSL inbound inspection. Ensure that only one of the following is specified: `ssl_forward_proxy`, `ssl_inbound_inspection`",
						Optional:    true,
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *decryptionRuleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *decryptionRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state decryptionRuleRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_decryption_rule",
		"terraform_provider_function": "Create",
		"position":                    state.Position.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := dvnOhnM.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.CreateInput{}

	input.Position = state.Position.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &tephihM.Config{}

	input.Request.Action = state.Action.ValueString()

	resp.Diagnostics.Append(state.Categories.ElementsAs(ctx, &input.Request.Categories, false)...)
	//if len(state.Categories) != 0 {
	//    input.Request.Categories = make([]string, 0, len(state.Categories))
	//    for _, var0 := range state.Categories {
	//        input.Request.Categories = append(input.Request.Categories, var0.ValueString())
	//    }
	//}

	input.Request.Description = state.Description.ValueStringPointer()

	resp.Diagnostics.Append(state.DestinationHips.ElementsAs(ctx, &input.Request.DestinationHips, false)...)
	//if len(state.DestinationHips) != 0 {
	//    input.Request.DestinationHips = make([]string, 0, len(state.DestinationHips))
	//    for _, var1 := range state.DestinationHips {
	//        input.Request.DestinationHips = append(input.Request.DestinationHips, var1.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Destinations.ElementsAs(ctx, &input.Request.Destinations, false)...)
	//if len(state.Destinations) != 0 {
	//    input.Request.Destinations = make([]string, 0, len(state.Destinations))
	//    for _, var2 := range state.Destinations {
	//        input.Request.Destinations = append(input.Request.Destinations, var2.ValueString())
	//    }
	//}

	input.Request.Disabled = state.Disabled.ValueBoolPointer()

	resp.Diagnostics.Append(state.Froms.ElementsAs(ctx, &input.Request.Froms, false)...)
	//if len(state.Froms) != 0 {
	//    input.Request.Froms = make([]string, 0, len(state.Froms))
	//    for _, var3 := range state.Froms {
	//        input.Request.Froms = append(input.Request.Froms, var3.ValueString())
	//    }
	//}

	input.Request.LogFail = state.LogFail.ValueBoolPointer()

	input.Request.LogSetting = state.LogSetting.ValueStringPointer()

	input.Request.LogSuccess = state.LogSuccess.ValueBoolPointer()

	input.Request.Name = state.Name.ValueString()

	input.Request.NegateDestination = state.NegateDestination.ValueBoolPointer()

	input.Request.NegateSource = state.NegateSource.ValueBoolPointer()

	input.Request.Profile = state.Profile.ValueStringPointer()

	resp.Diagnostics.Append(state.Services.ElementsAs(ctx, &input.Request.Services, false)...)
	//if len(state.Services) != 0 {
	//    input.Request.Services = make([]string, 0, len(state.Services))
	//    for _, var4 := range state.Services {
	//        input.Request.Services = append(input.Request.Services, var4.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.SourceHips.ElementsAs(ctx, &input.Request.SourceHips, false)...)
	//if len(state.SourceHips) != 0 {
	//    input.Request.SourceHips = make([]string, 0, len(state.SourceHips))
	//    for _, var5 := range state.SourceHips {
	//        input.Request.SourceHips = append(input.Request.SourceHips, var5.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.SourceUsers.ElementsAs(ctx, &input.Request.SourceUsers, false)...)
	//if len(state.SourceUsers) != 0 {
	//    input.Request.SourceUsers = make([]string, 0, len(state.SourceUsers))
	//    for _, var6 := range state.SourceUsers {
	//        input.Request.SourceUsers = append(input.Request.SourceUsers, var6.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Sources.ElementsAs(ctx, &input.Request.Sources, false)...)
	//if len(state.Sources) != 0 {
	//    input.Request.Sources = make([]string, 0, len(state.Sources))
	//    for _, var7 := range state.Sources {
	//        input.Request.Sources = append(input.Request.Sources, var7.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Tags.ElementsAs(ctx, &input.Request.Tags, false)...)
	//if len(state.Tags) != 0 {
	//    input.Request.Tags = make([]string, 0, len(state.Tags))
	//    for _, var8 := range state.Tags {
	//        input.Request.Tags = append(input.Request.Tags, var8.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Tos.ElementsAs(ctx, &input.Request.Tos, false)...)
	//if len(state.Tos) != 0 {
	//    input.Request.Tos = make([]string, 0, len(state.Tos))
	//    for _, var9 := range state.Tos {
	//        input.Request.Tos = append(input.Request.Tos, var9.ValueString())
	//    }
	//}

	if state.Type != nil {
		input.Request.Type = &tephihM.TypeObject{}

		if !state.Type.SslForwardProxy.IsNull() && state.Type.SslForwardProxy.ValueBool() {
			input.Request.Type.SslForwardProxy = map[string]interface{}{}
		}

		input.Request.Type.SslInboundInspection = state.Type.SslInboundInspection.ValueStringPointer()
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Action = types.StringValue(ans.Action)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var10
	resp.Diagnostics.Append(var11.Errors()...)

	state.Description = types.StringPointerValue(ans.Description)

	var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.DestinationHips)
	state.DestinationHips = var12
	resp.Diagnostics.Append(var13.Errors()...)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var14
	resp.Diagnostics.Append(var15.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var16
	resp.Diagnostics.Append(var17.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.LogFail = types.BoolPointerValue(ans.LogFail)

	state.LogSetting = types.StringPointerValue(ans.LogSetting)

	state.LogSuccess = types.BoolPointerValue(ans.LogSuccess)

	state.Name = types.StringValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	state.Profile = types.StringPointerValue(ans.Profile)

	var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Services)
	state.Services = var18
	resp.Diagnostics.Append(var19.Errors()...)

	var20, var21 := types.ListValueFrom(ctx, types.StringType, ans.SourceHips)
	state.SourceHips = var20
	resp.Diagnostics.Append(var21.Errors()...)

	var22, var23 := types.ListValueFrom(ctx, types.StringType, ans.SourceUsers)
	state.SourceUsers = var22
	resp.Diagnostics.Append(var23.Errors()...)

	var24, var25 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var24
	resp.Diagnostics.Append(var25.Errors()...)

	var26, var27 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var26
	resp.Diagnostics.Append(var27.Errors()...)

	var28, var29 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var28
	resp.Diagnostics.Append(var29.Errors()...)

	if ans.Type == nil {
		state.Type = nil
	} else {
		state.Type = &decryptionRuleRsModel_tephihM_TypeObject{}

		if ans.Type.SslForwardProxy != nil {
			state.Type.SslForwardProxy = types.BoolValue(true)
		} else {
			state.Type.SslForwardProxy = types.BoolPointerValue(nil)
		}
		//state.Type.SslForwardProxy = types.BoolValue(ans.Type.SslForwardProxy != nil)

		state.Type.SslInboundInspection = types.StringPointerValue(ans.Type.SslInboundInspection)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *decryptionRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state decryptionRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_decryption_rule",
		"locMap":                      map[string]int{"device": 3, "folder": 1, "id": 4, "position": 0, "snippet": 2},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := dvnOhnM.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.ReadInput{}

	input.Id = tokens[4]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Position = types.StringNull()
	} else {
		state.Position = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[2])
	}

	if tokens[3] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[3])
	}
	state.Tfid = savestate.Tfid

	state.Action = types.StringValue(ans.Action)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Description = types.StringPointerValue(ans.Description)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.DestinationHips)
	state.DestinationHips = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var6
	resp.Diagnostics.Append(var7.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.LogFail = types.BoolPointerValue(ans.LogFail)

	state.LogSetting = types.StringPointerValue(ans.LogSetting)

	state.LogSuccess = types.BoolPointerValue(ans.LogSuccess)

	state.Name = types.StringValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	state.Profile = types.StringPointerValue(ans.Profile)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Services)
	state.Services = var8
	resp.Diagnostics.Append(var9.Errors()...)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.SourceHips)
	state.SourceHips = var10
	resp.Diagnostics.Append(var11.Errors()...)

	var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.SourceUsers)
	state.SourceUsers = var12
	resp.Diagnostics.Append(var13.Errors()...)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var14
	resp.Diagnostics.Append(var15.Errors()...)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var16
	resp.Diagnostics.Append(var17.Errors()...)

	var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var18
	resp.Diagnostics.Append(var19.Errors()...)

	if ans.Type == nil {
		state.Type = nil
	} else {
		state.Type = &decryptionRuleRsModel_tephihM_TypeObject{}

		if ans.Type.SslForwardProxy != nil {
			state.Type.SslForwardProxy = types.BoolValue(true)
		} else {
			state.Type.SslForwardProxy = types.BoolPointerValue(nil)
		}
		//state.Type.SslForwardProxy = types.BoolValue(ans.Type.SslForwardProxy != nil)

		state.Type.SslInboundInspection = types.StringPointerValue(ans.Type.SslInboundInspection)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *decryptionRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state decryptionRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_decryption_rule",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := dvnOhnM.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.UpdateInput{}

	if tokens[4] != "" {
		input.Id = tokens[4]
	}
	input.Request = &tephihM.Config{}

	input.Request.Action = plan.Action.ValueString()

	resp.Diagnostics.Append(plan.Categories.ElementsAs(ctx, &input.Request.Categories, false)...)
	//if len(plan.Categories) != 0 {
	//    input.Request.Categories = make([]string, 0, len(plan.Categories))
	//    for _, var0 := range plan.Categories {
	//        input.Request.Categories = append(input.Request.Categories, var0.ValueString())
	//    }
	//}

	input.Request.Description = plan.Description.ValueStringPointer()

	resp.Diagnostics.Append(plan.DestinationHips.ElementsAs(ctx, &input.Request.DestinationHips, false)...)
	//if len(plan.DestinationHips) != 0 {
	//    input.Request.DestinationHips = make([]string, 0, len(plan.DestinationHips))
	//    for _, var1 := range plan.DestinationHips {
	//        input.Request.DestinationHips = append(input.Request.DestinationHips, var1.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Destinations.ElementsAs(ctx, &input.Request.Destinations, false)...)
	//if len(plan.Destinations) != 0 {
	//    input.Request.Destinations = make([]string, 0, len(plan.Destinations))
	//    for _, var2 := range plan.Destinations {
	//        input.Request.Destinations = append(input.Request.Destinations, var2.ValueString())
	//    }
	//}

	input.Request.Disabled = plan.Disabled.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Froms.ElementsAs(ctx, &input.Request.Froms, false)...)
	//if len(plan.Froms) != 0 {
	//    input.Request.Froms = make([]string, 0, len(plan.Froms))
	//    for _, var3 := range plan.Froms {
	//        input.Request.Froms = append(input.Request.Froms, var3.ValueString())
	//    }
	//}

	input.Request.LogFail = plan.LogFail.ValueBoolPointer()

	input.Request.LogSetting = plan.LogSetting.ValueStringPointer()

	input.Request.LogSuccess = plan.LogSuccess.ValueBoolPointer()

	input.Request.Name = plan.Name.ValueString()

	input.Request.NegateDestination = plan.NegateDestination.ValueBoolPointer()

	input.Request.NegateSource = plan.NegateSource.ValueBoolPointer()

	input.Request.Profile = plan.Profile.ValueStringPointer()

	resp.Diagnostics.Append(plan.Services.ElementsAs(ctx, &input.Request.Services, false)...)
	//if len(plan.Services) != 0 {
	//    input.Request.Services = make([]string, 0, len(plan.Services))
	//    for _, var4 := range plan.Services {
	//        input.Request.Services = append(input.Request.Services, var4.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.SourceHips.ElementsAs(ctx, &input.Request.SourceHips, false)...)
	//if len(plan.SourceHips) != 0 {
	//    input.Request.SourceHips = make([]string, 0, len(plan.SourceHips))
	//    for _, var5 := range plan.SourceHips {
	//        input.Request.SourceHips = append(input.Request.SourceHips, var5.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.SourceUsers.ElementsAs(ctx, &input.Request.SourceUsers, false)...)
	//if len(plan.SourceUsers) != 0 {
	//    input.Request.SourceUsers = make([]string, 0, len(plan.SourceUsers))
	//    for _, var6 := range plan.SourceUsers {
	//        input.Request.SourceUsers = append(input.Request.SourceUsers, var6.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Sources.ElementsAs(ctx, &input.Request.Sources, false)...)
	//if len(plan.Sources) != 0 {
	//    input.Request.Sources = make([]string, 0, len(plan.Sources))
	//    for _, var7 := range plan.Sources {
	//        input.Request.Sources = append(input.Request.Sources, var7.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Tags.ElementsAs(ctx, &input.Request.Tags, false)...)
	//if len(plan.Tags) != 0 {
	//    input.Request.Tags = make([]string, 0, len(plan.Tags))
	//    for _, var8 := range plan.Tags {
	//        input.Request.Tags = append(input.Request.Tags, var8.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Tos.ElementsAs(ctx, &input.Request.Tos, false)...)
	//if len(plan.Tos) != 0 {
	//    input.Request.Tos = make([]string, 0, len(plan.Tos))
	//    for _, var9 := range plan.Tos {
	//        input.Request.Tos = append(input.Request.Tos, var9.ValueString())
	//    }
	//}

	if plan.Type != nil {
		input.Request.Type = &tephihM.TypeObject{}

		if !plan.Type.SslForwardProxy.IsNull() && plan.Type.SslForwardProxy.ValueBool() {
			input.Request.Type.SslForwardProxy = map[string]interface{}{}
		}

		input.Request.Type.SslInboundInspection = plan.Type.SslInboundInspection.ValueStringPointer()
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Action = types.StringValue(ans.Action)

	var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Categories)
	state.Categories = var10
	resp.Diagnostics.Append(var11.Errors()...)

	state.Description = types.StringPointerValue(ans.Description)

	var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.DestinationHips)
	state.DestinationHips = var12
	resp.Diagnostics.Append(var13.Errors()...)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var14
	resp.Diagnostics.Append(var15.Errors()...)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var16
	resp.Diagnostics.Append(var17.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.LogFail = types.BoolPointerValue(ans.LogFail)

	state.LogSetting = types.StringPointerValue(ans.LogSetting)

	state.LogSuccess = types.BoolPointerValue(ans.LogSuccess)

	state.Name = types.StringValue(ans.Name)

	state.NegateDestination = types.BoolPointerValue(ans.NegateDestination)

	state.NegateSource = types.BoolPointerValue(ans.NegateSource)

	state.Profile = types.StringPointerValue(ans.Profile)

	var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Services)
	state.Services = var18
	resp.Diagnostics.Append(var19.Errors()...)

	var20, var21 := types.ListValueFrom(ctx, types.StringType, ans.SourceHips)
	state.SourceHips = var20
	resp.Diagnostics.Append(var21.Errors()...)

	var22, var23 := types.ListValueFrom(ctx, types.StringType, ans.SourceUsers)
	state.SourceUsers = var22
	resp.Diagnostics.Append(var23.Errors()...)

	var24, var25 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var24
	resp.Diagnostics.Append(var25.Errors()...)

	var26, var27 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var26
	resp.Diagnostics.Append(var27.Errors()...)

	var28, var29 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var28
	resp.Diagnostics.Append(var29.Errors()...)

	if ans.Type == nil {
		state.Type = nil
	} else {
		state.Type = &decryptionRuleRsModel_tephihM_TypeObject{}

		if ans.Type.SslForwardProxy != nil {
			state.Type.SslForwardProxy = types.BoolValue(true)
		} else {
			state.Type.SslForwardProxy = types.BoolPointerValue(nil)
		}
		//state.Type.SslForwardProxy = types.BoolValue(ans.Type.SslForwardProxy != nil)

		state.Type.SslInboundInspection = types.StringPointerValue(ans.Type.SslInboundInspection)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *decryptionRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_decryption_rule",
		"locMap":                      map[string]int{"device": 3, "folder": 1, "id": 4, "position": 0, "snippet": 2},
		"tokens":                      tokens,
	})

	svc := dvnOhnM.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.DeleteInput{}

	input.Id = tokens[4]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *decryptionRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
