package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	aUYGFNI "github.com/paloaltonetworks/scm-go/netsec/services/devices"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &deviceListDataSource{}
	_ datasource.DataSourceWithConfigure = &deviceListDataSource{}
)

func NewDeviceListDataSource() datasource.DataSource {
	return &deviceListDataSource{}
}

type deviceListDataSource struct {
	client *scm.Client
}

// deviceListDsModel is the model.
type deviceListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Limit  types.Int64  `tfsdk:"limit"`
	Name   types.String `tfsdk:"name"`
	Offset types.Int64  `tfsdk:"offset"`

	// Output.
	Data []deviceListDsModel_mhJDwSQ_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type deviceListDsModel_mhJDwSQ_Config struct {
	AntiVirusVersion   types.String                                       `tfsdk:"anti_virus_version"`
	AppReleaseDate     types.String                                       `tfsdk:"app_release_date"`
	AppVersion         types.String                                       `tfsdk:"app_version"`
	AvReleaseDate      types.String                                       `tfsdk:"av_release_date"`
	AvailableLicensess []deviceListDsModel_mhJDwSQ_AvailableLicenseObject `tfsdk:"available_licensess"`
	ConnectedSince     types.String                                       `tfsdk:"connected_since"`
	DevCertDetail      types.String                                       `tfsdk:"dev_cert_detail"`
	DevCertExpiryDate  types.String                                       `tfsdk:"dev_cert_expiry_date"`
	Family             types.String                                       `tfsdk:"family"`
	GpClientVerion     types.String                                       `tfsdk:"gp_client_verion"`
	GpDataVersion      types.String                                       `tfsdk:"gp_data_version"`
	HaPeerSerial       types.String                                       `tfsdk:"ha_peer_serial"`
	HaPeerState        types.String                                       `tfsdk:"ha_peer_state"`
	HaState            types.String                                       `tfsdk:"ha_state"`
	Hostname           types.String                                       `tfsdk:"hostname"`
	Id                 types.String                                       `tfsdk:"id"`
	InstalledLicenses  []deviceListDsModel_mhJDwSQ_InstalledLicenseObject `tfsdk:"installed_licenses"`
	IotReleaseDate     types.String                                       `tfsdk:"iot_release_date"`
	IotVersion         types.String                                       `tfsdk:"iot_version"`
	IpAddress          types.String                                       `tfsdk:"ip_address"`
	IpV6Address        types.String                                       `tfsdk:"ip_v6_address"`
	IsConnected        types.Bool                                         `tfsdk:"is_connected"`
	LicenseMatch       types.Bool                                         `tfsdk:"license_match"`
	LogDbVersion       types.String                                       `tfsdk:"log_db_version"`
	MacAddress         types.String                                       `tfsdk:"mac_address"`
	Model              types.String                                       `tfsdk:"model"`
	SoftwareVersion    types.String                                       `tfsdk:"software_version"`
	ThreatReleaseDate  types.String                                       `tfsdk:"threat_release_date"`
	ThreatVersion      types.String                                       `tfsdk:"threat_version"`
	Uptime             types.String                                       `tfsdk:"uptime"`
	UrlDbType          types.String                                       `tfsdk:"url_db_type"`
	UrlDbVer           types.String                                       `tfsdk:"url_db_ver"`
	VmState            types.String                                       `tfsdk:"vm_state"`
	WfReleaseDate      types.String                                       `tfsdk:"wf_release_date"`
	WfVer              types.String                                       `tfsdk:"wf_ver"`
}

type deviceListDsModel_mhJDwSQ_AvailableLicenseObject struct {
	Authcode types.String `tfsdk:"authcode"`
	Expires  types.String `tfsdk:"expires"`
	Feature  types.String `tfsdk:"feature"`
	Issued   types.String `tfsdk:"issued"`
}

type deviceListDsModel_mhJDwSQ_InstalledLicenseObject struct {
	Authcode types.String `tfsdk:"authcode"`
	Expired  types.String `tfsdk:"expired"`
	Expires  types.String `tfsdk:"expires"`
	Feature  types.String `tfsdk:"feature"`
	Issued   types.String `tfsdk:"issued"`
}

// Metadata returns the data source type name.
func (d *deviceListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_device_list"
}

// Schema defines the schema for this listing data source.
func (d *deviceListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"limit":true, "name":true, "offset":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"limit":true, "name":true, "offset":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"anti_virus_version":true, "app_release_date":true, "app_version":true, "av_release_date":true, "available_licensess":true, "connected_since":true, "dev_cert_detail":true, "dev_cert_expiry_date":true, "family":true, "gp_client_verion":true, "gp_data_version":true, "ha_peer_serial":true, "ha_peer_state":true, "ha_state":true, "hostname":true, "id":true, "installed_licenses":true, "iot_release_date":true, "iot_version":true, "ipV6_address":true, "ip_address":true, "is_connected":true, "license_match":true, "log_db_version":true, "mac_address":true, "model":true, "software_version":true, "threat_release_date":true, "threat_version":true, "uptime":true, "url_db_type":true, "url_db_ver":true, "vm_state":true, "wf_release_date":true, "wf_ver":true} forceNew:map[string]bool(nil)
						"anti_virus_version": dsschema.StringAttribute{
							Description: "The AntiVirusVersion param.",
							Computed:    true,
						},
						"app_release_date": dsschema.StringAttribute{
							Description: "The AppReleaseDate param.",
							Computed:    true,
						},
						"app_version": dsschema.StringAttribute{
							Description: "The AppVersion param.",
							Computed:    true,
						},
						"av_release_date": dsschema.StringAttribute{
							Description: "The AvReleaseDate param.",
							Computed:    true,
						},
						"available_licensess": dsschema.ListNestedAttribute{
							Description: "The AvailableLicensess param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"authcode":true, "expires":true, "feature":true, "issued":true} forceNew:map[string]bool(nil)
									"authcode": dsschema.StringAttribute{
										Description: "The Authcode param.",
										Computed:    true,
									},
									"expires": dsschema.StringAttribute{
										Description: "The Expires param.",
										Computed:    true,
									},
									"feature": dsschema.StringAttribute{
										Description: "The Feature param.",
										Computed:    true,
									},
									"issued": dsschema.StringAttribute{
										Description: "The Issued param.",
										Computed:    true,
									},
								},
							},
						},
						"connected_since": dsschema.StringAttribute{
							Description: "The ConnectedSince param.",
							Computed:    true,
						},
						"dev_cert_detail": dsschema.StringAttribute{
							Description: "The DevCertDetail param.",
							Computed:    true,
						},
						"dev_cert_expiry_date": dsschema.StringAttribute{
							Description: "The DevCertExpiryDate param.",
							Computed:    true,
						},
						"family": dsschema.StringAttribute{
							Description: "The Family param.",
							Computed:    true,
						},
						"gp_client_verion": dsschema.StringAttribute{
							Description: "The GpClientVerion param.",
							Computed:    true,
						},
						"gp_data_version": dsschema.StringAttribute{
							Description: "The GpDataVersion param.",
							Computed:    true,
						},
						"ha_peer_serial": dsschema.StringAttribute{
							Description: "The HaPeerSerial param.",
							Computed:    true,
						},
						"ha_peer_state": dsschema.StringAttribute{
							Description: "The HaPeerState param.",
							Computed:    true,
						},
						"ha_state": dsschema.StringAttribute{
							Description: "The HaState param.",
							Computed:    true,
						},
						"hostname": dsschema.StringAttribute{
							Description: "The Hostname param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "The Id param.",
							Computed:    true,
						},
						"installed_licenses": dsschema.ListNestedAttribute{
							Description: "The InstalledLicenses param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"authcode":true, "expired":true, "expires":true, "feature":true, "issued":true} forceNew:map[string]bool(nil)
									"authcode": dsschema.StringAttribute{
										Description: "The Authcode param.",
										Computed:    true,
									},
									"expired": dsschema.StringAttribute{
										Description: "The Expired param.",
										Computed:    true,
									},
									"expires": dsschema.StringAttribute{
										Description: "The Expires param.",
										Computed:    true,
									},
									"feature": dsschema.StringAttribute{
										Description: "The Feature param.",
										Computed:    true,
									},
									"issued": dsschema.StringAttribute{
										Description: "The Issued param.",
										Computed:    true,
									},
								},
							},
						},
						"iot_release_date": dsschema.StringAttribute{
							Description: "The IotReleaseDate param.",
							Computed:    true,
						},
						"iot_version": dsschema.StringAttribute{
							Description: "The IotVersion param.",
							Computed:    true,
						},
						"ip_address": dsschema.StringAttribute{
							Description: "The IpAddress param.",
							Computed:    true,
						},
						"ip_v6_address": dsschema.StringAttribute{
							Description: "The IpV6Address param.",
							Computed:    true,
						},
						"is_connected": dsschema.BoolAttribute{
							Description: "The IsConnected param.",
							Computed:    true,
						},
						"license_match": dsschema.BoolAttribute{
							Description: "The LicenseMatch param.",
							Computed:    true,
						},
						"log_db_version": dsschema.StringAttribute{
							Description: "The LogDbVersion param.",
							Computed:    true,
						},
						"mac_address": dsschema.StringAttribute{
							Description: "The MacAddress param.",
							Computed:    true,
						},
						"model": dsschema.StringAttribute{
							Description: "The Model param.",
							Computed:    true,
						},
						"software_version": dsschema.StringAttribute{
							Description: "The SoftwareVersion param.",
							Computed:    true,
						},
						"threat_release_date": dsschema.StringAttribute{
							Description: "The ThreatReleaseDate param.",
							Computed:    true,
						},
						"threat_version": dsschema.StringAttribute{
							Description: "The ThreatVersion param.",
							Computed:    true,
						},
						"uptime": dsschema.StringAttribute{
							Description: "The Uptime param.",
							Computed:    true,
						},
						"url_db_type": dsschema.StringAttribute{
							Description: "The UrlDbType param.",
							Computed:    true,
						},
						"url_db_ver": dsschema.StringAttribute{
							Description: "The UrlDbVer param.",
							Computed:    true,
						},
						"vm_state": dsschema.StringAttribute{
							Description: "The VmState param.",
							Computed:    true,
						},
						"wf_release_date": dsschema.StringAttribute{
							Description: "The WfReleaseDate param.",
							Computed:    true,
						},
						"wf_ver": dsschema.StringAttribute{
							Description: "The WfVer param.",
							Computed:    true,
						},
					},
				},
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *deviceListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *deviceListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state deviceListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_device_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := aUYGFNI.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := aUYGFNI.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]deviceListDsModel_mhJDwSQ_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := deviceListDsModel_mhJDwSQ_Config{}

			var1.AntiVirusVersion = types.StringPointerValue(var0.AntiVirusVersion)

			var1.AppReleaseDate = types.StringPointerValue(var0.AppReleaseDate)

			var1.AppVersion = types.StringPointerValue(var0.AppVersion)

			var1.AvReleaseDate = types.StringPointerValue(var0.AvReleaseDate)

			if len(var0.AvailableLicensess) == 0 {
				var1.AvailableLicensess = nil
			} else {
				var1.AvailableLicensess = make([]deviceListDsModel_mhJDwSQ_AvailableLicenseObject, 0, len(var0.AvailableLicensess))
				for _, var2 := range var0.AvailableLicensess {
					var3 := deviceListDsModel_mhJDwSQ_AvailableLicenseObject{}

					var3.Authcode = types.StringPointerValue(var2.Authcode)

					var3.Expires = types.StringPointerValue(var2.Expires)

					var3.Feature = types.StringPointerValue(var2.Feature)

					var3.Issued = types.StringPointerValue(var2.Issued)
					var1.AvailableLicensess = append(var1.AvailableLicensess, var3)
				}
			}

			var1.ConnectedSince = types.StringPointerValue(var0.ConnectedSince)

			var1.DevCertDetail = types.StringPointerValue(var0.DevCertDetail)

			var1.DevCertExpiryDate = types.StringPointerValue(var0.DevCertExpiryDate)

			var1.Family = types.StringPointerValue(var0.Family)

			var1.GpClientVerion = types.StringPointerValue(var0.GpClientVerion)

			var1.GpDataVersion = types.StringPointerValue(var0.GpDataVersion)

			var1.HaPeerSerial = types.StringPointerValue(var0.HaPeerSerial)

			var1.HaPeerState = types.StringPointerValue(var0.HaPeerState)

			var1.HaState = types.StringPointerValue(var0.HaState)

			var1.Hostname = types.StringPointerValue(var0.Hostname)

			var1.Id = types.StringPointerValue(var0.Id)

			if len(var0.InstalledLicenses) == 0 {
				var1.InstalledLicenses = nil
			} else {
				var1.InstalledLicenses = make([]deviceListDsModel_mhJDwSQ_InstalledLicenseObject, 0, len(var0.InstalledLicenses))
				for _, var4 := range var0.InstalledLicenses {
					var5 := deviceListDsModel_mhJDwSQ_InstalledLicenseObject{}

					var5.Authcode = types.StringPointerValue(var4.Authcode)

					var5.Expired = types.StringPointerValue(var4.Expired)

					var5.Expires = types.StringPointerValue(var4.Expires)

					var5.Feature = types.StringPointerValue(var4.Feature)

					var5.Issued = types.StringPointerValue(var4.Issued)
					var1.InstalledLicenses = append(var1.InstalledLicenses, var5)
				}
			}

			var1.IotReleaseDate = types.StringPointerValue(var0.IotReleaseDate)

			var1.IotVersion = types.StringPointerValue(var0.IotVersion)

			var1.IpAddress = types.StringPointerValue(var0.IpAddress)

			var1.IpV6Address = types.StringPointerValue(var0.IpV6Address)

			var1.IsConnected = types.BoolPointerValue(var0.IsConnected)

			var1.LicenseMatch = types.BoolPointerValue(var0.LicenseMatch)

			var1.LogDbVersion = types.StringPointerValue(var0.LogDbVersion)

			var1.MacAddress = types.StringPointerValue(var0.MacAddress)

			var1.Model = types.StringPointerValue(var0.Model)

			var1.SoftwareVersion = types.StringPointerValue(var0.SoftwareVersion)

			var1.ThreatReleaseDate = types.StringPointerValue(var0.ThreatReleaseDate)

			var1.ThreatVersion = types.StringPointerValue(var0.ThreatVersion)

			var1.Uptime = types.StringPointerValue(var0.Uptime)

			var1.UrlDbType = types.StringPointerValue(var0.UrlDbType)

			var1.UrlDbVer = types.StringPointerValue(var0.UrlDbVer)

			var1.VmState = types.StringPointerValue(var0.VmState)

			var1.WfReleaseDate = types.StringPointerValue(var0.WfReleaseDate)

			var1.WfVer = types.StringPointerValue(var0.WfVer)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &deviceDataSource{}
	_ datasource.DataSourceWithConfigure = &deviceDataSource{}
)

func NewDeviceDataSource() datasource.DataSource {
	return &deviceDataSource{}
}

type deviceDataSource struct {
	client *scm.Client
}

// deviceDsModel is the model.
type deviceDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Serial types.String `tfsdk:"serial"`

	// Output.
	AntiVirusVersion   types.String                                   `tfsdk:"anti_virus_version"`
	AppReleaseDate     types.String                                   `tfsdk:"app_release_date"`
	AppVersion         types.String                                   `tfsdk:"app_version"`
	AvReleaseDate      types.String                                   `tfsdk:"av_release_date"`
	AvailableLicensess []deviceDsModel_mhJDwSQ_AvailableLicenseObject `tfsdk:"available_licensess"`
	ConnectedSince     types.String                                   `tfsdk:"connected_since"`
	DevCertDetail      types.String                                   `tfsdk:"dev_cert_detail"`
	DevCertExpiryDate  types.String                                   `tfsdk:"dev_cert_expiry_date"`
	Family             types.String                                   `tfsdk:"family"`
	GpClientVerion     types.String                                   `tfsdk:"gp_client_verion"`
	GpDataVersion      types.String                                   `tfsdk:"gp_data_version"`
	HaPeerSerial       types.String                                   `tfsdk:"ha_peer_serial"`
	HaPeerState        types.String                                   `tfsdk:"ha_peer_state"`
	HaState            types.String                                   `tfsdk:"ha_state"`
	Hostname           types.String                                   `tfsdk:"hostname"`
	Id                 types.String                                   `tfsdk:"id"`
	InstalledLicenses  []deviceDsModel_mhJDwSQ_InstalledLicenseObject `tfsdk:"installed_licenses"`
	IotReleaseDate     types.String                                   `tfsdk:"iot_release_date"`
	IotVersion         types.String                                   `tfsdk:"iot_version"`
	IpAddress          types.String                                   `tfsdk:"ip_address"`
	IpV6Address        types.String                                   `tfsdk:"ip_v6_address"`
	IsConnected        types.Bool                                     `tfsdk:"is_connected"`
	LicenseMatch       types.Bool                                     `tfsdk:"license_match"`
	LogDbVersion       types.String                                   `tfsdk:"log_db_version"`
	MacAddress         types.String                                   `tfsdk:"mac_address"`
	Model              types.String                                   `tfsdk:"model"`
	SoftwareVersion    types.String                                   `tfsdk:"software_version"`
	ThreatReleaseDate  types.String                                   `tfsdk:"threat_release_date"`
	ThreatVersion      types.String                                   `tfsdk:"threat_version"`
	Uptime             types.String                                   `tfsdk:"uptime"`
	UrlDbType          types.String                                   `tfsdk:"url_db_type"`
	UrlDbVer           types.String                                   `tfsdk:"url_db_ver"`
	VmState            types.String                                   `tfsdk:"vm_state"`
	WfReleaseDate      types.String                                   `tfsdk:"wf_release_date"`
	WfVer              types.String                                   `tfsdk:"wf_ver"`
}

type deviceDsModel_mhJDwSQ_AvailableLicenseObject struct {
	Authcode types.String `tfsdk:"authcode"`
	Expires  types.String `tfsdk:"expires"`
	Feature  types.String `tfsdk:"feature"`
	Issued   types.String `tfsdk:"issued"`
}

type deviceDsModel_mhJDwSQ_InstalledLicenseObject struct {
	Authcode types.String `tfsdk:"authcode"`
	Expired  types.String `tfsdk:"expired"`
	Expires  types.String `tfsdk:"expires"`
	Feature  types.String `tfsdk:"feature"`
	Issued   types.String `tfsdk:"issued"`
}

// Metadata returns the data source type name.
func (d *deviceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_device"
}

// Schema defines the schema for this data source.
func (d *deviceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"serial":true} outputs:map[string]bool{"anti_virus_version":true, "app_release_date":true, "app_version":true, "av_release_date":true, "available_licensess":true, "connected_since":true, "dev_cert_detail":true, "dev_cert_expiry_date":true, "family":true, "gp_client_verion":true, "gp_data_version":true, "ha_peer_serial":true, "ha_peer_state":true, "ha_state":true, "hostname":true, "id":true, "installed_licenses":true, "iot_release_date":true, "iot_version":true, "ipV6_address":true, "ip_address":true, "is_connected":true, "license_match":true, "log_db_version":true, "mac_address":true, "model":true, "software_version":true, "tfid":true, "threat_release_date":true, "threat_version":true, "uptime":true, "url_db_type":true, "url_db_ver":true, "vm_state":true, "wf_release_date":true, "wf_ver":true} forceNew:map[string]bool{"serial":true}
			"anti_virus_version": dsschema.StringAttribute{
				Description: "The AntiVirusVersion param.",
				Computed:    true,
			},
			"app_release_date": dsschema.StringAttribute{
				Description: "The AppReleaseDate param.",
				Computed:    true,
			},
			"app_version": dsschema.StringAttribute{
				Description: "The AppVersion param.",
				Computed:    true,
			},
			"av_release_date": dsschema.StringAttribute{
				Description: "The AvReleaseDate param.",
				Computed:    true,
			},
			"available_licensess": dsschema.ListNestedAttribute{
				Description: "The AvailableLicensess param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"authcode":true, "expires":true, "feature":true, "issued":true} forceNew:map[string]bool(nil)
						"authcode": dsschema.StringAttribute{
							Description: "The Authcode param.",
							Computed:    true,
						},
						"expires": dsschema.StringAttribute{
							Description: "The Expires param.",
							Computed:    true,
						},
						"feature": dsschema.StringAttribute{
							Description: "The Feature param.",
							Computed:    true,
						},
						"issued": dsschema.StringAttribute{
							Description: "The Issued param.",
							Computed:    true,
						},
					},
				},
			},
			"connected_since": dsschema.StringAttribute{
				Description: "The ConnectedSince param.",
				Computed:    true,
			},
			"dev_cert_detail": dsschema.StringAttribute{
				Description: "The DevCertDetail param.",
				Computed:    true,
			},
			"dev_cert_expiry_date": dsschema.StringAttribute{
				Description: "The DevCertExpiryDate param.",
				Computed:    true,
			},
			"family": dsschema.StringAttribute{
				Description: "The Family param.",
				Computed:    true,
			},
			"gp_client_verion": dsschema.StringAttribute{
				Description: "The GpClientVerion param.",
				Computed:    true,
			},
			"gp_data_version": dsschema.StringAttribute{
				Description: "The GpDataVersion param.",
				Computed:    true,
			},
			"ha_peer_serial": dsschema.StringAttribute{
				Description: "The HaPeerSerial param.",
				Computed:    true,
			},
			"ha_peer_state": dsschema.StringAttribute{
				Description: "The HaPeerState param.",
				Computed:    true,
			},
			"ha_state": dsschema.StringAttribute{
				Description: "The HaState param.",
				Computed:    true,
			},
			"hostname": dsschema.StringAttribute{
				Description: "The Hostname param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Computed:    true,
			},
			"installed_licenses": dsschema.ListNestedAttribute{
				Description: "The InstalledLicenses param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"authcode":true, "expired":true, "expires":true, "feature":true, "issued":true} forceNew:map[string]bool(nil)
						"authcode": dsschema.StringAttribute{
							Description: "The Authcode param.",
							Computed:    true,
						},
						"expired": dsschema.StringAttribute{
							Description: "The Expired param.",
							Computed:    true,
						},
						"expires": dsschema.StringAttribute{
							Description: "The Expires param.",
							Computed:    true,
						},
						"feature": dsschema.StringAttribute{
							Description: "The Feature param.",
							Computed:    true,
						},
						"issued": dsschema.StringAttribute{
							Description: "The Issued param.",
							Computed:    true,
						},
					},
				},
			},
			"iot_release_date": dsschema.StringAttribute{
				Description: "The IotReleaseDate param.",
				Computed:    true,
			},
			"iot_version": dsschema.StringAttribute{
				Description: "The IotVersion param.",
				Computed:    true,
			},
			"ip_address": dsschema.StringAttribute{
				Description: "The IpAddress param.",
				Computed:    true,
			},
			"ip_v6_address": dsschema.StringAttribute{
				Description: "The IpV6Address param.",
				Computed:    true,
			},
			"is_connected": dsschema.BoolAttribute{
				Description: "The IsConnected param.",
				Computed:    true,
			},
			"license_match": dsschema.BoolAttribute{
				Description: "The LicenseMatch param.",
				Computed:    true,
			},
			"log_db_version": dsschema.StringAttribute{
				Description: "The LogDbVersion param.",
				Computed:    true,
			},
			"mac_address": dsschema.StringAttribute{
				Description: "The MacAddress param.",
				Computed:    true,
			},
			"model": dsschema.StringAttribute{
				Description: "The Model param.",
				Computed:    true,
			},
			"serial": dsschema.StringAttribute{
				Description: "The Serial param.",
				Required:    true,
			},
			"software_version": dsschema.StringAttribute{
				Description: "The SoftwareVersion param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"threat_release_date": dsschema.StringAttribute{
				Description: "The ThreatReleaseDate param.",
				Computed:    true,
			},
			"threat_version": dsschema.StringAttribute{
				Description: "The ThreatVersion param.",
				Computed:    true,
			},
			"uptime": dsschema.StringAttribute{
				Description: "The Uptime param.",
				Computed:    true,
			},
			"url_db_type": dsschema.StringAttribute{
				Description: "The UrlDbType param.",
				Computed:    true,
			},
			"url_db_ver": dsschema.StringAttribute{
				Description: "The UrlDbVer param.",
				Computed:    true,
			},
			"vm_state": dsschema.StringAttribute{
				Description: "The VmState param.",
				Computed:    true,
			},
			"wf_release_date": dsschema.StringAttribute{
				Description: "The WfReleaseDate param.",
				Computed:    true,
			},
			"wf_ver": dsschema.StringAttribute{
				Description: "The WfVer param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *deviceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *deviceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state deviceDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_device",
		"terraform_provider_function": "Read",
		"serial":                      state.Serial.ValueString(),
	})

	// Prepare to run the command.
	svc := aUYGFNI.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := aUYGFNI.ReadInput{}

	input.Serial = state.Serial.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Serial)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AntiVirusVersion = types.StringPointerValue(ans.AntiVirusVersion)

	state.AppReleaseDate = types.StringPointerValue(ans.AppReleaseDate)

	state.AppVersion = types.StringPointerValue(ans.AppVersion)

	state.AvReleaseDate = types.StringPointerValue(ans.AvReleaseDate)

	if len(ans.AvailableLicensess) == 0 {
		state.AvailableLicensess = nil
	} else {
		state.AvailableLicensess = make([]deviceDsModel_mhJDwSQ_AvailableLicenseObject, 0, len(ans.AvailableLicensess))
		for _, var0 := range ans.AvailableLicensess {
			var1 := deviceDsModel_mhJDwSQ_AvailableLicenseObject{}

			var1.Authcode = types.StringPointerValue(var0.Authcode)

			var1.Expires = types.StringPointerValue(var0.Expires)

			var1.Feature = types.StringPointerValue(var0.Feature)

			var1.Issued = types.StringPointerValue(var0.Issued)
			state.AvailableLicensess = append(state.AvailableLicensess, var1)
		}
	}

	state.ConnectedSince = types.StringPointerValue(ans.ConnectedSince)

	state.DevCertDetail = types.StringPointerValue(ans.DevCertDetail)

	state.DevCertExpiryDate = types.StringPointerValue(ans.DevCertExpiryDate)

	state.Family = types.StringPointerValue(ans.Family)

	state.GpClientVerion = types.StringPointerValue(ans.GpClientVerion)

	state.GpDataVersion = types.StringPointerValue(ans.GpDataVersion)

	state.HaPeerSerial = types.StringPointerValue(ans.HaPeerSerial)

	state.HaPeerState = types.StringPointerValue(ans.HaPeerState)

	state.HaState = types.StringPointerValue(ans.HaState)

	state.Hostname = types.StringPointerValue(ans.Hostname)

	state.Id = types.StringPointerValue(ans.Id)

	if len(ans.InstalledLicenses) == 0 {
		state.InstalledLicenses = nil
	} else {
		state.InstalledLicenses = make([]deviceDsModel_mhJDwSQ_InstalledLicenseObject, 0, len(ans.InstalledLicenses))
		for _, var2 := range ans.InstalledLicenses {
			var3 := deviceDsModel_mhJDwSQ_InstalledLicenseObject{}

			var3.Authcode = types.StringPointerValue(var2.Authcode)

			var3.Expired = types.StringPointerValue(var2.Expired)

			var3.Expires = types.StringPointerValue(var2.Expires)

			var3.Feature = types.StringPointerValue(var2.Feature)

			var3.Issued = types.StringPointerValue(var2.Issued)
			state.InstalledLicenses = append(state.InstalledLicenses, var3)
		}
	}

	state.IotReleaseDate = types.StringPointerValue(ans.IotReleaseDate)

	state.IotVersion = types.StringPointerValue(ans.IotVersion)

	state.IpAddress = types.StringPointerValue(ans.IpAddress)

	state.IpV6Address = types.StringPointerValue(ans.IpV6Address)

	state.IsConnected = types.BoolPointerValue(ans.IsConnected)

	state.LicenseMatch = types.BoolPointerValue(ans.LicenseMatch)

	state.LogDbVersion = types.StringPointerValue(ans.LogDbVersion)

	state.MacAddress = types.StringPointerValue(ans.MacAddress)

	state.Model = types.StringPointerValue(ans.Model)

	state.SoftwareVersion = types.StringPointerValue(ans.SoftwareVersion)

	state.ThreatReleaseDate = types.StringPointerValue(ans.ThreatReleaseDate)

	state.ThreatVersion = types.StringPointerValue(ans.ThreatVersion)

	state.Uptime = types.StringPointerValue(ans.Uptime)

	state.UrlDbType = types.StringPointerValue(ans.UrlDbType)

	state.UrlDbVer = types.StringPointerValue(ans.UrlDbVer)

	state.VmState = types.StringPointerValue(ans.VmState)

	state.WfReleaseDate = types.StringPointerValue(ans.WfReleaseDate)

	state.WfVer = types.StringPointerValue(ans.WfVer)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
