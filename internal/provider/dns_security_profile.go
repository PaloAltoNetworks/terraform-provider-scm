package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	irQawLY "github.com/paloaltonetworks/scm-go/netsec/schemas/dns/security/profiles"
	jOaWaMY "github.com/paloaltonetworks/scm-go/netsec/services/dnssecurityprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &dnsSecurityProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &dnsSecurityProfileListDataSource{}
)

func NewDnsSecurityProfileListDataSource() datasource.DataSource {
	return &dnsSecurityProfileListDataSource{}
}

type dnsSecurityProfileListDataSource struct {
	client *scm.Client
}

// dnsSecurityProfileListDsModel is the model.
type dnsSecurityProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []dnsSecurityProfileListDsModel_irQawLY_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type dnsSecurityProfileListDsModel_irQawLY_Config struct {
	BotnetDomains *dnsSecurityProfileListDsModel_irQawLY_BotnetDomainsObject `tfsdk:"botnet_domains"`
	Description   types.String                                               `tfsdk:"description"`
	Id            types.String                                               `tfsdk:"id"`
	Name          types.String                                               `tfsdk:"name"`
}

type dnsSecurityProfileListDsModel_irQawLY_BotnetDomainsObject struct {
	DnsSecurityCategories []dnsSecurityProfileListDsModel_irQawLY_DnsSecurityCategoryObject `tfsdk:"dns_security_categories"`
	Lists                 []dnsSecurityProfileListDsModel_irQawLY_ListObject                `tfsdk:"lists"`
	Sinkhole              *dnsSecurityProfileListDsModel_irQawLY_SinkholeObject             `tfsdk:"sinkhole"`
	Whitelists            []dnsSecurityProfileListDsModel_irQawLY_WhitelistObject           `tfsdk:"whitelists"`
}

type dnsSecurityProfileListDsModel_irQawLY_DnsSecurityCategoryObject struct {
	Action        types.String `tfsdk:"action"`
	LogLevel      types.String `tfsdk:"log_level"`
	Name          types.String `tfsdk:"name"`
	PacketCapture types.String `tfsdk:"packet_capture"`
}

type dnsSecurityProfileListDsModel_irQawLY_ListObject struct {
	Action        *dnsSecurityProfileListDsModel_irQawLY_ActionObject `tfsdk:"action"`
	Name          types.String                                        `tfsdk:"name"`
	PacketCapture types.String                                        `tfsdk:"packet_capture"`
}

type dnsSecurityProfileListDsModel_irQawLY_ActionObject struct {
	Alert    types.Bool `tfsdk:"alert"`
	Allow    types.Bool `tfsdk:"allow"`
	Block    types.Bool `tfsdk:"block"`
	Sinkhole types.Bool `tfsdk:"sinkhole"`
}

type dnsSecurityProfileListDsModel_irQawLY_SinkholeObject struct {
	Ipv4Address types.String `tfsdk:"ipv4_address"`
	Ipv6Address types.String `tfsdk:"ipv6_address"`
}

type dnsSecurityProfileListDsModel_irQawLY_WhitelistObject struct {
	Description types.String `tfsdk:"description"`
	Name        types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (d *dnsSecurityProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dns_security_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *dnsSecurityProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"botnet_domains":true, "description":true, "id":true, "name":true} forceNew:map[string]bool(nil)
						"botnet_domains": dsschema.SingleNestedAttribute{
							Description: "The BotnetDomains param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"dns_security_categories":true, "lists":true, "sinkhole":true, "whitelist":true} forceNew:map[string]bool(nil)
								"dns_security_categories": dsschema.ListNestedAttribute{
									Description: "The DnsSecurityCategories param.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "log_level":true, "name":true, "packet_capture":true} forceNew:map[string]bool(nil)
											"action": dsschema.StringAttribute{
												Description: "The Action param. String must be one of these: `\"default\"`, `\"allow\"`, `\"block\"`, `\"sinkhole\"`. Default: `\"default\"`.",
												Computed:    true,
											},
											"log_level": dsschema.StringAttribute{
												Description: "The LogLevel param. String must be one of these: `\"default\"`, `\"none\"`, `\"low\"`, `\"informational\"`, `\"medium\"`, `\"high\"`, `\"critical\"`. Default: `\"default\"`.",
												Computed:    true,
											},
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
											"packet_capture": dsschema.StringAttribute{
												Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
												Computed:    true,
											},
										},
									},
								},
								"lists": dsschema.ListNestedAttribute{
									Description: "The Lists param.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "name":true, "packet_capture":true} forceNew:map[string]bool(nil)
											"action": dsschema.SingleNestedAttribute{
												Description: "The Action param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "sinkhole":true} forceNew:map[string]bool(nil)
													"alert": dsschema.BoolAttribute{
														Description: "The Alert param. Default: `false`.",
														Computed:    true,
													},
													"allow": dsschema.BoolAttribute{
														Description: "The Allow param. Default: `false`.",
														Computed:    true,
													},
													"block": dsschema.BoolAttribute{
														Description: "The Block param. Default: `false`.",
														Computed:    true,
													},
													"sinkhole": dsschema.BoolAttribute{
														Description: "The Sinkhole param. Default: `false`.",
														Computed:    true,
													},
												},
											},
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
											"packet_capture": dsschema.StringAttribute{
												Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
												Computed:    true,
											},
										},
									},
								},
								"sinkhole": dsschema.SingleNestedAttribute{
									Description: "The Sinkhole param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"ipv4_address":true, "ipv6_address":true} forceNew:map[string]bool(nil)
										"ipv4_address": dsschema.StringAttribute{
											Description: "The Ipv4Address param. String must be one of these: `\"127.0.0.1\"`, `\"pan-sinkhole-default-ip\"`.",
											Computed:    true,
										},
										"ipv6_address": dsschema.StringAttribute{
											Description: "The Ipv6Address param. String must be one of these: `\"::1\"`.",
											Computed:    true,
										},
									},
								},
								"whitelists": dsschema.ListNestedAttribute{
									Description: "The Whitelists param.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "name":true} forceNew:map[string]bool(nil)
											"description": dsschema.StringAttribute{
												Description: "The Description param.",
												Computed:    true,
											},
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
										},
									},
								},
							},
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *dnsSecurityProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *dnsSecurityProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dnsSecurityProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_dns_security_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := jOaWaMY.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := jOaWaMY.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]dnsSecurityProfileListDsModel_irQawLY_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := dnsSecurityProfileListDsModel_irQawLY_Config{}

			if var0.BotnetDomains == nil {
				var1.BotnetDomains = nil
			} else {
				var1.BotnetDomains = &dnsSecurityProfileListDsModel_irQawLY_BotnetDomainsObject{}

				if len(var0.BotnetDomains.DnsSecurityCategories) == 0 {
					var1.BotnetDomains.DnsSecurityCategories = nil
				} else {
					var1.BotnetDomains.DnsSecurityCategories = make([]dnsSecurityProfileListDsModel_irQawLY_DnsSecurityCategoryObject, 0, len(var0.BotnetDomains.DnsSecurityCategories))
					for _, var2 := range var0.BotnetDomains.DnsSecurityCategories {
						var3 := dnsSecurityProfileListDsModel_irQawLY_DnsSecurityCategoryObject{}

						var3.Action = types.StringPointerValue(var2.Action)

						var3.LogLevel = types.StringPointerValue(var2.LogLevel)

						var3.Name = types.StringPointerValue(var2.Name)

						var3.PacketCapture = types.StringPointerValue(var2.PacketCapture)
						var1.BotnetDomains.DnsSecurityCategories = append(var1.BotnetDomains.DnsSecurityCategories, var3)
					}
				}

				if len(var0.BotnetDomains.Lists) == 0 {
					var1.BotnetDomains.Lists = nil
				} else {
					var1.BotnetDomains.Lists = make([]dnsSecurityProfileListDsModel_irQawLY_ListObject, 0, len(var0.BotnetDomains.Lists))
					for _, var4 := range var0.BotnetDomains.Lists {
						var5 := dnsSecurityProfileListDsModel_irQawLY_ListObject{}

						if var4.Action == nil {
							var5.Action = nil
						} else {
							var5.Action = &dnsSecurityProfileListDsModel_irQawLY_ActionObject{}

							var5.Action.Alert = types.BoolValue(var4.Action.Alert != nil)

							var5.Action.Allow = types.BoolValue(var4.Action.Allow != nil)

							var5.Action.Block = types.BoolValue(var4.Action.Block != nil)

							var5.Action.Sinkhole = types.BoolValue(var4.Action.Sinkhole != nil)
						}

						var5.Name = types.StringValue(var4.Name)

						var5.PacketCapture = types.StringPointerValue(var4.PacketCapture)
						var1.BotnetDomains.Lists = append(var1.BotnetDomains.Lists, var5)
					}
				}

				if var0.BotnetDomains.Sinkhole == nil {
					var1.BotnetDomains.Sinkhole = nil
				} else {
					var1.BotnetDomains.Sinkhole = &dnsSecurityProfileListDsModel_irQawLY_SinkholeObject{}

					var1.BotnetDomains.Sinkhole.Ipv4Address = types.StringPointerValue(var0.BotnetDomains.Sinkhole.Ipv4Address)

					var1.BotnetDomains.Sinkhole.Ipv6Address = types.StringPointerValue(var0.BotnetDomains.Sinkhole.Ipv6Address)
				}

				if len(var0.BotnetDomains.Whitelists) == 0 {
					var1.BotnetDomains.Whitelists = nil
				} else {
					var1.BotnetDomains.Whitelists = make([]dnsSecurityProfileListDsModel_irQawLY_WhitelistObject, 0, len(var0.BotnetDomains.Whitelists))
					for _, var6 := range var0.BotnetDomains.Whitelists {
						var7 := dnsSecurityProfileListDsModel_irQawLY_WhitelistObject{}

						var7.Description = types.StringPointerValue(var6.Description)

						var7.Name = types.StringValue(var6.Name)
						var1.BotnetDomains.Whitelists = append(var1.BotnetDomains.Whitelists, var7)
					}
				}
			}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringPointerValue(var0.Name)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &dnsSecurityProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &dnsSecurityProfileDataSource{}
)

func NewDnsSecurityProfileDataSource() datasource.DataSource {
	return &dnsSecurityProfileDataSource{}
}

type dnsSecurityProfileDataSource struct {
	client *scm.Client
}

// dnsSecurityProfileDsModel is the model.
type dnsSecurityProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	BotnetDomains *dnsSecurityProfileDsModel_irQawLY_BotnetDomainsObject `tfsdk:"botnet_domains"`
	Description   types.String                                           `tfsdk:"description"`
	// omit input: id
	Name types.String `tfsdk:"name"`
}

type dnsSecurityProfileDsModel_irQawLY_BotnetDomainsObject struct {
	DnsSecurityCategories []dnsSecurityProfileDsModel_irQawLY_DnsSecurityCategoryObject `tfsdk:"dns_security_categories"`
	Lists                 []dnsSecurityProfileDsModel_irQawLY_ListObject                `tfsdk:"lists"`
	Sinkhole              *dnsSecurityProfileDsModel_irQawLY_SinkholeObject             `tfsdk:"sinkhole"`
	Whitelists            []dnsSecurityProfileDsModel_irQawLY_WhitelistObject           `tfsdk:"whitelists"`
}

type dnsSecurityProfileDsModel_irQawLY_DnsSecurityCategoryObject struct {
	Action        types.String `tfsdk:"action"`
	LogLevel      types.String `tfsdk:"log_level"`
	Name          types.String `tfsdk:"name"`
	PacketCapture types.String `tfsdk:"packet_capture"`
}

type dnsSecurityProfileDsModel_irQawLY_ListObject struct {
	Action        *dnsSecurityProfileDsModel_irQawLY_ActionObject `tfsdk:"action"`
	Name          types.String                                    `tfsdk:"name"`
	PacketCapture types.String                                    `tfsdk:"packet_capture"`
}

type dnsSecurityProfileDsModel_irQawLY_ActionObject struct {
	Alert    types.Bool `tfsdk:"alert"`
	Allow    types.Bool `tfsdk:"allow"`
	Block    types.Bool `tfsdk:"block"`
	Sinkhole types.Bool `tfsdk:"sinkhole"`
}

type dnsSecurityProfileDsModel_irQawLY_SinkholeObject struct {
	Ipv4Address types.String `tfsdk:"ipv4_address"`
	Ipv6Address types.String `tfsdk:"ipv6_address"`
}

type dnsSecurityProfileDsModel_irQawLY_WhitelistObject struct {
	Description types.String `tfsdk:"description"`
	Name        types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (d *dnsSecurityProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dns_security_profile"
}

// Schema defines the schema for this data source.
func (d *dnsSecurityProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"botnet_domains":true, "description":true, "id":true, "name":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"botnet_domains": dsschema.SingleNestedAttribute{
				Description: "The BotnetDomains param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"dns_security_categories":true, "lists":true, "sinkhole":true, "whitelist":true} forceNew:map[string]bool(nil)
					"dns_security_categories": dsschema.ListNestedAttribute{
						Description: "The DnsSecurityCategories param.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "log_level":true, "name":true, "packet_capture":true} forceNew:map[string]bool(nil)
								"action": dsschema.StringAttribute{
									Description: "The Action param. String must be one of these: `\"default\"`, `\"allow\"`, `\"block\"`, `\"sinkhole\"`. Default: `\"default\"`.",
									Computed:    true,
								},
								"log_level": dsschema.StringAttribute{
									Description: "The LogLevel param. String must be one of these: `\"default\"`, `\"none\"`, `\"low\"`, `\"informational\"`, `\"medium\"`, `\"high\"`, `\"critical\"`. Default: `\"default\"`.",
									Computed:    true,
								},
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
								"packet_capture": dsschema.StringAttribute{
									Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
									Computed:    true,
								},
							},
						},
					},
					"lists": dsschema.ListNestedAttribute{
						Description: "The Lists param.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "name":true, "packet_capture":true} forceNew:map[string]bool(nil)
								"action": dsschema.SingleNestedAttribute{
									Description: "The Action param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "sinkhole":true} forceNew:map[string]bool(nil)
										"alert": dsschema.BoolAttribute{
											Description: "The Alert param. Default: `false`.",
											Computed:    true,
										},
										"allow": dsschema.BoolAttribute{
											Description: "The Allow param. Default: `false`.",
											Computed:    true,
										},
										"block": dsschema.BoolAttribute{
											Description: "The Block param. Default: `false`.",
											Computed:    true,
										},
										"sinkhole": dsschema.BoolAttribute{
											Description: "The Sinkhole param. Default: `false`.",
											Computed:    true,
										},
									},
								},
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
								"packet_capture": dsschema.StringAttribute{
									Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
									Computed:    true,
								},
							},
						},
					},
					"sinkhole": dsschema.SingleNestedAttribute{
						Description: "The Sinkhole param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"ipv4_address":true, "ipv6_address":true} forceNew:map[string]bool(nil)
							"ipv4_address": dsschema.StringAttribute{
								Description: "The Ipv4Address param. String must be one of these: `\"127.0.0.1\"`, `\"pan-sinkhole-default-ip\"`.",
								Computed:    true,
							},
							"ipv6_address": dsschema.StringAttribute{
								Description: "The Ipv6Address param. String must be one of these: `\"::1\"`.",
								Computed:    true,
							},
						},
					},
					"whitelists": dsschema.ListNestedAttribute{
						Description: "The Whitelists param.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "name":true} forceNew:map[string]bool(nil)
								"description": dsschema.StringAttribute{
									Description: "The Description param.",
									Computed:    true,
								},
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *dnsSecurityProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *dnsSecurityProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state dnsSecurityProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_dns_security_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := jOaWaMY.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := jOaWaMY.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.BotnetDomains == nil {
		state.BotnetDomains = nil
	} else {
		state.BotnetDomains = &dnsSecurityProfileDsModel_irQawLY_BotnetDomainsObject{}

		if len(ans.BotnetDomains.DnsSecurityCategories) == 0 {
			state.BotnetDomains.DnsSecurityCategories = nil
		} else {
			state.BotnetDomains.DnsSecurityCategories = make([]dnsSecurityProfileDsModel_irQawLY_DnsSecurityCategoryObject, 0, len(ans.BotnetDomains.DnsSecurityCategories))
			for _, var0 := range ans.BotnetDomains.DnsSecurityCategories {
				var1 := dnsSecurityProfileDsModel_irQawLY_DnsSecurityCategoryObject{}

				var1.Action = types.StringPointerValue(var0.Action)

				var1.LogLevel = types.StringPointerValue(var0.LogLevel)

				var1.Name = types.StringPointerValue(var0.Name)

				var1.PacketCapture = types.StringPointerValue(var0.PacketCapture)
				state.BotnetDomains.DnsSecurityCategories = append(state.BotnetDomains.DnsSecurityCategories, var1)
			}
		}

		if len(ans.BotnetDomains.Lists) == 0 {
			state.BotnetDomains.Lists = nil
		} else {
			state.BotnetDomains.Lists = make([]dnsSecurityProfileDsModel_irQawLY_ListObject, 0, len(ans.BotnetDomains.Lists))
			for _, var2 := range ans.BotnetDomains.Lists {
				var3 := dnsSecurityProfileDsModel_irQawLY_ListObject{}

				if var2.Action == nil {
					var3.Action = nil
				} else {
					var3.Action = &dnsSecurityProfileDsModel_irQawLY_ActionObject{}

					var3.Action.Alert = types.BoolValue(var2.Action.Alert != nil)

					var3.Action.Allow = types.BoolValue(var2.Action.Allow != nil)

					var3.Action.Block = types.BoolValue(var2.Action.Block != nil)

					var3.Action.Sinkhole = types.BoolValue(var2.Action.Sinkhole != nil)
				}

				var3.Name = types.StringValue(var2.Name)

				var3.PacketCapture = types.StringPointerValue(var2.PacketCapture)
				state.BotnetDomains.Lists = append(state.BotnetDomains.Lists, var3)
			}
		}

		if ans.BotnetDomains.Sinkhole == nil {
			state.BotnetDomains.Sinkhole = nil
		} else {
			state.BotnetDomains.Sinkhole = &dnsSecurityProfileDsModel_irQawLY_SinkholeObject{}

			state.BotnetDomains.Sinkhole.Ipv4Address = types.StringPointerValue(ans.BotnetDomains.Sinkhole.Ipv4Address)

			state.BotnetDomains.Sinkhole.Ipv6Address = types.StringPointerValue(ans.BotnetDomains.Sinkhole.Ipv6Address)
		}

		if len(ans.BotnetDomains.Whitelists) == 0 {
			state.BotnetDomains.Whitelists = nil
		} else {
			state.BotnetDomains.Whitelists = make([]dnsSecurityProfileDsModel_irQawLY_WhitelistObject, 0, len(ans.BotnetDomains.Whitelists))
			for _, var4 := range ans.BotnetDomains.Whitelists {
				var5 := dnsSecurityProfileDsModel_irQawLY_WhitelistObject{}

				var5.Description = types.StringPointerValue(var4.Description)

				var5.Name = types.StringValue(var4.Name)
				state.BotnetDomains.Whitelists = append(state.BotnetDomains.Whitelists, var5)
			}
		}
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &dnsSecurityProfileResource{}
	_ resource.ResourceWithConfigure   = &dnsSecurityProfileResource{}
	_ resource.ResourceWithImportState = &dnsSecurityProfileResource{}
)

func NewDnsSecurityProfileResource() resource.Resource {
	return &dnsSecurityProfileResource{}
}

type dnsSecurityProfileResource struct {
	client *scm.Client
}

// dnsSecurityProfileRsModel is the model.
type dnsSecurityProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	BotnetDomains *dnsSecurityProfileRsModel_irQawLY_BotnetDomainsObject `tfsdk:"botnet_domains"`
	Description   types.String                                           `tfsdk:"description"`
	Device        types.String                                           `tfsdk:"device"`
	Folder        types.String                                           `tfsdk:"folder"`
	Id            types.String                                           `tfsdk:"id"`
	Name          types.String                                           `tfsdk:"name"`
	Snippet       types.String                                           `tfsdk:"snippet"`

	// Output.
	// omit input: botnet_domains
	// omit input: description
	// omit input: id
	// omit input: name
}

type dnsSecurityProfileRsModel_irQawLY_BotnetDomainsObject struct {
	DnsSecurityCategories []dnsSecurityProfileRsModel_irQawLY_DnsSecurityCategoryObject `tfsdk:"dns_security_categories"`
	Lists                 []dnsSecurityProfileRsModel_irQawLY_ListObject                `tfsdk:"lists"`
	Sinkhole              *dnsSecurityProfileRsModel_irQawLY_SinkholeObject             `tfsdk:"sinkhole"`
	Whitelists            []dnsSecurityProfileRsModel_irQawLY_WhitelistObject           `tfsdk:"whitelists"`
}

type dnsSecurityProfileRsModel_irQawLY_DnsSecurityCategoryObject struct {
	Action        types.String `tfsdk:"action"`
	LogLevel      types.String `tfsdk:"log_level"`
	Name          types.String `tfsdk:"name"`
	PacketCapture types.String `tfsdk:"packet_capture"`
}

type dnsSecurityProfileRsModel_irQawLY_ListObject struct {
	Action        *dnsSecurityProfileRsModel_irQawLY_ActionObject `tfsdk:"action"`
	Name          types.String                                    `tfsdk:"name"`
	PacketCapture types.String                                    `tfsdk:"packet_capture"`
}

type dnsSecurityProfileRsModel_irQawLY_ActionObject struct {
	Alert    types.Bool `tfsdk:"alert"`
	Allow    types.Bool `tfsdk:"allow"`
	Block    types.Bool `tfsdk:"block"`
	Sinkhole types.Bool `tfsdk:"sinkhole"`
}

type dnsSecurityProfileRsModel_irQawLY_SinkholeObject struct {
	Ipv4Address types.String `tfsdk:"ipv4_address"`
	Ipv6Address types.String `tfsdk:"ipv6_address"`
}

type dnsSecurityProfileRsModel_irQawLY_WhitelistObject struct {
	Description types.String `tfsdk:"description"`
	Name        types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (r *dnsSecurityProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dns_security_profile"
}

// Schema defines the schema for this data source.
func (r *dnsSecurityProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"botnet_domains":true, "description":true, "device":true, "folder":true, "id":true, "name":true, "snippet":true} outputs:map[string]bool{"botnet_domains":true, "description":true, "id":true, "name":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"botnet_domains": rsschema.SingleNestedAttribute{
				Description: "The BotnetDomains param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"dns_security_categories":true, "lists":true, "sinkhole":true, "whitelist":true} outputs:map[string]bool{"dns_security_categories":true, "lists":true, "sinkhole":true, "whitelist":true} forceNew:map[string]bool(nil)
					"dns_security_categories": rsschema.ListNestedAttribute{
						Description: "The DnsSecurityCategories param.",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"action":true, "log_level":true, "name":true, "packet_capture":true} outputs:map[string]bool{"action":true, "log_level":true, "name":true, "packet_capture":true} forceNew:map[string]bool(nil)
								"action": rsschema.StringAttribute{
									Description: "The Action param. String must be one of these: `\"default\"`, `\"allow\"`, `\"block\"`, `\"sinkhole\"`. Default: `\"default\"`.",
									Optional:    true,
									Computed:    true,
									Default:     stringdefault.StaticString("default"),
									Validators: []validator.String{
										stringvalidator.OneOf("default", "allow", "block", "sinkhole"),
									},
								},
								"log_level": rsschema.StringAttribute{
									Description: "The LogLevel param. String must be one of these: `\"default\"`, `\"none\"`, `\"low\"`, `\"informational\"`, `\"medium\"`, `\"high\"`, `\"critical\"`. Default: `\"default\"`.",
									Optional:    true,
									Computed:    true,
									Default:     stringdefault.StaticString("default"),
									Validators: []validator.String{
										stringvalidator.OneOf("default", "none", "low", "informational", "medium", "high", "critical"),
									},
								},
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Optional:    true,
								},
								"packet_capture": rsschema.StringAttribute{
									Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
									Optional:    true,
									Validators: []validator.String{
										stringvalidator.OneOf("disable", "single-packet", "extended-capture"),
									},
								},
							},
						},
					},
					"lists": rsschema.ListNestedAttribute{
						Description: "The Lists param.",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"action":true, "name":true, "packet_capture":true} outputs:map[string]bool{"action":true, "name":true, "packet_capture":true} forceNew:map[string]bool(nil)
								"action": rsschema.SingleNestedAttribute{
									Description: "The Action param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"alert":true, "allow":true, "block":true, "sinkhole":true} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "sinkhole":true} forceNew:map[string]bool(nil)
										"alert": rsschema.BoolAttribute{
											Description: "The Alert param. Default: `false`. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`",
											Optional:    true,
											Computed:    true,
											Default:     booldefault.StaticBool(false),
											Validators: []validator.Bool{
												boolvalidator.ExactlyOneOf(
													path.MatchRelative(),
													path.MatchRelative().AtParent().AtName("allow"),
													path.MatchRelative().AtParent().AtName("block"),
													path.MatchRelative().AtParent().AtName("sinkhole"),
												),
											},
										},
										"allow": rsschema.BoolAttribute{
											Description: "The Allow param. Default: `false`. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`",
											Optional:    true,
											Computed:    true,
											Default:     booldefault.StaticBool(false),
										},
										"block": rsschema.BoolAttribute{
											Description: "The Block param. Default: `false`. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`",
											Optional:    true,
											Computed:    true,
											Default:     booldefault.StaticBool(false),
										},
										"sinkhole": rsschema.BoolAttribute{
											Description: "The Sinkhole param. Default: `false`. Ensure that only one of the following is specified: `alert`, `allow`, `block`, `sinkhole`",
											Optional:    true,
											Computed:    true,
											Default:     booldefault.StaticBool(false),
										},
									},
								},
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Required:    true,
								},
								"packet_capture": rsschema.StringAttribute{
									Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
									Optional:    true,
									Validators: []validator.String{
										stringvalidator.OneOf("disable", "single-packet", "extended-capture"),
									},
								},
							},
						},
					},
					"sinkhole": rsschema.SingleNestedAttribute{
						Description: "The Sinkhole param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"ipv4_address":true, "ipv6_address":true} outputs:map[string]bool{"ipv4_address":true, "ipv6_address":true} forceNew:map[string]bool(nil)
							"ipv4_address": rsschema.StringAttribute{
								Description: "The Ipv4Address param. String must be one of these: `\"127.0.0.1\"`, `\"pan-sinkhole-default-ip\"`.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.OneOf("127.0.0.1", "pan-sinkhole-default-ip"),
								},
							},
							"ipv6_address": rsschema.StringAttribute{
								Description: "The Ipv6Address param. String must be one of these: `\"::1\"`.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.OneOf("::1"),
								},
							},
						},
					},
					"whitelists": rsschema.ListNestedAttribute{
						Description: "The Whitelists param.",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"description":true, "name":true} outputs:map[string]bool{"description":true, "name":true} forceNew:map[string]bool(nil)
								"description": rsschema.StringAttribute{
									Description: "The Description param.",
									Optional:    true,
								},
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Required:    true,
								},
							},
						},
					},
				},
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *dnsSecurityProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *dnsSecurityProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state dnsSecurityProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_dns_security_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := jOaWaMY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := jOaWaMY.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &irQawLY.Config{}

	if state.BotnetDomains != nil {
		input.Request.BotnetDomains = &irQawLY.BotnetDomainsObject{}

		if len(state.BotnetDomains.DnsSecurityCategories) != 0 {
			input.Request.BotnetDomains.DnsSecurityCategories = make([]irQawLY.DnsSecurityCategoryObject, 0, len(state.BotnetDomains.DnsSecurityCategories))
			for _, var0 := range state.BotnetDomains.DnsSecurityCategories {
				var var1 irQawLY.DnsSecurityCategoryObject

				var1.Action = var0.Action.ValueStringPointer()

				var1.LogLevel = var0.LogLevel.ValueStringPointer()

				var1.Name = var0.Name.ValueStringPointer()

				var1.PacketCapture = var0.PacketCapture.ValueStringPointer()
				input.Request.BotnetDomains.DnsSecurityCategories = append(input.Request.BotnetDomains.DnsSecurityCategories, var1)
			}
		}

		if len(state.BotnetDomains.Lists) != 0 {
			input.Request.BotnetDomains.Lists = make([]irQawLY.ListObject, 0, len(state.BotnetDomains.Lists))
			for _, var2 := range state.BotnetDomains.Lists {
				var var3 irQawLY.ListObject

				if var2.Action != nil {
					var3.Action = &irQawLY.ActionObject{}

					if !var2.Action.Alert.IsNull() && var2.Action.Alert.ValueBool() {
						var3.Action.Alert = map[string]interface{}{}
					}

					if !var2.Action.Allow.IsNull() && var2.Action.Allow.ValueBool() {
						var3.Action.Allow = map[string]interface{}{}
					}

					if !var2.Action.Block.IsNull() && var2.Action.Block.ValueBool() {
						var3.Action.Block = map[string]interface{}{}
					}

					if !var2.Action.Sinkhole.IsNull() && var2.Action.Sinkhole.ValueBool() {
						var3.Action.Sinkhole = map[string]interface{}{}
					}
				}

				var3.Name = var2.Name.ValueString()

				var3.PacketCapture = var2.PacketCapture.ValueStringPointer()
				input.Request.BotnetDomains.Lists = append(input.Request.BotnetDomains.Lists, var3)
			}
		}

		if state.BotnetDomains.Sinkhole != nil {
			input.Request.BotnetDomains.Sinkhole = &irQawLY.SinkholeObject{}

			input.Request.BotnetDomains.Sinkhole.Ipv4Address = state.BotnetDomains.Sinkhole.Ipv4Address.ValueStringPointer()

			input.Request.BotnetDomains.Sinkhole.Ipv6Address = state.BotnetDomains.Sinkhole.Ipv6Address.ValueStringPointer()
		}

		if len(state.BotnetDomains.Whitelists) != 0 {
			input.Request.BotnetDomains.Whitelists = make([]irQawLY.WhitelistObject, 0, len(state.BotnetDomains.Whitelists))
			for _, var4 := range state.BotnetDomains.Whitelists {
				var var5 irQawLY.WhitelistObject

				var5.Description = var4.Description.ValueStringPointer()

				var5.Name = var4.Name.ValueString()
				input.Request.BotnetDomains.Whitelists = append(input.Request.BotnetDomains.Whitelists, var5)
			}
		}
	}

	input.Request.Description = state.Description.ValueStringPointer()

	input.Request.Name = state.Name.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.BotnetDomains == nil {
		state.BotnetDomains = nil
	} else {
		state.BotnetDomains = &dnsSecurityProfileRsModel_irQawLY_BotnetDomainsObject{}

		if len(ans.BotnetDomains.DnsSecurityCategories) == 0 {
			state.BotnetDomains.DnsSecurityCategories = nil
		} else {
			state.BotnetDomains.DnsSecurityCategories = make([]dnsSecurityProfileRsModel_irQawLY_DnsSecurityCategoryObject, 0, len(ans.BotnetDomains.DnsSecurityCategories))
			for _, var6 := range ans.BotnetDomains.DnsSecurityCategories {
				var7 := dnsSecurityProfileRsModel_irQawLY_DnsSecurityCategoryObject{}

				var7.Action = types.StringPointerValue(var6.Action)

				var7.LogLevel = types.StringPointerValue(var6.LogLevel)

				var7.Name = types.StringPointerValue(var6.Name)

				var7.PacketCapture = types.StringPointerValue(var6.PacketCapture)
				state.BotnetDomains.DnsSecurityCategories = append(state.BotnetDomains.DnsSecurityCategories, var7)
			}
		}

		if len(ans.BotnetDomains.Lists) == 0 {
			state.BotnetDomains.Lists = nil
		} else {
			state.BotnetDomains.Lists = make([]dnsSecurityProfileRsModel_irQawLY_ListObject, 0, len(ans.BotnetDomains.Lists))
			for _, var8 := range ans.BotnetDomains.Lists {
				var9 := dnsSecurityProfileRsModel_irQawLY_ListObject{}

				if var8.Action == nil {
					var9.Action = nil
				} else {
					var9.Action = &dnsSecurityProfileRsModel_irQawLY_ActionObject{}

					var9.Action.Alert = types.BoolValue(var8.Action.Alert != nil)

					var9.Action.Allow = types.BoolValue(var8.Action.Allow != nil)

					var9.Action.Block = types.BoolValue(var8.Action.Block != nil)

					var9.Action.Sinkhole = types.BoolValue(var8.Action.Sinkhole != nil)
				}

				var9.Name = types.StringValue(var8.Name)

				var9.PacketCapture = types.StringPointerValue(var8.PacketCapture)
				state.BotnetDomains.Lists = append(state.BotnetDomains.Lists, var9)
			}
		}

		if ans.BotnetDomains.Sinkhole == nil {
			state.BotnetDomains.Sinkhole = nil
		} else {
			state.BotnetDomains.Sinkhole = &dnsSecurityProfileRsModel_irQawLY_SinkholeObject{}

			state.BotnetDomains.Sinkhole.Ipv4Address = types.StringPointerValue(ans.BotnetDomains.Sinkhole.Ipv4Address)

			state.BotnetDomains.Sinkhole.Ipv6Address = types.StringPointerValue(ans.BotnetDomains.Sinkhole.Ipv6Address)
		}

		if len(ans.BotnetDomains.Whitelists) == 0 {
			state.BotnetDomains.Whitelists = nil
		} else {
			state.BotnetDomains.Whitelists = make([]dnsSecurityProfileRsModel_irQawLY_WhitelistObject, 0, len(ans.BotnetDomains.Whitelists))
			for _, var10 := range ans.BotnetDomains.Whitelists {
				var11 := dnsSecurityProfileRsModel_irQawLY_WhitelistObject{}

				var11.Description = types.StringPointerValue(var10.Description)

				var11.Name = types.StringValue(var10.Name)
				state.BotnetDomains.Whitelists = append(state.BotnetDomains.Whitelists, var11)
			}
		}
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *dnsSecurityProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state dnsSecurityProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_dns_security_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := jOaWaMY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := jOaWaMY.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	if ans.BotnetDomains == nil {
		state.BotnetDomains = nil
	} else {
		state.BotnetDomains = &dnsSecurityProfileRsModel_irQawLY_BotnetDomainsObject{}

		if len(ans.BotnetDomains.DnsSecurityCategories) == 0 {
			state.BotnetDomains.DnsSecurityCategories = nil
		} else {
			state.BotnetDomains.DnsSecurityCategories = make([]dnsSecurityProfileRsModel_irQawLY_DnsSecurityCategoryObject, 0, len(ans.BotnetDomains.DnsSecurityCategories))
			for _, var0 := range ans.BotnetDomains.DnsSecurityCategories {
				var1 := dnsSecurityProfileRsModel_irQawLY_DnsSecurityCategoryObject{}

				var1.Action = types.StringPointerValue(var0.Action)

				var1.LogLevel = types.StringPointerValue(var0.LogLevel)

				var1.Name = types.StringPointerValue(var0.Name)

				var1.PacketCapture = types.StringPointerValue(var0.PacketCapture)
				state.BotnetDomains.DnsSecurityCategories = append(state.BotnetDomains.DnsSecurityCategories, var1)
			}
		}

		if len(ans.BotnetDomains.Lists) == 0 {
			state.BotnetDomains.Lists = nil
		} else {
			state.BotnetDomains.Lists = make([]dnsSecurityProfileRsModel_irQawLY_ListObject, 0, len(ans.BotnetDomains.Lists))
			for _, var2 := range ans.BotnetDomains.Lists {
				var3 := dnsSecurityProfileRsModel_irQawLY_ListObject{}

				if var2.Action == nil {
					var3.Action = nil
				} else {
					var3.Action = &dnsSecurityProfileRsModel_irQawLY_ActionObject{}

					var3.Action.Alert = types.BoolValue(var2.Action.Alert != nil)

					var3.Action.Allow = types.BoolValue(var2.Action.Allow != nil)

					var3.Action.Block = types.BoolValue(var2.Action.Block != nil)

					var3.Action.Sinkhole = types.BoolValue(var2.Action.Sinkhole != nil)
				}

				var3.Name = types.StringValue(var2.Name)

				var3.PacketCapture = types.StringPointerValue(var2.PacketCapture)
				state.BotnetDomains.Lists = append(state.BotnetDomains.Lists, var3)
			}
		}

		if ans.BotnetDomains.Sinkhole == nil {
			state.BotnetDomains.Sinkhole = nil
		} else {
			state.BotnetDomains.Sinkhole = &dnsSecurityProfileRsModel_irQawLY_SinkholeObject{}

			state.BotnetDomains.Sinkhole.Ipv4Address = types.StringPointerValue(ans.BotnetDomains.Sinkhole.Ipv4Address)

			state.BotnetDomains.Sinkhole.Ipv6Address = types.StringPointerValue(ans.BotnetDomains.Sinkhole.Ipv6Address)
		}

		if len(ans.BotnetDomains.Whitelists) == 0 {
			state.BotnetDomains.Whitelists = nil
		} else {
			state.BotnetDomains.Whitelists = make([]dnsSecurityProfileRsModel_irQawLY_WhitelistObject, 0, len(ans.BotnetDomains.Whitelists))
			for _, var4 := range ans.BotnetDomains.Whitelists {
				var5 := dnsSecurityProfileRsModel_irQawLY_WhitelistObject{}

				var5.Description = types.StringPointerValue(var4.Description)

				var5.Name = types.StringValue(var4.Name)
				state.BotnetDomains.Whitelists = append(state.BotnetDomains.Whitelists, var5)
			}
		}
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *dnsSecurityProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state dnsSecurityProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_dns_security_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := jOaWaMY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := jOaWaMY.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &irQawLY.Config{}

	if plan.BotnetDomains != nil {
		input.Request.BotnetDomains = &irQawLY.BotnetDomainsObject{}

		if len(plan.BotnetDomains.DnsSecurityCategories) != 0 {
			input.Request.BotnetDomains.DnsSecurityCategories = make([]irQawLY.DnsSecurityCategoryObject, 0, len(plan.BotnetDomains.DnsSecurityCategories))
			for _, var0 := range plan.BotnetDomains.DnsSecurityCategories {
				var var1 irQawLY.DnsSecurityCategoryObject

				var1.Action = var0.Action.ValueStringPointer()

				var1.LogLevel = var0.LogLevel.ValueStringPointer()

				var1.Name = var0.Name.ValueStringPointer()

				var1.PacketCapture = var0.PacketCapture.ValueStringPointer()
				input.Request.BotnetDomains.DnsSecurityCategories = append(input.Request.BotnetDomains.DnsSecurityCategories, var1)
			}
		}

		if len(plan.BotnetDomains.Lists) != 0 {
			input.Request.BotnetDomains.Lists = make([]irQawLY.ListObject, 0, len(plan.BotnetDomains.Lists))
			for _, var2 := range plan.BotnetDomains.Lists {
				var var3 irQawLY.ListObject

				if var2.Action != nil {
					var3.Action = &irQawLY.ActionObject{}

					if !var2.Action.Alert.IsNull() && var2.Action.Alert.ValueBool() {
						var3.Action.Alert = map[string]interface{}{}
					}

					if !var2.Action.Allow.IsNull() && var2.Action.Allow.ValueBool() {
						var3.Action.Allow = map[string]interface{}{}
					}

					if !var2.Action.Block.IsNull() && var2.Action.Block.ValueBool() {
						var3.Action.Block = map[string]interface{}{}
					}

					if !var2.Action.Sinkhole.IsNull() && var2.Action.Sinkhole.ValueBool() {
						var3.Action.Sinkhole = map[string]interface{}{}
					}
				}

				var3.Name = var2.Name.ValueString()

				var3.PacketCapture = var2.PacketCapture.ValueStringPointer()
				input.Request.BotnetDomains.Lists = append(input.Request.BotnetDomains.Lists, var3)
			}
		}

		if plan.BotnetDomains.Sinkhole != nil {
			input.Request.BotnetDomains.Sinkhole = &irQawLY.SinkholeObject{}

			input.Request.BotnetDomains.Sinkhole.Ipv4Address = plan.BotnetDomains.Sinkhole.Ipv4Address.ValueStringPointer()

			input.Request.BotnetDomains.Sinkhole.Ipv6Address = plan.BotnetDomains.Sinkhole.Ipv6Address.ValueStringPointer()
		}

		if len(plan.BotnetDomains.Whitelists) != 0 {
			input.Request.BotnetDomains.Whitelists = make([]irQawLY.WhitelistObject, 0, len(plan.BotnetDomains.Whitelists))
			for _, var4 := range plan.BotnetDomains.Whitelists {
				var var5 irQawLY.WhitelistObject

				var5.Description = var4.Description.ValueStringPointer()

				var5.Name = var4.Name.ValueString()
				input.Request.BotnetDomains.Whitelists = append(input.Request.BotnetDomains.Whitelists, var5)
			}
		}
	}

	input.Request.Description = plan.Description.ValueStringPointer()

	input.Request.Name = plan.Name.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	if ans.BotnetDomains == nil {
		state.BotnetDomains = nil
	} else {
		state.BotnetDomains = &dnsSecurityProfileRsModel_irQawLY_BotnetDomainsObject{}

		if len(ans.BotnetDomains.DnsSecurityCategories) == 0 {
			state.BotnetDomains.DnsSecurityCategories = nil
		} else {
			state.BotnetDomains.DnsSecurityCategories = make([]dnsSecurityProfileRsModel_irQawLY_DnsSecurityCategoryObject, 0, len(ans.BotnetDomains.DnsSecurityCategories))
			for _, var6 := range ans.BotnetDomains.DnsSecurityCategories {
				var7 := dnsSecurityProfileRsModel_irQawLY_DnsSecurityCategoryObject{}

				var7.Action = types.StringPointerValue(var6.Action)

				var7.LogLevel = types.StringPointerValue(var6.LogLevel)

				var7.Name = types.StringPointerValue(var6.Name)

				var7.PacketCapture = types.StringPointerValue(var6.PacketCapture)
				state.BotnetDomains.DnsSecurityCategories = append(state.BotnetDomains.DnsSecurityCategories, var7)
			}
		}

		if len(ans.BotnetDomains.Lists) == 0 {
			state.BotnetDomains.Lists = nil
		} else {
			state.BotnetDomains.Lists = make([]dnsSecurityProfileRsModel_irQawLY_ListObject, 0, len(ans.BotnetDomains.Lists))
			for _, var8 := range ans.BotnetDomains.Lists {
				var9 := dnsSecurityProfileRsModel_irQawLY_ListObject{}

				if var8.Action == nil {
					var9.Action = nil
				} else {
					var9.Action = &dnsSecurityProfileRsModel_irQawLY_ActionObject{}

					var9.Action.Alert = types.BoolValue(var8.Action.Alert != nil)

					var9.Action.Allow = types.BoolValue(var8.Action.Allow != nil)

					var9.Action.Block = types.BoolValue(var8.Action.Block != nil)

					var9.Action.Sinkhole = types.BoolValue(var8.Action.Sinkhole != nil)
				}

				var9.Name = types.StringValue(var8.Name)

				var9.PacketCapture = types.StringPointerValue(var8.PacketCapture)
				state.BotnetDomains.Lists = append(state.BotnetDomains.Lists, var9)
			}
		}

		if ans.BotnetDomains.Sinkhole == nil {
			state.BotnetDomains.Sinkhole = nil
		} else {
			state.BotnetDomains.Sinkhole = &dnsSecurityProfileRsModel_irQawLY_SinkholeObject{}

			state.BotnetDomains.Sinkhole.Ipv4Address = types.StringPointerValue(ans.BotnetDomains.Sinkhole.Ipv4Address)

			state.BotnetDomains.Sinkhole.Ipv6Address = types.StringPointerValue(ans.BotnetDomains.Sinkhole.Ipv6Address)
		}

		if len(ans.BotnetDomains.Whitelists) == 0 {
			state.BotnetDomains.Whitelists = nil
		} else {
			state.BotnetDomains.Whitelists = make([]dnsSecurityProfileRsModel_irQawLY_WhitelistObject, 0, len(ans.BotnetDomains.Whitelists))
			for _, var10 := range ans.BotnetDomains.Whitelists {
				var11 := dnsSecurityProfileRsModel_irQawLY_WhitelistObject{}

				var11.Description = types.StringPointerValue(var10.Description)

				var11.Name = types.StringValue(var10.Name)
				state.BotnetDomains.Whitelists = append(state.BotnetDomains.Whitelists, var11)
			}
		}
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *dnsSecurityProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_dns_security_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := jOaWaMY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := jOaWaMY.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *dnsSecurityProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
