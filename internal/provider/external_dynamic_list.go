package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	hhIWLbI "github.com/paloaltonetworks/scm-go/netsec/schemas/external/dynamic/lists"
	ljRBvXJ "github.com/paloaltonetworks/scm-go/netsec/services/externaldynamiclists"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &externalDynamicListListDataSource{}
	_ datasource.DataSourceWithConfigure = &externalDynamicListListDataSource{}
)

func NewExternalDynamicListListDataSource() datasource.DataSource {
	return &externalDynamicListListDataSource{}
}

type externalDynamicListListDataSource struct {
	client *scm.Client
}

// externalDynamicListListDsModel is the model.
type externalDynamicListListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []externalDynamicListListDsModel_hhIWLbI_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type externalDynamicListListDsModel_hhIWLbI_Config struct {
	Id   types.String                                      `tfsdk:"id"`
	Name types.String                                      `tfsdk:"name"`
	Type externalDynamicListListDsModel_hhIWLbI_TypeObject `tfsdk:"type"`
}

type externalDynamicListListDsModel_hhIWLbI_TypeObject struct {
	Domain        *externalDynamicListListDsModel_hhIWLbI_DomainObject        `tfsdk:"domain"`
	Imei          *externalDynamicListListDsModel_hhIWLbI_ImeiObject          `tfsdk:"imei"`
	Imsi          *externalDynamicListListDsModel_hhIWLbI_ImsiObject          `tfsdk:"imsi"`
	Ip            *externalDynamicListListDsModel_hhIWLbI_IpObject            `tfsdk:"ip"`
	PredefinedIp  *externalDynamicListListDsModel_hhIWLbI_PredefinedIpObject  `tfsdk:"predefined_ip"`
	PredefinedUrl *externalDynamicListListDsModel_hhIWLbI_PredefinedUrlObject `tfsdk:"predefined_url"`
	Url           *externalDynamicListListDsModel_hhIWLbI_UrlObject           `tfsdk:"url"`
}

type externalDynamicListListDsModel_hhIWLbI_DomainObject struct {
	CertificateProfile types.String                                                 `tfsdk:"certificate_profile"`
	Description        types.String                                                 `tfsdk:"description"`
	DomainAuth         *externalDynamicListListDsModel_hhIWLbI_DomainAuthObject     `tfsdk:"domain_auth"`
	ExceptionList      types.List                                                   `tfsdk:"exception_list"`
	ExpandDomain       types.Bool                                                   `tfsdk:"expand_domain"`
	Recurring          externalDynamicListListDsModel_hhIWLbI_DomainRecurringObject `tfsdk:"recurring"`
	Url                types.String                                                 `tfsdk:"url"`
}

type externalDynamicListListDsModel_hhIWLbI_DomainAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListListDsModel_hhIWLbI_DomainRecurringObject struct {
	Daily      *externalDynamicListListDsModel_hhIWLbI_DomainDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                                 `tfsdk:"five_minute"`
	Hourly     types.Bool                                                 `tfsdk:"hourly"`
	Monthly    *externalDynamicListListDsModel_hhIWLbI_DomainMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListListDsModel_hhIWLbI_DomainWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListListDsModel_hhIWLbI_DomainDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListListDsModel_hhIWLbI_DomainMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListListDsModel_hhIWLbI_DomainWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListListDsModel_hhIWLbI_ImeiObject struct {
	CertificateProfile types.String                                               `tfsdk:"certificate_profile"`
	Description        types.String                                               `tfsdk:"description"`
	ExceptionList      types.List                                                 `tfsdk:"exception_list"`
	ImeiAuth           *externalDynamicListListDsModel_hhIWLbI_ImeiAuthObject     `tfsdk:"imei_auth"`
	Recurring          externalDynamicListListDsModel_hhIWLbI_ImeiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                               `tfsdk:"url"`
}

type externalDynamicListListDsModel_hhIWLbI_ImeiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListListDsModel_hhIWLbI_ImeiRecurringObject struct {
	Daily      *externalDynamicListListDsModel_hhIWLbI_ImeiDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                               `tfsdk:"five_minute"`
	Hourly     types.Bool                                               `tfsdk:"hourly"`
	Monthly    *externalDynamicListListDsModel_hhIWLbI_ImeiMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListListDsModel_hhIWLbI_ImeiWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListListDsModel_hhIWLbI_ImeiDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListListDsModel_hhIWLbI_ImeiMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListListDsModel_hhIWLbI_ImeiWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListListDsModel_hhIWLbI_ImsiObject struct {
	CertificateProfile types.String                                               `tfsdk:"certificate_profile"`
	Description        types.String                                               `tfsdk:"description"`
	ExceptionList      types.List                                                 `tfsdk:"exception_list"`
	ImsiAuth           *externalDynamicListListDsModel_hhIWLbI_ImsiAuthObject     `tfsdk:"imsi_auth"`
	Recurring          externalDynamicListListDsModel_hhIWLbI_ImsiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                               `tfsdk:"url"`
}

type externalDynamicListListDsModel_hhIWLbI_ImsiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListListDsModel_hhIWLbI_ImsiRecurringObject struct {
	Daily      *externalDynamicListListDsModel_hhIWLbI_ImsiDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                               `tfsdk:"five_minute"`
	Hourly     types.Bool                                               `tfsdk:"hourly"`
	Monthly    *externalDynamicListListDsModel_hhIWLbI_ImsiMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListListDsModel_hhIWLbI_ImsiWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListListDsModel_hhIWLbI_ImsiDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListListDsModel_hhIWLbI_ImsiMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListListDsModel_hhIWLbI_ImsiWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListListDsModel_hhIWLbI_IpObject struct {
	CertificateProfile types.String                                             `tfsdk:"certificate_profile"`
	Description        types.String                                             `tfsdk:"description"`
	ExceptionList      types.List                                               `tfsdk:"exception_list"`
	IpAuth             *externalDynamicListListDsModel_hhIWLbI_IpAuthObject     `tfsdk:"ip_auth"`
	Recurring          externalDynamicListListDsModel_hhIWLbI_IpRecurringObject `tfsdk:"recurring"`
	Url                types.String                                             `tfsdk:"url"`
}

type externalDynamicListListDsModel_hhIWLbI_IpAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListListDsModel_hhIWLbI_IpRecurringObject struct {
	Daily      *externalDynamicListListDsModel_hhIWLbI_IpDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                             `tfsdk:"five_minute"`
	Hourly     types.Bool                                             `tfsdk:"hourly"`
	Monthly    *externalDynamicListListDsModel_hhIWLbI_IpMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListListDsModel_hhIWLbI_IpWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListListDsModel_hhIWLbI_IpDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListListDsModel_hhIWLbI_IpMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListListDsModel_hhIWLbI_IpWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListListDsModel_hhIWLbI_PredefinedIpObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}

type externalDynamicListListDsModel_hhIWLbI_PredefinedUrlObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}

type externalDynamicListListDsModel_hhIWLbI_UrlObject struct {
	CertificateProfile types.String                                              `tfsdk:"certificate_profile"`
	Description        types.String                                              `tfsdk:"description"`
	ExceptionList      types.List                                                `tfsdk:"exception_list"`
	Recurring          externalDynamicListListDsModel_hhIWLbI_UrlRecurringObject `tfsdk:"recurring"`
	Url                types.String                                              `tfsdk:"url"`
	UrlAuth            *externalDynamicListListDsModel_hhIWLbI_UrlAuthObject     `tfsdk:"url_auth"`
}

type externalDynamicListListDsModel_hhIWLbI_UrlRecurringObject struct {
	Daily      *externalDynamicListListDsModel_hhIWLbI_UrlDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                              `tfsdk:"five_minute"`
	Hourly     types.Bool                                              `tfsdk:"hourly"`
	Monthly    *externalDynamicListListDsModel_hhIWLbI_UrlMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListListDsModel_hhIWLbI_UrlWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListListDsModel_hhIWLbI_UrlDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListListDsModel_hhIWLbI_UrlMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListListDsModel_hhIWLbI_UrlWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListListDsModel_hhIWLbI_UrlAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

// Metadata returns the data source type name.
func (d *externalDynamicListListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_external_dynamic_list_list"
}

// Schema defines the schema for this listing data source.
func (d *externalDynamicListListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"id":true, "name":true, "type":true} forceNew:map[string]bool(nil)
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"type": dsschema.SingleNestedAttribute{
							Description: "The Type param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"domain":true, "imei":true, "imsi":true, "ip":true, "predefined_ip":true, "predefined_url":true, "url":true} forceNew:map[string]bool(nil)
								"domain": dsschema.SingleNestedAttribute{
									Description: "The Domain param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "expand_domain":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
										"certificate_profile": dsschema.StringAttribute{
											Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
											Computed:    true,
										},
										"description": dsschema.StringAttribute{
											Description: "The Description param. String length must not exceed 255 characters.",
											Computed:    true,
										},
										"domain_auth": dsschema.SingleNestedAttribute{
											Description: "The DomainAuth param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
												"password": dsschema.StringAttribute{
													Description: "The Password param. String length must not exceed 255 characters.",
													Computed:    true,
												},
												"username": dsschema.StringAttribute{
													Description: "The Username param. String length must be between 1 and 255 characters.",
													Computed:    true,
												},
											},
										},
										"exception_list": dsschema.ListAttribute{
											Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
											Computed:    true,
											ElementType: types.StringType,
										},
										"expand_domain": dsschema.BoolAttribute{
											Description: "Enable/Disable expand domain. Default: `false`.",
											Computed:    true,
										},
										"recurring": dsschema.SingleNestedAttribute{
											Description: "The Recurring param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
												"daily": dsschema.SingleNestedAttribute{
													Description: "The Daily param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
													},
												},
												"five_minute": dsschema.BoolAttribute{
													Description: "The FiveMinute param. Default: `false`.",
													Computed:    true,
												},
												"hourly": dsschema.BoolAttribute{
													Description: "The Hourly param. Default: `false`.",
													Computed:    true,
												},
												"monthly": dsschema.SingleNestedAttribute{
													Description: "The Monthly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_month": dsschema.Int64Attribute{
															Description: "The DayOfMonth param. Value must be between 1 and 31.",
															Computed:    true,
														},
													},
												},
												"weekly": dsschema.SingleNestedAttribute{
													Description: "The Weekly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_week": dsschema.StringAttribute{
															Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
															Computed:    true,
														},
													},
												},
											},
										},
										"url": dsschema.StringAttribute{
											Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
											Computed:    true,
										},
									},
								},
								"imei": dsschema.SingleNestedAttribute{
									Description: "The Imei param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
										"certificate_profile": dsschema.StringAttribute{
											Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
											Computed:    true,
										},
										"description": dsschema.StringAttribute{
											Description: "The Description param. String length must not exceed 255 characters.",
											Computed:    true,
										},
										"exception_list": dsschema.ListAttribute{
											Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
											Computed:    true,
											ElementType: types.StringType,
										},
										"imei_auth": dsschema.SingleNestedAttribute{
											Description: "The ImeiAuth param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
												"password": dsschema.StringAttribute{
													Description: "The Password param. String length must not exceed 255 characters.",
													Computed:    true,
												},
												"username": dsschema.StringAttribute{
													Description: "The Username param. String length must be between 1 and 255 characters.",
													Computed:    true,
												},
											},
										},
										"recurring": dsschema.SingleNestedAttribute{
											Description: "The Recurring param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
												"daily": dsschema.SingleNestedAttribute{
													Description: "The Daily param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
													},
												},
												"five_minute": dsschema.BoolAttribute{
													Description: "The FiveMinute param. Default: `false`.",
													Computed:    true,
												},
												"hourly": dsschema.BoolAttribute{
													Description: "The Hourly param. Default: `false`.",
													Computed:    true,
												},
												"monthly": dsschema.SingleNestedAttribute{
													Description: "The Monthly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_month": dsschema.Int64Attribute{
															Description: "The DayOfMonth param. Value must be between 1 and 31.",
															Computed:    true,
														},
													},
												},
												"weekly": dsschema.SingleNestedAttribute{
													Description: "The Weekly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_week": dsschema.StringAttribute{
															Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
															Computed:    true,
														},
													},
												},
											},
										},
										"url": dsschema.StringAttribute{
											Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
											Computed:    true,
										},
									},
								},
								"imsi": dsschema.SingleNestedAttribute{
									Description: "The Imsi param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
										"certificate_profile": dsschema.StringAttribute{
											Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
											Computed:    true,
										},
										"description": dsschema.StringAttribute{
											Description: "The Description param. String length must not exceed 255 characters.",
											Computed:    true,
										},
										"exception_list": dsschema.ListAttribute{
											Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 34 characters.",
											Computed:    true,
											ElementType: types.StringType,
										},
										"imsi_auth": dsschema.SingleNestedAttribute{
											Description: "The ImsiAuth param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
												"password": dsschema.StringAttribute{
													Description: "The Password param. String length must not exceed 255 characters.",
													Computed:    true,
												},
												"username": dsschema.StringAttribute{
													Description: "The Username param. String length must be between 1 and 255 characters.",
													Computed:    true,
												},
											},
										},
										"recurring": dsschema.SingleNestedAttribute{
											Description: "The Recurring param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
												"daily": dsschema.SingleNestedAttribute{
													Description: "The Daily param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
													},
												},
												"five_minute": dsschema.BoolAttribute{
													Description: "The FiveMinute param. Default: `false`.",
													Computed:    true,
												},
												"hourly": dsschema.BoolAttribute{
													Description: "The Hourly param. Default: `false`.",
													Computed:    true,
												},
												"monthly": dsschema.SingleNestedAttribute{
													Description: "The Monthly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_month": dsschema.Int64Attribute{
															Description: "The DayOfMonth param. Value must be between 1 and 31.",
															Computed:    true,
														},
													},
												},
												"weekly": dsschema.SingleNestedAttribute{
													Description: "The Weekly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_week": dsschema.StringAttribute{
															Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
															Computed:    true,
														},
													},
												},
											},
										},
										"url": dsschema.StringAttribute{
											Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
											Computed:    true,
										},
									},
								},
								"ip": dsschema.SingleNestedAttribute{
									Description: "The Ip param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
										"certificate_profile": dsschema.StringAttribute{
											Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
											Computed:    true,
										},
										"description": dsschema.StringAttribute{
											Description: "The Description param. String length must not exceed 255 characters.",
											Computed:    true,
										},
										"exception_list": dsschema.ListAttribute{
											Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
											Computed:    true,
											ElementType: types.StringType,
										},
										"ip_auth": dsschema.SingleNestedAttribute{
											Description: "The IpAuth param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
												"password": dsschema.StringAttribute{
													Description: "The Password param. String length must not exceed 255 characters.",
													Computed:    true,
													Sensitive:   true,
												},
												"username": dsschema.StringAttribute{
													Description: "The Username param. String length must be between 1 and 255 characters.",
													Computed:    true,
												},
											},
										},
										"recurring": dsschema.SingleNestedAttribute{
											Description: "The Recurring param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
												"daily": dsschema.SingleNestedAttribute{
													Description: "The Daily param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
													},
												},
												"five_minute": dsschema.BoolAttribute{
													Description: "The FiveMinute param. Default: `false`.",
													Computed:    true,
												},
												"hourly": dsschema.BoolAttribute{
													Description: "The Hourly param. Default: `false`.",
													Computed:    true,
												},
												"monthly": dsschema.SingleNestedAttribute{
													Description: "The Monthly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_month": dsschema.Int64Attribute{
															Description: "The DayOfMonth param. Value must be between 1 and 31.",
															Computed:    true,
														},
													},
												},
												"weekly": dsschema.SingleNestedAttribute{
													Description: "The Weekly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_week": dsschema.StringAttribute{
															Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
															Computed:    true,
														},
													},
												},
											},
										},
										"url": dsschema.StringAttribute{
											Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
											Computed:    true,
										},
									},
								},
								"predefined_ip": dsschema.SingleNestedAttribute{
									Description: "The PredefinedIp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "exception_list":true, "url":true} forceNew:map[string]bool(nil)
										"description": dsschema.StringAttribute{
											Description: "The Description param. String length must not exceed 255 characters.",
											Computed:    true,
										},
										"exception_list": dsschema.ListAttribute{
											Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
											Computed:    true,
											ElementType: types.StringType,
										},
										"url": dsschema.StringAttribute{
											Description: "The Url param.",
											Computed:    true,
										},
									},
								},
								"predefined_url": dsschema.SingleNestedAttribute{
									Description: "The PredefinedUrl param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "exception_list":true, "url":true} forceNew:map[string]bool(nil)
										"description": dsschema.StringAttribute{
											Description: "The Description param. String length must not exceed 255 characters.",
											Computed:    true,
										},
										"exception_list": dsschema.ListAttribute{
											Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
											Computed:    true,
											ElementType: types.StringType,
										},
										"url": dsschema.StringAttribute{
											Description: "The Url param.",
											Computed:    true,
										},
									},
								},
								"url": dsschema.SingleNestedAttribute{
									Description: "The Url param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
										"certificate_profile": dsschema.StringAttribute{
											Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
											Computed:    true,
										},
										"description": dsschema.StringAttribute{
											Description: "The Description param. String length must not exceed 255 characters.",
											Computed:    true,
										},
										"exception_list": dsschema.ListAttribute{
											Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
											Computed:    true,
											ElementType: types.StringType,
										},
										"recurring": dsschema.SingleNestedAttribute{
											Description: "The Recurring param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
												"daily": dsschema.SingleNestedAttribute{
													Description: "The Daily param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
													},
												},
												"five_minute": dsschema.BoolAttribute{
													Description: "The FiveMinute param. Default: `false`.",
													Computed:    true,
												},
												"hourly": dsschema.BoolAttribute{
													Description: "The Hourly param. Default: `false`.",
													Computed:    true,
												},
												"monthly": dsschema.SingleNestedAttribute{
													Description: "The Monthly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_month": dsschema.Int64Attribute{
															Description: "The DayOfMonth param. Value must be between 1 and 31.",
															Computed:    true,
														},
													},
												},
												"weekly": dsschema.SingleNestedAttribute{
													Description: "The Weekly param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
														"at": dsschema.StringAttribute{
															Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
															Computed:    true,
														},
														"day_of_week": dsschema.StringAttribute{
															Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
															Computed:    true,
														},
													},
												},
											},
										},
										"url": dsschema.StringAttribute{
											Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
											Computed:    true,
										},
										"url_auth": dsschema.SingleNestedAttribute{
											Description: "The UrlAuth param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
												"password": dsschema.StringAttribute{
													Description: "The Password param. String length must not exceed 255 characters.",
													Computed:    true,
												},
												"username": dsschema.StringAttribute{
													Description: "The Username param. String length must be between 1 and 255 characters.",
													Computed:    true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *externalDynamicListListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *externalDynamicListListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state externalDynamicListListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_external_dynamic_list_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := ljRBvXJ.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]externalDynamicListListDsModel_hhIWLbI_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := externalDynamicListListDsModel_hhIWLbI_Config{}

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.Type = externalDynamicListListDsModel_hhIWLbI_TypeObject{}

			if var0.Type.Domain == nil {
				var1.Type.Domain = nil
			} else {
				var1.Type.Domain = &externalDynamicListListDsModel_hhIWLbI_DomainObject{}

				var1.Type.Domain.CertificateProfile = types.StringPointerValue(var0.Type.Domain.CertificateProfile)

				var1.Type.Domain.Description = types.StringPointerValue(var0.Type.Domain.Description)

				if var0.Type.Domain.DomainAuth == nil {
					var1.Type.Domain.DomainAuth = nil
				} else {
					var1.Type.Domain.DomainAuth = &externalDynamicListListDsModel_hhIWLbI_DomainAuthObject{}

					var1.Type.Domain.DomainAuth.Password = types.StringValue(var0.Type.Domain.DomainAuth.Password)

					var1.Type.Domain.DomainAuth.Username = types.StringValue(var0.Type.Domain.DomainAuth.Username)
				}

				var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Type.Domain.ExceptionList)
				var1.Type.Domain.ExceptionList = var2
				resp.Diagnostics.Append(var3.Errors()...)

				var1.Type.Domain.ExpandDomain = types.BoolPointerValue(var0.Type.Domain.ExpandDomain)

				var1.Type.Domain.Recurring = externalDynamicListListDsModel_hhIWLbI_DomainRecurringObject{}

				if var0.Type.Domain.Recurring.Daily == nil {
					var1.Type.Domain.Recurring.Daily = nil
				} else {
					var1.Type.Domain.Recurring.Daily = &externalDynamicListListDsModel_hhIWLbI_DomainDailyObject{}

					var1.Type.Domain.Recurring.Daily.At = types.StringValue(var0.Type.Domain.Recurring.Daily.At)
				}

				var1.Type.Domain.Recurring.FiveMinute = types.BoolValue(var0.Type.Domain.Recurring.FiveMinute != nil)

				var1.Type.Domain.Recurring.Hourly = types.BoolValue(var0.Type.Domain.Recurring.Hourly != nil)

				if var0.Type.Domain.Recurring.Monthly == nil {
					var1.Type.Domain.Recurring.Monthly = nil
				} else {
					var1.Type.Domain.Recurring.Monthly = &externalDynamicListListDsModel_hhIWLbI_DomainMonthyObject{}

					var1.Type.Domain.Recurring.Monthly.At = types.StringValue(var0.Type.Domain.Recurring.Monthly.At)

					var1.Type.Domain.Recurring.Monthly.DayOfMonth = types.Int64Value(var0.Type.Domain.Recurring.Monthly.DayOfMonth)
				}

				if var0.Type.Domain.Recurring.Weekly == nil {
					var1.Type.Domain.Recurring.Weekly = nil
				} else {
					var1.Type.Domain.Recurring.Weekly = &externalDynamicListListDsModel_hhIWLbI_DomainWeeklyObject{}

					var1.Type.Domain.Recurring.Weekly.At = types.StringValue(var0.Type.Domain.Recurring.Weekly.At)

					var1.Type.Domain.Recurring.Weekly.DayOfWeek = types.StringValue(var0.Type.Domain.Recurring.Weekly.DayOfWeek)
				}

				var1.Type.Domain.Url = types.StringValue(var0.Type.Domain.Url)
			}

			if var0.Type.Imei == nil {
				var1.Type.Imei = nil
			} else {
				var1.Type.Imei = &externalDynamicListListDsModel_hhIWLbI_ImeiObject{}

				var1.Type.Imei.CertificateProfile = types.StringPointerValue(var0.Type.Imei.CertificateProfile)

				var1.Type.Imei.Description = types.StringPointerValue(var0.Type.Imei.Description)

				var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Type.Imei.ExceptionList)
				var1.Type.Imei.ExceptionList = var4
				resp.Diagnostics.Append(var5.Errors()...)

				if var0.Type.Imei.ImeiAuth == nil {
					var1.Type.Imei.ImeiAuth = nil
				} else {
					var1.Type.Imei.ImeiAuth = &externalDynamicListListDsModel_hhIWLbI_ImeiAuthObject{}

					var1.Type.Imei.ImeiAuth.Password = types.StringValue(var0.Type.Imei.ImeiAuth.Password)

					var1.Type.Imei.ImeiAuth.Username = types.StringValue(var0.Type.Imei.ImeiAuth.Username)
				}

				var1.Type.Imei.Recurring = externalDynamicListListDsModel_hhIWLbI_ImeiRecurringObject{}

				if var0.Type.Imei.Recurring.Daily == nil {
					var1.Type.Imei.Recurring.Daily = nil
				} else {
					var1.Type.Imei.Recurring.Daily = &externalDynamicListListDsModel_hhIWLbI_ImeiDailyObject{}

					var1.Type.Imei.Recurring.Daily.At = types.StringValue(var0.Type.Imei.Recurring.Daily.At)
				}

				var1.Type.Imei.Recurring.FiveMinute = types.BoolValue(var0.Type.Imei.Recurring.FiveMinute != nil)

				var1.Type.Imei.Recurring.Hourly = types.BoolValue(var0.Type.Imei.Recurring.Hourly != nil)

				if var0.Type.Imei.Recurring.Monthly == nil {
					var1.Type.Imei.Recurring.Monthly = nil
				} else {
					var1.Type.Imei.Recurring.Monthly = &externalDynamicListListDsModel_hhIWLbI_ImeiMonthyObject{}

					var1.Type.Imei.Recurring.Monthly.At = types.StringValue(var0.Type.Imei.Recurring.Monthly.At)

					var1.Type.Imei.Recurring.Monthly.DayOfMonth = types.Int64Value(var0.Type.Imei.Recurring.Monthly.DayOfMonth)
				}

				if var0.Type.Imei.Recurring.Weekly == nil {
					var1.Type.Imei.Recurring.Weekly = nil
				} else {
					var1.Type.Imei.Recurring.Weekly = &externalDynamicListListDsModel_hhIWLbI_ImeiWeeklyObject{}

					var1.Type.Imei.Recurring.Weekly.At = types.StringValue(var0.Type.Imei.Recurring.Weekly.At)

					var1.Type.Imei.Recurring.Weekly.DayOfWeek = types.StringValue(var0.Type.Imei.Recurring.Weekly.DayOfWeek)
				}

				var1.Type.Imei.Url = types.StringValue(var0.Type.Imei.Url)
			}

			if var0.Type.Imsi == nil {
				var1.Type.Imsi = nil
			} else {
				var1.Type.Imsi = &externalDynamicListListDsModel_hhIWLbI_ImsiObject{}

				var1.Type.Imsi.CertificateProfile = types.StringPointerValue(var0.Type.Imsi.CertificateProfile)

				var1.Type.Imsi.Description = types.StringPointerValue(var0.Type.Imsi.Description)

				var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Type.Imsi.ExceptionList)
				var1.Type.Imsi.ExceptionList = var6
				resp.Diagnostics.Append(var7.Errors()...)

				if var0.Type.Imsi.ImsiAuth == nil {
					var1.Type.Imsi.ImsiAuth = nil
				} else {
					var1.Type.Imsi.ImsiAuth = &externalDynamicListListDsModel_hhIWLbI_ImsiAuthObject{}

					var1.Type.Imsi.ImsiAuth.Password = types.StringValue(var0.Type.Imsi.ImsiAuth.Password)

					var1.Type.Imsi.ImsiAuth.Username = types.StringValue(var0.Type.Imsi.ImsiAuth.Username)
				}

				var1.Type.Imsi.Recurring = externalDynamicListListDsModel_hhIWLbI_ImsiRecurringObject{}

				if var0.Type.Imsi.Recurring.Daily == nil {
					var1.Type.Imsi.Recurring.Daily = nil
				} else {
					var1.Type.Imsi.Recurring.Daily = &externalDynamicListListDsModel_hhIWLbI_ImsiDailyObject{}

					var1.Type.Imsi.Recurring.Daily.At = types.StringValue(var0.Type.Imsi.Recurring.Daily.At)
				}

				var1.Type.Imsi.Recurring.FiveMinute = types.BoolValue(var0.Type.Imsi.Recurring.FiveMinute != nil)

				var1.Type.Imsi.Recurring.Hourly = types.BoolValue(var0.Type.Imsi.Recurring.Hourly != nil)

				if var0.Type.Imsi.Recurring.Monthly == nil {
					var1.Type.Imsi.Recurring.Monthly = nil
				} else {
					var1.Type.Imsi.Recurring.Monthly = &externalDynamicListListDsModel_hhIWLbI_ImsiMonthyObject{}

					var1.Type.Imsi.Recurring.Monthly.At = types.StringValue(var0.Type.Imsi.Recurring.Monthly.At)

					var1.Type.Imsi.Recurring.Monthly.DayOfMonth = types.Int64Value(var0.Type.Imsi.Recurring.Monthly.DayOfMonth)
				}

				if var0.Type.Imsi.Recurring.Weekly == nil {
					var1.Type.Imsi.Recurring.Weekly = nil
				} else {
					var1.Type.Imsi.Recurring.Weekly = &externalDynamicListListDsModel_hhIWLbI_ImsiWeeklyObject{}

					var1.Type.Imsi.Recurring.Weekly.At = types.StringValue(var0.Type.Imsi.Recurring.Weekly.At)

					var1.Type.Imsi.Recurring.Weekly.DayOfWeek = types.StringValue(var0.Type.Imsi.Recurring.Weekly.DayOfWeek)
				}

				var1.Type.Imsi.Url = types.StringValue(var0.Type.Imsi.Url)
			}

			if var0.Type.Ip == nil {
				var1.Type.Ip = nil
			} else {
				var1.Type.Ip = &externalDynamicListListDsModel_hhIWLbI_IpObject{}

				var1.Type.Ip.CertificateProfile = types.StringPointerValue(var0.Type.Ip.CertificateProfile)

				var1.Type.Ip.Description = types.StringPointerValue(var0.Type.Ip.Description)

				var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.Type.Ip.ExceptionList)
				var1.Type.Ip.ExceptionList = var8
				resp.Diagnostics.Append(var9.Errors()...)

				if var0.Type.Ip.IpAuth == nil {
					var1.Type.Ip.IpAuth = nil
				} else {
					var1.Type.Ip.IpAuth = &externalDynamicListListDsModel_hhIWLbI_IpAuthObject{}

					var1.Type.Ip.IpAuth.Password = types.StringValue(var0.Type.Ip.IpAuth.Password)

					var1.Type.Ip.IpAuth.Username = types.StringValue(var0.Type.Ip.IpAuth.Username)
				}

				var1.Type.Ip.Recurring = externalDynamicListListDsModel_hhIWLbI_IpRecurringObject{}

				if var0.Type.Ip.Recurring.Daily == nil {
					var1.Type.Ip.Recurring.Daily = nil
				} else {
					var1.Type.Ip.Recurring.Daily = &externalDynamicListListDsModel_hhIWLbI_IpDailyObject{}

					var1.Type.Ip.Recurring.Daily.At = types.StringValue(var0.Type.Ip.Recurring.Daily.At)
				}

				var1.Type.Ip.Recurring.FiveMinute = types.BoolValue(var0.Type.Ip.Recurring.FiveMinute != nil)

				var1.Type.Ip.Recurring.Hourly = types.BoolValue(var0.Type.Ip.Recurring.Hourly != nil)

				if var0.Type.Ip.Recurring.Monthly == nil {
					var1.Type.Ip.Recurring.Monthly = nil
				} else {
					var1.Type.Ip.Recurring.Monthly = &externalDynamicListListDsModel_hhIWLbI_IpMonthyObject{}

					var1.Type.Ip.Recurring.Monthly.At = types.StringValue(var0.Type.Ip.Recurring.Monthly.At)

					var1.Type.Ip.Recurring.Monthly.DayOfMonth = types.Int64Value(var0.Type.Ip.Recurring.Monthly.DayOfMonth)
				}

				if var0.Type.Ip.Recurring.Weekly == nil {
					var1.Type.Ip.Recurring.Weekly = nil
				} else {
					var1.Type.Ip.Recurring.Weekly = &externalDynamicListListDsModel_hhIWLbI_IpWeeklyObject{}

					var1.Type.Ip.Recurring.Weekly.At = types.StringValue(var0.Type.Ip.Recurring.Weekly.At)

					var1.Type.Ip.Recurring.Weekly.DayOfWeek = types.StringValue(var0.Type.Ip.Recurring.Weekly.DayOfWeek)
				}

				var1.Type.Ip.Url = types.StringValue(var0.Type.Ip.Url)
			}

			if var0.Type.PredefinedIp == nil {
				var1.Type.PredefinedIp = nil
			} else {
				var1.Type.PredefinedIp = &externalDynamicListListDsModel_hhIWLbI_PredefinedIpObject{}

				var1.Type.PredefinedIp.Description = types.StringPointerValue(var0.Type.PredefinedIp.Description)

				var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.Type.PredefinedIp.ExceptionList)
				var1.Type.PredefinedIp.ExceptionList = var10
				resp.Diagnostics.Append(var11.Errors()...)

				var1.Type.PredefinedIp.Url = types.StringValue(var0.Type.PredefinedIp.Url)
			}

			if var0.Type.PredefinedUrl == nil {
				var1.Type.PredefinedUrl = nil
			} else {
				var1.Type.PredefinedUrl = &externalDynamicListListDsModel_hhIWLbI_PredefinedUrlObject{}

				var1.Type.PredefinedUrl.Description = types.StringPointerValue(var0.Type.PredefinedUrl.Description)

				var12, var13 := types.ListValueFrom(ctx, types.StringType, var0.Type.PredefinedUrl.ExceptionList)
				var1.Type.PredefinedUrl.ExceptionList = var12
				resp.Diagnostics.Append(var13.Errors()...)

				var1.Type.PredefinedUrl.Url = types.StringValue(var0.Type.PredefinedUrl.Url)
			}

			if var0.Type.Url == nil {
				var1.Type.Url = nil
			} else {
				var1.Type.Url = &externalDynamicListListDsModel_hhIWLbI_UrlObject{}

				var1.Type.Url.CertificateProfile = types.StringPointerValue(var0.Type.Url.CertificateProfile)

				var1.Type.Url.Description = types.StringPointerValue(var0.Type.Url.Description)

				var14, var15 := types.ListValueFrom(ctx, types.StringType, var0.Type.Url.ExceptionList)
				var1.Type.Url.ExceptionList = var14
				resp.Diagnostics.Append(var15.Errors()...)

				var1.Type.Url.Recurring = externalDynamicListListDsModel_hhIWLbI_UrlRecurringObject{}

				if var0.Type.Url.Recurring.Daily == nil {
					var1.Type.Url.Recurring.Daily = nil
				} else {
					var1.Type.Url.Recurring.Daily = &externalDynamicListListDsModel_hhIWLbI_UrlDailyObject{}

					var1.Type.Url.Recurring.Daily.At = types.StringValue(var0.Type.Url.Recurring.Daily.At)
				}

				var1.Type.Url.Recurring.FiveMinute = types.BoolValue(var0.Type.Url.Recurring.FiveMinute != nil)

				var1.Type.Url.Recurring.Hourly = types.BoolValue(var0.Type.Url.Recurring.Hourly != nil)

				if var0.Type.Url.Recurring.Monthly == nil {
					var1.Type.Url.Recurring.Monthly = nil
				} else {
					var1.Type.Url.Recurring.Monthly = &externalDynamicListListDsModel_hhIWLbI_UrlMonthyObject{}

					var1.Type.Url.Recurring.Monthly.At = types.StringValue(var0.Type.Url.Recurring.Monthly.At)

					var1.Type.Url.Recurring.Monthly.DayOfMonth = types.Int64Value(var0.Type.Url.Recurring.Monthly.DayOfMonth)
				}

				if var0.Type.Url.Recurring.Weekly == nil {
					var1.Type.Url.Recurring.Weekly = nil
				} else {
					var1.Type.Url.Recurring.Weekly = &externalDynamicListListDsModel_hhIWLbI_UrlWeeklyObject{}

					var1.Type.Url.Recurring.Weekly.At = types.StringValue(var0.Type.Url.Recurring.Weekly.At)

					var1.Type.Url.Recurring.Weekly.DayOfWeek = types.StringValue(var0.Type.Url.Recurring.Weekly.DayOfWeek)
				}

				var1.Type.Url.Url = types.StringValue(var0.Type.Url.Url)

				if var0.Type.Url.UrlAuth == nil {
					var1.Type.Url.UrlAuth = nil
				} else {
					var1.Type.Url.UrlAuth = &externalDynamicListListDsModel_hhIWLbI_UrlAuthObject{}

					var1.Type.Url.UrlAuth.Password = types.StringValue(var0.Type.Url.UrlAuth.Password)

					var1.Type.Url.UrlAuth.Username = types.StringValue(var0.Type.Url.UrlAuth.Username)
				}
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &externalDynamicListDataSource{}
	_ datasource.DataSourceWithConfigure = &externalDynamicListDataSource{}
)

func NewExternalDynamicListDataSource() datasource.DataSource {
	return &externalDynamicListDataSource{}
}

type externalDynamicListDataSource struct {
	client *scm.Client
}

// externalDynamicListDsModel is the model.
type externalDynamicListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	// omit input: id
	Name types.String                                  `tfsdk:"name"`
	Type externalDynamicListDsModel_hhIWLbI_TypeObject `tfsdk:"type"`
}

type externalDynamicListDsModel_hhIWLbI_TypeObject struct {
	Domain        *externalDynamicListDsModel_hhIWLbI_DomainObject        `tfsdk:"domain"`
	Imei          *externalDynamicListDsModel_hhIWLbI_ImeiObject          `tfsdk:"imei"`
	Imsi          *externalDynamicListDsModel_hhIWLbI_ImsiObject          `tfsdk:"imsi"`
	Ip            *externalDynamicListDsModel_hhIWLbI_IpObject            `tfsdk:"ip"`
	PredefinedIp  *externalDynamicListDsModel_hhIWLbI_PredefinedIpObject  `tfsdk:"predefined_ip"`
	PredefinedUrl *externalDynamicListDsModel_hhIWLbI_PredefinedUrlObject `tfsdk:"predefined_url"`
	Url           *externalDynamicListDsModel_hhIWLbI_UrlObject           `tfsdk:"url"`
}

type externalDynamicListDsModel_hhIWLbI_DomainObject struct {
	CertificateProfile types.String                                             `tfsdk:"certificate_profile"`
	Description        types.String                                             `tfsdk:"description"`
	DomainAuth         *externalDynamicListDsModel_hhIWLbI_DomainAuthObject     `tfsdk:"domain_auth"`
	ExceptionList      types.List                                               `tfsdk:"exception_list"`
	ExpandDomain       types.Bool                                               `tfsdk:"expand_domain"`
	Recurring          externalDynamicListDsModel_hhIWLbI_DomainRecurringObject `tfsdk:"recurring"`
	Url                types.String                                             `tfsdk:"url"`
}

type externalDynamicListDsModel_hhIWLbI_DomainAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListDsModel_hhIWLbI_DomainRecurringObject struct {
	Daily      *externalDynamicListDsModel_hhIWLbI_DomainDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                             `tfsdk:"five_minute"`
	Hourly     types.Bool                                             `tfsdk:"hourly"`
	Monthly    *externalDynamicListDsModel_hhIWLbI_DomainMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListDsModel_hhIWLbI_DomainWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListDsModel_hhIWLbI_DomainDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListDsModel_hhIWLbI_DomainMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListDsModel_hhIWLbI_DomainWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListDsModel_hhIWLbI_ImeiObject struct {
	CertificateProfile types.String                                           `tfsdk:"certificate_profile"`
	Description        types.String                                           `tfsdk:"description"`
	ExceptionList      types.List                                             `tfsdk:"exception_list"`
	ImeiAuth           *externalDynamicListDsModel_hhIWLbI_ImeiAuthObject     `tfsdk:"imei_auth"`
	Recurring          externalDynamicListDsModel_hhIWLbI_ImeiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                           `tfsdk:"url"`
}

type externalDynamicListDsModel_hhIWLbI_ImeiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListDsModel_hhIWLbI_ImeiRecurringObject struct {
	Daily      *externalDynamicListDsModel_hhIWLbI_ImeiDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                           `tfsdk:"five_minute"`
	Hourly     types.Bool                                           `tfsdk:"hourly"`
	Monthly    *externalDynamicListDsModel_hhIWLbI_ImeiMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListDsModel_hhIWLbI_ImeiWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListDsModel_hhIWLbI_ImeiDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListDsModel_hhIWLbI_ImeiMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListDsModel_hhIWLbI_ImeiWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListDsModel_hhIWLbI_ImsiObject struct {
	CertificateProfile types.String                                           `tfsdk:"certificate_profile"`
	Description        types.String                                           `tfsdk:"description"`
	ExceptionList      types.List                                             `tfsdk:"exception_list"`
	ImsiAuth           *externalDynamicListDsModel_hhIWLbI_ImsiAuthObject     `tfsdk:"imsi_auth"`
	Recurring          externalDynamicListDsModel_hhIWLbI_ImsiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                           `tfsdk:"url"`
}

type externalDynamicListDsModel_hhIWLbI_ImsiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListDsModel_hhIWLbI_ImsiRecurringObject struct {
	Daily      *externalDynamicListDsModel_hhIWLbI_ImsiDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                           `tfsdk:"five_minute"`
	Hourly     types.Bool                                           `tfsdk:"hourly"`
	Monthly    *externalDynamicListDsModel_hhIWLbI_ImsiMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListDsModel_hhIWLbI_ImsiWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListDsModel_hhIWLbI_ImsiDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListDsModel_hhIWLbI_ImsiMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListDsModel_hhIWLbI_ImsiWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListDsModel_hhIWLbI_IpObject struct {
	CertificateProfile types.String                                         `tfsdk:"certificate_profile"`
	Description        types.String                                         `tfsdk:"description"`
	ExceptionList      types.List                                           `tfsdk:"exception_list"`
	IpAuth             *externalDynamicListDsModel_hhIWLbI_IpAuthObject     `tfsdk:"ip_auth"`
	Recurring          externalDynamicListDsModel_hhIWLbI_IpRecurringObject `tfsdk:"recurring"`
	Url                types.String                                         `tfsdk:"url"`
}

type externalDynamicListDsModel_hhIWLbI_IpAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListDsModel_hhIWLbI_IpRecurringObject struct {
	Daily      *externalDynamicListDsModel_hhIWLbI_IpDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                         `tfsdk:"five_minute"`
	Hourly     types.Bool                                         `tfsdk:"hourly"`
	Monthly    *externalDynamicListDsModel_hhIWLbI_IpMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListDsModel_hhIWLbI_IpWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListDsModel_hhIWLbI_IpDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListDsModel_hhIWLbI_IpMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListDsModel_hhIWLbI_IpWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListDsModel_hhIWLbI_PredefinedIpObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}

type externalDynamicListDsModel_hhIWLbI_PredefinedUrlObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}

type externalDynamicListDsModel_hhIWLbI_UrlObject struct {
	CertificateProfile types.String                                          `tfsdk:"certificate_profile"`
	Description        types.String                                          `tfsdk:"description"`
	ExceptionList      types.List                                            `tfsdk:"exception_list"`
	Recurring          externalDynamicListDsModel_hhIWLbI_UrlRecurringObject `tfsdk:"recurring"`
	Url                types.String                                          `tfsdk:"url"`
	UrlAuth            *externalDynamicListDsModel_hhIWLbI_UrlAuthObject     `tfsdk:"url_auth"`
}

type externalDynamicListDsModel_hhIWLbI_UrlRecurringObject struct {
	Daily      *externalDynamicListDsModel_hhIWLbI_UrlDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                          `tfsdk:"five_minute"`
	Hourly     types.Bool                                          `tfsdk:"hourly"`
	Monthly    *externalDynamicListDsModel_hhIWLbI_UrlMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListDsModel_hhIWLbI_UrlWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListDsModel_hhIWLbI_UrlDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListDsModel_hhIWLbI_UrlMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListDsModel_hhIWLbI_UrlWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListDsModel_hhIWLbI_UrlAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

// Metadata returns the data source type name.
func (d *externalDynamicListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_external_dynamic_list"
}

// Schema defines the schema for this data source.
func (d *externalDynamicListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"id":true, "name":true, "tfid":true, "type":true} forceNew:map[string]bool{"id":true}
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"type": dsschema.SingleNestedAttribute{
				Description: "The Type param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"domain":true, "imei":true, "imsi":true, "ip":true, "predefined_ip":true, "predefined_url":true, "url":true} forceNew:map[string]bool(nil)
					"domain": dsschema.SingleNestedAttribute{
						Description: "The Domain param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "expand_domain":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": dsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Computed:    true,
							},
							"description": dsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Computed:    true,
							},
							"domain_auth": dsschema.SingleNestedAttribute{
								Description: "The DomainAuth param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": dsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Computed:    true,
									},
									"username": dsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Computed:    true,
									},
								},
							},
							"exception_list": dsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Computed:    true,
								ElementType: types.StringType,
							},
							"expand_domain": dsschema.BoolAttribute{
								Description: "Enable/Disable expand domain. Default: `false`.",
								Computed:    true,
							},
							"recurring": dsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": dsschema.SingleNestedAttribute{
										Description: "The Daily param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
										},
									},
									"five_minute": dsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`.",
										Computed:    true,
									},
									"hourly": dsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`.",
										Computed:    true,
									},
									"monthly": dsschema.SingleNestedAttribute{
										Description: "The Monthly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_month": dsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Computed:    true,
											},
										},
									},
									"weekly": dsschema.SingleNestedAttribute{
										Description: "The Weekly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_week": dsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Computed:    true,
											},
										},
									},
								},
							},
							"url": dsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Computed:    true,
							},
						},
					},
					"imei": dsschema.SingleNestedAttribute{
						Description: "The Imei param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": dsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Computed:    true,
							},
							"description": dsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Computed:    true,
							},
							"exception_list": dsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
								Computed:    true,
								ElementType: types.StringType,
							},
							"imei_auth": dsschema.SingleNestedAttribute{
								Description: "The ImeiAuth param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": dsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Computed:    true,
									},
									"username": dsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Computed:    true,
									},
								},
							},
							"recurring": dsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": dsschema.SingleNestedAttribute{
										Description: "The Daily param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
										},
									},
									"five_minute": dsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`.",
										Computed:    true,
									},
									"hourly": dsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`.",
										Computed:    true,
									},
									"monthly": dsschema.SingleNestedAttribute{
										Description: "The Monthly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_month": dsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Computed:    true,
											},
										},
									},
									"weekly": dsschema.SingleNestedAttribute{
										Description: "The Weekly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_week": dsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Computed:    true,
											},
										},
									},
								},
							},
							"url": dsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Computed:    true,
							},
						},
					},
					"imsi": dsschema.SingleNestedAttribute{
						Description: "The Imsi param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": dsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Computed:    true,
							},
							"description": dsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Computed:    true,
							},
							"exception_list": dsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 34 characters.",
								Computed:    true,
								ElementType: types.StringType,
							},
							"imsi_auth": dsschema.SingleNestedAttribute{
								Description: "The ImsiAuth param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": dsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Computed:    true,
									},
									"username": dsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Computed:    true,
									},
								},
							},
							"recurring": dsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": dsschema.SingleNestedAttribute{
										Description: "The Daily param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
										},
									},
									"five_minute": dsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`.",
										Computed:    true,
									},
									"hourly": dsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`.",
										Computed:    true,
									},
									"monthly": dsschema.SingleNestedAttribute{
										Description: "The Monthly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_month": dsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Computed:    true,
											},
										},
									},
									"weekly": dsschema.SingleNestedAttribute{
										Description: "The Weekly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_week": dsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Computed:    true,
											},
										},
									},
								},
							},
							"url": dsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Computed:    true,
							},
						},
					},
					"ip": dsschema.SingleNestedAttribute{
						Description: "The Ip param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": dsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Computed:    true,
							},
							"description": dsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Computed:    true,
							},
							"exception_list": dsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Computed:    true,
								ElementType: types.StringType,
							},
							"ip_auth": dsschema.SingleNestedAttribute{
								Description: "The IpAuth param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": dsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Computed:    true,
										Sensitive:   true,
									},
									"username": dsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Computed:    true,
									},
								},
							},
							"recurring": dsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": dsschema.SingleNestedAttribute{
										Description: "The Daily param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
										},
									},
									"five_minute": dsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`.",
										Computed:    true,
									},
									"hourly": dsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`.",
										Computed:    true,
									},
									"monthly": dsschema.SingleNestedAttribute{
										Description: "The Monthly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_month": dsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Computed:    true,
											},
										},
									},
									"weekly": dsschema.SingleNestedAttribute{
										Description: "The Weekly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_week": dsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Computed:    true,
											},
										},
									},
								},
							},
							"url": dsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Computed:    true,
							},
						},
					},
					"predefined_ip": dsschema.SingleNestedAttribute{
						Description: "The PredefinedIp param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "exception_list":true, "url":true} forceNew:map[string]bool(nil)
							"description": dsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Computed:    true,
							},
							"exception_list": dsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Computed:    true,
								ElementType: types.StringType,
							},
							"url": dsschema.StringAttribute{
								Description: "The Url param.",
								Computed:    true,
							},
						},
					},
					"predefined_url": dsschema.SingleNestedAttribute{
						Description: "The PredefinedUrl param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "exception_list":true, "url":true} forceNew:map[string]bool(nil)
							"description": dsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Computed:    true,
							},
							"exception_list": dsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Computed:    true,
								ElementType: types.StringType,
							},
							"url": dsschema.StringAttribute{
								Description: "The Url param.",
								Computed:    true,
							},
						},
					},
					"url": dsschema.SingleNestedAttribute{
						Description: "The Url param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": dsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Computed:    true,
							},
							"description": dsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Computed:    true,
							},
							"exception_list": dsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Computed:    true,
								ElementType: types.StringType,
							},
							"recurring": dsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": dsschema.SingleNestedAttribute{
										Description: "The Daily param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
										},
									},
									"five_minute": dsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`.",
										Computed:    true,
									},
									"hourly": dsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`.",
										Computed:    true,
									},
									"monthly": dsschema.SingleNestedAttribute{
										Description: "The Monthly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_month": dsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Computed:    true,
											},
										},
									},
									"weekly": dsschema.SingleNestedAttribute{
										Description: "The Weekly param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": dsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Computed:    true,
											},
											"day_of_week": dsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Computed:    true,
											},
										},
									},
								},
							},
							"url": dsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Computed:    true,
							},
							"url_auth": dsschema.SingleNestedAttribute{
								Description: "The UrlAuth param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": dsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Computed:    true,
									},
									"username": dsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Computed:    true,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (d *externalDynamicListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *externalDynamicListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state externalDynamicListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_external_dynamic_list",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := ljRBvXJ.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Type = externalDynamicListDsModel_hhIWLbI_TypeObject{}

	if ans.Type.Domain == nil {
		state.Type.Domain = nil
	} else {
		state.Type.Domain = &externalDynamicListDsModel_hhIWLbI_DomainObject{}

		state.Type.Domain.CertificateProfile = types.StringPointerValue(ans.Type.Domain.CertificateProfile)

		state.Type.Domain.Description = types.StringPointerValue(ans.Type.Domain.Description)

		if ans.Type.Domain.DomainAuth == nil {
			state.Type.Domain.DomainAuth = nil
		} else {
			state.Type.Domain.DomainAuth = &externalDynamicListDsModel_hhIWLbI_DomainAuthObject{}

			state.Type.Domain.DomainAuth.Password = types.StringValue(ans.Type.Domain.DomainAuth.Password)

			state.Type.Domain.DomainAuth.Username = types.StringValue(ans.Type.Domain.DomainAuth.Username)
		}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Type.Domain.ExceptionList)
		state.Type.Domain.ExceptionList = var0
		resp.Diagnostics.Append(var1.Errors()...)

		state.Type.Domain.ExpandDomain = types.BoolPointerValue(ans.Type.Domain.ExpandDomain)

		state.Type.Domain.Recurring = externalDynamicListDsModel_hhIWLbI_DomainRecurringObject{}

		if ans.Type.Domain.Recurring.Daily == nil {
			state.Type.Domain.Recurring.Daily = nil
		} else {
			state.Type.Domain.Recurring.Daily = &externalDynamicListDsModel_hhIWLbI_DomainDailyObject{}

			state.Type.Domain.Recurring.Daily.At = types.StringValue(ans.Type.Domain.Recurring.Daily.At)
		}

		state.Type.Domain.Recurring.FiveMinute = types.BoolValue(ans.Type.Domain.Recurring.FiveMinute != nil)

		state.Type.Domain.Recurring.Hourly = types.BoolValue(ans.Type.Domain.Recurring.Hourly != nil)

		if ans.Type.Domain.Recurring.Monthly == nil {
			state.Type.Domain.Recurring.Monthly = nil
		} else {
			state.Type.Domain.Recurring.Monthly = &externalDynamicListDsModel_hhIWLbI_DomainMonthyObject{}

			state.Type.Domain.Recurring.Monthly.At = types.StringValue(ans.Type.Domain.Recurring.Monthly.At)

			state.Type.Domain.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Domain.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Domain.Recurring.Weekly == nil {
			state.Type.Domain.Recurring.Weekly = nil
		} else {
			state.Type.Domain.Recurring.Weekly = &externalDynamicListDsModel_hhIWLbI_DomainWeeklyObject{}

			state.Type.Domain.Recurring.Weekly.At = types.StringValue(ans.Type.Domain.Recurring.Weekly.At)

			state.Type.Domain.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Domain.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Domain.Url = types.StringValue(ans.Type.Domain.Url)
	}

	if ans.Type.Imei == nil {
		state.Type.Imei = nil
	} else {
		state.Type.Imei = &externalDynamicListDsModel_hhIWLbI_ImeiObject{}

		state.Type.Imei.CertificateProfile = types.StringPointerValue(ans.Type.Imei.CertificateProfile)

		state.Type.Imei.Description = types.StringPointerValue(ans.Type.Imei.Description)

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Type.Imei.ExceptionList)
		state.Type.Imei.ExceptionList = var2
		resp.Diagnostics.Append(var3.Errors()...)

		if ans.Type.Imei.ImeiAuth == nil {
			state.Type.Imei.ImeiAuth = nil
		} else {
			state.Type.Imei.ImeiAuth = &externalDynamicListDsModel_hhIWLbI_ImeiAuthObject{}

			state.Type.Imei.ImeiAuth.Password = types.StringValue(ans.Type.Imei.ImeiAuth.Password)

			state.Type.Imei.ImeiAuth.Username = types.StringValue(ans.Type.Imei.ImeiAuth.Username)
		}

		state.Type.Imei.Recurring = externalDynamicListDsModel_hhIWLbI_ImeiRecurringObject{}

		if ans.Type.Imei.Recurring.Daily == nil {
			state.Type.Imei.Recurring.Daily = nil
		} else {
			state.Type.Imei.Recurring.Daily = &externalDynamicListDsModel_hhIWLbI_ImeiDailyObject{}

			state.Type.Imei.Recurring.Daily.At = types.StringValue(ans.Type.Imei.Recurring.Daily.At)
		}

		state.Type.Imei.Recurring.FiveMinute = types.BoolValue(ans.Type.Imei.Recurring.FiveMinute != nil)

		state.Type.Imei.Recurring.Hourly = types.BoolValue(ans.Type.Imei.Recurring.Hourly != nil)

		if ans.Type.Imei.Recurring.Monthly == nil {
			state.Type.Imei.Recurring.Monthly = nil
		} else {
			state.Type.Imei.Recurring.Monthly = &externalDynamicListDsModel_hhIWLbI_ImeiMonthyObject{}

			state.Type.Imei.Recurring.Monthly.At = types.StringValue(ans.Type.Imei.Recurring.Monthly.At)

			state.Type.Imei.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Imei.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Imei.Recurring.Weekly == nil {
			state.Type.Imei.Recurring.Weekly = nil
		} else {
			state.Type.Imei.Recurring.Weekly = &externalDynamicListDsModel_hhIWLbI_ImeiWeeklyObject{}

			state.Type.Imei.Recurring.Weekly.At = types.StringValue(ans.Type.Imei.Recurring.Weekly.At)

			state.Type.Imei.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Imei.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Imei.Url = types.StringValue(ans.Type.Imei.Url)
	}

	if ans.Type.Imsi == nil {
		state.Type.Imsi = nil
	} else {
		state.Type.Imsi = &externalDynamicListDsModel_hhIWLbI_ImsiObject{}

		state.Type.Imsi.CertificateProfile = types.StringPointerValue(ans.Type.Imsi.CertificateProfile)

		state.Type.Imsi.Description = types.StringPointerValue(ans.Type.Imsi.Description)

		var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Type.Imsi.ExceptionList)
		state.Type.Imsi.ExceptionList = var4
		resp.Diagnostics.Append(var5.Errors()...)

		if ans.Type.Imsi.ImsiAuth == nil {
			state.Type.Imsi.ImsiAuth = nil
		} else {
			state.Type.Imsi.ImsiAuth = &externalDynamicListDsModel_hhIWLbI_ImsiAuthObject{}

			state.Type.Imsi.ImsiAuth.Password = types.StringValue(ans.Type.Imsi.ImsiAuth.Password)

			state.Type.Imsi.ImsiAuth.Username = types.StringValue(ans.Type.Imsi.ImsiAuth.Username)
		}

		state.Type.Imsi.Recurring = externalDynamicListDsModel_hhIWLbI_ImsiRecurringObject{}

		if ans.Type.Imsi.Recurring.Daily == nil {
			state.Type.Imsi.Recurring.Daily = nil
		} else {
			state.Type.Imsi.Recurring.Daily = &externalDynamicListDsModel_hhIWLbI_ImsiDailyObject{}

			state.Type.Imsi.Recurring.Daily.At = types.StringValue(ans.Type.Imsi.Recurring.Daily.At)
		}

		state.Type.Imsi.Recurring.FiveMinute = types.BoolValue(ans.Type.Imsi.Recurring.FiveMinute != nil)

		state.Type.Imsi.Recurring.Hourly = types.BoolValue(ans.Type.Imsi.Recurring.Hourly != nil)

		if ans.Type.Imsi.Recurring.Monthly == nil {
			state.Type.Imsi.Recurring.Monthly = nil
		} else {
			state.Type.Imsi.Recurring.Monthly = &externalDynamicListDsModel_hhIWLbI_ImsiMonthyObject{}

			state.Type.Imsi.Recurring.Monthly.At = types.StringValue(ans.Type.Imsi.Recurring.Monthly.At)

			state.Type.Imsi.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Imsi.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Imsi.Recurring.Weekly == nil {
			state.Type.Imsi.Recurring.Weekly = nil
		} else {
			state.Type.Imsi.Recurring.Weekly = &externalDynamicListDsModel_hhIWLbI_ImsiWeeklyObject{}

			state.Type.Imsi.Recurring.Weekly.At = types.StringValue(ans.Type.Imsi.Recurring.Weekly.At)

			state.Type.Imsi.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Imsi.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Imsi.Url = types.StringValue(ans.Type.Imsi.Url)
	}

	if ans.Type.Ip == nil {
		state.Type.Ip = nil
	} else {
		state.Type.Ip = &externalDynamicListDsModel_hhIWLbI_IpObject{}

		state.Type.Ip.CertificateProfile = types.StringPointerValue(ans.Type.Ip.CertificateProfile)

		state.Type.Ip.Description = types.StringPointerValue(ans.Type.Ip.Description)

		var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Type.Ip.ExceptionList)
		state.Type.Ip.ExceptionList = var6
		resp.Diagnostics.Append(var7.Errors()...)

		if ans.Type.Ip.IpAuth == nil {
			state.Type.Ip.IpAuth = nil
		} else {
			state.Type.Ip.IpAuth = &externalDynamicListDsModel_hhIWLbI_IpAuthObject{}

			state.Type.Ip.IpAuth.Password = types.StringValue(ans.Type.Ip.IpAuth.Password)

			state.Type.Ip.IpAuth.Username = types.StringValue(ans.Type.Ip.IpAuth.Username)
		}

		state.Type.Ip.Recurring = externalDynamicListDsModel_hhIWLbI_IpRecurringObject{}

		if ans.Type.Ip.Recurring.Daily == nil {
			state.Type.Ip.Recurring.Daily = nil
		} else {
			state.Type.Ip.Recurring.Daily = &externalDynamicListDsModel_hhIWLbI_IpDailyObject{}

			state.Type.Ip.Recurring.Daily.At = types.StringValue(ans.Type.Ip.Recurring.Daily.At)
		}

		state.Type.Ip.Recurring.FiveMinute = types.BoolValue(ans.Type.Ip.Recurring.FiveMinute != nil)

		state.Type.Ip.Recurring.Hourly = types.BoolValue(ans.Type.Ip.Recurring.Hourly != nil)

		if ans.Type.Ip.Recurring.Monthly == nil {
			state.Type.Ip.Recurring.Monthly = nil
		} else {
			state.Type.Ip.Recurring.Monthly = &externalDynamicListDsModel_hhIWLbI_IpMonthyObject{}

			state.Type.Ip.Recurring.Monthly.At = types.StringValue(ans.Type.Ip.Recurring.Monthly.At)

			state.Type.Ip.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Ip.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Ip.Recurring.Weekly == nil {
			state.Type.Ip.Recurring.Weekly = nil
		} else {
			state.Type.Ip.Recurring.Weekly = &externalDynamicListDsModel_hhIWLbI_IpWeeklyObject{}

			state.Type.Ip.Recurring.Weekly.At = types.StringValue(ans.Type.Ip.Recurring.Weekly.At)

			state.Type.Ip.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Ip.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Ip.Url = types.StringValue(ans.Type.Ip.Url)
	}

	if ans.Type.PredefinedIp == nil {
		state.Type.PredefinedIp = nil
	} else {
		state.Type.PredefinedIp = &externalDynamicListDsModel_hhIWLbI_PredefinedIpObject{}

		state.Type.PredefinedIp.Description = types.StringPointerValue(ans.Type.PredefinedIp.Description)

		var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Type.PredefinedIp.ExceptionList)
		state.Type.PredefinedIp.ExceptionList = var8
		resp.Diagnostics.Append(var9.Errors()...)

		state.Type.PredefinedIp.Url = types.StringValue(ans.Type.PredefinedIp.Url)
	}

	if ans.Type.PredefinedUrl == nil {
		state.Type.PredefinedUrl = nil
	} else {
		state.Type.PredefinedUrl = &externalDynamicListDsModel_hhIWLbI_PredefinedUrlObject{}

		state.Type.PredefinedUrl.Description = types.StringPointerValue(ans.Type.PredefinedUrl.Description)

		var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Type.PredefinedUrl.ExceptionList)
		state.Type.PredefinedUrl.ExceptionList = var10
		resp.Diagnostics.Append(var11.Errors()...)

		state.Type.PredefinedUrl.Url = types.StringValue(ans.Type.PredefinedUrl.Url)
	}

	if ans.Type.Url == nil {
		state.Type.Url = nil
	} else {
		state.Type.Url = &externalDynamicListDsModel_hhIWLbI_UrlObject{}

		state.Type.Url.CertificateProfile = types.StringPointerValue(ans.Type.Url.CertificateProfile)

		state.Type.Url.Description = types.StringPointerValue(ans.Type.Url.Description)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.Type.Url.ExceptionList)
		state.Type.Url.ExceptionList = var12
		resp.Diagnostics.Append(var13.Errors()...)

		state.Type.Url.Recurring = externalDynamicListDsModel_hhIWLbI_UrlRecurringObject{}

		if ans.Type.Url.Recurring.Daily == nil {
			state.Type.Url.Recurring.Daily = nil
		} else {
			state.Type.Url.Recurring.Daily = &externalDynamicListDsModel_hhIWLbI_UrlDailyObject{}

			state.Type.Url.Recurring.Daily.At = types.StringValue(ans.Type.Url.Recurring.Daily.At)
		}

		state.Type.Url.Recurring.FiveMinute = types.BoolValue(ans.Type.Url.Recurring.FiveMinute != nil)

		state.Type.Url.Recurring.Hourly = types.BoolValue(ans.Type.Url.Recurring.Hourly != nil)

		if ans.Type.Url.Recurring.Monthly == nil {
			state.Type.Url.Recurring.Monthly = nil
		} else {
			state.Type.Url.Recurring.Monthly = &externalDynamicListDsModel_hhIWLbI_UrlMonthyObject{}

			state.Type.Url.Recurring.Monthly.At = types.StringValue(ans.Type.Url.Recurring.Monthly.At)

			state.Type.Url.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Url.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Url.Recurring.Weekly == nil {
			state.Type.Url.Recurring.Weekly = nil
		} else {
			state.Type.Url.Recurring.Weekly = &externalDynamicListDsModel_hhIWLbI_UrlWeeklyObject{}

			state.Type.Url.Recurring.Weekly.At = types.StringValue(ans.Type.Url.Recurring.Weekly.At)

			state.Type.Url.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Url.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Url.Url = types.StringValue(ans.Type.Url.Url)

		if ans.Type.Url.UrlAuth == nil {
			state.Type.Url.UrlAuth = nil
		} else {
			state.Type.Url.UrlAuth = &externalDynamicListDsModel_hhIWLbI_UrlAuthObject{}

			state.Type.Url.UrlAuth.Password = types.StringValue(ans.Type.Url.UrlAuth.Password)

			state.Type.Url.UrlAuth.Username = types.StringValue(ans.Type.Url.UrlAuth.Username)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource              = &externalDynamicListResource{}
	_ resource.ResourceWithConfigure = &externalDynamicListResource{}
)

func NewExternalDynamicListResource() resource.Resource {
	return &externalDynamicListResource{}
}

type externalDynamicListResource struct {
	client *scm.Client
}

// externalDynamicListRsModel is the model.
type externalDynamicListRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String                                  `tfsdk:"device"`
	Folder  types.String                                  `tfsdk:"folder"`
	Id      types.String                                  `tfsdk:"id"`
	Name    types.String                                  `tfsdk:"name"`
	Snippet types.String                                  `tfsdk:"snippet"`
	Type    externalDynamicListRsModel_hhIWLbI_TypeObject `tfsdk:"type"`

	// Output.
	EncryptedValues types.Map `tfsdk:"encrypted_values"`
	// omit input: id
	// omit input: name
	// omit input: type
}

type externalDynamicListRsModel_hhIWLbI_TypeObject struct {
	Domain        *externalDynamicListRsModel_hhIWLbI_DomainObject        `tfsdk:"domain"`
	Imei          *externalDynamicListRsModel_hhIWLbI_ImeiObject          `tfsdk:"imei"`
	Imsi          *externalDynamicListRsModel_hhIWLbI_ImsiObject          `tfsdk:"imsi"`
	Ip            *externalDynamicListRsModel_hhIWLbI_IpObject            `tfsdk:"ip"`
	PredefinedIp  *externalDynamicListRsModel_hhIWLbI_PredefinedIpObject  `tfsdk:"predefined_ip"`
	PredefinedUrl *externalDynamicListRsModel_hhIWLbI_PredefinedUrlObject `tfsdk:"predefined_url"`
	Url           *externalDynamicListRsModel_hhIWLbI_UrlObject           `tfsdk:"url"`
}

type externalDynamicListRsModel_hhIWLbI_DomainObject struct {
	CertificateProfile types.String                                             `tfsdk:"certificate_profile"`
	Description        types.String                                             `tfsdk:"description"`
	DomainAuth         *externalDynamicListRsModel_hhIWLbI_DomainAuthObject     `tfsdk:"domain_auth"`
	ExceptionList      types.List                                               `tfsdk:"exception_list"`
	ExpandDomain       types.Bool                                               `tfsdk:"expand_domain"`
	Recurring          externalDynamicListRsModel_hhIWLbI_DomainRecurringObject `tfsdk:"recurring"`
	Url                types.String                                             `tfsdk:"url"`
}

type externalDynamicListRsModel_hhIWLbI_DomainAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListRsModel_hhIWLbI_DomainRecurringObject struct {
	Daily      *externalDynamicListRsModel_hhIWLbI_DomainDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                             `tfsdk:"five_minute"`
	Hourly     types.Bool                                             `tfsdk:"hourly"`
	Monthly    *externalDynamicListRsModel_hhIWLbI_DomainMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListRsModel_hhIWLbI_DomainWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListRsModel_hhIWLbI_DomainDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListRsModel_hhIWLbI_DomainMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListRsModel_hhIWLbI_DomainWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListRsModel_hhIWLbI_ImeiObject struct {
	CertificateProfile types.String                                           `tfsdk:"certificate_profile"`
	Description        types.String                                           `tfsdk:"description"`
	ExceptionList      types.List                                             `tfsdk:"exception_list"`
	ImeiAuth           *externalDynamicListRsModel_hhIWLbI_ImeiAuthObject     `tfsdk:"imei_auth"`
	Recurring          externalDynamicListRsModel_hhIWLbI_ImeiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                           `tfsdk:"url"`
}

type externalDynamicListRsModel_hhIWLbI_ImeiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListRsModel_hhIWLbI_ImeiRecurringObject struct {
	Daily      *externalDynamicListRsModel_hhIWLbI_ImeiDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                           `tfsdk:"five_minute"`
	Hourly     types.Bool                                           `tfsdk:"hourly"`
	Monthly    *externalDynamicListRsModel_hhIWLbI_ImeiMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListRsModel_hhIWLbI_ImeiWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListRsModel_hhIWLbI_ImeiDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListRsModel_hhIWLbI_ImeiMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListRsModel_hhIWLbI_ImeiWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListRsModel_hhIWLbI_ImsiObject struct {
	CertificateProfile types.String                                           `tfsdk:"certificate_profile"`
	Description        types.String                                           `tfsdk:"description"`
	ExceptionList      types.List                                             `tfsdk:"exception_list"`
	ImsiAuth           *externalDynamicListRsModel_hhIWLbI_ImsiAuthObject     `tfsdk:"imsi_auth"`
	Recurring          externalDynamicListRsModel_hhIWLbI_ImsiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                           `tfsdk:"url"`
}

type externalDynamicListRsModel_hhIWLbI_ImsiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListRsModel_hhIWLbI_ImsiRecurringObject struct {
	Daily      *externalDynamicListRsModel_hhIWLbI_ImsiDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                           `tfsdk:"five_minute"`
	Hourly     types.Bool                                           `tfsdk:"hourly"`
	Monthly    *externalDynamicListRsModel_hhIWLbI_ImsiMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListRsModel_hhIWLbI_ImsiWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListRsModel_hhIWLbI_ImsiDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListRsModel_hhIWLbI_ImsiMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListRsModel_hhIWLbI_ImsiWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListRsModel_hhIWLbI_IpObject struct {
	CertificateProfile types.String                                         `tfsdk:"certificate_profile"`
	Description        types.String                                         `tfsdk:"description"`
	ExceptionList      types.List                                           `tfsdk:"exception_list"`
	IpAuth             *externalDynamicListRsModel_hhIWLbI_IpAuthObject     `tfsdk:"ip_auth"`
	Recurring          externalDynamicListRsModel_hhIWLbI_IpRecurringObject `tfsdk:"recurring"`
	Url                types.String                                         `tfsdk:"url"`
}

type externalDynamicListRsModel_hhIWLbI_IpAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

type externalDynamicListRsModel_hhIWLbI_IpRecurringObject struct {
	Daily      *externalDynamicListRsModel_hhIWLbI_IpDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                         `tfsdk:"five_minute"`
	Hourly     types.Bool                                         `tfsdk:"hourly"`
	Monthly    *externalDynamicListRsModel_hhIWLbI_IpMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListRsModel_hhIWLbI_IpWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListRsModel_hhIWLbI_IpDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListRsModel_hhIWLbI_IpMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListRsModel_hhIWLbI_IpWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListRsModel_hhIWLbI_PredefinedIpObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}

type externalDynamicListRsModel_hhIWLbI_PredefinedUrlObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}

type externalDynamicListRsModel_hhIWLbI_UrlObject struct {
	CertificateProfile types.String                                          `tfsdk:"certificate_profile"`
	Description        types.String                                          `tfsdk:"description"`
	ExceptionList      types.List                                            `tfsdk:"exception_list"`
	Recurring          externalDynamicListRsModel_hhIWLbI_UrlRecurringObject `tfsdk:"recurring"`
	Url                types.String                                          `tfsdk:"url"`
	UrlAuth            *externalDynamicListRsModel_hhIWLbI_UrlAuthObject     `tfsdk:"url_auth"`
}

type externalDynamicListRsModel_hhIWLbI_UrlRecurringObject struct {
	Daily      *externalDynamicListRsModel_hhIWLbI_UrlDailyObject  `tfsdk:"daily"`
	FiveMinute types.Bool                                          `tfsdk:"five_minute"`
	Hourly     types.Bool                                          `tfsdk:"hourly"`
	Monthly    *externalDynamicListRsModel_hhIWLbI_UrlMonthyObject `tfsdk:"monthly"`
	Weekly     *externalDynamicListRsModel_hhIWLbI_UrlWeeklyObject `tfsdk:"weekly"`
}

type externalDynamicListRsModel_hhIWLbI_UrlDailyObject struct {
	At types.String `tfsdk:"at"`
}

type externalDynamicListRsModel_hhIWLbI_UrlMonthyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}

type externalDynamicListRsModel_hhIWLbI_UrlWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

type externalDynamicListRsModel_hhIWLbI_UrlAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}

// Metadata returns the data source type name.
func (r *externalDynamicListResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_external_dynamic_list"
}

// Schema defines the schema for this data source.
func (r *externalDynamicListResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "id":true, "name":true, "snippet":true, "type":true} outputs:map[string]bool{"id":true, "name":true, "tfid":true, "type":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"encrypted_values": rsschema.MapAttribute{
				Description: "(Internal use) Encrypted values returned from the API.",
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"type": rsschema.SingleNestedAttribute{
				Description: "The Type param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"domain":true, "imei":true, "imsi":true, "ip":true, "predefined_ip":true, "predefined_url":true, "url":true} outputs:map[string]bool{"domain":true, "imei":true, "imsi":true, "ip":true, "predefined_ip":true, "predefined_url":true, "url":true} forceNew:map[string]bool(nil)
					"domain": rsschema.SingleNestedAttribute{
						Description: "The Domain param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`",
						Optional:    true,
						Validators: []validator.Object{
							objectvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("imei"),
								path.MatchRelative().AtParent().AtName("imsi"),
								path.MatchRelative().AtParent().AtName("ip"),
								path.MatchRelative().AtParent().AtName("predefined_ip"),
								path.MatchRelative().AtParent().AtName("predefined_url"),
								path.MatchRelative().AtParent().AtName("url"),
							),
						},
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "expand_domain":true, "recurring":true, "url":true} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "expand_domain":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": rsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("None"),
							},
							"description": rsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"domain_auth": rsschema.SingleNestedAttribute{
								Description: "The DomainAuth param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"password":true, "username":true} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": rsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(255),
										},
									},
									"username": rsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 255),
										},
									},
								},
							},
							"exception_list": rsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Optional:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.LengthAtMost(255),
									),
								},
							},
							"expand_domain": rsschema.BoolAttribute{
								Description: "Enable/Disable expand domain. Default: `false`.",
								Optional:    true,
								Computed:    true,
								Default:     booldefault.StaticBool(false),
							},
							"recurring": rsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Required:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": rsschema.SingleNestedAttribute{
										Description: "The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Validators: []validator.Object{
											objectvalidator.ExactlyOneOf(
												path.MatchRelative(),
												path.MatchRelative().AtParent().AtName("five_minute"),
												path.MatchRelative().AtParent().AtName("hourly"),
												path.MatchRelative().AtParent().AtName("monthly"),
												path.MatchRelative().AtParent().AtName("weekly"),
											),
										},
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
										},
									},
									"five_minute": rsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"hourly": rsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"monthly": rsschema.SingleNestedAttribute{
										Description: "The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_month":true} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_month": rsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Required:    true,
												Validators: []validator.Int64{
													int64validator.Between(1, 31),
												},
											},
										},
									},
									"weekly": rsschema.SingleNestedAttribute{
										Description: "The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_week":true} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_week": rsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Required:    true,
												Validators: []validator.String{
													stringvalidator.OneOf("sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"),
												},
											},
										},
									},
								},
							},
							"url": rsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("http://"),
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
						},
					},
					"imei": rsschema.SingleNestedAttribute{
						Description: "The Imei param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": rsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("None"),
							},
							"description": rsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"exception_list": rsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 32 characters.",
								Optional:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.LengthAtMost(32),
									),
								},
							},
							"imei_auth": rsschema.SingleNestedAttribute{
								Description: "The ImeiAuth param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"password":true, "username":true} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": rsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(255),
										},
									},
									"username": rsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 255),
										},
									},
								},
							},
							"recurring": rsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Required:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": rsschema.SingleNestedAttribute{
										Description: "The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Validators: []validator.Object{
											objectvalidator.ExactlyOneOf(
												path.MatchRelative(),
												path.MatchRelative().AtParent().AtName("five_minute"),
												path.MatchRelative().AtParent().AtName("hourly"),
												path.MatchRelative().AtParent().AtName("monthly"),
												path.MatchRelative().AtParent().AtName("weekly"),
											),
										},
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
										},
									},
									"five_minute": rsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"hourly": rsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"monthly": rsschema.SingleNestedAttribute{
										Description: "The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_month":true} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_month": rsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Required:    true,
												Validators: []validator.Int64{
													int64validator.Between(1, 31),
												},
											},
										},
									},
									"weekly": rsschema.SingleNestedAttribute{
										Description: "The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_week":true} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_week": rsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Required:    true,
												Validators: []validator.String{
													stringvalidator.OneOf("sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"),
												},
											},
										},
									},
								},
							},
							"url": rsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("http://"),
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
						},
					},
					"imsi": rsschema.SingleNestedAttribute{
						Description: "The Imsi param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": rsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("None"),
							},
							"description": rsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"exception_list": rsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 34 characters.",
								Optional:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.LengthAtMost(34),
									),
								},
							},
							"imsi_auth": rsschema.SingleNestedAttribute{
								Description: "The ImsiAuth param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"password":true, "username":true} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": rsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(255),
										},
									},
									"username": rsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 255),
										},
									},
								},
							},
							"recurring": rsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Required:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": rsschema.SingleNestedAttribute{
										Description: "The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Validators: []validator.Object{
											objectvalidator.ExactlyOneOf(
												path.MatchRelative(),
												path.MatchRelative().AtParent().AtName("five_minute"),
												path.MatchRelative().AtParent().AtName("hourly"),
												path.MatchRelative().AtParent().AtName("monthly"),
												path.MatchRelative().AtParent().AtName("weekly"),
											),
										},
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
										},
									},
									"five_minute": rsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"hourly": rsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"monthly": rsschema.SingleNestedAttribute{
										Description: "The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_month":true} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_month": rsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Required:    true,
												Validators: []validator.Int64{
													int64validator.Between(1, 31),
												},
											},
										},
									},
									"weekly": rsschema.SingleNestedAttribute{
										Description: "The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_week":true} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_week": rsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Required:    true,
												Validators: []validator.String{
													stringvalidator.OneOf("sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"),
												},
											},
										},
									},
								},
							},
							"url": rsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("http://"),
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
						},
					},
					"ip": rsschema.SingleNestedAttribute{
						Description: "The Ip param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": rsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("None"),
							},
							"description": rsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"exception_list": rsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Optional:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.LengthAtMost(255),
									),
								},
							},
							"ip_auth": rsschema.SingleNestedAttribute{
								Description: "The IpAuth param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"password":true, "username":true} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": rsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Required:    true,
										Sensitive:   true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(255),
										},
									},
									"username": rsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 255),
										},
									},
								},
							},
							"recurring": rsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Required:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": rsschema.SingleNestedAttribute{
										Description: "The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Validators: []validator.Object{
											objectvalidator.ExactlyOneOf(
												path.MatchRelative(),
												path.MatchRelative().AtParent().AtName("five_minute"),
												path.MatchRelative().AtParent().AtName("hourly"),
												path.MatchRelative().AtParent().AtName("monthly"),
												path.MatchRelative().AtParent().AtName("weekly"),
											),
										},
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
										},
									},
									"five_minute": rsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"hourly": rsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"monthly": rsschema.SingleNestedAttribute{
										Description: "The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_month":true} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_month": rsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Required:    true,
												Validators: []validator.Int64{
													int64validator.Between(1, 31),
												},
											},
										},
									},
									"weekly": rsschema.SingleNestedAttribute{
										Description: "The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_week":true} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_week": rsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Required:    true,
												Validators: []validator.String{
													stringvalidator.OneOf("sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"),
												},
											},
										},
									},
								},
							},
							"url": rsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("http://"),
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
						},
					},
					"predefined_ip": rsschema.SingleNestedAttribute{
						Description: "The PredefinedIp param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"description":true, "exception_list":true, "url":true} outputs:map[string]bool{"description":true, "exception_list":true, "url":true} forceNew:map[string]bool(nil)
							"description": rsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"exception_list": rsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Optional:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.LengthAtMost(255),
									),
								},
							},
							"url": rsschema.StringAttribute{
								Description: "The Url param.",
								Required:    true,
							},
						},
					},
					"predefined_url": rsschema.SingleNestedAttribute{
						Description: "The PredefinedUrl param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"description":true, "exception_list":true, "url":true} outputs:map[string]bool{"description":true, "exception_list":true, "url":true} forceNew:map[string]bool(nil)
							"description": rsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"exception_list": rsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Optional:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.LengthAtMost(255),
									),
								},
							},
							"url": rsschema.StringAttribute{
								Description: "The Url param.",
								Required:    true,
							},
						},
					},
					"url": rsschema.SingleNestedAttribute{
						Description: "The Url param. Ensure that only one of the following is specified: `domain`, `imei`, `imsi`, `ip`, `predefined_ip`, `predefined_url`, `url`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} outputs:map[string]bool{"auth":true, "certificate_profile":true, "description":true, "exception_list":true, "recurring":true, "url":true} forceNew:map[string]bool(nil)
							"certificate_profile": rsschema.StringAttribute{
								Description: "Profile for authenticating client certificates. Default: `\"None\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("None"),
							},
							"description": rsschema.StringAttribute{
								Description: "The Description param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"exception_list": rsschema.ListAttribute{
								Description: "The ExceptionList param. Individual elements in this list are subject to additional validation. String length must not exceed 255 characters.",
								Optional:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.LengthAtMost(255),
									),
								},
							},
							"recurring": rsschema.SingleNestedAttribute{
								Description: "The Recurring param.",
								Required:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} outputs:map[string]bool{"daily":true, "five_minute":true, "hourly":true, "monthly":true, "weekly":true} forceNew:map[string]bool(nil)
									"daily": rsschema.SingleNestedAttribute{
										Description: "The Daily param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Validators: []validator.Object{
											objectvalidator.ExactlyOneOf(
												path.MatchRelative(),
												path.MatchRelative().AtParent().AtName("five_minute"),
												path.MatchRelative().AtParent().AtName("hourly"),
												path.MatchRelative().AtParent().AtName("monthly"),
												path.MatchRelative().AtParent().AtName("weekly"),
											),
										},
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true} outputs:map[string]bool{"at":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
										},
									},
									"five_minute": rsschema.BoolAttribute{
										Description: "The FiveMinute param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"hourly": rsschema.BoolAttribute{
										Description: "The Hourly param. Default: `false`. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Computed:    true,
										Default:     booldefault.StaticBool(false),
									},
									"monthly": rsschema.SingleNestedAttribute{
										Description: "The Monthly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_month":true} outputs:map[string]bool{"at":true, "day_of_month":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_month": rsschema.Int64Attribute{
												Description: "The DayOfMonth param. Value must be between 1 and 31.",
												Required:    true,
												Validators: []validator.Int64{
													int64validator.Between(1, 31),
												},
											},
										},
									},
									"weekly": rsschema.SingleNestedAttribute{
										Description: "The Weekly param. Ensure that only one of the following is specified: `daily`, `five_minute`, `hourly`, `monthly`, `weekly`",
										Optional:    true,
										Attributes: map[string]rsschema.Attribute{
											// inputs:map[string]bool{"at":true, "day_of_week":true} outputs:map[string]bool{"at":true, "day_of_week":true} forceNew:map[string]bool(nil)
											"at": rsschema.StringAttribute{
												Description: "Time specification hh (e.g. 20). String length must be between 2 and 2 characters. String validation regex: `([01][0-9]|[2][0-3])`. Default: `\"00\"`.",
												Optional:    true,
												Computed:    true,
												Default:     stringdefault.StaticString("00"),
												Validators: []validator.String{
													stringvalidator.LengthBetween(2, 2),
													stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3])"), ""),
												},
											},
											"day_of_week": rsschema.StringAttribute{
												Description: "The DayOfWeek param. String must be one of these: `\"sunday\"`, `\"monday\"`, `\"tuesday\"`, `\"wednesday\"`, `\"thursday\"`, `\"friday\"`, `\"saturday\"`.",
												Required:    true,
												Validators: []validator.String{
													stringvalidator.OneOf("sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"),
												},
											},
										},
									},
								},
							},
							"url": rsschema.StringAttribute{
								Description: "The Url param. String length must not exceed 255 characters. Default: `\"http://\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("http://"),
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"url_auth": rsschema.SingleNestedAttribute{
								Description: "The UrlAuth param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"password":true, "username":true} outputs:map[string]bool{"password":true, "username":true} forceNew:map[string]bool(nil)
									"password": rsschema.StringAttribute{
										Description: "The Password param. String length must not exceed 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthAtMost(255),
										},
									},
									"username": rsschema.StringAttribute{
										Description: "The Username param. String length must be between 1 and 255 characters.",
										Required:    true,
										Validators: []validator.String{
											stringvalidator.LengthBetween(1, 255),
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *externalDynamicListResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *externalDynamicListResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state externalDynamicListRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String)

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_external_dynamic_list",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := ljRBvXJ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &hhIWLbI.Config{}

	input.Request.Name = state.Name.ValueString()

	if state.Type.Domain != nil {
		input.Request.Type.Domain = &hhIWLbI.DomainObject{}

		input.Request.Type.Domain.CertificateProfile = state.Type.Domain.CertificateProfile.ValueStringPointer()

		input.Request.Type.Domain.Description = state.Type.Domain.Description.ValueStringPointer()

		if state.Type.Domain.DomainAuth != nil {
			input.Request.Type.Domain.DomainAuth = &hhIWLbI.DomainAuthObject{}

			input.Request.Type.Domain.DomainAuth.Password = state.Type.Domain.DomainAuth.Password.ValueString()

			input.Request.Type.Domain.DomainAuth.Username = state.Type.Domain.DomainAuth.Username.ValueString()
		}

		resp.Diagnostics.Append(state.Type.Domain.ExceptionList.ElementsAs(ctx, &input.Request.Type.Domain.ExceptionList, false)...)
		//if len(state.Type.Domain.ExceptionList) != 0 {
		//    input.Request.Type.Domain.ExceptionList = make([]string, 0, len(state.Type.Domain.ExceptionList))
		//    for _, var0 := range state.Type.Domain.ExceptionList {
		//        input.Request.Type.Domain.ExceptionList = append(input.Request.Type.Domain.ExceptionList, var0.ValueString())
		//    }
		//}

		input.Request.Type.Domain.ExpandDomain = state.Type.Domain.ExpandDomain.ValueBoolPointer()

		if state.Type.Domain.Recurring.Daily != nil {
			input.Request.Type.Domain.Recurring.Daily = &hhIWLbI.DomainDailyObject{}

			input.Request.Type.Domain.Recurring.Daily.At = state.Type.Domain.Recurring.Daily.At.ValueString()
		}

		if !state.Type.Domain.Recurring.FiveMinute.IsNull() && state.Type.Domain.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Domain.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !state.Type.Domain.Recurring.Hourly.IsNull() && state.Type.Domain.Recurring.Hourly.ValueBool() {
			input.Request.Type.Domain.Recurring.Hourly = map[string]interface{}{}
		}

		if state.Type.Domain.Recurring.Monthly != nil {
			input.Request.Type.Domain.Recurring.Monthly = &hhIWLbI.DomainMonthyObject{}

			input.Request.Type.Domain.Recurring.Monthly.At = state.Type.Domain.Recurring.Monthly.At.ValueString()

			input.Request.Type.Domain.Recurring.Monthly.DayOfMonth = state.Type.Domain.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if state.Type.Domain.Recurring.Weekly != nil {
			input.Request.Type.Domain.Recurring.Weekly = &hhIWLbI.DomainWeeklyObject{}

			input.Request.Type.Domain.Recurring.Weekly.At = state.Type.Domain.Recurring.Weekly.At.ValueString()

			input.Request.Type.Domain.Recurring.Weekly.DayOfWeek = state.Type.Domain.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Domain.Url = state.Type.Domain.Url.ValueString()
	}

	if state.Type.Imei != nil {
		input.Request.Type.Imei = &hhIWLbI.ImeiObject{}

		input.Request.Type.Imei.CertificateProfile = state.Type.Imei.CertificateProfile.ValueStringPointer()

		input.Request.Type.Imei.Description = state.Type.Imei.Description.ValueStringPointer()

		resp.Diagnostics.Append(state.Type.Imei.ExceptionList.ElementsAs(ctx, &input.Request.Type.Imei.ExceptionList, false)...)
		//if len(state.Type.Imei.ExceptionList) != 0 {
		//    input.Request.Type.Imei.ExceptionList = make([]string, 0, len(state.Type.Imei.ExceptionList))
		//    for _, var1 := range state.Type.Imei.ExceptionList {
		//        input.Request.Type.Imei.ExceptionList = append(input.Request.Type.Imei.ExceptionList, var1.ValueString())
		//    }
		//}

		if state.Type.Imei.ImeiAuth != nil {
			input.Request.Type.Imei.ImeiAuth = &hhIWLbI.ImeiAuthObject{}

			input.Request.Type.Imei.ImeiAuth.Password = state.Type.Imei.ImeiAuth.Password.ValueString()

			input.Request.Type.Imei.ImeiAuth.Username = state.Type.Imei.ImeiAuth.Username.ValueString()
		}

		if state.Type.Imei.Recurring.Daily != nil {
			input.Request.Type.Imei.Recurring.Daily = &hhIWLbI.ImeiDailyObject{}

			input.Request.Type.Imei.Recurring.Daily.At = state.Type.Imei.Recurring.Daily.At.ValueString()
		}

		if !state.Type.Imei.Recurring.FiveMinute.IsNull() && state.Type.Imei.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Imei.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !state.Type.Imei.Recurring.Hourly.IsNull() && state.Type.Imei.Recurring.Hourly.ValueBool() {
			input.Request.Type.Imei.Recurring.Hourly = map[string]interface{}{}
		}

		if state.Type.Imei.Recurring.Monthly != nil {
			input.Request.Type.Imei.Recurring.Monthly = &hhIWLbI.ImeiMonthyObject{}

			input.Request.Type.Imei.Recurring.Monthly.At = state.Type.Imei.Recurring.Monthly.At.ValueString()

			input.Request.Type.Imei.Recurring.Monthly.DayOfMonth = state.Type.Imei.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if state.Type.Imei.Recurring.Weekly != nil {
			input.Request.Type.Imei.Recurring.Weekly = &hhIWLbI.ImeiWeeklyObject{}

			input.Request.Type.Imei.Recurring.Weekly.At = state.Type.Imei.Recurring.Weekly.At.ValueString()

			input.Request.Type.Imei.Recurring.Weekly.DayOfWeek = state.Type.Imei.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Imei.Url = state.Type.Imei.Url.ValueString()
	}

	if state.Type.Imsi != nil {
		input.Request.Type.Imsi = &hhIWLbI.ImsiObject{}

		input.Request.Type.Imsi.CertificateProfile = state.Type.Imsi.CertificateProfile.ValueStringPointer()

		input.Request.Type.Imsi.Description = state.Type.Imsi.Description.ValueStringPointer()

		resp.Diagnostics.Append(state.Type.Imsi.ExceptionList.ElementsAs(ctx, &input.Request.Type.Imsi.ExceptionList, false)...)
		//if len(state.Type.Imsi.ExceptionList) != 0 {
		//    input.Request.Type.Imsi.ExceptionList = make([]string, 0, len(state.Type.Imsi.ExceptionList))
		//    for _, var2 := range state.Type.Imsi.ExceptionList {
		//        input.Request.Type.Imsi.ExceptionList = append(input.Request.Type.Imsi.ExceptionList, var2.ValueString())
		//    }
		//}

		if state.Type.Imsi.ImsiAuth != nil {
			input.Request.Type.Imsi.ImsiAuth = &hhIWLbI.ImsiAuthObject{}

			input.Request.Type.Imsi.ImsiAuth.Password = state.Type.Imsi.ImsiAuth.Password.ValueString()

			input.Request.Type.Imsi.ImsiAuth.Username = state.Type.Imsi.ImsiAuth.Username.ValueString()
		}

		if state.Type.Imsi.Recurring.Daily != nil {
			input.Request.Type.Imsi.Recurring.Daily = &hhIWLbI.ImsiDailyObject{}

			input.Request.Type.Imsi.Recurring.Daily.At = state.Type.Imsi.Recurring.Daily.At.ValueString()
		}

		if !state.Type.Imsi.Recurring.FiveMinute.IsNull() && state.Type.Imsi.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Imsi.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !state.Type.Imsi.Recurring.Hourly.IsNull() && state.Type.Imsi.Recurring.Hourly.ValueBool() {
			input.Request.Type.Imsi.Recurring.Hourly = map[string]interface{}{}
		}

		if state.Type.Imsi.Recurring.Monthly != nil {
			input.Request.Type.Imsi.Recurring.Monthly = &hhIWLbI.ImsiMonthyObject{}

			input.Request.Type.Imsi.Recurring.Monthly.At = state.Type.Imsi.Recurring.Monthly.At.ValueString()

			input.Request.Type.Imsi.Recurring.Monthly.DayOfMonth = state.Type.Imsi.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if state.Type.Imsi.Recurring.Weekly != nil {
			input.Request.Type.Imsi.Recurring.Weekly = &hhIWLbI.ImsiWeeklyObject{}

			input.Request.Type.Imsi.Recurring.Weekly.At = state.Type.Imsi.Recurring.Weekly.At.ValueString()

			input.Request.Type.Imsi.Recurring.Weekly.DayOfWeek = state.Type.Imsi.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Imsi.Url = state.Type.Imsi.Url.ValueString()
	}

	if state.Type.Ip != nil {
		input.Request.Type.Ip = &hhIWLbI.IpObject{}

		input.Request.Type.Ip.CertificateProfile = state.Type.Ip.CertificateProfile.ValueStringPointer()

		input.Request.Type.Ip.Description = state.Type.Ip.Description.ValueStringPointer()

		resp.Diagnostics.Append(state.Type.Ip.ExceptionList.ElementsAs(ctx, &input.Request.Type.Ip.ExceptionList, false)...)
		//if len(state.Type.Ip.ExceptionList) != 0 {
		//    input.Request.Type.Ip.ExceptionList = make([]string, 0, len(state.Type.Ip.ExceptionList))
		//    for _, var3 := range state.Type.Ip.ExceptionList {
		//        input.Request.Type.Ip.ExceptionList = append(input.Request.Type.Ip.ExceptionList, var3.ValueString())
		//    }
		//}

		if state.Type.Ip.IpAuth != nil {
			input.Request.Type.Ip.IpAuth = &hhIWLbI.IpAuthObject{}

			var4 := "with_parent_name | plaintext | ip | password"
			ev[var4] = state.Type.Ip.IpAuth.Password
			input.Request.Type.Ip.IpAuth.Password = state.Type.Ip.IpAuth.Password.ValueString()

			input.Request.Type.Ip.IpAuth.Username = state.Type.Ip.IpAuth.Username.ValueString()
		}

		if state.Type.Ip.Recurring.Daily != nil {
			input.Request.Type.Ip.Recurring.Daily = &hhIWLbI.IpDailyObject{}

			input.Request.Type.Ip.Recurring.Daily.At = state.Type.Ip.Recurring.Daily.At.ValueString()
		}

		if !state.Type.Ip.Recurring.FiveMinute.IsNull() && state.Type.Ip.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Ip.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !state.Type.Ip.Recurring.Hourly.IsNull() && state.Type.Ip.Recurring.Hourly.ValueBool() {
			input.Request.Type.Ip.Recurring.Hourly = map[string]interface{}{}
		}

		if state.Type.Ip.Recurring.Monthly != nil {
			input.Request.Type.Ip.Recurring.Monthly = &hhIWLbI.IpMonthyObject{}

			input.Request.Type.Ip.Recurring.Monthly.At = state.Type.Ip.Recurring.Monthly.At.ValueString()

			input.Request.Type.Ip.Recurring.Monthly.DayOfMonth = state.Type.Ip.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if state.Type.Ip.Recurring.Weekly != nil {
			input.Request.Type.Ip.Recurring.Weekly = &hhIWLbI.IpWeeklyObject{}

			input.Request.Type.Ip.Recurring.Weekly.At = state.Type.Ip.Recurring.Weekly.At.ValueString()

			input.Request.Type.Ip.Recurring.Weekly.DayOfWeek = state.Type.Ip.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Ip.Url = state.Type.Ip.Url.ValueString()
	}

	if state.Type.PredefinedIp != nil {
		input.Request.Type.PredefinedIp = &hhIWLbI.PredefinedIpObject{}

		input.Request.Type.PredefinedIp.Description = state.Type.PredefinedIp.Description.ValueStringPointer()

		resp.Diagnostics.Append(state.Type.PredefinedIp.ExceptionList.ElementsAs(ctx, &input.Request.Type.PredefinedIp.ExceptionList, false)...)
		//if len(state.Type.PredefinedIp.ExceptionList) != 0 {
		//    input.Request.Type.PredefinedIp.ExceptionList = make([]string, 0, len(state.Type.PredefinedIp.ExceptionList))
		//    for _, var5 := range state.Type.PredefinedIp.ExceptionList {
		//        input.Request.Type.PredefinedIp.ExceptionList = append(input.Request.Type.PredefinedIp.ExceptionList, var5.ValueString())
		//    }
		//}

		input.Request.Type.PredefinedIp.Url = state.Type.PredefinedIp.Url.ValueString()
	}

	if state.Type.PredefinedUrl != nil {
		input.Request.Type.PredefinedUrl = &hhIWLbI.PredefinedUrlObject{}

		input.Request.Type.PredefinedUrl.Description = state.Type.PredefinedUrl.Description.ValueStringPointer()

		resp.Diagnostics.Append(state.Type.PredefinedUrl.ExceptionList.ElementsAs(ctx, &input.Request.Type.PredefinedUrl.ExceptionList, false)...)
		//if len(state.Type.PredefinedUrl.ExceptionList) != 0 {
		//    input.Request.Type.PredefinedUrl.ExceptionList = make([]string, 0, len(state.Type.PredefinedUrl.ExceptionList))
		//    for _, var6 := range state.Type.PredefinedUrl.ExceptionList {
		//        input.Request.Type.PredefinedUrl.ExceptionList = append(input.Request.Type.PredefinedUrl.ExceptionList, var6.ValueString())
		//    }
		//}

		input.Request.Type.PredefinedUrl.Url = state.Type.PredefinedUrl.Url.ValueString()
	}

	if state.Type.Url != nil {
		input.Request.Type.Url = &hhIWLbI.UrlObject{}

		input.Request.Type.Url.CertificateProfile = state.Type.Url.CertificateProfile.ValueStringPointer()

		input.Request.Type.Url.Description = state.Type.Url.Description.ValueStringPointer()

		resp.Diagnostics.Append(state.Type.Url.ExceptionList.ElementsAs(ctx, &input.Request.Type.Url.ExceptionList, false)...)
		//if len(state.Type.Url.ExceptionList) != 0 {
		//    input.Request.Type.Url.ExceptionList = make([]string, 0, len(state.Type.Url.ExceptionList))
		//    for _, var7 := range state.Type.Url.ExceptionList {
		//        input.Request.Type.Url.ExceptionList = append(input.Request.Type.Url.ExceptionList, var7.ValueString())
		//    }
		//}

		if state.Type.Url.Recurring.Daily != nil {
			input.Request.Type.Url.Recurring.Daily = &hhIWLbI.UrlDailyObject{}

			input.Request.Type.Url.Recurring.Daily.At = state.Type.Url.Recurring.Daily.At.ValueString()
		}

		if !state.Type.Url.Recurring.FiveMinute.IsNull() && state.Type.Url.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Url.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !state.Type.Url.Recurring.Hourly.IsNull() && state.Type.Url.Recurring.Hourly.ValueBool() {
			input.Request.Type.Url.Recurring.Hourly = map[string]interface{}{}
		}

		if state.Type.Url.Recurring.Monthly != nil {
			input.Request.Type.Url.Recurring.Monthly = &hhIWLbI.UrlMonthyObject{}

			input.Request.Type.Url.Recurring.Monthly.At = state.Type.Url.Recurring.Monthly.At.ValueString()

			input.Request.Type.Url.Recurring.Monthly.DayOfMonth = state.Type.Url.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if state.Type.Url.Recurring.Weekly != nil {
			input.Request.Type.Url.Recurring.Weekly = &hhIWLbI.UrlWeeklyObject{}

			input.Request.Type.Url.Recurring.Weekly.At = state.Type.Url.Recurring.Weekly.At.ValueString()

			input.Request.Type.Url.Recurring.Weekly.DayOfWeek = state.Type.Url.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Url.Url = state.Type.Url.Url.ValueString()

		if state.Type.Url.UrlAuth != nil {
			input.Request.Type.Url.UrlAuth = &hhIWLbI.UrlAuthObject{}

			input.Request.Type.Url.UrlAuth.Password = state.Type.Url.UrlAuth.Password.ValueString()

			input.Request.Type.Url.UrlAuth.Username = state.Type.Url.UrlAuth.Username.ValueString()
		}
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Type = externalDynamicListRsModel_hhIWLbI_TypeObject{}

	if ans.Type.Domain == nil {
		state.Type.Domain = nil
	} else {
		state.Type.Domain = &externalDynamicListRsModel_hhIWLbI_DomainObject{}

		state.Type.Domain.CertificateProfile = types.StringPointerValue(ans.Type.Domain.CertificateProfile)

		state.Type.Domain.Description = types.StringPointerValue(ans.Type.Domain.Description)

		if ans.Type.Domain.DomainAuth == nil {
			state.Type.Domain.DomainAuth = nil
		} else {
			state.Type.Domain.DomainAuth = &externalDynamicListRsModel_hhIWLbI_DomainAuthObject{}

			state.Type.Domain.DomainAuth.Password = types.StringValue(ans.Type.Domain.DomainAuth.Password)

			state.Type.Domain.DomainAuth.Username = types.StringValue(ans.Type.Domain.DomainAuth.Username)
		}

		var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Type.Domain.ExceptionList)
		state.Type.Domain.ExceptionList = var8
		resp.Diagnostics.Append(var9.Errors()...)

		state.Type.Domain.ExpandDomain = types.BoolPointerValue(ans.Type.Domain.ExpandDomain)

		state.Type.Domain.Recurring = externalDynamicListRsModel_hhIWLbI_DomainRecurringObject{}

		if ans.Type.Domain.Recurring.Daily == nil {
			state.Type.Domain.Recurring.Daily = nil
		} else {
			state.Type.Domain.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_DomainDailyObject{}

			state.Type.Domain.Recurring.Daily.At = types.StringValue(ans.Type.Domain.Recurring.Daily.At)
		}

		state.Type.Domain.Recurring.FiveMinute = types.BoolValue(ans.Type.Domain.Recurring.FiveMinute != nil)

		state.Type.Domain.Recurring.Hourly = types.BoolValue(ans.Type.Domain.Recurring.Hourly != nil)

		if ans.Type.Domain.Recurring.Monthly == nil {
			state.Type.Domain.Recurring.Monthly = nil
		} else {
			state.Type.Domain.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_DomainMonthyObject{}

			state.Type.Domain.Recurring.Monthly.At = types.StringValue(ans.Type.Domain.Recurring.Monthly.At)

			state.Type.Domain.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Domain.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Domain.Recurring.Weekly == nil {
			state.Type.Domain.Recurring.Weekly = nil
		} else {
			state.Type.Domain.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_DomainWeeklyObject{}

			state.Type.Domain.Recurring.Weekly.At = types.StringValue(ans.Type.Domain.Recurring.Weekly.At)

			state.Type.Domain.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Domain.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Domain.Url = types.StringValue(ans.Type.Domain.Url)
	}

	if ans.Type.Imei == nil {
		state.Type.Imei = nil
	} else {
		state.Type.Imei = &externalDynamicListRsModel_hhIWLbI_ImeiObject{}

		state.Type.Imei.CertificateProfile = types.StringPointerValue(ans.Type.Imei.CertificateProfile)

		state.Type.Imei.Description = types.StringPointerValue(ans.Type.Imei.Description)

		var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Type.Imei.ExceptionList)
		state.Type.Imei.ExceptionList = var10
		resp.Diagnostics.Append(var11.Errors()...)

		if ans.Type.Imei.ImeiAuth == nil {
			state.Type.Imei.ImeiAuth = nil
		} else {
			state.Type.Imei.ImeiAuth = &externalDynamicListRsModel_hhIWLbI_ImeiAuthObject{}

			state.Type.Imei.ImeiAuth.Password = types.StringValue(ans.Type.Imei.ImeiAuth.Password)

			state.Type.Imei.ImeiAuth.Username = types.StringValue(ans.Type.Imei.ImeiAuth.Username)
		}

		state.Type.Imei.Recurring = externalDynamicListRsModel_hhIWLbI_ImeiRecurringObject{}

		if ans.Type.Imei.Recurring.Daily == nil {
			state.Type.Imei.Recurring.Daily = nil
		} else {
			state.Type.Imei.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_ImeiDailyObject{}

			state.Type.Imei.Recurring.Daily.At = types.StringValue(ans.Type.Imei.Recurring.Daily.At)
		}

		state.Type.Imei.Recurring.FiveMinute = types.BoolValue(ans.Type.Imei.Recurring.FiveMinute != nil)

		state.Type.Imei.Recurring.Hourly = types.BoolValue(ans.Type.Imei.Recurring.Hourly != nil)

		if ans.Type.Imei.Recurring.Monthly == nil {
			state.Type.Imei.Recurring.Monthly = nil
		} else {
			state.Type.Imei.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_ImeiMonthyObject{}

			state.Type.Imei.Recurring.Monthly.At = types.StringValue(ans.Type.Imei.Recurring.Monthly.At)

			state.Type.Imei.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Imei.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Imei.Recurring.Weekly == nil {
			state.Type.Imei.Recurring.Weekly = nil
		} else {
			state.Type.Imei.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_ImeiWeeklyObject{}

			state.Type.Imei.Recurring.Weekly.At = types.StringValue(ans.Type.Imei.Recurring.Weekly.At)

			state.Type.Imei.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Imei.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Imei.Url = types.StringValue(ans.Type.Imei.Url)
	}

	if ans.Type.Imsi == nil {
		state.Type.Imsi = nil
	} else {
		state.Type.Imsi = &externalDynamicListRsModel_hhIWLbI_ImsiObject{}

		state.Type.Imsi.CertificateProfile = types.StringPointerValue(ans.Type.Imsi.CertificateProfile)

		state.Type.Imsi.Description = types.StringPointerValue(ans.Type.Imsi.Description)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.Type.Imsi.ExceptionList)
		state.Type.Imsi.ExceptionList = var12
		resp.Diagnostics.Append(var13.Errors()...)

		if ans.Type.Imsi.ImsiAuth == nil {
			state.Type.Imsi.ImsiAuth = nil
		} else {
			state.Type.Imsi.ImsiAuth = &externalDynamicListRsModel_hhIWLbI_ImsiAuthObject{}

			state.Type.Imsi.ImsiAuth.Password = types.StringValue(ans.Type.Imsi.ImsiAuth.Password)

			state.Type.Imsi.ImsiAuth.Username = types.StringValue(ans.Type.Imsi.ImsiAuth.Username)
		}

		state.Type.Imsi.Recurring = externalDynamicListRsModel_hhIWLbI_ImsiRecurringObject{}

		if ans.Type.Imsi.Recurring.Daily == nil {
			state.Type.Imsi.Recurring.Daily = nil
		} else {
			state.Type.Imsi.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_ImsiDailyObject{}

			state.Type.Imsi.Recurring.Daily.At = types.StringValue(ans.Type.Imsi.Recurring.Daily.At)
		}

		state.Type.Imsi.Recurring.FiveMinute = types.BoolValue(ans.Type.Imsi.Recurring.FiveMinute != nil)

		state.Type.Imsi.Recurring.Hourly = types.BoolValue(ans.Type.Imsi.Recurring.Hourly != nil)

		if ans.Type.Imsi.Recurring.Monthly == nil {
			state.Type.Imsi.Recurring.Monthly = nil
		} else {
			state.Type.Imsi.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_ImsiMonthyObject{}

			state.Type.Imsi.Recurring.Monthly.At = types.StringValue(ans.Type.Imsi.Recurring.Monthly.At)

			state.Type.Imsi.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Imsi.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Imsi.Recurring.Weekly == nil {
			state.Type.Imsi.Recurring.Weekly = nil
		} else {
			state.Type.Imsi.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_ImsiWeeklyObject{}

			state.Type.Imsi.Recurring.Weekly.At = types.StringValue(ans.Type.Imsi.Recurring.Weekly.At)

			state.Type.Imsi.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Imsi.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Imsi.Url = types.StringValue(ans.Type.Imsi.Url)
	}

	if ans.Type.Ip == nil {
		state.Type.Ip = nil
	} else {
		state.Type.Ip = &externalDynamicListRsModel_hhIWLbI_IpObject{}

		state.Type.Ip.CertificateProfile = types.StringPointerValue(ans.Type.Ip.CertificateProfile)

		state.Type.Ip.Description = types.StringPointerValue(ans.Type.Ip.Description)

		var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Type.Ip.ExceptionList)
		state.Type.Ip.ExceptionList = var14
		resp.Diagnostics.Append(var15.Errors()...)

		if ans.Type.Ip.IpAuth == nil {
			state.Type.Ip.IpAuth = nil
		} else {
			state.Type.Ip.IpAuth = &externalDynamicListRsModel_hhIWLbI_IpAuthObject{}

			var16 := "with_parent_name | encrypted | ip | password"
			ev[var16] = types.StringValue(ans.Type.Ip.IpAuth.Password)

			var17 := "with_parent_name | plaintext | ip | password"
			state.Type.Ip.IpAuth.Password = ev[var17]

			state.Type.Ip.IpAuth.Username = types.StringValue(ans.Type.Ip.IpAuth.Username)
		}

		state.Type.Ip.Recurring = externalDynamicListRsModel_hhIWLbI_IpRecurringObject{}

		if ans.Type.Ip.Recurring.Daily == nil {
			state.Type.Ip.Recurring.Daily = nil
		} else {
			state.Type.Ip.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_IpDailyObject{}

			state.Type.Ip.Recurring.Daily.At = types.StringValue(ans.Type.Ip.Recurring.Daily.At)
		}

		state.Type.Ip.Recurring.FiveMinute = types.BoolValue(ans.Type.Ip.Recurring.FiveMinute != nil)

		state.Type.Ip.Recurring.Hourly = types.BoolValue(ans.Type.Ip.Recurring.Hourly != nil)

		if ans.Type.Ip.Recurring.Monthly == nil {
			state.Type.Ip.Recurring.Monthly = nil
		} else {
			state.Type.Ip.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_IpMonthyObject{}

			state.Type.Ip.Recurring.Monthly.At = types.StringValue(ans.Type.Ip.Recurring.Monthly.At)

			state.Type.Ip.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Ip.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Ip.Recurring.Weekly == nil {
			state.Type.Ip.Recurring.Weekly = nil
		} else {
			state.Type.Ip.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_IpWeeklyObject{}

			state.Type.Ip.Recurring.Weekly.At = types.StringValue(ans.Type.Ip.Recurring.Weekly.At)

			state.Type.Ip.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Ip.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Ip.Url = types.StringValue(ans.Type.Ip.Url)
	}

	if ans.Type.PredefinedIp == nil {
		state.Type.PredefinedIp = nil
	} else {
		state.Type.PredefinedIp = &externalDynamicListRsModel_hhIWLbI_PredefinedIpObject{}

		state.Type.PredefinedIp.Description = types.StringPointerValue(ans.Type.PredefinedIp.Description)

		var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Type.PredefinedIp.ExceptionList)
		state.Type.PredefinedIp.ExceptionList = var18
		resp.Diagnostics.Append(var19.Errors()...)

		state.Type.PredefinedIp.Url = types.StringValue(ans.Type.PredefinedIp.Url)
	}

	if ans.Type.PredefinedUrl == nil {
		state.Type.PredefinedUrl = nil
	} else {
		state.Type.PredefinedUrl = &externalDynamicListRsModel_hhIWLbI_PredefinedUrlObject{}

		state.Type.PredefinedUrl.Description = types.StringPointerValue(ans.Type.PredefinedUrl.Description)

		var20, var21 := types.ListValueFrom(ctx, types.StringType, ans.Type.PredefinedUrl.ExceptionList)
		state.Type.PredefinedUrl.ExceptionList = var20
		resp.Diagnostics.Append(var21.Errors()...)

		state.Type.PredefinedUrl.Url = types.StringValue(ans.Type.PredefinedUrl.Url)
	}

	if ans.Type.Url == nil {
		state.Type.Url = nil
	} else {
		state.Type.Url = &externalDynamicListRsModel_hhIWLbI_UrlObject{}

		state.Type.Url.CertificateProfile = types.StringPointerValue(ans.Type.Url.CertificateProfile)

		state.Type.Url.Description = types.StringPointerValue(ans.Type.Url.Description)

		var22, var23 := types.ListValueFrom(ctx, types.StringType, ans.Type.Url.ExceptionList)
		state.Type.Url.ExceptionList = var22
		resp.Diagnostics.Append(var23.Errors()...)

		state.Type.Url.Recurring = externalDynamicListRsModel_hhIWLbI_UrlRecurringObject{}

		if ans.Type.Url.Recurring.Daily == nil {
			state.Type.Url.Recurring.Daily = nil
		} else {
			state.Type.Url.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_UrlDailyObject{}

			state.Type.Url.Recurring.Daily.At = types.StringValue(ans.Type.Url.Recurring.Daily.At)
		}

		state.Type.Url.Recurring.FiveMinute = types.BoolValue(ans.Type.Url.Recurring.FiveMinute != nil)

		state.Type.Url.Recurring.Hourly = types.BoolValue(ans.Type.Url.Recurring.Hourly != nil)

		if ans.Type.Url.Recurring.Monthly == nil {
			state.Type.Url.Recurring.Monthly = nil
		} else {
			state.Type.Url.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_UrlMonthyObject{}

			state.Type.Url.Recurring.Monthly.At = types.StringValue(ans.Type.Url.Recurring.Monthly.At)

			state.Type.Url.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Url.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Url.Recurring.Weekly == nil {
			state.Type.Url.Recurring.Weekly = nil
		} else {
			state.Type.Url.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_UrlWeeklyObject{}

			state.Type.Url.Recurring.Weekly.At = types.StringValue(ans.Type.Url.Recurring.Weekly.At)

			state.Type.Url.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Url.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Url.Url = types.StringValue(ans.Type.Url.Url)

		if ans.Type.Url.UrlAuth == nil {
			state.Type.Url.UrlAuth = nil
		} else {
			state.Type.Url.UrlAuth = &externalDynamicListRsModel_hhIWLbI_UrlAuthObject{}

			state.Type.Url.UrlAuth.Password = types.StringValue(ans.Type.Url.UrlAuth.Password)

			state.Type.Url.UrlAuth.Username = types.StringValue(ans.Type.Url.UrlAuth.Username)
		}
	}

	var24, var25 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var24
	resp.Diagnostics.Append(var25.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *externalDynamicListResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state externalDynamicListRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(savestate.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_external_dynamic_list",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := ljRBvXJ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Type = externalDynamicListRsModel_hhIWLbI_TypeObject{}

	if ans.Type.Domain == nil {
		state.Type.Domain = nil
	} else {
		state.Type.Domain = &externalDynamicListRsModel_hhIWLbI_DomainObject{}

		state.Type.Domain.CertificateProfile = types.StringPointerValue(ans.Type.Domain.CertificateProfile)

		state.Type.Domain.Description = types.StringPointerValue(ans.Type.Domain.Description)

		if ans.Type.Domain.DomainAuth == nil {
			state.Type.Domain.DomainAuth = nil
		} else {
			state.Type.Domain.DomainAuth = &externalDynamicListRsModel_hhIWLbI_DomainAuthObject{}

			state.Type.Domain.DomainAuth.Password = types.StringValue(ans.Type.Domain.DomainAuth.Password)

			state.Type.Domain.DomainAuth.Username = types.StringValue(ans.Type.Domain.DomainAuth.Username)
		}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Type.Domain.ExceptionList)
		state.Type.Domain.ExceptionList = var0
		resp.Diagnostics.Append(var1.Errors()...)

		state.Type.Domain.ExpandDomain = types.BoolPointerValue(ans.Type.Domain.ExpandDomain)

		state.Type.Domain.Recurring = externalDynamicListRsModel_hhIWLbI_DomainRecurringObject{}

		if ans.Type.Domain.Recurring.Daily == nil {
			state.Type.Domain.Recurring.Daily = nil
		} else {
			state.Type.Domain.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_DomainDailyObject{}

			state.Type.Domain.Recurring.Daily.At = types.StringValue(ans.Type.Domain.Recurring.Daily.At)
		}

		state.Type.Domain.Recurring.FiveMinute = types.BoolValue(ans.Type.Domain.Recurring.FiveMinute != nil)

		state.Type.Domain.Recurring.Hourly = types.BoolValue(ans.Type.Domain.Recurring.Hourly != nil)

		if ans.Type.Domain.Recurring.Monthly == nil {
			state.Type.Domain.Recurring.Monthly = nil
		} else {
			state.Type.Domain.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_DomainMonthyObject{}

			state.Type.Domain.Recurring.Monthly.At = types.StringValue(ans.Type.Domain.Recurring.Monthly.At)

			state.Type.Domain.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Domain.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Domain.Recurring.Weekly == nil {
			state.Type.Domain.Recurring.Weekly = nil
		} else {
			state.Type.Domain.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_DomainWeeklyObject{}

			state.Type.Domain.Recurring.Weekly.At = types.StringValue(ans.Type.Domain.Recurring.Weekly.At)

			state.Type.Domain.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Domain.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Domain.Url = types.StringValue(ans.Type.Domain.Url)
	}

	if ans.Type.Imei == nil {
		state.Type.Imei = nil
	} else {
		state.Type.Imei = &externalDynamicListRsModel_hhIWLbI_ImeiObject{}

		state.Type.Imei.CertificateProfile = types.StringPointerValue(ans.Type.Imei.CertificateProfile)

		state.Type.Imei.Description = types.StringPointerValue(ans.Type.Imei.Description)

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Type.Imei.ExceptionList)
		state.Type.Imei.ExceptionList = var2
		resp.Diagnostics.Append(var3.Errors()...)

		if ans.Type.Imei.ImeiAuth == nil {
			state.Type.Imei.ImeiAuth = nil
		} else {
			state.Type.Imei.ImeiAuth = &externalDynamicListRsModel_hhIWLbI_ImeiAuthObject{}

			state.Type.Imei.ImeiAuth.Password = types.StringValue(ans.Type.Imei.ImeiAuth.Password)

			state.Type.Imei.ImeiAuth.Username = types.StringValue(ans.Type.Imei.ImeiAuth.Username)
		}

		state.Type.Imei.Recurring = externalDynamicListRsModel_hhIWLbI_ImeiRecurringObject{}

		if ans.Type.Imei.Recurring.Daily == nil {
			state.Type.Imei.Recurring.Daily = nil
		} else {
			state.Type.Imei.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_ImeiDailyObject{}

			state.Type.Imei.Recurring.Daily.At = types.StringValue(ans.Type.Imei.Recurring.Daily.At)
		}

		state.Type.Imei.Recurring.FiveMinute = types.BoolValue(ans.Type.Imei.Recurring.FiveMinute != nil)

		state.Type.Imei.Recurring.Hourly = types.BoolValue(ans.Type.Imei.Recurring.Hourly != nil)

		if ans.Type.Imei.Recurring.Monthly == nil {
			state.Type.Imei.Recurring.Monthly = nil
		} else {
			state.Type.Imei.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_ImeiMonthyObject{}

			state.Type.Imei.Recurring.Monthly.At = types.StringValue(ans.Type.Imei.Recurring.Monthly.At)

			state.Type.Imei.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Imei.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Imei.Recurring.Weekly == nil {
			state.Type.Imei.Recurring.Weekly = nil
		} else {
			state.Type.Imei.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_ImeiWeeklyObject{}

			state.Type.Imei.Recurring.Weekly.At = types.StringValue(ans.Type.Imei.Recurring.Weekly.At)

			state.Type.Imei.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Imei.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Imei.Url = types.StringValue(ans.Type.Imei.Url)
	}

	if ans.Type.Imsi == nil {
		state.Type.Imsi = nil
	} else {
		state.Type.Imsi = &externalDynamicListRsModel_hhIWLbI_ImsiObject{}

		state.Type.Imsi.CertificateProfile = types.StringPointerValue(ans.Type.Imsi.CertificateProfile)

		state.Type.Imsi.Description = types.StringPointerValue(ans.Type.Imsi.Description)

		var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Type.Imsi.ExceptionList)
		state.Type.Imsi.ExceptionList = var4
		resp.Diagnostics.Append(var5.Errors()...)

		if ans.Type.Imsi.ImsiAuth == nil {
			state.Type.Imsi.ImsiAuth = nil
		} else {
			state.Type.Imsi.ImsiAuth = &externalDynamicListRsModel_hhIWLbI_ImsiAuthObject{}

			state.Type.Imsi.ImsiAuth.Password = types.StringValue(ans.Type.Imsi.ImsiAuth.Password)

			state.Type.Imsi.ImsiAuth.Username = types.StringValue(ans.Type.Imsi.ImsiAuth.Username)
		}

		state.Type.Imsi.Recurring = externalDynamicListRsModel_hhIWLbI_ImsiRecurringObject{}

		if ans.Type.Imsi.Recurring.Daily == nil {
			state.Type.Imsi.Recurring.Daily = nil
		} else {
			state.Type.Imsi.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_ImsiDailyObject{}

			state.Type.Imsi.Recurring.Daily.At = types.StringValue(ans.Type.Imsi.Recurring.Daily.At)
		}

		state.Type.Imsi.Recurring.FiveMinute = types.BoolValue(ans.Type.Imsi.Recurring.FiveMinute != nil)

		state.Type.Imsi.Recurring.Hourly = types.BoolValue(ans.Type.Imsi.Recurring.Hourly != nil)

		if ans.Type.Imsi.Recurring.Monthly == nil {
			state.Type.Imsi.Recurring.Monthly = nil
		} else {
			state.Type.Imsi.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_ImsiMonthyObject{}

			state.Type.Imsi.Recurring.Monthly.At = types.StringValue(ans.Type.Imsi.Recurring.Monthly.At)

			state.Type.Imsi.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Imsi.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Imsi.Recurring.Weekly == nil {
			state.Type.Imsi.Recurring.Weekly = nil
		} else {
			state.Type.Imsi.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_ImsiWeeklyObject{}

			state.Type.Imsi.Recurring.Weekly.At = types.StringValue(ans.Type.Imsi.Recurring.Weekly.At)

			state.Type.Imsi.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Imsi.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Imsi.Url = types.StringValue(ans.Type.Imsi.Url)
	}

	if ans.Type.Ip == nil {
		state.Type.Ip = nil
	} else {
		state.Type.Ip = &externalDynamicListRsModel_hhIWLbI_IpObject{}

		state.Type.Ip.CertificateProfile = types.StringPointerValue(ans.Type.Ip.CertificateProfile)

		state.Type.Ip.Description = types.StringPointerValue(ans.Type.Ip.Description)

		var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Type.Ip.ExceptionList)
		state.Type.Ip.ExceptionList = var6
		resp.Diagnostics.Append(var7.Errors()...)

		if ans.Type.Ip.IpAuth == nil {
			state.Type.Ip.IpAuth = nil
		} else {
			state.Type.Ip.IpAuth = &externalDynamicListRsModel_hhIWLbI_IpAuthObject{}

			var8 := "with_parent_name | encrypted | ip | password"
			if ev[var8].Equal(types.StringValue(ans.Type.Ip.IpAuth.Password)) {

				var9 := "with_parent_name | plaintext | ip | password"
				state.Type.Ip.IpAuth.Password = ev[var9]
			} else {
				state.Type.Ip.IpAuth.Password = types.StringNull()
			}

			state.Type.Ip.IpAuth.Username = types.StringValue(ans.Type.Ip.IpAuth.Username)
		}

		state.Type.Ip.Recurring = externalDynamicListRsModel_hhIWLbI_IpRecurringObject{}

		if ans.Type.Ip.Recurring.Daily == nil {
			state.Type.Ip.Recurring.Daily = nil
		} else {
			state.Type.Ip.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_IpDailyObject{}

			state.Type.Ip.Recurring.Daily.At = types.StringValue(ans.Type.Ip.Recurring.Daily.At)
		}

		state.Type.Ip.Recurring.FiveMinute = types.BoolValue(ans.Type.Ip.Recurring.FiveMinute != nil)

		state.Type.Ip.Recurring.Hourly = types.BoolValue(ans.Type.Ip.Recurring.Hourly != nil)

		if ans.Type.Ip.Recurring.Monthly == nil {
			state.Type.Ip.Recurring.Monthly = nil
		} else {
			state.Type.Ip.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_IpMonthyObject{}

			state.Type.Ip.Recurring.Monthly.At = types.StringValue(ans.Type.Ip.Recurring.Monthly.At)

			state.Type.Ip.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Ip.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Ip.Recurring.Weekly == nil {
			state.Type.Ip.Recurring.Weekly = nil
		} else {
			state.Type.Ip.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_IpWeeklyObject{}

			state.Type.Ip.Recurring.Weekly.At = types.StringValue(ans.Type.Ip.Recurring.Weekly.At)

			state.Type.Ip.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Ip.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Ip.Url = types.StringValue(ans.Type.Ip.Url)
	}

	if ans.Type.PredefinedIp == nil {
		state.Type.PredefinedIp = nil
	} else {
		state.Type.PredefinedIp = &externalDynamicListRsModel_hhIWLbI_PredefinedIpObject{}

		state.Type.PredefinedIp.Description = types.StringPointerValue(ans.Type.PredefinedIp.Description)

		var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Type.PredefinedIp.ExceptionList)
		state.Type.PredefinedIp.ExceptionList = var10
		resp.Diagnostics.Append(var11.Errors()...)

		state.Type.PredefinedIp.Url = types.StringValue(ans.Type.PredefinedIp.Url)
	}

	if ans.Type.PredefinedUrl == nil {
		state.Type.PredefinedUrl = nil
	} else {
		state.Type.PredefinedUrl = &externalDynamicListRsModel_hhIWLbI_PredefinedUrlObject{}

		state.Type.PredefinedUrl.Description = types.StringPointerValue(ans.Type.PredefinedUrl.Description)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.Type.PredefinedUrl.ExceptionList)
		state.Type.PredefinedUrl.ExceptionList = var12
		resp.Diagnostics.Append(var13.Errors()...)

		state.Type.PredefinedUrl.Url = types.StringValue(ans.Type.PredefinedUrl.Url)
	}

	if ans.Type.Url == nil {
		state.Type.Url = nil
	} else {
		state.Type.Url = &externalDynamicListRsModel_hhIWLbI_UrlObject{}

		state.Type.Url.CertificateProfile = types.StringPointerValue(ans.Type.Url.CertificateProfile)

		state.Type.Url.Description = types.StringPointerValue(ans.Type.Url.Description)

		var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Type.Url.ExceptionList)
		state.Type.Url.ExceptionList = var14
		resp.Diagnostics.Append(var15.Errors()...)

		state.Type.Url.Recurring = externalDynamicListRsModel_hhIWLbI_UrlRecurringObject{}

		if ans.Type.Url.Recurring.Daily == nil {
			state.Type.Url.Recurring.Daily = nil
		} else {
			state.Type.Url.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_UrlDailyObject{}

			state.Type.Url.Recurring.Daily.At = types.StringValue(ans.Type.Url.Recurring.Daily.At)
		}

		state.Type.Url.Recurring.FiveMinute = types.BoolValue(ans.Type.Url.Recurring.FiveMinute != nil)

		state.Type.Url.Recurring.Hourly = types.BoolValue(ans.Type.Url.Recurring.Hourly != nil)

		if ans.Type.Url.Recurring.Monthly == nil {
			state.Type.Url.Recurring.Monthly = nil
		} else {
			state.Type.Url.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_UrlMonthyObject{}

			state.Type.Url.Recurring.Monthly.At = types.StringValue(ans.Type.Url.Recurring.Monthly.At)

			state.Type.Url.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Url.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Url.Recurring.Weekly == nil {
			state.Type.Url.Recurring.Weekly = nil
		} else {
			state.Type.Url.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_UrlWeeklyObject{}

			state.Type.Url.Recurring.Weekly.At = types.StringValue(ans.Type.Url.Recurring.Weekly.At)

			state.Type.Url.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Url.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Url.Url = types.StringValue(ans.Type.Url.Url)

		if ans.Type.Url.UrlAuth == nil {
			state.Type.Url.UrlAuth = nil
		} else {
			state.Type.Url.UrlAuth = &externalDynamicListRsModel_hhIWLbI_UrlAuthObject{}

			state.Type.Url.UrlAuth.Password = types.StringValue(ans.Type.Url.UrlAuth.Password)

			state.Type.Url.UrlAuth.Username = types.StringValue(ans.Type.Url.UrlAuth.Username)
		}
	}

	var16, var17 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var16
	resp.Diagnostics.Append(var17.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *externalDynamicListResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state externalDynamicListRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_external_dynamic_list",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := ljRBvXJ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &hhIWLbI.Config{}

	input.Request.Name = plan.Name.ValueString()

	if plan.Type.Domain != nil {
		input.Request.Type.Domain = &hhIWLbI.DomainObject{}

		input.Request.Type.Domain.CertificateProfile = plan.Type.Domain.CertificateProfile.ValueStringPointer()

		input.Request.Type.Domain.Description = plan.Type.Domain.Description.ValueStringPointer()

		if plan.Type.Domain.DomainAuth != nil {
			input.Request.Type.Domain.DomainAuth = &hhIWLbI.DomainAuthObject{}

			input.Request.Type.Domain.DomainAuth.Password = plan.Type.Domain.DomainAuth.Password.ValueString()

			input.Request.Type.Domain.DomainAuth.Username = plan.Type.Domain.DomainAuth.Username.ValueString()
		}

		resp.Diagnostics.Append(plan.Type.Domain.ExceptionList.ElementsAs(ctx, &input.Request.Type.Domain.ExceptionList, false)...)
		//if len(plan.Type.Domain.ExceptionList) != 0 {
		//    input.Request.Type.Domain.ExceptionList = make([]string, 0, len(plan.Type.Domain.ExceptionList))
		//    for _, var0 := range plan.Type.Domain.ExceptionList {
		//        input.Request.Type.Domain.ExceptionList = append(input.Request.Type.Domain.ExceptionList, var0.ValueString())
		//    }
		//}

		input.Request.Type.Domain.ExpandDomain = plan.Type.Domain.ExpandDomain.ValueBoolPointer()

		if plan.Type.Domain.Recurring.Daily != nil {
			input.Request.Type.Domain.Recurring.Daily = &hhIWLbI.DomainDailyObject{}

			input.Request.Type.Domain.Recurring.Daily.At = plan.Type.Domain.Recurring.Daily.At.ValueString()
		}

		if !plan.Type.Domain.Recurring.FiveMinute.IsNull() && plan.Type.Domain.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Domain.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !plan.Type.Domain.Recurring.Hourly.IsNull() && plan.Type.Domain.Recurring.Hourly.ValueBool() {
			input.Request.Type.Domain.Recurring.Hourly = map[string]interface{}{}
		}

		if plan.Type.Domain.Recurring.Monthly != nil {
			input.Request.Type.Domain.Recurring.Monthly = &hhIWLbI.DomainMonthyObject{}

			input.Request.Type.Domain.Recurring.Monthly.At = plan.Type.Domain.Recurring.Monthly.At.ValueString()

			input.Request.Type.Domain.Recurring.Monthly.DayOfMonth = plan.Type.Domain.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if plan.Type.Domain.Recurring.Weekly != nil {
			input.Request.Type.Domain.Recurring.Weekly = &hhIWLbI.DomainWeeklyObject{}

			input.Request.Type.Domain.Recurring.Weekly.At = plan.Type.Domain.Recurring.Weekly.At.ValueString()

			input.Request.Type.Domain.Recurring.Weekly.DayOfWeek = plan.Type.Domain.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Domain.Url = plan.Type.Domain.Url.ValueString()
	}

	if plan.Type.Imei != nil {
		input.Request.Type.Imei = &hhIWLbI.ImeiObject{}

		input.Request.Type.Imei.CertificateProfile = plan.Type.Imei.CertificateProfile.ValueStringPointer()

		input.Request.Type.Imei.Description = plan.Type.Imei.Description.ValueStringPointer()

		resp.Diagnostics.Append(plan.Type.Imei.ExceptionList.ElementsAs(ctx, &input.Request.Type.Imei.ExceptionList, false)...)
		//if len(plan.Type.Imei.ExceptionList) != 0 {
		//    input.Request.Type.Imei.ExceptionList = make([]string, 0, len(plan.Type.Imei.ExceptionList))
		//    for _, var1 := range plan.Type.Imei.ExceptionList {
		//        input.Request.Type.Imei.ExceptionList = append(input.Request.Type.Imei.ExceptionList, var1.ValueString())
		//    }
		//}

		if plan.Type.Imei.ImeiAuth != nil {
			input.Request.Type.Imei.ImeiAuth = &hhIWLbI.ImeiAuthObject{}

			input.Request.Type.Imei.ImeiAuth.Password = plan.Type.Imei.ImeiAuth.Password.ValueString()

			input.Request.Type.Imei.ImeiAuth.Username = plan.Type.Imei.ImeiAuth.Username.ValueString()
		}

		if plan.Type.Imei.Recurring.Daily != nil {
			input.Request.Type.Imei.Recurring.Daily = &hhIWLbI.ImeiDailyObject{}

			input.Request.Type.Imei.Recurring.Daily.At = plan.Type.Imei.Recurring.Daily.At.ValueString()
		}

		if !plan.Type.Imei.Recurring.FiveMinute.IsNull() && plan.Type.Imei.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Imei.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !plan.Type.Imei.Recurring.Hourly.IsNull() && plan.Type.Imei.Recurring.Hourly.ValueBool() {
			input.Request.Type.Imei.Recurring.Hourly = map[string]interface{}{}
		}

		if plan.Type.Imei.Recurring.Monthly != nil {
			input.Request.Type.Imei.Recurring.Monthly = &hhIWLbI.ImeiMonthyObject{}

			input.Request.Type.Imei.Recurring.Monthly.At = plan.Type.Imei.Recurring.Monthly.At.ValueString()

			input.Request.Type.Imei.Recurring.Monthly.DayOfMonth = plan.Type.Imei.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if plan.Type.Imei.Recurring.Weekly != nil {
			input.Request.Type.Imei.Recurring.Weekly = &hhIWLbI.ImeiWeeklyObject{}

			input.Request.Type.Imei.Recurring.Weekly.At = plan.Type.Imei.Recurring.Weekly.At.ValueString()

			input.Request.Type.Imei.Recurring.Weekly.DayOfWeek = plan.Type.Imei.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Imei.Url = plan.Type.Imei.Url.ValueString()
	}

	if plan.Type.Imsi != nil {
		input.Request.Type.Imsi = &hhIWLbI.ImsiObject{}

		input.Request.Type.Imsi.CertificateProfile = plan.Type.Imsi.CertificateProfile.ValueStringPointer()

		input.Request.Type.Imsi.Description = plan.Type.Imsi.Description.ValueStringPointer()

		resp.Diagnostics.Append(plan.Type.Imsi.ExceptionList.ElementsAs(ctx, &input.Request.Type.Imsi.ExceptionList, false)...)
		//if len(plan.Type.Imsi.ExceptionList) != 0 {
		//    input.Request.Type.Imsi.ExceptionList = make([]string, 0, len(plan.Type.Imsi.ExceptionList))
		//    for _, var2 := range plan.Type.Imsi.ExceptionList {
		//        input.Request.Type.Imsi.ExceptionList = append(input.Request.Type.Imsi.ExceptionList, var2.ValueString())
		//    }
		//}

		if plan.Type.Imsi.ImsiAuth != nil {
			input.Request.Type.Imsi.ImsiAuth = &hhIWLbI.ImsiAuthObject{}

			input.Request.Type.Imsi.ImsiAuth.Password = plan.Type.Imsi.ImsiAuth.Password.ValueString()

			input.Request.Type.Imsi.ImsiAuth.Username = plan.Type.Imsi.ImsiAuth.Username.ValueString()
		}

		if plan.Type.Imsi.Recurring.Daily != nil {
			input.Request.Type.Imsi.Recurring.Daily = &hhIWLbI.ImsiDailyObject{}

			input.Request.Type.Imsi.Recurring.Daily.At = plan.Type.Imsi.Recurring.Daily.At.ValueString()
		}

		if !plan.Type.Imsi.Recurring.FiveMinute.IsNull() && plan.Type.Imsi.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Imsi.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !plan.Type.Imsi.Recurring.Hourly.IsNull() && plan.Type.Imsi.Recurring.Hourly.ValueBool() {
			input.Request.Type.Imsi.Recurring.Hourly = map[string]interface{}{}
		}

		if plan.Type.Imsi.Recurring.Monthly != nil {
			input.Request.Type.Imsi.Recurring.Monthly = &hhIWLbI.ImsiMonthyObject{}

			input.Request.Type.Imsi.Recurring.Monthly.At = plan.Type.Imsi.Recurring.Monthly.At.ValueString()

			input.Request.Type.Imsi.Recurring.Monthly.DayOfMonth = plan.Type.Imsi.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if plan.Type.Imsi.Recurring.Weekly != nil {
			input.Request.Type.Imsi.Recurring.Weekly = &hhIWLbI.ImsiWeeklyObject{}

			input.Request.Type.Imsi.Recurring.Weekly.At = plan.Type.Imsi.Recurring.Weekly.At.ValueString()

			input.Request.Type.Imsi.Recurring.Weekly.DayOfWeek = plan.Type.Imsi.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Imsi.Url = plan.Type.Imsi.Url.ValueString()
	}

	if plan.Type.Ip != nil {
		input.Request.Type.Ip = &hhIWLbI.IpObject{}

		input.Request.Type.Ip.CertificateProfile = plan.Type.Ip.CertificateProfile.ValueStringPointer()

		input.Request.Type.Ip.Description = plan.Type.Ip.Description.ValueStringPointer()

		resp.Diagnostics.Append(plan.Type.Ip.ExceptionList.ElementsAs(ctx, &input.Request.Type.Ip.ExceptionList, false)...)
		//if len(plan.Type.Ip.ExceptionList) != 0 {
		//    input.Request.Type.Ip.ExceptionList = make([]string, 0, len(plan.Type.Ip.ExceptionList))
		//    for _, var3 := range plan.Type.Ip.ExceptionList {
		//        input.Request.Type.Ip.ExceptionList = append(input.Request.Type.Ip.ExceptionList, var3.ValueString())
		//    }
		//}

		if plan.Type.Ip.IpAuth != nil {
			input.Request.Type.Ip.IpAuth = &hhIWLbI.IpAuthObject{}

			var4 := "with_parent_name | plaintext | ip | password"
			ev[var4] = plan.Type.Ip.IpAuth.Password
			input.Request.Type.Ip.IpAuth.Password = plan.Type.Ip.IpAuth.Password.ValueString()

			input.Request.Type.Ip.IpAuth.Username = plan.Type.Ip.IpAuth.Username.ValueString()
		}

		if plan.Type.Ip.Recurring.Daily != nil {
			input.Request.Type.Ip.Recurring.Daily = &hhIWLbI.IpDailyObject{}

			input.Request.Type.Ip.Recurring.Daily.At = plan.Type.Ip.Recurring.Daily.At.ValueString()
		}

		if !plan.Type.Ip.Recurring.FiveMinute.IsNull() && plan.Type.Ip.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Ip.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !plan.Type.Ip.Recurring.Hourly.IsNull() && plan.Type.Ip.Recurring.Hourly.ValueBool() {
			input.Request.Type.Ip.Recurring.Hourly = map[string]interface{}{}
		}

		if plan.Type.Ip.Recurring.Monthly != nil {
			input.Request.Type.Ip.Recurring.Monthly = &hhIWLbI.IpMonthyObject{}

			input.Request.Type.Ip.Recurring.Monthly.At = plan.Type.Ip.Recurring.Monthly.At.ValueString()

			input.Request.Type.Ip.Recurring.Monthly.DayOfMonth = plan.Type.Ip.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if plan.Type.Ip.Recurring.Weekly != nil {
			input.Request.Type.Ip.Recurring.Weekly = &hhIWLbI.IpWeeklyObject{}

			input.Request.Type.Ip.Recurring.Weekly.At = plan.Type.Ip.Recurring.Weekly.At.ValueString()

			input.Request.Type.Ip.Recurring.Weekly.DayOfWeek = plan.Type.Ip.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Ip.Url = plan.Type.Ip.Url.ValueString()
	}

	if plan.Type.PredefinedIp != nil {
		input.Request.Type.PredefinedIp = &hhIWLbI.PredefinedIpObject{}

		input.Request.Type.PredefinedIp.Description = plan.Type.PredefinedIp.Description.ValueStringPointer()

		resp.Diagnostics.Append(plan.Type.PredefinedIp.ExceptionList.ElementsAs(ctx, &input.Request.Type.PredefinedIp.ExceptionList, false)...)
		//if len(plan.Type.PredefinedIp.ExceptionList) != 0 {
		//    input.Request.Type.PredefinedIp.ExceptionList = make([]string, 0, len(plan.Type.PredefinedIp.ExceptionList))
		//    for _, var5 := range plan.Type.PredefinedIp.ExceptionList {
		//        input.Request.Type.PredefinedIp.ExceptionList = append(input.Request.Type.PredefinedIp.ExceptionList, var5.ValueString())
		//    }
		//}

		input.Request.Type.PredefinedIp.Url = plan.Type.PredefinedIp.Url.ValueString()
	}

	if plan.Type.PredefinedUrl != nil {
		input.Request.Type.PredefinedUrl = &hhIWLbI.PredefinedUrlObject{}

		input.Request.Type.PredefinedUrl.Description = plan.Type.PredefinedUrl.Description.ValueStringPointer()

		resp.Diagnostics.Append(plan.Type.PredefinedUrl.ExceptionList.ElementsAs(ctx, &input.Request.Type.PredefinedUrl.ExceptionList, false)...)
		//if len(plan.Type.PredefinedUrl.ExceptionList) != 0 {
		//    input.Request.Type.PredefinedUrl.ExceptionList = make([]string, 0, len(plan.Type.PredefinedUrl.ExceptionList))
		//    for _, var6 := range plan.Type.PredefinedUrl.ExceptionList {
		//        input.Request.Type.PredefinedUrl.ExceptionList = append(input.Request.Type.PredefinedUrl.ExceptionList, var6.ValueString())
		//    }
		//}

		input.Request.Type.PredefinedUrl.Url = plan.Type.PredefinedUrl.Url.ValueString()
	}

	if plan.Type.Url != nil {
		input.Request.Type.Url = &hhIWLbI.UrlObject{}

		input.Request.Type.Url.CertificateProfile = plan.Type.Url.CertificateProfile.ValueStringPointer()

		input.Request.Type.Url.Description = plan.Type.Url.Description.ValueStringPointer()

		resp.Diagnostics.Append(plan.Type.Url.ExceptionList.ElementsAs(ctx, &input.Request.Type.Url.ExceptionList, false)...)
		//if len(plan.Type.Url.ExceptionList) != 0 {
		//    input.Request.Type.Url.ExceptionList = make([]string, 0, len(plan.Type.Url.ExceptionList))
		//    for _, var7 := range plan.Type.Url.ExceptionList {
		//        input.Request.Type.Url.ExceptionList = append(input.Request.Type.Url.ExceptionList, var7.ValueString())
		//    }
		//}

		if plan.Type.Url.Recurring.Daily != nil {
			input.Request.Type.Url.Recurring.Daily = &hhIWLbI.UrlDailyObject{}

			input.Request.Type.Url.Recurring.Daily.At = plan.Type.Url.Recurring.Daily.At.ValueString()
		}

		if !plan.Type.Url.Recurring.FiveMinute.IsNull() && plan.Type.Url.Recurring.FiveMinute.ValueBool() {
			input.Request.Type.Url.Recurring.FiveMinute = map[string]interface{}{}
		}

		if !plan.Type.Url.Recurring.Hourly.IsNull() && plan.Type.Url.Recurring.Hourly.ValueBool() {
			input.Request.Type.Url.Recurring.Hourly = map[string]interface{}{}
		}

		if plan.Type.Url.Recurring.Monthly != nil {
			input.Request.Type.Url.Recurring.Monthly = &hhIWLbI.UrlMonthyObject{}

			input.Request.Type.Url.Recurring.Monthly.At = plan.Type.Url.Recurring.Monthly.At.ValueString()

			input.Request.Type.Url.Recurring.Monthly.DayOfMonth = plan.Type.Url.Recurring.Monthly.DayOfMonth.ValueInt64()
		}

		if plan.Type.Url.Recurring.Weekly != nil {
			input.Request.Type.Url.Recurring.Weekly = &hhIWLbI.UrlWeeklyObject{}

			input.Request.Type.Url.Recurring.Weekly.At = plan.Type.Url.Recurring.Weekly.At.ValueString()

			input.Request.Type.Url.Recurring.Weekly.DayOfWeek = plan.Type.Url.Recurring.Weekly.DayOfWeek.ValueString()
		}

		input.Request.Type.Url.Url = plan.Type.Url.Url.ValueString()

		if plan.Type.Url.UrlAuth != nil {
			input.Request.Type.Url.UrlAuth = &hhIWLbI.UrlAuthObject{}

			input.Request.Type.Url.UrlAuth.Password = plan.Type.Url.UrlAuth.Password.ValueString()

			input.Request.Type.Url.UrlAuth.Username = plan.Type.Url.UrlAuth.Username.ValueString()
		}
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Type = externalDynamicListRsModel_hhIWLbI_TypeObject{}

	if ans.Type.Domain == nil {
		state.Type.Domain = nil
	} else {
		state.Type.Domain = &externalDynamicListRsModel_hhIWLbI_DomainObject{}

		state.Type.Domain.CertificateProfile = types.StringPointerValue(ans.Type.Domain.CertificateProfile)

		state.Type.Domain.Description = types.StringPointerValue(ans.Type.Domain.Description)

		if ans.Type.Domain.DomainAuth == nil {
			state.Type.Domain.DomainAuth = nil
		} else {
			state.Type.Domain.DomainAuth = &externalDynamicListRsModel_hhIWLbI_DomainAuthObject{}

			state.Type.Domain.DomainAuth.Password = types.StringValue(ans.Type.Domain.DomainAuth.Password)

			state.Type.Domain.DomainAuth.Username = types.StringValue(ans.Type.Domain.DomainAuth.Username)
		}

		var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Type.Domain.ExceptionList)
		state.Type.Domain.ExceptionList = var8
		resp.Diagnostics.Append(var9.Errors()...)

		state.Type.Domain.ExpandDomain = types.BoolPointerValue(ans.Type.Domain.ExpandDomain)

		state.Type.Domain.Recurring = externalDynamicListRsModel_hhIWLbI_DomainRecurringObject{}

		if ans.Type.Domain.Recurring.Daily == nil {
			state.Type.Domain.Recurring.Daily = nil
		} else {
			state.Type.Domain.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_DomainDailyObject{}

			state.Type.Domain.Recurring.Daily.At = types.StringValue(ans.Type.Domain.Recurring.Daily.At)
		}

		state.Type.Domain.Recurring.FiveMinute = types.BoolValue(ans.Type.Domain.Recurring.FiveMinute != nil)

		state.Type.Domain.Recurring.Hourly = types.BoolValue(ans.Type.Domain.Recurring.Hourly != nil)

		if ans.Type.Domain.Recurring.Monthly == nil {
			state.Type.Domain.Recurring.Monthly = nil
		} else {
			state.Type.Domain.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_DomainMonthyObject{}

			state.Type.Domain.Recurring.Monthly.At = types.StringValue(ans.Type.Domain.Recurring.Monthly.At)

			state.Type.Domain.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Domain.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Domain.Recurring.Weekly == nil {
			state.Type.Domain.Recurring.Weekly = nil
		} else {
			state.Type.Domain.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_DomainWeeklyObject{}

			state.Type.Domain.Recurring.Weekly.At = types.StringValue(ans.Type.Domain.Recurring.Weekly.At)

			state.Type.Domain.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Domain.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Domain.Url = types.StringValue(ans.Type.Domain.Url)
	}

	if ans.Type.Imei == nil {
		state.Type.Imei = nil
	} else {
		state.Type.Imei = &externalDynamicListRsModel_hhIWLbI_ImeiObject{}

		state.Type.Imei.CertificateProfile = types.StringPointerValue(ans.Type.Imei.CertificateProfile)

		state.Type.Imei.Description = types.StringPointerValue(ans.Type.Imei.Description)

		var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.Type.Imei.ExceptionList)
		state.Type.Imei.ExceptionList = var10
		resp.Diagnostics.Append(var11.Errors()...)

		if ans.Type.Imei.ImeiAuth == nil {
			state.Type.Imei.ImeiAuth = nil
		} else {
			state.Type.Imei.ImeiAuth = &externalDynamicListRsModel_hhIWLbI_ImeiAuthObject{}

			state.Type.Imei.ImeiAuth.Password = types.StringValue(ans.Type.Imei.ImeiAuth.Password)

			state.Type.Imei.ImeiAuth.Username = types.StringValue(ans.Type.Imei.ImeiAuth.Username)
		}

		state.Type.Imei.Recurring = externalDynamicListRsModel_hhIWLbI_ImeiRecurringObject{}

		if ans.Type.Imei.Recurring.Daily == nil {
			state.Type.Imei.Recurring.Daily = nil
		} else {
			state.Type.Imei.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_ImeiDailyObject{}

			state.Type.Imei.Recurring.Daily.At = types.StringValue(ans.Type.Imei.Recurring.Daily.At)
		}

		state.Type.Imei.Recurring.FiveMinute = types.BoolValue(ans.Type.Imei.Recurring.FiveMinute != nil)

		state.Type.Imei.Recurring.Hourly = types.BoolValue(ans.Type.Imei.Recurring.Hourly != nil)

		if ans.Type.Imei.Recurring.Monthly == nil {
			state.Type.Imei.Recurring.Monthly = nil
		} else {
			state.Type.Imei.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_ImeiMonthyObject{}

			state.Type.Imei.Recurring.Monthly.At = types.StringValue(ans.Type.Imei.Recurring.Monthly.At)

			state.Type.Imei.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Imei.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Imei.Recurring.Weekly == nil {
			state.Type.Imei.Recurring.Weekly = nil
		} else {
			state.Type.Imei.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_ImeiWeeklyObject{}

			state.Type.Imei.Recurring.Weekly.At = types.StringValue(ans.Type.Imei.Recurring.Weekly.At)

			state.Type.Imei.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Imei.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Imei.Url = types.StringValue(ans.Type.Imei.Url)
	}

	if ans.Type.Imsi == nil {
		state.Type.Imsi = nil
	} else {
		state.Type.Imsi = &externalDynamicListRsModel_hhIWLbI_ImsiObject{}

		state.Type.Imsi.CertificateProfile = types.StringPointerValue(ans.Type.Imsi.CertificateProfile)

		state.Type.Imsi.Description = types.StringPointerValue(ans.Type.Imsi.Description)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.Type.Imsi.ExceptionList)
		state.Type.Imsi.ExceptionList = var12
		resp.Diagnostics.Append(var13.Errors()...)

		if ans.Type.Imsi.ImsiAuth == nil {
			state.Type.Imsi.ImsiAuth = nil
		} else {
			state.Type.Imsi.ImsiAuth = &externalDynamicListRsModel_hhIWLbI_ImsiAuthObject{}

			state.Type.Imsi.ImsiAuth.Password = types.StringValue(ans.Type.Imsi.ImsiAuth.Password)

			state.Type.Imsi.ImsiAuth.Username = types.StringValue(ans.Type.Imsi.ImsiAuth.Username)
		}

		state.Type.Imsi.Recurring = externalDynamicListRsModel_hhIWLbI_ImsiRecurringObject{}

		if ans.Type.Imsi.Recurring.Daily == nil {
			state.Type.Imsi.Recurring.Daily = nil
		} else {
			state.Type.Imsi.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_ImsiDailyObject{}

			state.Type.Imsi.Recurring.Daily.At = types.StringValue(ans.Type.Imsi.Recurring.Daily.At)
		}

		state.Type.Imsi.Recurring.FiveMinute = types.BoolValue(ans.Type.Imsi.Recurring.FiveMinute != nil)

		state.Type.Imsi.Recurring.Hourly = types.BoolValue(ans.Type.Imsi.Recurring.Hourly != nil)

		if ans.Type.Imsi.Recurring.Monthly == nil {
			state.Type.Imsi.Recurring.Monthly = nil
		} else {
			state.Type.Imsi.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_ImsiMonthyObject{}

			state.Type.Imsi.Recurring.Monthly.At = types.StringValue(ans.Type.Imsi.Recurring.Monthly.At)

			state.Type.Imsi.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Imsi.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Imsi.Recurring.Weekly == nil {
			state.Type.Imsi.Recurring.Weekly = nil
		} else {
			state.Type.Imsi.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_ImsiWeeklyObject{}

			state.Type.Imsi.Recurring.Weekly.At = types.StringValue(ans.Type.Imsi.Recurring.Weekly.At)

			state.Type.Imsi.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Imsi.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Imsi.Url = types.StringValue(ans.Type.Imsi.Url)
	}

	if ans.Type.Ip == nil {
		state.Type.Ip = nil
	} else {
		state.Type.Ip = &externalDynamicListRsModel_hhIWLbI_IpObject{}

		state.Type.Ip.CertificateProfile = types.StringPointerValue(ans.Type.Ip.CertificateProfile)

		state.Type.Ip.Description = types.StringPointerValue(ans.Type.Ip.Description)

		var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Type.Ip.ExceptionList)
		state.Type.Ip.ExceptionList = var14
		resp.Diagnostics.Append(var15.Errors()...)

		if ans.Type.Ip.IpAuth == nil {
			state.Type.Ip.IpAuth = nil
		} else {
			state.Type.Ip.IpAuth = &externalDynamicListRsModel_hhIWLbI_IpAuthObject{}

			var16 := "with_parent_name | encrypted | ip | password"
			ev[var16] = types.StringValue(ans.Type.Ip.IpAuth.Password)

			var17 := "with_parent_name | plaintext | ip | password"
			state.Type.Ip.IpAuth.Password = ev[var17]

			state.Type.Ip.IpAuth.Username = types.StringValue(ans.Type.Ip.IpAuth.Username)
		}

		state.Type.Ip.Recurring = externalDynamicListRsModel_hhIWLbI_IpRecurringObject{}

		if ans.Type.Ip.Recurring.Daily == nil {
			state.Type.Ip.Recurring.Daily = nil
		} else {
			state.Type.Ip.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_IpDailyObject{}

			state.Type.Ip.Recurring.Daily.At = types.StringValue(ans.Type.Ip.Recurring.Daily.At)
		}

		state.Type.Ip.Recurring.FiveMinute = types.BoolValue(ans.Type.Ip.Recurring.FiveMinute != nil)

		state.Type.Ip.Recurring.Hourly = types.BoolValue(ans.Type.Ip.Recurring.Hourly != nil)

		if ans.Type.Ip.Recurring.Monthly == nil {
			state.Type.Ip.Recurring.Monthly = nil
		} else {
			state.Type.Ip.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_IpMonthyObject{}

			state.Type.Ip.Recurring.Monthly.At = types.StringValue(ans.Type.Ip.Recurring.Monthly.At)

			state.Type.Ip.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Ip.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Ip.Recurring.Weekly == nil {
			state.Type.Ip.Recurring.Weekly = nil
		} else {
			state.Type.Ip.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_IpWeeklyObject{}

			state.Type.Ip.Recurring.Weekly.At = types.StringValue(ans.Type.Ip.Recurring.Weekly.At)

			state.Type.Ip.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Ip.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Ip.Url = types.StringValue(ans.Type.Ip.Url)
	}

	if ans.Type.PredefinedIp == nil {
		state.Type.PredefinedIp = nil
	} else {
		state.Type.PredefinedIp = &externalDynamicListRsModel_hhIWLbI_PredefinedIpObject{}

		state.Type.PredefinedIp.Description = types.StringPointerValue(ans.Type.PredefinedIp.Description)

		var18, var19 := types.ListValueFrom(ctx, types.StringType, ans.Type.PredefinedIp.ExceptionList)
		state.Type.PredefinedIp.ExceptionList = var18
		resp.Diagnostics.Append(var19.Errors()...)

		state.Type.PredefinedIp.Url = types.StringValue(ans.Type.PredefinedIp.Url)
	}

	if ans.Type.PredefinedUrl == nil {
		state.Type.PredefinedUrl = nil
	} else {
		state.Type.PredefinedUrl = &externalDynamicListRsModel_hhIWLbI_PredefinedUrlObject{}

		state.Type.PredefinedUrl.Description = types.StringPointerValue(ans.Type.PredefinedUrl.Description)

		var20, var21 := types.ListValueFrom(ctx, types.StringType, ans.Type.PredefinedUrl.ExceptionList)
		state.Type.PredefinedUrl.ExceptionList = var20
		resp.Diagnostics.Append(var21.Errors()...)

		state.Type.PredefinedUrl.Url = types.StringValue(ans.Type.PredefinedUrl.Url)
	}

	if ans.Type.Url == nil {
		state.Type.Url = nil
	} else {
		state.Type.Url = &externalDynamicListRsModel_hhIWLbI_UrlObject{}

		state.Type.Url.CertificateProfile = types.StringPointerValue(ans.Type.Url.CertificateProfile)

		state.Type.Url.Description = types.StringPointerValue(ans.Type.Url.Description)

		var22, var23 := types.ListValueFrom(ctx, types.StringType, ans.Type.Url.ExceptionList)
		state.Type.Url.ExceptionList = var22
		resp.Diagnostics.Append(var23.Errors()...)

		state.Type.Url.Recurring = externalDynamicListRsModel_hhIWLbI_UrlRecurringObject{}

		if ans.Type.Url.Recurring.Daily == nil {
			state.Type.Url.Recurring.Daily = nil
		} else {
			state.Type.Url.Recurring.Daily = &externalDynamicListRsModel_hhIWLbI_UrlDailyObject{}

			state.Type.Url.Recurring.Daily.At = types.StringValue(ans.Type.Url.Recurring.Daily.At)
		}

		state.Type.Url.Recurring.FiveMinute = types.BoolValue(ans.Type.Url.Recurring.FiveMinute != nil)

		state.Type.Url.Recurring.Hourly = types.BoolValue(ans.Type.Url.Recurring.Hourly != nil)

		if ans.Type.Url.Recurring.Monthly == nil {
			state.Type.Url.Recurring.Monthly = nil
		} else {
			state.Type.Url.Recurring.Monthly = &externalDynamicListRsModel_hhIWLbI_UrlMonthyObject{}

			state.Type.Url.Recurring.Monthly.At = types.StringValue(ans.Type.Url.Recurring.Monthly.At)

			state.Type.Url.Recurring.Monthly.DayOfMonth = types.Int64Value(ans.Type.Url.Recurring.Monthly.DayOfMonth)
		}

		if ans.Type.Url.Recurring.Weekly == nil {
			state.Type.Url.Recurring.Weekly = nil
		} else {
			state.Type.Url.Recurring.Weekly = &externalDynamicListRsModel_hhIWLbI_UrlWeeklyObject{}

			state.Type.Url.Recurring.Weekly.At = types.StringValue(ans.Type.Url.Recurring.Weekly.At)

			state.Type.Url.Recurring.Weekly.DayOfWeek = types.StringValue(ans.Type.Url.Recurring.Weekly.DayOfWeek)
		}

		state.Type.Url.Url = types.StringValue(ans.Type.Url.Url)

		if ans.Type.Url.UrlAuth == nil {
			state.Type.Url.UrlAuth = nil
		} else {
			state.Type.Url.UrlAuth = &externalDynamicListRsModel_hhIWLbI_UrlAuthObject{}

			state.Type.Url.UrlAuth.Password = types.StringValue(ans.Type.Url.UrlAuth.Password)

			state.Type.Url.UrlAuth.Username = types.StringValue(ans.Type.Url.UrlAuth.Username)
		}
	}

	var24, var25 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var24
	resp.Diagnostics.Append(var25.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *externalDynamicListResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_external_dynamic_list",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := ljRBvXJ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}
