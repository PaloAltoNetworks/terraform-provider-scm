package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	ljnPEAA "github.com/paloaltonetworks/scm-go/netsec/schemas/http/header/profiles"
	xNwmFxK "github.com/paloaltonetworks/scm-go/netsec/services/httpheaderprofiles"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &httpHeaderProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &httpHeaderProfileListDataSource{}
)

func NewHttpHeaderProfileListDataSource() datasource.DataSource {
	return &httpHeaderProfileListDataSource{}
}

type httpHeaderProfileListDataSource struct {
	client *scm.Client
}

// httpHeaderProfileListDsModel is the model.
type httpHeaderProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []httpHeaderProfileListDsModel_ljnPEAA_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type httpHeaderProfileListDsModel_ljnPEAA_Config struct {
	Description          types.String                                                     `tfsdk:"description"`
	HttpHeaderInsertions []httpHeaderProfileListDsModel_ljnPEAA_HttpHeaderInsertionObject `tfsdk:"http_header_insertions"`
	Id                   types.String                                                     `tfsdk:"id"`
	Name                 types.String                                                     `tfsdk:"name"`
}

type httpHeaderProfileListDsModel_ljnPEAA_HttpHeaderInsertionObject struct {
	Name  types.String                                      `tfsdk:"name"`
	Types []httpHeaderProfileListDsModel_ljnPEAA_TypeObject `tfsdk:"types"`
}

type httpHeaderProfileListDsModel_ljnPEAA_TypeObject struct {
	Domains types.List                                          `tfsdk:"domains"`
	Headers []httpHeaderProfileListDsModel_ljnPEAA_HeaderObject `tfsdk:"headers"`
	Name    types.String                                        `tfsdk:"name"`
}

type httpHeaderProfileListDsModel_ljnPEAA_HeaderObject struct {
	Header types.String `tfsdk:"header"`
	Log    types.Bool   `tfsdk:"log"`
	Name   types.String `tfsdk:"name"`
	Value  types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (d *httpHeaderProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_http_header_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *httpHeaderProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "http_header_insertion":true, "id":true, "name":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"http_header_insertions": dsschema.ListNestedAttribute{
							Description: "The HttpHeaderInsertions param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "type":true} forceNew:map[string]bool(nil)
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"types": dsschema.ListNestedAttribute{
										Description: "The Types param.",
										Computed:    true,
										NestedObject: dsschema.NestedAttributeObject{
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"domains":true, "headers":true, "name":true} forceNew:map[string]bool(nil)
												"domains": dsschema.ListAttribute{
													Description: "The Domains param.",
													Computed:    true,
													ElementType: types.StringType,
												},
												"headers": dsschema.ListNestedAttribute{
													Description: "The Headers param.",
													Computed:    true,
													NestedObject: dsschema.NestedAttributeObject{
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"header":true, "log":true, "name":true, "value":true} forceNew:map[string]bool(nil)
															"header": dsschema.StringAttribute{
																Description: "The Header param.",
																Computed:    true,
															},
															"log": dsschema.BoolAttribute{
																Description: "The Log param. Default: `false`.",
																Computed:    true,
															},
															"name": dsschema.StringAttribute{
																Description: "The Name param.",
																Computed:    true,
															},
															"value": dsschema.StringAttribute{
																Description: "The Value param.",
																Computed:    true,
															},
														},
													},
												},
												"name": dsschema.StringAttribute{
													Description: "The Name param.",
													Computed:    true,
												},
											},
										},
									},
								},
							},
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *httpHeaderProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *httpHeaderProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state httpHeaderProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_http_header_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := xNwmFxK.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]httpHeaderProfileListDsModel_ljnPEAA_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := httpHeaderProfileListDsModel_ljnPEAA_Config{}

			var1.Description = types.StringPointerValue(var0.Description)

			if len(var0.HttpHeaderInsertions) == 0 {
				var1.HttpHeaderInsertions = nil
			} else {
				var1.HttpHeaderInsertions = make([]httpHeaderProfileListDsModel_ljnPEAA_HttpHeaderInsertionObject, 0, len(var0.HttpHeaderInsertions))
				for _, var2 := range var0.HttpHeaderInsertions {
					var3 := httpHeaderProfileListDsModel_ljnPEAA_HttpHeaderInsertionObject{}

					var3.Name = types.StringValue(var2.Name)

					if len(var2.Types) == 0 {
						var3.Types = nil
					} else {
						var3.Types = make([]httpHeaderProfileListDsModel_ljnPEAA_TypeObject, 0, len(var2.Types))
						for _, var4 := range var2.Types {
							var5 := httpHeaderProfileListDsModel_ljnPEAA_TypeObject{}

							var6, var7 := types.ListValueFrom(ctx, types.StringType, var4.Domains)
							var5.Domains = var6
							resp.Diagnostics.Append(var7.Errors()...)

							if len(var4.Headers) == 0 {
								var5.Headers = nil
							} else {
								var5.Headers = make([]httpHeaderProfileListDsModel_ljnPEAA_HeaderObject, 0, len(var4.Headers))
								for _, var8 := range var4.Headers {
									var9 := httpHeaderProfileListDsModel_ljnPEAA_HeaderObject{}

									var9.Header = types.StringValue(var8.Header)

									var9.Log = types.BoolPointerValue(var8.Log)

									var9.Name = types.StringValue(var8.Name)

									var9.Value = types.StringValue(var8.Value)
									var5.Headers = append(var5.Headers, var9)
								}
							}

							var5.Name = types.StringValue(var4.Name)
							var3.Types = append(var3.Types, var5)
						}
					}
					var1.HttpHeaderInsertions = append(var1.HttpHeaderInsertions, var3)
				}
			}

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &httpHeaderProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &httpHeaderProfileDataSource{}
)

func NewHttpHeaderProfileDataSource() datasource.DataSource {
	return &httpHeaderProfileDataSource{}
}

type httpHeaderProfileDataSource struct {
	client *scm.Client
}

// httpHeaderProfileDsModel is the model.
type httpHeaderProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Description          types.String                                                 `tfsdk:"description"`
	HttpHeaderInsertions []httpHeaderProfileDsModel_ljnPEAA_HttpHeaderInsertionObject `tfsdk:"http_header_insertions"`
	// omit input: id
	Name types.String `tfsdk:"name"`
}

type httpHeaderProfileDsModel_ljnPEAA_HttpHeaderInsertionObject struct {
	Name  types.String                                  `tfsdk:"name"`
	Types []httpHeaderProfileDsModel_ljnPEAA_TypeObject `tfsdk:"types"`
}

type httpHeaderProfileDsModel_ljnPEAA_TypeObject struct {
	Domains types.List                                      `tfsdk:"domains"`
	Headers []httpHeaderProfileDsModel_ljnPEAA_HeaderObject `tfsdk:"headers"`
	Name    types.String                                    `tfsdk:"name"`
}

type httpHeaderProfileDsModel_ljnPEAA_HeaderObject struct {
	Header types.String `tfsdk:"header"`
	Log    types.Bool   `tfsdk:"log"`
	Name   types.String `tfsdk:"name"`
	Value  types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (d *httpHeaderProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_http_header_profile"
}

// Schema defines the schema for this data source.
func (d *httpHeaderProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"description":true, "http_header_insertion":true, "id":true, "name":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"http_header_insertions": dsschema.ListNestedAttribute{
				Description: "The HttpHeaderInsertions param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "type":true} forceNew:map[string]bool(nil)
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"types": dsschema.ListNestedAttribute{
							Description: "The Types param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"domains":true, "headers":true, "name":true} forceNew:map[string]bool(nil)
									"domains": dsschema.ListAttribute{
										Description: "The Domains param.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"headers": dsschema.ListNestedAttribute{
										Description: "The Headers param.",
										Computed:    true,
										NestedObject: dsschema.NestedAttributeObject{
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"header":true, "log":true, "name":true, "value":true} forceNew:map[string]bool(nil)
												"header": dsschema.StringAttribute{
													Description: "The Header param.",
													Computed:    true,
												},
												"log": dsschema.BoolAttribute{
													Description: "The Log param. Default: `false`.",
													Computed:    true,
												},
												"name": dsschema.StringAttribute{
													Description: "The Name param.",
													Computed:    true,
												},
												"value": dsschema.StringAttribute{
													Description: "The Value param.",
													Computed:    true,
												},
											},
										},
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
								},
							},
						},
					},
				},
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *httpHeaderProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *httpHeaderProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state httpHeaderProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_http_header_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := xNwmFxK.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	if len(ans.HttpHeaderInsertions) == 0 {
		state.HttpHeaderInsertions = nil
	} else {
		state.HttpHeaderInsertions = make([]httpHeaderProfileDsModel_ljnPEAA_HttpHeaderInsertionObject, 0, len(ans.HttpHeaderInsertions))
		for _, var0 := range ans.HttpHeaderInsertions {
			var1 := httpHeaderProfileDsModel_ljnPEAA_HttpHeaderInsertionObject{}

			var1.Name = types.StringValue(var0.Name)

			if len(var0.Types) == 0 {
				var1.Types = nil
			} else {
				var1.Types = make([]httpHeaderProfileDsModel_ljnPEAA_TypeObject, 0, len(var0.Types))
				for _, var2 := range var0.Types {
					var3 := httpHeaderProfileDsModel_ljnPEAA_TypeObject{}

					var4, var5 := types.ListValueFrom(ctx, types.StringType, var2.Domains)
					var3.Domains = var4
					resp.Diagnostics.Append(var5.Errors()...)

					if len(var2.Headers) == 0 {
						var3.Headers = nil
					} else {
						var3.Headers = make([]httpHeaderProfileDsModel_ljnPEAA_HeaderObject, 0, len(var2.Headers))
						for _, var6 := range var2.Headers {
							var7 := httpHeaderProfileDsModel_ljnPEAA_HeaderObject{}

							var7.Header = types.StringValue(var6.Header)

							var7.Log = types.BoolPointerValue(var6.Log)

							var7.Name = types.StringValue(var6.Name)

							var7.Value = types.StringValue(var6.Value)
							var3.Headers = append(var3.Headers, var7)
						}
					}

					var3.Name = types.StringValue(var2.Name)
					var1.Types = append(var1.Types, var3)
				}
			}
			state.HttpHeaderInsertions = append(state.HttpHeaderInsertions, var1)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &httpHeaderProfileResource{}
	_ resource.ResourceWithConfigure   = &httpHeaderProfileResource{}
	_ resource.ResourceWithImportState = &httpHeaderProfileResource{}
)

func NewHttpHeaderProfileResource() resource.Resource {
	return &httpHeaderProfileResource{}
}

type httpHeaderProfileResource struct {
	client *scm.Client
}

// httpHeaderProfileRsModel is the model.
type httpHeaderProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Description          types.String                                                 `tfsdk:"description"`
	Device               types.String                                                 `tfsdk:"device"`
	Folder               types.String                                                 `tfsdk:"folder"`
	HttpHeaderInsertions []httpHeaderProfileRsModel_ljnPEAA_HttpHeaderInsertionObject `tfsdk:"http_header_insertions"`
	Id                   types.String                                                 `tfsdk:"id"`
	Name                 types.String                                                 `tfsdk:"name"`
	Snippet              types.String                                                 `tfsdk:"snippet"`

	// Output.
	// omit input: description
	// omit input: http_header_insertions
	// omit input: id
	// omit input: name
}

type httpHeaderProfileRsModel_ljnPEAA_HttpHeaderInsertionObject struct {
	Name  types.String                                  `tfsdk:"name"`
	Types []httpHeaderProfileRsModel_ljnPEAA_TypeObject `tfsdk:"types"`
}

type httpHeaderProfileRsModel_ljnPEAA_TypeObject struct {
	Domains types.List                                      `tfsdk:"domains"`
	Headers []httpHeaderProfileRsModel_ljnPEAA_HeaderObject `tfsdk:"headers"`
	Name    types.String                                    `tfsdk:"name"`
}

type httpHeaderProfileRsModel_ljnPEAA_HeaderObject struct {
	Header types.String `tfsdk:"header"`
	Log    types.Bool   `tfsdk:"log"`
	Name   types.String `tfsdk:"name"`
	Value  types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (r *httpHeaderProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_http_header_profile"
}

// Schema defines the schema for this data source.
func (r *httpHeaderProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"description":true, "device":true, "folder":true, "http_header_insertion":true, "id":true, "name":true, "snippet":true} outputs:map[string]bool{"description":true, "http_header_insertion":true, "id":true, "name":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"http_header_insertions": rsschema.ListNestedAttribute{
				Description: "The HttpHeaderInsertions param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"name":true, "type":true} outputs:map[string]bool{"name":true, "type":true} forceNew:map[string]bool(nil)
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Required:    true,
						},
						"types": rsschema.ListNestedAttribute{
							Description: "The Types param.",
							Required:    true,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"domains":true, "headers":true, "name":true} outputs:map[string]bool{"domains":true, "headers":true, "name":true} forceNew:map[string]bool(nil)
									"domains": rsschema.ListAttribute{
										Description: "The Domains param.",
										Required:    true,
										ElementType: types.StringType,
									},
									"headers": rsschema.ListNestedAttribute{
										Description: "The Headers param.",
										Required:    true,
										NestedObject: rsschema.NestedAttributeObject{
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"header":true, "log":true, "name":true, "value":true} outputs:map[string]bool{"header":true, "log":true, "name":true, "value":true} forceNew:map[string]bool(nil)
												"header": rsschema.StringAttribute{
													Description: "The Header param.",
													Required:    true,
												},
												"log": rsschema.BoolAttribute{
													Description: "The Log param. Default: `false`.",
													Optional:    true,
													Computed:    true,
													Default:     booldefault.StaticBool(false),
												},
												"name": rsschema.StringAttribute{
													Description: "The Name param.",
													Required:    true,
												},
												"value": rsschema.StringAttribute{
													Description: "The Value param.",
													Required:    true,
												},
											},
										},
									},
									"name": rsschema.StringAttribute{
										Description: "The Name param.",
										Required:    true,
									},
								},
							},
						},
					},
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *httpHeaderProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *httpHeaderProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state httpHeaderProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_http_header_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &ljnPEAA.Config{}

	input.Request.Description = state.Description.ValueStringPointer()

	if len(state.HttpHeaderInsertions) != 0 {
		input.Request.HttpHeaderInsertions = make([]ljnPEAA.HttpHeaderInsertionObject, 0, len(state.HttpHeaderInsertions))
		for _, var0 := range state.HttpHeaderInsertions {
			var var1 ljnPEAA.HttpHeaderInsertionObject

			var1.Name = var0.Name.ValueString()

			if len(var0.Types) != 0 {
				var1.Types = make([]ljnPEAA.TypeObject, 0, len(var0.Types))
				for _, var2 := range var0.Types {
					var var3 ljnPEAA.TypeObject

					resp.Diagnostics.Append(var2.Domains.ElementsAs(ctx, &var3.Domains, false)...)
					//if len(var2.Domains) != 0 {
					//    var3.Domains = make([]string, 0, len(var2.Domains))
					//    for _, var4 := range var2.Domains {
					//        var3.Domains = append(var3.Domains, var4.ValueString())
					//    }
					//}

					if len(var2.Headers) != 0 {
						var3.Headers = make([]ljnPEAA.HeaderObject, 0, len(var2.Headers))
						for _, var5 := range var2.Headers {
							var var6 ljnPEAA.HeaderObject

							var6.Header = var5.Header.ValueString()

							var6.Log = var5.Log.ValueBoolPointer()

							var6.Name = var5.Name.ValueString()

							var6.Value = var5.Value.ValueString()
							var3.Headers = append(var3.Headers, var6)
						}
					}

					var3.Name = var2.Name.ValueString()
					var1.Types = append(var1.Types, var3)
				}
			}
			input.Request.HttpHeaderInsertions = append(input.Request.HttpHeaderInsertions, var1)
		}
	}

	input.Request.Name = state.Name.ValueString()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	if len(ans.HttpHeaderInsertions) == 0 {
		state.HttpHeaderInsertions = nil
	} else {
		state.HttpHeaderInsertions = make([]httpHeaderProfileRsModel_ljnPEAA_HttpHeaderInsertionObject, 0, len(ans.HttpHeaderInsertions))
		for _, var7 := range ans.HttpHeaderInsertions {
			var8 := httpHeaderProfileRsModel_ljnPEAA_HttpHeaderInsertionObject{}

			var8.Name = types.StringValue(var7.Name)

			if len(var7.Types) == 0 {
				var8.Types = nil
			} else {
				var8.Types = make([]httpHeaderProfileRsModel_ljnPEAA_TypeObject, 0, len(var7.Types))
				for _, var9 := range var7.Types {
					var10 := httpHeaderProfileRsModel_ljnPEAA_TypeObject{}

					var11, var12 := types.ListValueFrom(ctx, types.StringType, var9.Domains)
					var10.Domains = var11
					resp.Diagnostics.Append(var12.Errors()...)

					if len(var9.Headers) == 0 {
						var10.Headers = nil
					} else {
						var10.Headers = make([]httpHeaderProfileRsModel_ljnPEAA_HeaderObject, 0, len(var9.Headers))
						for _, var13 := range var9.Headers {
							var14 := httpHeaderProfileRsModel_ljnPEAA_HeaderObject{}

							var14.Header = types.StringValue(var13.Header)

							var14.Log = types.BoolPointerValue(var13.Log)

							var14.Name = types.StringValue(var13.Name)

							var14.Value = types.StringValue(var13.Value)
							var10.Headers = append(var10.Headers, var14)
						}
					}

					var10.Name = types.StringValue(var9.Name)
					var8.Types = append(var8.Types, var10)
				}
			}
			state.HttpHeaderInsertions = append(state.HttpHeaderInsertions, var8)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *httpHeaderProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state httpHeaderProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_http_header_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Description = types.StringPointerValue(ans.Description)

	if len(ans.HttpHeaderInsertions) == 0 {
		state.HttpHeaderInsertions = nil
	} else {
		state.HttpHeaderInsertions = make([]httpHeaderProfileRsModel_ljnPEAA_HttpHeaderInsertionObject, 0, len(ans.HttpHeaderInsertions))
		for _, var0 := range ans.HttpHeaderInsertions {
			var1 := httpHeaderProfileRsModel_ljnPEAA_HttpHeaderInsertionObject{}

			var1.Name = types.StringValue(var0.Name)

			if len(var0.Types) == 0 {
				var1.Types = nil
			} else {
				var1.Types = make([]httpHeaderProfileRsModel_ljnPEAA_TypeObject, 0, len(var0.Types))
				for _, var2 := range var0.Types {
					var3 := httpHeaderProfileRsModel_ljnPEAA_TypeObject{}

					var4, var5 := types.ListValueFrom(ctx, types.StringType, var2.Domains)
					var3.Domains = var4
					resp.Diagnostics.Append(var5.Errors()...)

					if len(var2.Headers) == 0 {
						var3.Headers = nil
					} else {
						var3.Headers = make([]httpHeaderProfileRsModel_ljnPEAA_HeaderObject, 0, len(var2.Headers))
						for _, var6 := range var2.Headers {
							var7 := httpHeaderProfileRsModel_ljnPEAA_HeaderObject{}

							var7.Header = types.StringValue(var6.Header)

							var7.Log = types.BoolPointerValue(var6.Log)

							var7.Name = types.StringValue(var6.Name)

							var7.Value = types.StringValue(var6.Value)
							var3.Headers = append(var3.Headers, var7)
						}
					}

					var3.Name = types.StringValue(var2.Name)
					var1.Types = append(var1.Types, var3)
				}
			}
			state.HttpHeaderInsertions = append(state.HttpHeaderInsertions, var1)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *httpHeaderProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state httpHeaderProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_http_header_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &ljnPEAA.Config{}

	input.Request.Description = plan.Description.ValueStringPointer()

	if len(plan.HttpHeaderInsertions) != 0 {
		input.Request.HttpHeaderInsertions = make([]ljnPEAA.HttpHeaderInsertionObject, 0, len(plan.HttpHeaderInsertions))
		for _, var0 := range plan.HttpHeaderInsertions {
			var var1 ljnPEAA.HttpHeaderInsertionObject

			var1.Name = var0.Name.ValueString()

			if len(var0.Types) != 0 {
				var1.Types = make([]ljnPEAA.TypeObject, 0, len(var0.Types))
				for _, var2 := range var0.Types {
					var var3 ljnPEAA.TypeObject

					resp.Diagnostics.Append(var2.Domains.ElementsAs(ctx, &var3.Domains, false)...)
					//if len(var2.Domains) != 0 {
					//    var3.Domains = make([]string, 0, len(var2.Domains))
					//    for _, var4 := range var2.Domains {
					//        var3.Domains = append(var3.Domains, var4.ValueString())
					//    }
					//}

					if len(var2.Headers) != 0 {
						var3.Headers = make([]ljnPEAA.HeaderObject, 0, len(var2.Headers))
						for _, var5 := range var2.Headers {
							var var6 ljnPEAA.HeaderObject

							var6.Header = var5.Header.ValueString()

							var6.Log = var5.Log.ValueBoolPointer()

							var6.Name = var5.Name.ValueString()

							var6.Value = var5.Value.ValueString()
							var3.Headers = append(var3.Headers, var6)
						}
					}

					var3.Name = var2.Name.ValueString()
					var1.Types = append(var1.Types, var3)
				}
			}
			input.Request.HttpHeaderInsertions = append(input.Request.HttpHeaderInsertions, var1)
		}
	}

	input.Request.Name = plan.Name.ValueString()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Description = types.StringPointerValue(ans.Description)

	if len(ans.HttpHeaderInsertions) == 0 {
		state.HttpHeaderInsertions = nil
	} else {
		state.HttpHeaderInsertions = make([]httpHeaderProfileRsModel_ljnPEAA_HttpHeaderInsertionObject, 0, len(ans.HttpHeaderInsertions))
		for _, var7 := range ans.HttpHeaderInsertions {
			var8 := httpHeaderProfileRsModel_ljnPEAA_HttpHeaderInsertionObject{}

			var8.Name = types.StringValue(var7.Name)

			if len(var7.Types) == 0 {
				var8.Types = nil
			} else {
				var8.Types = make([]httpHeaderProfileRsModel_ljnPEAA_TypeObject, 0, len(var7.Types))
				for _, var9 := range var7.Types {
					var10 := httpHeaderProfileRsModel_ljnPEAA_TypeObject{}

					var11, var12 := types.ListValueFrom(ctx, types.StringType, var9.Domains)
					var10.Domains = var11
					resp.Diagnostics.Append(var12.Errors()...)

					if len(var9.Headers) == 0 {
						var10.Headers = nil
					} else {
						var10.Headers = make([]httpHeaderProfileRsModel_ljnPEAA_HeaderObject, 0, len(var9.Headers))
						for _, var13 := range var9.Headers {
							var14 := httpHeaderProfileRsModel_ljnPEAA_HeaderObject{}

							var14.Header = types.StringValue(var13.Header)

							var14.Log = types.BoolPointerValue(var13.Log)

							var14.Name = types.StringValue(var13.Name)

							var14.Value = types.StringValue(var13.Value)
							var10.Headers = append(var10.Headers, var14)
						}
					}

					var10.Name = types.StringValue(var9.Name)
					var8.Types = append(var8.Types, var10)
				}
			}
			state.HttpHeaderInsertions = append(state.HttpHeaderInsertions, var8)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *httpHeaderProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_http_header_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *httpHeaderProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
