package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	yJkkSzS "github.com/paloaltonetworks/scm-go/netsec/schemas/ike/gateways"
	kJVbXva "github.com/paloaltonetworks/scm-go/netsec/services/ikegateways"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &ikeGatewayListDataSource{}
	_ datasource.DataSourceWithConfigure = &ikeGatewayListDataSource{}
)

func NewIkeGatewayListDataSource() datasource.DataSource {
	return &ikeGatewayListDataSource{}
}

type ikeGatewayListDataSource struct {
	client *scm.Client
}

// ikeGatewayListDsModel is the model.
type ikeGatewayListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []ikeGatewayListDsModel_yJkkSzS_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type ikeGatewayListDsModel_yJkkSzS_Config struct {
	Authentication ikeGatewayListDsModel_yJkkSzS_AuthenticationObject  `tfsdk:"authentication"`
	Id             types.String                                        `tfsdk:"id"`
	LocalId        *ikeGatewayListDsModel_yJkkSzS_LocalIdObject        `tfsdk:"local_id"`
	Name           types.String                                        `tfsdk:"name"`
	PeerAddress    ikeGatewayListDsModel_yJkkSzS_PeerAddressObject     `tfsdk:"peer_address"`
	PeerId         *ikeGatewayListDsModel_yJkkSzS_PeerIdObject         `tfsdk:"peer_id"`
	Protocol       ikeGatewayListDsModel_yJkkSzS_ProtocolObject        `tfsdk:"protocol"`
	ProtocolCommon *ikeGatewayListDsModel_yJkkSzS_ProtocolCommonObject `tfsdk:"protocol_common"`
}

type ikeGatewayListDsModel_yJkkSzS_AuthenticationObject struct {
	Certificate  *ikeGatewayListDsModel_yJkkSzS_CertificateObject  `tfsdk:"certificate"`
	PreSharedKey *ikeGatewayListDsModel_yJkkSzS_PreSharedKeyObject `tfsdk:"pre_shared_key"`
}

type ikeGatewayListDsModel_yJkkSzS_CertificateObject struct {
	AllowIdPayloadMismatch     types.Bool                                            `tfsdk:"allow_id_payload_mismatch"`
	CertificateProfile         types.String                                          `tfsdk:"certificate_profile"`
	LocalCertificate           *ikeGatewayListDsModel_yJkkSzS_LocalCertificateObject `tfsdk:"local_certificate"`
	StrictValidationRevocation types.Bool                                            `tfsdk:"strict_validation_revocation"`
	UseManagementAsSource      types.Bool                                            `tfsdk:"use_management_as_source"`
}

type ikeGatewayListDsModel_yJkkSzS_LocalCertificateObject struct {
	LocalCertificateName types.String `tfsdk:"local_certificate_name"`
}

type ikeGatewayListDsModel_yJkkSzS_PreSharedKeyObject struct {
	Key types.String `tfsdk:"key"`
}

type ikeGatewayListDsModel_yJkkSzS_LocalIdObject struct {
	Id   types.String `tfsdk:"id"`
	Type types.String `tfsdk:"type"`
}

type ikeGatewayListDsModel_yJkkSzS_PeerAddressObject struct {
	DynamicAddress types.Bool   `tfsdk:"dynamic_address"`
	Fqdn           types.String `tfsdk:"fqdn"`
	Ip             types.String `tfsdk:"ip"`
}

type ikeGatewayListDsModel_yJkkSzS_PeerIdObject struct {
	Id   types.String `tfsdk:"id"`
	Type types.String `tfsdk:"type"`
}

type ikeGatewayListDsModel_yJkkSzS_ProtocolObject struct {
	Ikev1   *ikeGatewayListDsModel_yJkkSzS_Ikev1Object `tfsdk:"ikev1"`
	Ikev2   *ikeGatewayListDsModel_yJkkSzS_Ikev2Object `tfsdk:"ikev2"`
	Version types.String                               `tfsdk:"version"`
}

type ikeGatewayListDsModel_yJkkSzS_Ikev1Object struct {
	Dpd              *ikeGatewayListDsModel_yJkkSzS_Ikev1DpdObject `tfsdk:"dpd"`
	IkeCryptoProfile types.String                                  `tfsdk:"ike_crypto_profile"`
}

type ikeGatewayListDsModel_yJkkSzS_Ikev1DpdObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayListDsModel_yJkkSzS_Ikev2Object struct {
	Dpd              *ikeGatewayListDsModel_yJkkSzS_Ikev2DpdObject `tfsdk:"dpd"`
	IkeCryptoProfile types.String                                  `tfsdk:"ike_crypto_profile"`
}

type ikeGatewayListDsModel_yJkkSzS_Ikev2DpdObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayListDsModel_yJkkSzS_ProtocolCommonObject struct {
	Fragmentation *ikeGatewayListDsModel_yJkkSzS_FragmentationObject `tfsdk:"fragmentation"`
	NatTraversal  *ikeGatewayListDsModel_yJkkSzS_NatTraversalObject  `tfsdk:"nat_traversal"`
	PassiveMode   types.Bool                                         `tfsdk:"passive_mode"`
}

type ikeGatewayListDsModel_yJkkSzS_FragmentationObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayListDsModel_yJkkSzS_NatTraversalObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

// Metadata returns the data source type name.
func (d *ikeGatewayListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ike_gateway_list"
}

// Schema defines the schema for this listing data source.
func (d *ikeGatewayListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"authentication":true, "id":true, "local_id":true, "name":true, "peer_address":true, "peer_id":true, "protocol":true, "protocol_common":true} forceNew:map[string]bool(nil)
						"authentication": dsschema.SingleNestedAttribute{
							Description: "The Authentication param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"certificate":true, "pre_shared_key":true} forceNew:map[string]bool(nil)
								"certificate": dsschema.SingleNestedAttribute{
									Description: "The Certificate param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"allow_id_payload_mismatch":true, "certificate_profile":true, "local_certificate":true, "strict_validation_revocation":true, "use_management_as_source":true} forceNew:map[string]bool(nil)
										"allow_id_payload_mismatch": dsschema.BoolAttribute{
											Description: "The AllowIdPayloadMismatch param.",
											Computed:    true,
										},
										"certificate_profile": dsschema.StringAttribute{
											Description: "The CertificateProfile param.",
											Computed:    true,
										},
										"local_certificate": dsschema.SingleNestedAttribute{
											Description: "The LocalCertificate param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"local_certificate_name":true} forceNew:map[string]bool(nil)
												"local_certificate_name": dsschema.StringAttribute{
													Description: "The LocalCertificateName param.",
													Computed:    true,
												},
											},
										},
										"strict_validation_revocation": dsschema.BoolAttribute{
											Description: "The StrictValidationRevocation param.",
											Computed:    true,
										},
										"use_management_as_source": dsschema.BoolAttribute{
											Description: "The UseManagementAsSource param.",
											Computed:    true,
										},
									},
								},
								"pre_shared_key": dsschema.SingleNestedAttribute{
									Description: "The PreSharedKey param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"key":true} forceNew:map[string]bool(nil)
										"key": dsschema.StringAttribute{
											Description: "The Key param.",
											Computed:    true,
											Sensitive:   true,
										},
									},
								},
							},
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"local_id": dsschema.SingleNestedAttribute{
							Description: "The LocalId param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"id":true, "type":true} forceNew:map[string]bool(nil)
								"id": dsschema.StringAttribute{
									Description: "Local ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[a-zA-Z0-9.-]+)$|^([$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.",
									Computed:    true,
								},
								"type": dsschema.StringAttribute{
									Description: "The Type param.",
									Computed:    true,
								},
							},
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"peer_address": dsschema.SingleNestedAttribute{
							Description: "The PeerAddress param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"dynamic":true, "fqdn":true, "ip":true} forceNew:map[string]bool(nil)
								"dynamic_address": dsschema.BoolAttribute{
									Description: "The DynamicAddress param.",
									Computed:    true,
								},
								"fqdn": dsschema.StringAttribute{
									Description: "peer gateway FQDN name. String length must not exceed 255 characters.",
									Computed:    true,
								},
								"ip": dsschema.StringAttribute{
									Description: "peer gateway has static IP address.",
									Computed:    true,
								},
							},
						},
						"peer_id": dsschema.SingleNestedAttribute{
							Description: "The PeerId param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"id":true, "type":true} forceNew:map[string]bool(nil)
								"id": dsschema.StringAttribute{
									Description: "Peer ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[\\*a-zA-Z0-9.-]+)$|^([\\*$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.",
									Computed:    true,
								},
								"type": dsschema.StringAttribute{
									Description: "The Type param. String must be one of these: `\"ipaddr\"`, `\"keyid\"`, `\"fqdn\"`, `\"ufqdn\"`.",
									Computed:    true,
								},
							},
						},
						"protocol": dsschema.SingleNestedAttribute{
							Description: "The Protocol param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"ikev1":true, "ikev2":true, "version":true} forceNew:map[string]bool(nil)
								"ikev1": dsschema.SingleNestedAttribute{
									Description: "The Ikev1 param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"dpd":true, "ike_crypto_profile":true} forceNew:map[string]bool(nil)
										"dpd": dsschema.SingleNestedAttribute{
											Description: "The Dpd param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
												"enable": dsschema.BoolAttribute{
													Description: "The Enable param.",
													Computed:    true,
												},
											},
										},
										"ike_crypto_profile": dsschema.StringAttribute{
											Description: "The IkeCryptoProfile param.",
											Computed:    true,
										},
									},
								},
								"ikev2": dsschema.SingleNestedAttribute{
									Description: "The Ikev2 param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"dpd":true, "ike_crypto_profile":true} forceNew:map[string]bool(nil)
										"dpd": dsschema.SingleNestedAttribute{
											Description: "The Dpd param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
												"enable": dsschema.BoolAttribute{
													Description: "The Enable param.",
													Computed:    true,
												},
											},
										},
										"ike_crypto_profile": dsschema.StringAttribute{
											Description: "The IkeCryptoProfile param.",
											Computed:    true,
										},
									},
								},
								"version": dsschema.StringAttribute{
									Description: "The Version param. String must be one of these: `\"ikev2-preferred\"`, `\"ikev1\"`, `\"ikev2\"`. Default: `\"ikev2-preferred\"`.",
									Computed:    true,
								},
							},
						},
						"protocol_common": dsschema.SingleNestedAttribute{
							Description: "The ProtocolCommon param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"fragmentation":true, "nat_traversal":true, "passive_mode":true} forceNew:map[string]bool(nil)
								"fragmentation": dsschema.SingleNestedAttribute{
									Description: "The Fragmentation param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
										"enable": dsschema.BoolAttribute{
											Description: "The Enable param. Default: `false`.",
											Computed:    true,
										},
									},
								},
								"nat_traversal": dsschema.SingleNestedAttribute{
									Description: "The NatTraversal param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
										"enable": dsschema.BoolAttribute{
											Description: "The Enable param.",
											Computed:    true,
										},
									},
								},
								"passive_mode": dsschema.BoolAttribute{
									Description: "The PassiveMode param.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *ikeGatewayListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *ikeGatewayListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state ikeGatewayListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_ike_gateway_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := kJVbXva.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]ikeGatewayListDsModel_yJkkSzS_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := ikeGatewayListDsModel_yJkkSzS_Config{}

			var1.Authentication = ikeGatewayListDsModel_yJkkSzS_AuthenticationObject{}

			if var0.Authentication.Certificate == nil {
				var1.Authentication.Certificate = nil
			} else {
				var1.Authentication.Certificate = &ikeGatewayListDsModel_yJkkSzS_CertificateObject{}

				var1.Authentication.Certificate.AllowIdPayloadMismatch = types.BoolPointerValue(var0.Authentication.Certificate.AllowIdPayloadMismatch)

				var1.Authentication.Certificate.CertificateProfile = types.StringPointerValue(var0.Authentication.Certificate.CertificateProfile)

				if var0.Authentication.Certificate.LocalCertificate == nil {
					var1.Authentication.Certificate.LocalCertificate = nil
				} else {
					var1.Authentication.Certificate.LocalCertificate = &ikeGatewayListDsModel_yJkkSzS_LocalCertificateObject{}

					var1.Authentication.Certificate.LocalCertificate.LocalCertificateName = types.StringPointerValue(var0.Authentication.Certificate.LocalCertificate.LocalCertificateName)
				}

				var1.Authentication.Certificate.StrictValidationRevocation = types.BoolPointerValue(var0.Authentication.Certificate.StrictValidationRevocation)

				var1.Authentication.Certificate.UseManagementAsSource = types.BoolPointerValue(var0.Authentication.Certificate.UseManagementAsSource)
			}

			if var0.Authentication.PreSharedKey == nil {
				var1.Authentication.PreSharedKey = nil
			} else {
				var1.Authentication.PreSharedKey = &ikeGatewayListDsModel_yJkkSzS_PreSharedKeyObject{}

				var1.Authentication.PreSharedKey.Key = types.StringPointerValue(var0.Authentication.PreSharedKey.Key)
			}

			var1.Id = types.StringPointerValue(var0.Id)

			if var0.LocalId == nil {
				var1.LocalId = nil
			} else {
				var1.LocalId = &ikeGatewayListDsModel_yJkkSzS_LocalIdObject{}

				var1.LocalId.Id = types.StringPointerValue(var0.LocalId.Id)

				var1.LocalId.Type = types.StringPointerValue(var0.LocalId.Type)
			}

			var1.Name = types.StringValue(var0.Name)

			var1.PeerAddress = ikeGatewayListDsModel_yJkkSzS_PeerAddressObject{}

			if var0.PeerAddress.DynamicAddress != nil {
				var1.PeerAddress.DynamicAddress = types.BoolValue(true)
			} else {
				var1.PeerAddress.DynamicAddress = types.BoolPointerValue(nil)
			}
			//var1.PeerAddress.DynamicAddress = types.BoolValue(var0.PeerAddress.DynamicAddress != nil)

			var1.PeerAddress.Fqdn = types.StringPointerValue(var0.PeerAddress.Fqdn)

			var1.PeerAddress.Ip = types.StringPointerValue(var0.PeerAddress.Ip)

			if var0.PeerId == nil {
				var1.PeerId = nil
			} else {
				var1.PeerId = &ikeGatewayListDsModel_yJkkSzS_PeerIdObject{}

				var1.PeerId.Id = types.StringPointerValue(var0.PeerId.Id)

				var1.PeerId.Type = types.StringPointerValue(var0.PeerId.Type)
			}

			var1.Protocol = ikeGatewayListDsModel_yJkkSzS_ProtocolObject{}

			if var0.Protocol.Ikev1 == nil {
				var1.Protocol.Ikev1 = nil
			} else {
				var1.Protocol.Ikev1 = &ikeGatewayListDsModel_yJkkSzS_Ikev1Object{}

				if var0.Protocol.Ikev1.Dpd == nil {
					var1.Protocol.Ikev1.Dpd = nil
				} else {
					var1.Protocol.Ikev1.Dpd = &ikeGatewayListDsModel_yJkkSzS_Ikev1DpdObject{}

					var1.Protocol.Ikev1.Dpd.Enable = types.BoolPointerValue(var0.Protocol.Ikev1.Dpd.Enable)
				}

				var1.Protocol.Ikev1.IkeCryptoProfile = types.StringPointerValue(var0.Protocol.Ikev1.IkeCryptoProfile)
			}

			if var0.Protocol.Ikev2 == nil {
				var1.Protocol.Ikev2 = nil
			} else {
				var1.Protocol.Ikev2 = &ikeGatewayListDsModel_yJkkSzS_Ikev2Object{}

				if var0.Protocol.Ikev2.Dpd == nil {
					var1.Protocol.Ikev2.Dpd = nil
				} else {
					var1.Protocol.Ikev2.Dpd = &ikeGatewayListDsModel_yJkkSzS_Ikev2DpdObject{}

					var1.Protocol.Ikev2.Dpd.Enable = types.BoolPointerValue(var0.Protocol.Ikev2.Dpd.Enable)
				}

				var1.Protocol.Ikev2.IkeCryptoProfile = types.StringPointerValue(var0.Protocol.Ikev2.IkeCryptoProfile)
			}

			var1.Protocol.Version = types.StringPointerValue(var0.Protocol.Version)

			if var0.ProtocolCommon == nil {
				var1.ProtocolCommon = nil
			} else {
				var1.ProtocolCommon = &ikeGatewayListDsModel_yJkkSzS_ProtocolCommonObject{}

				if var0.ProtocolCommon.Fragmentation == nil {
					var1.ProtocolCommon.Fragmentation = nil
				} else {
					var1.ProtocolCommon.Fragmentation = &ikeGatewayListDsModel_yJkkSzS_FragmentationObject{}

					var1.ProtocolCommon.Fragmentation.Enable = types.BoolPointerValue(var0.ProtocolCommon.Fragmentation.Enable)
				}

				if var0.ProtocolCommon.NatTraversal == nil {
					var1.ProtocolCommon.NatTraversal = nil
				} else {
					var1.ProtocolCommon.NatTraversal = &ikeGatewayListDsModel_yJkkSzS_NatTraversalObject{}

					var1.ProtocolCommon.NatTraversal.Enable = types.BoolPointerValue(var0.ProtocolCommon.NatTraversal.Enable)
				}

				var1.ProtocolCommon.PassiveMode = types.BoolPointerValue(var0.ProtocolCommon.PassiveMode)
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &ikeGatewayDataSource{}
	_ datasource.DataSourceWithConfigure = &ikeGatewayDataSource{}
)

func NewIkeGatewayDataSource() datasource.DataSource {
	return &ikeGatewayDataSource{}
}

type ikeGatewayDataSource struct {
	client *scm.Client
}

// ikeGatewayDsModel is the model.
type ikeGatewayDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Id      types.String `tfsdk:"id"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Authentication ikeGatewayDsModel_yJkkSzS_AuthenticationObject `tfsdk:"authentication"`
	// omit input: id
	LocalId        *ikeGatewayDsModel_yJkkSzS_LocalIdObject        `tfsdk:"local_id"`
	Name           types.String                                    `tfsdk:"name"`
	PeerAddress    ikeGatewayDsModel_yJkkSzS_PeerAddressObject     `tfsdk:"peer_address"`
	PeerId         *ikeGatewayDsModel_yJkkSzS_PeerIdObject         `tfsdk:"peer_id"`
	Protocol       ikeGatewayDsModel_yJkkSzS_ProtocolObject        `tfsdk:"protocol"`
	ProtocolCommon *ikeGatewayDsModel_yJkkSzS_ProtocolCommonObject `tfsdk:"protocol_common"`
}

type ikeGatewayDsModel_yJkkSzS_AuthenticationObject struct {
	Certificate  *ikeGatewayDsModel_yJkkSzS_CertificateObject  `tfsdk:"certificate"`
	PreSharedKey *ikeGatewayDsModel_yJkkSzS_PreSharedKeyObject `tfsdk:"pre_shared_key"`
}

type ikeGatewayDsModel_yJkkSzS_CertificateObject struct {
	AllowIdPayloadMismatch     types.Bool                                        `tfsdk:"allow_id_payload_mismatch"`
	CertificateProfile         types.String                                      `tfsdk:"certificate_profile"`
	LocalCertificate           *ikeGatewayDsModel_yJkkSzS_LocalCertificateObject `tfsdk:"local_certificate"`
	StrictValidationRevocation types.Bool                                        `tfsdk:"strict_validation_revocation"`
	UseManagementAsSource      types.Bool                                        `tfsdk:"use_management_as_source"`
}

type ikeGatewayDsModel_yJkkSzS_LocalCertificateObject struct {
	LocalCertificateName types.String `tfsdk:"local_certificate_name"`
}

type ikeGatewayDsModel_yJkkSzS_PreSharedKeyObject struct {
	Key types.String `tfsdk:"key"`
}

type ikeGatewayDsModel_yJkkSzS_LocalIdObject struct {
	Id   types.String `tfsdk:"id"`
	Type types.String `tfsdk:"type"`
}

type ikeGatewayDsModel_yJkkSzS_PeerAddressObject struct {
	DynamicAddress types.Bool   `tfsdk:"dynamic_address"`
	Fqdn           types.String `tfsdk:"fqdn"`
	Ip             types.String `tfsdk:"ip"`
}

type ikeGatewayDsModel_yJkkSzS_PeerIdObject struct {
	Id   types.String `tfsdk:"id"`
	Type types.String `tfsdk:"type"`
}

type ikeGatewayDsModel_yJkkSzS_ProtocolObject struct {
	Ikev1   *ikeGatewayDsModel_yJkkSzS_Ikev1Object `tfsdk:"ikev1"`
	Ikev2   *ikeGatewayDsModel_yJkkSzS_Ikev2Object `tfsdk:"ikev2"`
	Version types.String                           `tfsdk:"version"`
}

type ikeGatewayDsModel_yJkkSzS_Ikev1Object struct {
	Dpd              *ikeGatewayDsModel_yJkkSzS_Ikev1DpdObject `tfsdk:"dpd"`
	IkeCryptoProfile types.String                              `tfsdk:"ike_crypto_profile"`
}

type ikeGatewayDsModel_yJkkSzS_Ikev1DpdObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayDsModel_yJkkSzS_Ikev2Object struct {
	Dpd              *ikeGatewayDsModel_yJkkSzS_Ikev2DpdObject `tfsdk:"dpd"`
	IkeCryptoProfile types.String                              `tfsdk:"ike_crypto_profile"`
}

type ikeGatewayDsModel_yJkkSzS_Ikev2DpdObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayDsModel_yJkkSzS_ProtocolCommonObject struct {
	Fragmentation *ikeGatewayDsModel_yJkkSzS_FragmentationObject `tfsdk:"fragmentation"`
	NatTraversal  *ikeGatewayDsModel_yJkkSzS_NatTraversalObject  `tfsdk:"nat_traversal"`
	PassiveMode   types.Bool                                     `tfsdk:"passive_mode"`
}

type ikeGatewayDsModel_yJkkSzS_FragmentationObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayDsModel_yJkkSzS_NatTraversalObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

// Metadata returns the data source type name.
func (d *ikeGatewayDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ike_gateway"
}

// Schema defines the schema for this data source.
func (d *ikeGatewayDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "id":true, "snippet":true} outputs:map[string]bool{"authentication":true, "id":true, "local_id":true, "name":true, "peer_address":true, "peer_id":true, "protocol":true, "protocol_common":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "id":true, "snippet":true}
			"authentication": dsschema.SingleNestedAttribute{
				Description: "The Authentication param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"certificate":true, "pre_shared_key":true} forceNew:map[string]bool(nil)
					"certificate": dsschema.SingleNestedAttribute{
						Description: "The Certificate param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"allow_id_payload_mismatch":true, "certificate_profile":true, "local_certificate":true, "strict_validation_revocation":true, "use_management_as_source":true} forceNew:map[string]bool(nil)
							"allow_id_payload_mismatch": dsschema.BoolAttribute{
								Description: "The AllowIdPayloadMismatch param.",
								Computed:    true,
							},
							"certificate_profile": dsschema.StringAttribute{
								Description: "The CertificateProfile param.",
								Computed:    true,
							},
							"local_certificate": dsschema.SingleNestedAttribute{
								Description: "The LocalCertificate param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"local_certificate_name":true} forceNew:map[string]bool(nil)
									"local_certificate_name": dsschema.StringAttribute{
										Description: "The LocalCertificateName param.",
										Computed:    true,
									},
								},
							},
							"strict_validation_revocation": dsschema.BoolAttribute{
								Description: "The StrictValidationRevocation param.",
								Computed:    true,
							},
							"use_management_as_source": dsschema.BoolAttribute{
								Description: "The UseManagementAsSource param.",
								Computed:    true,
							},
						},
					},
					"pre_shared_key": dsschema.SingleNestedAttribute{
						Description: "The PreSharedKey param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"key":true} forceNew:map[string]bool(nil)
							"key": dsschema.StringAttribute{
								Description: "The Key param.",
								Computed:    true,
								Sensitive:   true,
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"local_id": dsschema.SingleNestedAttribute{
				Description: "The LocalId param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"id":true, "type":true} forceNew:map[string]bool(nil)
					"id": dsschema.StringAttribute{
						Description: "Local ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[a-zA-Z0-9.-]+)$|^([$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.",
						Computed:    true,
					},
					"type": dsschema.StringAttribute{
						Description: "The Type param.",
						Computed:    true,
					},
				},
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"peer_address": dsschema.SingleNestedAttribute{
				Description: "The PeerAddress param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"dynamic":true, "fqdn":true, "ip":true} forceNew:map[string]bool(nil)
					"dynamic_address": dsschema.BoolAttribute{
						Description: "The DynamicAddress param.",
						Computed:    true,
					},
					"fqdn": dsschema.StringAttribute{
						Description: "peer gateway FQDN name. String length must not exceed 255 characters.",
						Computed:    true,
					},
					"ip": dsschema.StringAttribute{
						Description: "peer gateway has static IP address.",
						Computed:    true,
					},
				},
			},
			"peer_id": dsschema.SingleNestedAttribute{
				Description: "The PeerId param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"id":true, "type":true} forceNew:map[string]bool(nil)
					"id": dsschema.StringAttribute{
						Description: "Peer ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[\\*a-zA-Z0-9.-]+)$|^([\\*$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.",
						Computed:    true,
					},
					"type": dsschema.StringAttribute{
						Description: "The Type param. String must be one of these: `\"ipaddr\"`, `\"keyid\"`, `\"fqdn\"`, `\"ufqdn\"`.",
						Computed:    true,
					},
				},
			},
			"protocol": dsschema.SingleNestedAttribute{
				Description: "The Protocol param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"ikev1":true, "ikev2":true, "version":true} forceNew:map[string]bool(nil)
					"ikev1": dsschema.SingleNestedAttribute{
						Description: "The Ikev1 param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"dpd":true, "ike_crypto_profile":true} forceNew:map[string]bool(nil)
							"dpd": dsschema.SingleNestedAttribute{
								Description: "The Dpd param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
									"enable": dsschema.BoolAttribute{
										Description: "The Enable param.",
										Computed:    true,
									},
								},
							},
							"ike_crypto_profile": dsschema.StringAttribute{
								Description: "The IkeCryptoProfile param.",
								Computed:    true,
							},
						},
					},
					"ikev2": dsschema.SingleNestedAttribute{
						Description: "The Ikev2 param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"dpd":true, "ike_crypto_profile":true} forceNew:map[string]bool(nil)
							"dpd": dsschema.SingleNestedAttribute{
								Description: "The Dpd param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
									"enable": dsschema.BoolAttribute{
										Description: "The Enable param.",
										Computed:    true,
									},
								},
							},
							"ike_crypto_profile": dsschema.StringAttribute{
								Description: "The IkeCryptoProfile param.",
								Computed:    true,
							},
						},
					},
					"version": dsschema.StringAttribute{
						Description: "The Version param. String must be one of these: `\"ikev2-preferred\"`, `\"ikev1\"`, `\"ikev2\"`. Default: `\"ikev2-preferred\"`.",
						Computed:    true,
					},
				},
			},
			"protocol_common": dsschema.SingleNestedAttribute{
				Description: "The ProtocolCommon param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"fragmentation":true, "nat_traversal":true, "passive_mode":true} forceNew:map[string]bool(nil)
					"fragmentation": dsschema.SingleNestedAttribute{
						Description: "The Fragmentation param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
							"enable": dsschema.BoolAttribute{
								Description: "The Enable param. Default: `false`.",
								Computed:    true,
							},
						},
					},
					"nat_traversal": dsschema.SingleNestedAttribute{
						Description: "The NatTraversal param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
							"enable": dsschema.BoolAttribute{
								Description: "The Enable param.",
								Computed:    true,
							},
						},
					},
					"passive_mode": dsschema.BoolAttribute{
						Description: "The PassiveMode param.",
						Computed:    true,
					},
				},
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *ikeGatewayDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *ikeGatewayDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state ikeGatewayDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_ike_gateway",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to run the command.
	svc := kJVbXva.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.ReadInput{}

	input.Id = state.Id.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Authentication = ikeGatewayDsModel_yJkkSzS_AuthenticationObject{}

	if ans.Authentication.Certificate == nil {
		state.Authentication.Certificate = nil
	} else {
		state.Authentication.Certificate = &ikeGatewayDsModel_yJkkSzS_CertificateObject{}

		state.Authentication.Certificate.AllowIdPayloadMismatch = types.BoolPointerValue(ans.Authentication.Certificate.AllowIdPayloadMismatch)

		state.Authentication.Certificate.CertificateProfile = types.StringPointerValue(ans.Authentication.Certificate.CertificateProfile)

		if ans.Authentication.Certificate.LocalCertificate == nil {
			state.Authentication.Certificate.LocalCertificate = nil
		} else {
			state.Authentication.Certificate.LocalCertificate = &ikeGatewayDsModel_yJkkSzS_LocalCertificateObject{}

			state.Authentication.Certificate.LocalCertificate.LocalCertificateName = types.StringPointerValue(ans.Authentication.Certificate.LocalCertificate.LocalCertificateName)
		}

		state.Authentication.Certificate.StrictValidationRevocation = types.BoolPointerValue(ans.Authentication.Certificate.StrictValidationRevocation)

		state.Authentication.Certificate.UseManagementAsSource = types.BoolPointerValue(ans.Authentication.Certificate.UseManagementAsSource)
	}

	if ans.Authentication.PreSharedKey == nil {
		state.Authentication.PreSharedKey = nil
	} else {
		state.Authentication.PreSharedKey = &ikeGatewayDsModel_yJkkSzS_PreSharedKeyObject{}

		state.Authentication.PreSharedKey.Key = types.StringPointerValue(ans.Authentication.PreSharedKey.Key)
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.LocalId == nil {
		state.LocalId = nil
	} else {
		state.LocalId = &ikeGatewayDsModel_yJkkSzS_LocalIdObject{}

		state.LocalId.Id = types.StringPointerValue(ans.LocalId.Id)

		state.LocalId.Type = types.StringPointerValue(ans.LocalId.Type)
	}

	state.Name = types.StringValue(ans.Name)

	state.PeerAddress = ikeGatewayDsModel_yJkkSzS_PeerAddressObject{}

	if ans.PeerAddress.DynamicAddress != nil {
		state.PeerAddress.DynamicAddress = types.BoolValue(true)
	} else {
		state.PeerAddress.DynamicAddress = types.BoolPointerValue(nil)
	}
	//state.PeerAddress.DynamicAddress = types.BoolValue(ans.PeerAddress.DynamicAddress != nil)

	state.PeerAddress.Fqdn = types.StringPointerValue(ans.PeerAddress.Fqdn)

	state.PeerAddress.Ip = types.StringPointerValue(ans.PeerAddress.Ip)

	if ans.PeerId == nil {
		state.PeerId = nil
	} else {
		state.PeerId = &ikeGatewayDsModel_yJkkSzS_PeerIdObject{}

		state.PeerId.Id = types.StringPointerValue(ans.PeerId.Id)

		state.PeerId.Type = types.StringPointerValue(ans.PeerId.Type)
	}

	state.Protocol = ikeGatewayDsModel_yJkkSzS_ProtocolObject{}

	if ans.Protocol.Ikev1 == nil {
		state.Protocol.Ikev1 = nil
	} else {
		state.Protocol.Ikev1 = &ikeGatewayDsModel_yJkkSzS_Ikev1Object{}

		if ans.Protocol.Ikev1.Dpd == nil {
			state.Protocol.Ikev1.Dpd = nil
		} else {
			state.Protocol.Ikev1.Dpd = &ikeGatewayDsModel_yJkkSzS_Ikev1DpdObject{}

			state.Protocol.Ikev1.Dpd.Enable = types.BoolPointerValue(ans.Protocol.Ikev1.Dpd.Enable)
		}

		state.Protocol.Ikev1.IkeCryptoProfile = types.StringPointerValue(ans.Protocol.Ikev1.IkeCryptoProfile)
	}

	if ans.Protocol.Ikev2 == nil {
		state.Protocol.Ikev2 = nil
	} else {
		state.Protocol.Ikev2 = &ikeGatewayDsModel_yJkkSzS_Ikev2Object{}

		if ans.Protocol.Ikev2.Dpd == nil {
			state.Protocol.Ikev2.Dpd = nil
		} else {
			state.Protocol.Ikev2.Dpd = &ikeGatewayDsModel_yJkkSzS_Ikev2DpdObject{}

			state.Protocol.Ikev2.Dpd.Enable = types.BoolPointerValue(ans.Protocol.Ikev2.Dpd.Enable)
		}

		state.Protocol.Ikev2.IkeCryptoProfile = types.StringPointerValue(ans.Protocol.Ikev2.IkeCryptoProfile)
	}

	state.Protocol.Version = types.StringPointerValue(ans.Protocol.Version)

	if ans.ProtocolCommon == nil {
		state.ProtocolCommon = nil
	} else {
		state.ProtocolCommon = &ikeGatewayDsModel_yJkkSzS_ProtocolCommonObject{}

		if ans.ProtocolCommon.Fragmentation == nil {
			state.ProtocolCommon.Fragmentation = nil
		} else {
			state.ProtocolCommon.Fragmentation = &ikeGatewayDsModel_yJkkSzS_FragmentationObject{}

			state.ProtocolCommon.Fragmentation.Enable = types.BoolPointerValue(ans.ProtocolCommon.Fragmentation.Enable)
		}

		if ans.ProtocolCommon.NatTraversal == nil {
			state.ProtocolCommon.NatTraversal = nil
		} else {
			state.ProtocolCommon.NatTraversal = &ikeGatewayDsModel_yJkkSzS_NatTraversalObject{}

			state.ProtocolCommon.NatTraversal.Enable = types.BoolPointerValue(ans.ProtocolCommon.NatTraversal.Enable)
		}

		state.ProtocolCommon.PassiveMode = types.BoolPointerValue(ans.ProtocolCommon.PassiveMode)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource              = &ikeGatewayResource{}
	_ resource.ResourceWithConfigure = &ikeGatewayResource{}
)

func NewIkeGatewayResource() resource.Resource {
	return &ikeGatewayResource{}
}

type ikeGatewayResource struct {
	client *scm.Client
}

// ikeGatewayRsModel is the model.
type ikeGatewayRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Authentication ikeGatewayRsModel_yJkkSzS_AuthenticationObject  `tfsdk:"authentication"`
	Device         types.String                                    `tfsdk:"device"`
	Folder         types.String                                    `tfsdk:"folder"`
	Id             types.String                                    `tfsdk:"id"`
	LocalId        *ikeGatewayRsModel_yJkkSzS_LocalIdObject        `tfsdk:"local_id"`
	Name           types.String                                    `tfsdk:"name"`
	PeerAddress    ikeGatewayRsModel_yJkkSzS_PeerAddressObject     `tfsdk:"peer_address"`
	PeerId         *ikeGatewayRsModel_yJkkSzS_PeerIdObject         `tfsdk:"peer_id"`
	Protocol       ikeGatewayRsModel_yJkkSzS_ProtocolObject        `tfsdk:"protocol"`
	ProtocolCommon *ikeGatewayRsModel_yJkkSzS_ProtocolCommonObject `tfsdk:"protocol_common"`
	Snippet        types.String                                    `tfsdk:"snippet"`

	// Output.
	EncryptedValues types.Map `tfsdk:"encrypted_values"`
	// omit input: authentication
	// omit input: id
	// omit input: local_id
	// omit input: name
	// omit input: peer_address
	// omit input: peer_id
	// omit input: protocol
	// omit input: protocol_common
}

type ikeGatewayRsModel_yJkkSzS_AuthenticationObject struct {
	Certificate  *ikeGatewayRsModel_yJkkSzS_CertificateObject  `tfsdk:"certificate"`
	PreSharedKey *ikeGatewayRsModel_yJkkSzS_PreSharedKeyObject `tfsdk:"pre_shared_key"`
}

type ikeGatewayRsModel_yJkkSzS_CertificateObject struct {
	AllowIdPayloadMismatch     types.Bool                                        `tfsdk:"allow_id_payload_mismatch"`
	CertificateProfile         types.String                                      `tfsdk:"certificate_profile"`
	LocalCertificate           *ikeGatewayRsModel_yJkkSzS_LocalCertificateObject `tfsdk:"local_certificate"`
	StrictValidationRevocation types.Bool                                        `tfsdk:"strict_validation_revocation"`
	UseManagementAsSource      types.Bool                                        `tfsdk:"use_management_as_source"`
}

type ikeGatewayRsModel_yJkkSzS_LocalCertificateObject struct {
	LocalCertificateName types.String `tfsdk:"local_certificate_name"`
}

type ikeGatewayRsModel_yJkkSzS_PreSharedKeyObject struct {
	Key types.String `tfsdk:"key"`
}

type ikeGatewayRsModel_yJkkSzS_LocalIdObject struct {
	Id   types.String `tfsdk:"id"`
	Type types.String `tfsdk:"type"`
}

type ikeGatewayRsModel_yJkkSzS_PeerAddressObject struct {
	DynamicAddress types.Bool   `tfsdk:"dynamic_address"`
	Fqdn           types.String `tfsdk:"fqdn"`
	Ip             types.String `tfsdk:"ip"`
}

type ikeGatewayRsModel_yJkkSzS_PeerIdObject struct {
	Id   types.String `tfsdk:"id"`
	Type types.String `tfsdk:"type"`
}

type ikeGatewayRsModel_yJkkSzS_ProtocolObject struct {
	Ikev1   *ikeGatewayRsModel_yJkkSzS_Ikev1Object `tfsdk:"ikev1"`
	Ikev2   *ikeGatewayRsModel_yJkkSzS_Ikev2Object `tfsdk:"ikev2"`
	Version types.String                           `tfsdk:"version"`
}

type ikeGatewayRsModel_yJkkSzS_Ikev1Object struct {
	Dpd              *ikeGatewayRsModel_yJkkSzS_Ikev1DpdObject `tfsdk:"dpd"`
	IkeCryptoProfile types.String                              `tfsdk:"ike_crypto_profile"`
}

type ikeGatewayRsModel_yJkkSzS_Ikev1DpdObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayRsModel_yJkkSzS_Ikev2Object struct {
	Dpd              *ikeGatewayRsModel_yJkkSzS_Ikev2DpdObject `tfsdk:"dpd"`
	IkeCryptoProfile types.String                              `tfsdk:"ike_crypto_profile"`
}

type ikeGatewayRsModel_yJkkSzS_Ikev2DpdObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayRsModel_yJkkSzS_ProtocolCommonObject struct {
	Fragmentation *ikeGatewayRsModel_yJkkSzS_FragmentationObject `tfsdk:"fragmentation"`
	NatTraversal  *ikeGatewayRsModel_yJkkSzS_NatTraversalObject  `tfsdk:"nat_traversal"`
	PassiveMode   types.Bool                                     `tfsdk:"passive_mode"`
}

type ikeGatewayRsModel_yJkkSzS_FragmentationObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

type ikeGatewayRsModel_yJkkSzS_NatTraversalObject struct {
	Enable types.Bool `tfsdk:"enable"`
}

// Metadata returns the data source type name.
func (r *ikeGatewayResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ike_gateway"
}

// Schema defines the schema for this data source.
func (r *ikeGatewayResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"authentication":true, "device":true, "folder":true, "id":true, "local_id":true, "name":true, "peer_address":true, "peer_id":true, "protocol":true, "protocol_common":true, "snippet":true} outputs:map[string]bool{"authentication":true, "id":true, "local_id":true, "name":true, "peer_address":true, "peer_id":true, "protocol":true, "protocol_common":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"encrypted_values": rsschema.MapAttribute{
				Description: "(Internal use) Encrypted values returned from the API.",
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},
			"authentication": rsschema.SingleNestedAttribute{
				Description: "The Authentication param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"certificate":true, "pre_shared_key":true} outputs:map[string]bool{"certificate":true, "pre_shared_key":true} forceNew:map[string]bool(nil)
					"certificate": rsschema.SingleNestedAttribute{
						Description: "The Certificate param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`",
						Optional:    true,
						Validators: []validator.Object{
							objectvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("pre_shared_key"),
							),
						},
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"allow_id_payload_mismatch":true, "certificate_profile":true, "local_certificate":true, "strict_validation_revocation":true, "use_management_as_source":true} outputs:map[string]bool{"allow_id_payload_mismatch":true, "certificate_profile":true, "local_certificate":true, "strict_validation_revocation":true, "use_management_as_source":true} forceNew:map[string]bool(nil)
							"allow_id_payload_mismatch": rsschema.BoolAttribute{
								Description: "The AllowIdPayloadMismatch param.",
								Optional:    true,
							},
							"certificate_profile": rsschema.StringAttribute{
								Description: "The CertificateProfile param.",
								Optional:    true,
							},
							"local_certificate": rsschema.SingleNestedAttribute{
								Description: "The LocalCertificate param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"local_certificate_name":true} outputs:map[string]bool{"local_certificate_name":true} forceNew:map[string]bool(nil)
									"local_certificate_name": rsschema.StringAttribute{
										Description: "The LocalCertificateName param.",
										Optional:    true,
									},
								},
							},
							"strict_validation_revocation": rsschema.BoolAttribute{
								Description: "The StrictValidationRevocation param.",
								Optional:    true,
							},
							"use_management_as_source": rsschema.BoolAttribute{
								Description: "The UseManagementAsSource param.",
								Optional:    true,
							},
						},
					},
					"pre_shared_key": rsschema.SingleNestedAttribute{
						Description: "The PreSharedKey param. Ensure that only one of the following is specified: `certificate`, `pre_shared_key`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"key":true} outputs:map[string]bool{"key":true} forceNew:map[string]bool(nil)
							"key": rsschema.StringAttribute{
								Description: "The Key param.",
								Optional:    true,
								Sensitive:   true,
							},
						},
					},
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"local_id": rsschema.SingleNestedAttribute{
				Description: "The LocalId param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"id":true, "type":true} outputs:map[string]bool{"id":true, "type":true} forceNew:map[string]bool(nil)
					"id": rsschema.StringAttribute{
						Description: "Local ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[a-zA-Z0-9.-]+)$|^([$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.LengthBetween(1, 1024),
							stringvalidator.RegexMatches(regexp.MustCompile("^(.+\\@[a-zA-Z0-9.-]+)$|^([$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$"), ""),
						},
					},
					"type": rsschema.StringAttribute{
						Description: "The Type param.",
						Optional:    true,
					},
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"peer_address": rsschema.SingleNestedAttribute{
				Description: "The PeerAddress param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"dynamic":true, "fqdn":true, "ip":true} outputs:map[string]bool{"dynamic":true, "fqdn":true, "ip":true} forceNew:map[string]bool(nil)
					"dynamic_address": rsschema.BoolAttribute{
						Description: "The DynamicAddress param. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`",
						Optional:    true,
						Validators: []validator.Bool{
							boolvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("fqdn"),
								path.MatchRelative().AtParent().AtName("ip"),
							),
						},
					},
					"fqdn": rsschema.StringAttribute{
						Description: "peer gateway FQDN name. String length must not exceed 255 characters. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.LengthAtMost(255),
						},
					},
					"ip": rsschema.StringAttribute{
						Description: "peer gateway has static IP address. Ensure that only one of the following is specified: `dynamic`, `fqdn`, `ip`",
						Optional:    true,
					},
				},
			},
			"peer_id": rsschema.SingleNestedAttribute{
				Description: "The PeerId param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"id":true, "type":true} outputs:map[string]bool{"id":true, "type":true} forceNew:map[string]bool(nil)
					"id": rsschema.StringAttribute{
						Description: "Peer ID string. String length must be between 1 and 1024 characters. String validation regex: `^(.+\\@[\\*a-zA-Z0-9.-]+)$|^([\\*$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$`.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.LengthBetween(1, 1024),
							stringvalidator.RegexMatches(regexp.MustCompile("^(.+\\@[\\*a-zA-Z0-9.-]+)$|^([\\*$a-zA-Z0-9_:.-]+)$|^(([[:xdigit:]][[:xdigit:]])+)$|^([a-zA-Z0-9.]+=(\\\\,|[^,])+[, ]+)*([a-zA-Z0-9.]+=(\\\\,|[^,])+)$"), ""),
						},
					},
					"type": rsschema.StringAttribute{
						Description: "The Type param. String must be one of these: `\"ipaddr\"`, `\"keyid\"`, `\"fqdn\"`, `\"ufqdn\"`.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.OneOf("ipaddr", "keyid", "fqdn", "ufqdn"),
						},
					},
				},
			},
			"protocol": rsschema.SingleNestedAttribute{
				Description: "The Protocol param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"ikev1":true, "ikev2":true, "version":true} outputs:map[string]bool{"ikev1":true, "ikev2":true, "version":true} forceNew:map[string]bool(nil)
					"ikev1": rsschema.SingleNestedAttribute{
						Description: "The Ikev1 param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"dpd":true, "ike_crypto_profile":true} outputs:map[string]bool{"dpd":true, "ike_crypto_profile":true} forceNew:map[string]bool(nil)
							"dpd": rsschema.SingleNestedAttribute{
								Description: "The Dpd param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"enable":true} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
									"enable": rsschema.BoolAttribute{
										Description: "The Enable param.",
										Optional:    true,
									},
								},
							},
							"ike_crypto_profile": rsschema.StringAttribute{
								Description: "The IkeCryptoProfile param.",
								Optional:    true,
							},
						},
					},
					"ikev2": rsschema.SingleNestedAttribute{
						Description: "The Ikev2 param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"dpd":true, "ike_crypto_profile":true} outputs:map[string]bool{"dpd":true, "ike_crypto_profile":true} forceNew:map[string]bool(nil)
							"dpd": rsschema.SingleNestedAttribute{
								Description: "The Dpd param.",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"enable":true} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
									"enable": rsschema.BoolAttribute{
										Description: "The Enable param.",
										Optional:    true,
									},
								},
							},
							"ike_crypto_profile": rsschema.StringAttribute{
								Description: "The IkeCryptoProfile param.",
								Optional:    true,
							},
						},
					},
					"version": rsschema.StringAttribute{
						Description: "The Version param. String must be one of these: `\"ikev2-preferred\"`, `\"ikev1\"`, `\"ikev2\"`. Default: `\"ikev2-preferred\"`.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("ikev2-preferred"),
						Validators: []validator.String{
							stringvalidator.OneOf("ikev2-preferred", "ikev1", "ikev2"),
						},
					},
				},
			},
			"protocol_common": rsschema.SingleNestedAttribute{
				Description: "The ProtocolCommon param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"fragmentation":true, "nat_traversal":true, "passive_mode":true} outputs:map[string]bool{"fragmentation":true, "nat_traversal":true, "passive_mode":true} forceNew:map[string]bool(nil)
					"fragmentation": rsschema.SingleNestedAttribute{
						Description: "The Fragmentation param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"enable":true} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
							"enable": rsschema.BoolAttribute{
								Description: "The Enable param. Default: `false`.",
								Optional:    true,
								Computed:    true,
								Default:     booldefault.StaticBool(false),
							},
						},
					},
					"nat_traversal": rsschema.SingleNestedAttribute{
						Description: "The NatTraversal param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"enable":true} outputs:map[string]bool{"enable":true} forceNew:map[string]bool(nil)
							"enable": rsschema.BoolAttribute{
								Description: "The Enable param.",
								Optional:    true,
							},
						},
					},
					"passive_mode": rsschema.BoolAttribute{
						Description: "The PassiveMode param.",
						Optional:    true,
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *ikeGatewayResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *ikeGatewayResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ikeGatewayRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String)

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_ike_gateway",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := kJVbXva.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &yJkkSzS.Config{}

	if state.Authentication.Certificate != nil {
		input.Request.Authentication.Certificate = &yJkkSzS.CertificateObject{}

		input.Request.Authentication.Certificate.AllowIdPayloadMismatch = state.Authentication.Certificate.AllowIdPayloadMismatch.ValueBoolPointer()

		input.Request.Authentication.Certificate.CertificateProfile = state.Authentication.Certificate.CertificateProfile.ValueStringPointer()

		if state.Authentication.Certificate.LocalCertificate != nil {
			input.Request.Authentication.Certificate.LocalCertificate = &yJkkSzS.LocalCertificateObject{}

			input.Request.Authentication.Certificate.LocalCertificate.LocalCertificateName = state.Authentication.Certificate.LocalCertificate.LocalCertificateName.ValueStringPointer()
		}

		input.Request.Authentication.Certificate.StrictValidationRevocation = state.Authentication.Certificate.StrictValidationRevocation.ValueBoolPointer()

		input.Request.Authentication.Certificate.UseManagementAsSource = state.Authentication.Certificate.UseManagementAsSource.ValueBoolPointer()
	}

	if state.Authentication.PreSharedKey != nil {
		input.Request.Authentication.PreSharedKey = &yJkkSzS.PreSharedKeyObject{}

		var0 := "solo | plaintext | key"
		ev[var0] = state.Authentication.PreSharedKey.Key
		input.Request.Authentication.PreSharedKey.Key = state.Authentication.PreSharedKey.Key.ValueStringPointer()
	}

	if state.LocalId != nil {
		input.Request.LocalId = &yJkkSzS.LocalIdObject{}

		input.Request.LocalId.Id = state.LocalId.Id.ValueStringPointer()

		input.Request.LocalId.Type = state.LocalId.Type.ValueStringPointer()
	}

	input.Request.Name = state.Name.ValueString()

	if !state.PeerAddress.DynamicAddress.IsNull() && state.PeerAddress.DynamicAddress.ValueBool() {
		input.Request.PeerAddress.DynamicAddress = map[string]interface{}{}
	}

	input.Request.PeerAddress.Fqdn = state.PeerAddress.Fqdn.ValueStringPointer()

	input.Request.PeerAddress.Ip = state.PeerAddress.Ip.ValueStringPointer()

	if state.PeerId != nil {
		input.Request.PeerId = &yJkkSzS.PeerIdObject{}

		input.Request.PeerId.Id = state.PeerId.Id.ValueStringPointer()

		input.Request.PeerId.Type = state.PeerId.Type.ValueStringPointer()
	}

	if state.Protocol.Ikev1 != nil {
		input.Request.Protocol.Ikev1 = &yJkkSzS.Ikev1Object{}

		if state.Protocol.Ikev1.Dpd != nil {
			input.Request.Protocol.Ikev1.Dpd = &yJkkSzS.Ikev1DpdObject{}

			input.Request.Protocol.Ikev1.Dpd.Enable = state.Protocol.Ikev1.Dpd.Enable.ValueBoolPointer()
		}

		input.Request.Protocol.Ikev1.IkeCryptoProfile = state.Protocol.Ikev1.IkeCryptoProfile.ValueStringPointer()
	}

	if state.Protocol.Ikev2 != nil {
		input.Request.Protocol.Ikev2 = &yJkkSzS.Ikev2Object{}

		if state.Protocol.Ikev2.Dpd != nil {
			input.Request.Protocol.Ikev2.Dpd = &yJkkSzS.Ikev2DpdObject{}

			input.Request.Protocol.Ikev2.Dpd.Enable = state.Protocol.Ikev2.Dpd.Enable.ValueBoolPointer()
		}

		input.Request.Protocol.Ikev2.IkeCryptoProfile = state.Protocol.Ikev2.IkeCryptoProfile.ValueStringPointer()
	}

	input.Request.Protocol.Version = state.Protocol.Version.ValueStringPointer()

	if state.ProtocolCommon != nil {
		input.Request.ProtocolCommon = &yJkkSzS.ProtocolCommonObject{}

		if state.ProtocolCommon.Fragmentation != nil {
			input.Request.ProtocolCommon.Fragmentation = &yJkkSzS.FragmentationObject{}

			input.Request.ProtocolCommon.Fragmentation.Enable = state.ProtocolCommon.Fragmentation.Enable.ValueBoolPointer()
		}

		if state.ProtocolCommon.NatTraversal != nil {
			input.Request.ProtocolCommon.NatTraversal = &yJkkSzS.NatTraversalObject{}

			input.Request.ProtocolCommon.NatTraversal.Enable = state.ProtocolCommon.NatTraversal.Enable.ValueBoolPointer()
		}

		input.Request.ProtocolCommon.PassiveMode = state.ProtocolCommon.PassiveMode.ValueBoolPointer()
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Authentication = ikeGatewayRsModel_yJkkSzS_AuthenticationObject{}

	if ans.Authentication.Certificate == nil {
		state.Authentication.Certificate = nil
	} else {
		state.Authentication.Certificate = &ikeGatewayRsModel_yJkkSzS_CertificateObject{}

		state.Authentication.Certificate.AllowIdPayloadMismatch = types.BoolPointerValue(ans.Authentication.Certificate.AllowIdPayloadMismatch)

		state.Authentication.Certificate.CertificateProfile = types.StringPointerValue(ans.Authentication.Certificate.CertificateProfile)

		if ans.Authentication.Certificate.LocalCertificate == nil {
			state.Authentication.Certificate.LocalCertificate = nil
		} else {
			state.Authentication.Certificate.LocalCertificate = &ikeGatewayRsModel_yJkkSzS_LocalCertificateObject{}

			state.Authentication.Certificate.LocalCertificate.LocalCertificateName = types.StringPointerValue(ans.Authentication.Certificate.LocalCertificate.LocalCertificateName)
		}

		state.Authentication.Certificate.StrictValidationRevocation = types.BoolPointerValue(ans.Authentication.Certificate.StrictValidationRevocation)

		state.Authentication.Certificate.UseManagementAsSource = types.BoolPointerValue(ans.Authentication.Certificate.UseManagementAsSource)
	}

	if ans.Authentication.PreSharedKey == nil {
		state.Authentication.PreSharedKey = nil
	} else {
		state.Authentication.PreSharedKey = &ikeGatewayRsModel_yJkkSzS_PreSharedKeyObject{}

		var1 := "solo | encrypted | key"
		ev[var1] = types.StringPointerValue(ans.Authentication.PreSharedKey.Key)

		var2 := "solo | plaintext | key"
		state.Authentication.PreSharedKey.Key = ev[var2]
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.LocalId == nil {
		state.LocalId = nil
	} else {
		state.LocalId = &ikeGatewayRsModel_yJkkSzS_LocalIdObject{}

		state.LocalId.Id = types.StringPointerValue(ans.LocalId.Id)

		state.LocalId.Type = types.StringPointerValue(ans.LocalId.Type)
	}

	state.Name = types.StringValue(ans.Name)

	state.PeerAddress = ikeGatewayRsModel_yJkkSzS_PeerAddressObject{}

	if ans.PeerAddress.DynamicAddress != nil {
		state.PeerAddress.DynamicAddress = types.BoolValue(true)
	} else {
		state.PeerAddress.DynamicAddress = types.BoolPointerValue(nil)
	}
	//state.PeerAddress.DynamicAddress = types.BoolValue(ans.PeerAddress.DynamicAddress != nil)

	state.PeerAddress.Fqdn = types.StringPointerValue(ans.PeerAddress.Fqdn)

	state.PeerAddress.Ip = types.StringPointerValue(ans.PeerAddress.Ip)

	if ans.PeerId == nil {
		state.PeerId = nil
	} else {
		state.PeerId = &ikeGatewayRsModel_yJkkSzS_PeerIdObject{}

		state.PeerId.Id = types.StringPointerValue(ans.PeerId.Id)

		state.PeerId.Type = types.StringPointerValue(ans.PeerId.Type)
	}

	state.Protocol = ikeGatewayRsModel_yJkkSzS_ProtocolObject{}

	if ans.Protocol.Ikev1 == nil {
		state.Protocol.Ikev1 = nil
	} else {
		state.Protocol.Ikev1 = &ikeGatewayRsModel_yJkkSzS_Ikev1Object{}

		if ans.Protocol.Ikev1.Dpd == nil {
			state.Protocol.Ikev1.Dpd = nil
		} else {
			state.Protocol.Ikev1.Dpd = &ikeGatewayRsModel_yJkkSzS_Ikev1DpdObject{}

			state.Protocol.Ikev1.Dpd.Enable = types.BoolPointerValue(ans.Protocol.Ikev1.Dpd.Enable)
		}

		state.Protocol.Ikev1.IkeCryptoProfile = types.StringPointerValue(ans.Protocol.Ikev1.IkeCryptoProfile)
	}

	if ans.Protocol.Ikev2 == nil {
		state.Protocol.Ikev2 = nil
	} else {
		state.Protocol.Ikev2 = &ikeGatewayRsModel_yJkkSzS_Ikev2Object{}

		if ans.Protocol.Ikev2.Dpd == nil {
			state.Protocol.Ikev2.Dpd = nil
		} else {
			state.Protocol.Ikev2.Dpd = &ikeGatewayRsModel_yJkkSzS_Ikev2DpdObject{}

			state.Protocol.Ikev2.Dpd.Enable = types.BoolPointerValue(ans.Protocol.Ikev2.Dpd.Enable)
		}

		state.Protocol.Ikev2.IkeCryptoProfile = types.StringPointerValue(ans.Protocol.Ikev2.IkeCryptoProfile)
	}

	state.Protocol.Version = types.StringPointerValue(ans.Protocol.Version)

	if ans.ProtocolCommon == nil {
		state.ProtocolCommon = nil
	} else {
		state.ProtocolCommon = &ikeGatewayRsModel_yJkkSzS_ProtocolCommonObject{}

		if ans.ProtocolCommon.Fragmentation == nil {
			state.ProtocolCommon.Fragmentation = nil
		} else {
			state.ProtocolCommon.Fragmentation = &ikeGatewayRsModel_yJkkSzS_FragmentationObject{}

			state.ProtocolCommon.Fragmentation.Enable = types.BoolPointerValue(ans.ProtocolCommon.Fragmentation.Enable)
		}

		if ans.ProtocolCommon.NatTraversal == nil {
			state.ProtocolCommon.NatTraversal = nil
		} else {
			state.ProtocolCommon.NatTraversal = &ikeGatewayRsModel_yJkkSzS_NatTraversalObject{}

			state.ProtocolCommon.NatTraversal.Enable = types.BoolPointerValue(ans.ProtocolCommon.NatTraversal.Enable)
		}

		state.ProtocolCommon.PassiveMode = types.BoolPointerValue(ans.ProtocolCommon.PassiveMode)
	}

	var3, var4 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var3
	resp.Diagnostics.Append(var4.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *ikeGatewayResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state ikeGatewayRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(savestate.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_ike_gateway",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := kJVbXva.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.ReadInput{}

	input.Id = tokens[3]

	if tokens[0] != "" {
		input.Folder = &tokens[0]
	}

	if tokens[1] != "" {
		input.Snippet = &tokens[1]
	}

	if tokens[2] != "" {
		input.Device = &tokens[2]
	}

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Authentication = ikeGatewayRsModel_yJkkSzS_AuthenticationObject{}

	if ans.Authentication.Certificate == nil {
		state.Authentication.Certificate = nil
	} else {
		state.Authentication.Certificate = &ikeGatewayRsModel_yJkkSzS_CertificateObject{}

		state.Authentication.Certificate.AllowIdPayloadMismatch = types.BoolPointerValue(ans.Authentication.Certificate.AllowIdPayloadMismatch)

		state.Authentication.Certificate.CertificateProfile = types.StringPointerValue(ans.Authentication.Certificate.CertificateProfile)

		if ans.Authentication.Certificate.LocalCertificate == nil {
			state.Authentication.Certificate.LocalCertificate = nil
		} else {
			state.Authentication.Certificate.LocalCertificate = &ikeGatewayRsModel_yJkkSzS_LocalCertificateObject{}

			state.Authentication.Certificate.LocalCertificate.LocalCertificateName = types.StringPointerValue(ans.Authentication.Certificate.LocalCertificate.LocalCertificateName)
		}

		state.Authentication.Certificate.StrictValidationRevocation = types.BoolPointerValue(ans.Authentication.Certificate.StrictValidationRevocation)

		state.Authentication.Certificate.UseManagementAsSource = types.BoolPointerValue(ans.Authentication.Certificate.UseManagementAsSource)
	}

	if ans.Authentication.PreSharedKey == nil {
		state.Authentication.PreSharedKey = nil
	} else {
		state.Authentication.PreSharedKey = &ikeGatewayRsModel_yJkkSzS_PreSharedKeyObject{}

		var0 := "solo | encrypted | key"
		if ev[var0].Equal(types.StringPointerValue(ans.Authentication.PreSharedKey.Key)) {

			var1 := "solo | plaintext | key"
			state.Authentication.PreSharedKey.Key = ev[var1]
		} else {
			state.Authentication.PreSharedKey.Key = types.StringNull()
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.LocalId == nil {
		state.LocalId = nil
	} else {
		state.LocalId = &ikeGatewayRsModel_yJkkSzS_LocalIdObject{}

		state.LocalId.Id = types.StringPointerValue(ans.LocalId.Id)

		state.LocalId.Type = types.StringPointerValue(ans.LocalId.Type)
	}

	state.Name = types.StringValue(ans.Name)

	state.PeerAddress = ikeGatewayRsModel_yJkkSzS_PeerAddressObject{}

	if ans.PeerAddress.DynamicAddress != nil {
		state.PeerAddress.DynamicAddress = types.BoolValue(true)
	} else {
		state.PeerAddress.DynamicAddress = types.BoolPointerValue(nil)
	}
	//state.PeerAddress.DynamicAddress = types.BoolValue(ans.PeerAddress.DynamicAddress != nil)

	state.PeerAddress.Fqdn = types.StringPointerValue(ans.PeerAddress.Fqdn)

	state.PeerAddress.Ip = types.StringPointerValue(ans.PeerAddress.Ip)

	if ans.PeerId == nil {
		state.PeerId = nil
	} else {
		state.PeerId = &ikeGatewayRsModel_yJkkSzS_PeerIdObject{}

		state.PeerId.Id = types.StringPointerValue(ans.PeerId.Id)

		state.PeerId.Type = types.StringPointerValue(ans.PeerId.Type)
	}

	state.Protocol = ikeGatewayRsModel_yJkkSzS_ProtocolObject{}

	if ans.Protocol.Ikev1 == nil {
		state.Protocol.Ikev1 = nil
	} else {
		state.Protocol.Ikev1 = &ikeGatewayRsModel_yJkkSzS_Ikev1Object{}

		if ans.Protocol.Ikev1.Dpd == nil {
			state.Protocol.Ikev1.Dpd = nil
		} else {
			state.Protocol.Ikev1.Dpd = &ikeGatewayRsModel_yJkkSzS_Ikev1DpdObject{}

			state.Protocol.Ikev1.Dpd.Enable = types.BoolPointerValue(ans.Protocol.Ikev1.Dpd.Enable)
		}

		state.Protocol.Ikev1.IkeCryptoProfile = types.StringPointerValue(ans.Protocol.Ikev1.IkeCryptoProfile)
	}

	if ans.Protocol.Ikev2 == nil {
		state.Protocol.Ikev2 = nil
	} else {
		state.Protocol.Ikev2 = &ikeGatewayRsModel_yJkkSzS_Ikev2Object{}

		if ans.Protocol.Ikev2.Dpd == nil {
			state.Protocol.Ikev2.Dpd = nil
		} else {
			state.Protocol.Ikev2.Dpd = &ikeGatewayRsModel_yJkkSzS_Ikev2DpdObject{}

			state.Protocol.Ikev2.Dpd.Enable = types.BoolPointerValue(ans.Protocol.Ikev2.Dpd.Enable)
		}

		state.Protocol.Ikev2.IkeCryptoProfile = types.StringPointerValue(ans.Protocol.Ikev2.IkeCryptoProfile)
	}

	state.Protocol.Version = types.StringPointerValue(ans.Protocol.Version)

	if ans.ProtocolCommon == nil {
		state.ProtocolCommon = nil
	} else {
		state.ProtocolCommon = &ikeGatewayRsModel_yJkkSzS_ProtocolCommonObject{}

		if ans.ProtocolCommon.Fragmentation == nil {
			state.ProtocolCommon.Fragmentation = nil
		} else {
			state.ProtocolCommon.Fragmentation = &ikeGatewayRsModel_yJkkSzS_FragmentationObject{}

			state.ProtocolCommon.Fragmentation.Enable = types.BoolPointerValue(ans.ProtocolCommon.Fragmentation.Enable)
		}

		if ans.ProtocolCommon.NatTraversal == nil {
			state.ProtocolCommon.NatTraversal = nil
		} else {
			state.ProtocolCommon.NatTraversal = &ikeGatewayRsModel_yJkkSzS_NatTraversalObject{}

			state.ProtocolCommon.NatTraversal.Enable = types.BoolPointerValue(ans.ProtocolCommon.NatTraversal.Enable)
		}

		state.ProtocolCommon.PassiveMode = types.BoolPointerValue(ans.ProtocolCommon.PassiveMode)
	}

	var2, var3 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var2
	resp.Diagnostics.Append(var3.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *ikeGatewayResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state ikeGatewayRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_ike_gateway",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := kJVbXva.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &yJkkSzS.Config{}

	if plan.Authentication.Certificate != nil {
		input.Request.Authentication.Certificate = &yJkkSzS.CertificateObject{}

		input.Request.Authentication.Certificate.AllowIdPayloadMismatch = plan.Authentication.Certificate.AllowIdPayloadMismatch.ValueBoolPointer()

		input.Request.Authentication.Certificate.CertificateProfile = plan.Authentication.Certificate.CertificateProfile.ValueStringPointer()

		if plan.Authentication.Certificate.LocalCertificate != nil {
			input.Request.Authentication.Certificate.LocalCertificate = &yJkkSzS.LocalCertificateObject{}

			input.Request.Authentication.Certificate.LocalCertificate.LocalCertificateName = plan.Authentication.Certificate.LocalCertificate.LocalCertificateName.ValueStringPointer()
		}

		input.Request.Authentication.Certificate.StrictValidationRevocation = plan.Authentication.Certificate.StrictValidationRevocation.ValueBoolPointer()

		input.Request.Authentication.Certificate.UseManagementAsSource = plan.Authentication.Certificate.UseManagementAsSource.ValueBoolPointer()
	}

	if plan.Authentication.PreSharedKey != nil {
		input.Request.Authentication.PreSharedKey = &yJkkSzS.PreSharedKeyObject{}

		var0 := "solo | plaintext | key"
		ev[var0] = plan.Authentication.PreSharedKey.Key
		input.Request.Authentication.PreSharedKey.Key = plan.Authentication.PreSharedKey.Key.ValueStringPointer()
	}

	if plan.LocalId != nil {
		input.Request.LocalId = &yJkkSzS.LocalIdObject{}

		input.Request.LocalId.Id = plan.LocalId.Id.ValueStringPointer()

		input.Request.LocalId.Type = plan.LocalId.Type.ValueStringPointer()
	}

	input.Request.Name = plan.Name.ValueString()

	if !plan.PeerAddress.DynamicAddress.IsNull() && plan.PeerAddress.DynamicAddress.ValueBool() {
		input.Request.PeerAddress.DynamicAddress = map[string]interface{}{}
	}

	input.Request.PeerAddress.Fqdn = plan.PeerAddress.Fqdn.ValueStringPointer()

	input.Request.PeerAddress.Ip = plan.PeerAddress.Ip.ValueStringPointer()

	if plan.PeerId != nil {
		input.Request.PeerId = &yJkkSzS.PeerIdObject{}

		input.Request.PeerId.Id = plan.PeerId.Id.ValueStringPointer()

		input.Request.PeerId.Type = plan.PeerId.Type.ValueStringPointer()
	}

	if plan.Protocol.Ikev1 != nil {
		input.Request.Protocol.Ikev1 = &yJkkSzS.Ikev1Object{}

		if plan.Protocol.Ikev1.Dpd != nil {
			input.Request.Protocol.Ikev1.Dpd = &yJkkSzS.Ikev1DpdObject{}

			input.Request.Protocol.Ikev1.Dpd.Enable = plan.Protocol.Ikev1.Dpd.Enable.ValueBoolPointer()
		}

		input.Request.Protocol.Ikev1.IkeCryptoProfile = plan.Protocol.Ikev1.IkeCryptoProfile.ValueStringPointer()
	}

	if plan.Protocol.Ikev2 != nil {
		input.Request.Protocol.Ikev2 = &yJkkSzS.Ikev2Object{}

		if plan.Protocol.Ikev2.Dpd != nil {
			input.Request.Protocol.Ikev2.Dpd = &yJkkSzS.Ikev2DpdObject{}

			input.Request.Protocol.Ikev2.Dpd.Enable = plan.Protocol.Ikev2.Dpd.Enable.ValueBoolPointer()
		}

		input.Request.Protocol.Ikev2.IkeCryptoProfile = plan.Protocol.Ikev2.IkeCryptoProfile.ValueStringPointer()
	}

	input.Request.Protocol.Version = plan.Protocol.Version.ValueStringPointer()

	if plan.ProtocolCommon != nil {
		input.Request.ProtocolCommon = &yJkkSzS.ProtocolCommonObject{}

		if plan.ProtocolCommon.Fragmentation != nil {
			input.Request.ProtocolCommon.Fragmentation = &yJkkSzS.FragmentationObject{}

			input.Request.ProtocolCommon.Fragmentation.Enable = plan.ProtocolCommon.Fragmentation.Enable.ValueBoolPointer()
		}

		if plan.ProtocolCommon.NatTraversal != nil {
			input.Request.ProtocolCommon.NatTraversal = &yJkkSzS.NatTraversalObject{}

			input.Request.ProtocolCommon.NatTraversal.Enable = plan.ProtocolCommon.NatTraversal.Enable.ValueBoolPointer()
		}

		input.Request.ProtocolCommon.PassiveMode = plan.ProtocolCommon.PassiveMode.ValueBoolPointer()
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Authentication = ikeGatewayRsModel_yJkkSzS_AuthenticationObject{}

	if ans.Authentication.Certificate == nil {
		state.Authentication.Certificate = nil
	} else {
		state.Authentication.Certificate = &ikeGatewayRsModel_yJkkSzS_CertificateObject{}

		state.Authentication.Certificate.AllowIdPayloadMismatch = types.BoolPointerValue(ans.Authentication.Certificate.AllowIdPayloadMismatch)

		state.Authentication.Certificate.CertificateProfile = types.StringPointerValue(ans.Authentication.Certificate.CertificateProfile)

		if ans.Authentication.Certificate.LocalCertificate == nil {
			state.Authentication.Certificate.LocalCertificate = nil
		} else {
			state.Authentication.Certificate.LocalCertificate = &ikeGatewayRsModel_yJkkSzS_LocalCertificateObject{}

			state.Authentication.Certificate.LocalCertificate.LocalCertificateName = types.StringPointerValue(ans.Authentication.Certificate.LocalCertificate.LocalCertificateName)
		}

		state.Authentication.Certificate.StrictValidationRevocation = types.BoolPointerValue(ans.Authentication.Certificate.StrictValidationRevocation)

		state.Authentication.Certificate.UseManagementAsSource = types.BoolPointerValue(ans.Authentication.Certificate.UseManagementAsSource)
	}

	if ans.Authentication.PreSharedKey == nil {
		state.Authentication.PreSharedKey = nil
	} else {
		state.Authentication.PreSharedKey = &ikeGatewayRsModel_yJkkSzS_PreSharedKeyObject{}

		var1 := "solo | encrypted | key"
		ev[var1] = types.StringPointerValue(ans.Authentication.PreSharedKey.Key)

		var2 := "solo | plaintext | key"
		state.Authentication.PreSharedKey.Key = ev[var2]
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.LocalId == nil {
		state.LocalId = nil
	} else {
		state.LocalId = &ikeGatewayRsModel_yJkkSzS_LocalIdObject{}

		state.LocalId.Id = types.StringPointerValue(ans.LocalId.Id)

		state.LocalId.Type = types.StringPointerValue(ans.LocalId.Type)
	}

	state.Name = types.StringValue(ans.Name)

	state.PeerAddress = ikeGatewayRsModel_yJkkSzS_PeerAddressObject{}

	if ans.PeerAddress.DynamicAddress != nil {
		state.PeerAddress.DynamicAddress = types.BoolValue(true)
	} else {
		state.PeerAddress.DynamicAddress = types.BoolPointerValue(nil)
	}
	//state.PeerAddress.DynamicAddress = types.BoolValue(ans.PeerAddress.DynamicAddress != nil)

	state.PeerAddress.Fqdn = types.StringPointerValue(ans.PeerAddress.Fqdn)

	state.PeerAddress.Ip = types.StringPointerValue(ans.PeerAddress.Ip)

	if ans.PeerId == nil {
		state.PeerId = nil
	} else {
		state.PeerId = &ikeGatewayRsModel_yJkkSzS_PeerIdObject{}

		state.PeerId.Id = types.StringPointerValue(ans.PeerId.Id)

		state.PeerId.Type = types.StringPointerValue(ans.PeerId.Type)
	}

	state.Protocol = ikeGatewayRsModel_yJkkSzS_ProtocolObject{}

	if ans.Protocol.Ikev1 == nil {
		state.Protocol.Ikev1 = nil
	} else {
		state.Protocol.Ikev1 = &ikeGatewayRsModel_yJkkSzS_Ikev1Object{}

		if ans.Protocol.Ikev1.Dpd == nil {
			state.Protocol.Ikev1.Dpd = nil
		} else {
			state.Protocol.Ikev1.Dpd = &ikeGatewayRsModel_yJkkSzS_Ikev1DpdObject{}

			state.Protocol.Ikev1.Dpd.Enable = types.BoolPointerValue(ans.Protocol.Ikev1.Dpd.Enable)
		}

		state.Protocol.Ikev1.IkeCryptoProfile = types.StringPointerValue(ans.Protocol.Ikev1.IkeCryptoProfile)
	}

	if ans.Protocol.Ikev2 == nil {
		state.Protocol.Ikev2 = nil
	} else {
		state.Protocol.Ikev2 = &ikeGatewayRsModel_yJkkSzS_Ikev2Object{}

		if ans.Protocol.Ikev2.Dpd == nil {
			state.Protocol.Ikev2.Dpd = nil
		} else {
			state.Protocol.Ikev2.Dpd = &ikeGatewayRsModel_yJkkSzS_Ikev2DpdObject{}

			state.Protocol.Ikev2.Dpd.Enable = types.BoolPointerValue(ans.Protocol.Ikev2.Dpd.Enable)
		}

		state.Protocol.Ikev2.IkeCryptoProfile = types.StringPointerValue(ans.Protocol.Ikev2.IkeCryptoProfile)
	}

	state.Protocol.Version = types.StringPointerValue(ans.Protocol.Version)

	if ans.ProtocolCommon == nil {
		state.ProtocolCommon = nil
	} else {
		state.ProtocolCommon = &ikeGatewayRsModel_yJkkSzS_ProtocolCommonObject{}

		if ans.ProtocolCommon.Fragmentation == nil {
			state.ProtocolCommon.Fragmentation = nil
		} else {
			state.ProtocolCommon.Fragmentation = &ikeGatewayRsModel_yJkkSzS_FragmentationObject{}

			state.ProtocolCommon.Fragmentation.Enable = types.BoolPointerValue(ans.ProtocolCommon.Fragmentation.Enable)
		}

		if ans.ProtocolCommon.NatTraversal == nil {
			state.ProtocolCommon.NatTraversal = nil
		} else {
			state.ProtocolCommon.NatTraversal = &ikeGatewayRsModel_yJkkSzS_NatTraversalObject{}

			state.ProtocolCommon.NatTraversal.Enable = types.BoolPointerValue(ans.ProtocolCommon.NatTraversal.Enable)
		}

		state.ProtocolCommon.PassiveMode = types.BoolPointerValue(ans.ProtocolCommon.PassiveMode)
	}

	var3, var4 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var3
	resp.Diagnostics.Append(var4.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *ikeGatewayResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_ike_gateway",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := kJVbXva.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := kJVbXva.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}
