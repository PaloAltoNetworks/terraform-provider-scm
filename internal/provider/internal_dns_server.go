package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	ljnPEAA "github.com/paloaltonetworks/scm-go/netsec/schemas/internaldns/servers"
	xNwmFxK "github.com/paloaltonetworks/scm-go/netsec/services/internaldnsservers"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &internalDnsServerListDataSource{}
	_ datasource.DataSourceWithConfigure = &internalDnsServerListDataSource{}
)

func NewInternalDnsServerListDataSource() datasource.DataSource {
	return &internalDnsServerListDataSource{}
}

type internalDnsServerListDataSource struct {
	client *scm.Client
}

// internalDnsServerListDsModel is the model.
type internalDnsServerListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Limit  types.Int64  `tfsdk:"limit"`
	Name   types.String `tfsdk:"name"`
	Offset types.Int64  `tfsdk:"offset"`

	// Output.
	Data []internalDnsServerListDsModel_ljnPEAA_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type internalDnsServerListDsModel_ljnPEAA_Config struct {
	DomainNames types.List   `tfsdk:"domain_names"`
	Id          types.String `tfsdk:"id"`
	Name        types.String `tfsdk:"name"`
	Primary     types.String `tfsdk:"primary"`
	Secondary   types.String `tfsdk:"secondary"`
}

// Metadata returns the data source type name.
func (d *internalDnsServerListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_internal_dns_server_list"
}

// Schema defines the schema for this listing data source.
func (d *internalDnsServerListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"limit":true, "name":true, "offset":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"limit":true, "name":true, "offset":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"domain_name":true, "id":true, "name":true, "primary":true, "secondary":true} forceNew:map[string]bool(nil)
						"domain_names": dsschema.ListAttribute{
							Description: "The DomainNames param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"primary": dsschema.StringAttribute{
							Description: "The Primary param.",
							Computed:    true,
						},
						"secondary": dsschema.StringAttribute{
							Description: "The Secondary param.",
							Computed:    true,
						},
					},
				},
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *internalDnsServerListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *internalDnsServerListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state internalDnsServerListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_internal_dns_server_list",
		"terraform_provider_function": "Read",
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
		"name":                        state.Name.ValueString(),
	})

	// Prepare to run the command.
	svc := xNwmFxK.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ListInput{}

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Name = state.Name.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]internalDnsServerListDsModel_ljnPEAA_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := internalDnsServerListDsModel_ljnPEAA_Config{}

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.DomainNames)
			var1.DomainNames = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.Primary = types.StringValue(var0.Primary)

			var1.Secondary = types.StringPointerValue(var0.Secondary)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &internalDnsServerDataSource{}
	_ datasource.DataSourceWithConfigure = &internalDnsServerDataSource{}
)

func NewInternalDnsServerDataSource() datasource.DataSource {
	return &internalDnsServerDataSource{}
}

type internalDnsServerDataSource struct {
	client *scm.Client
}

// internalDnsServerDsModel is the model.
type internalDnsServerDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	DomainNames types.List `tfsdk:"domain_names"`
	// omit input: id
	Name      types.String `tfsdk:"name"`
	Primary   types.String `tfsdk:"primary"`
	Secondary types.String `tfsdk:"secondary"`
}

// Metadata returns the data source type name.
func (d *internalDnsServerDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_internal_dns_server"
}

// Schema defines the schema for this data source.
func (d *internalDnsServerDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"domain_name":true, "id":true, "name":true, "primary":true, "secondary":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"domain_names": dsschema.ListAttribute{
				Description: "The DomainNames param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"primary": dsschema.StringAttribute{
				Description: "The Primary param.",
				Computed:    true,
			},
			"secondary": dsschema.StringAttribute{
				Description: "The Secondary param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *internalDnsServerDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *internalDnsServerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state internalDnsServerDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_internal_dns_server",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := xNwmFxK.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.DomainNames)
	state.DomainNames = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Primary = types.StringValue(ans.Primary)

	state.Secondary = types.StringPointerValue(ans.Secondary)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &internalDnsServerResource{}
	_ resource.ResourceWithConfigure   = &internalDnsServerResource{}
	_ resource.ResourceWithImportState = &internalDnsServerResource{}
)

func NewInternalDnsServerResource() resource.Resource {
	return &internalDnsServerResource{}
}

type internalDnsServerResource struct {
	client *scm.Client
}

// internalDnsServerRsModel is the model.
type internalDnsServerRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	DomainNames types.List   `tfsdk:"domain_names"`
	Id          types.String `tfsdk:"id"`
	Name        types.String `tfsdk:"name"`
	Primary     types.String `tfsdk:"primary"`
	Secondary   types.String `tfsdk:"secondary"`

	// Output.
	// omit input: domain_names
	// omit input: id
	// omit input: name
	// omit input: primary
	// omit input: secondary
}

// Metadata returns the data source type name.
func (r *internalDnsServerResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_internal_dns_server"
}

// Schema defines the schema for this data source.
func (r *internalDnsServerResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"domain_name":true, "id":true, "name":true, "primary":true, "secondary":true} outputs:map[string]bool{"domain_name":true, "id":true, "name":true, "primary":true, "secondary":true, "tfid":true} forceNew:map[string]bool{}
			"domain_names": rsschema.ListAttribute{
				Description: "The DomainNames param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"primary": rsschema.StringAttribute{
				Description: "The Primary param.",
				Required:    true,
			},
			"secondary": rsschema.StringAttribute{
				Description: "The Secondary param.",
				Optional:    true,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *internalDnsServerResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *internalDnsServerResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state internalDnsServerRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_internal_dns_server",
		"terraform_provider_function": "Create",
	})

	// Prepare to create the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.CreateInput{}

	input.Request = &ljnPEAA.Config{}

	resp.Diagnostics.Append(state.DomainNames.ElementsAs(ctx, &input.Request.DomainNames, false)...)
	//if len(state.DomainNames) != 0 {
	//    input.Request.DomainNames = make([]string, 0, len(state.DomainNames))
	//    for _, var0 := range state.DomainNames {
	//        input.Request.DomainNames = append(input.Request.DomainNames, var0.ValueString())
	//    }
	//}

	input.Request.Name = state.Name.ValueString()

	input.Request.Primary = state.Primary.ValueString()

	input.Request.Secondary = state.Secondary.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var1, var2 := types.ListValueFrom(ctx, types.StringType, ans.DomainNames)
	state.DomainNames = var1
	resp.Diagnostics.Append(var2.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Primary = types.StringValue(ans.Primary)

	state.Secondary = types.StringPointerValue(ans.Secondary)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *internalDnsServerResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state internalDnsServerRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_internal_dns_server",
		"locMap":                      map[string]int{"id": 0},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.ReadInput{}

	input.Id = tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.
	state.Tfid = savestate.Tfid

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.DomainNames)
	state.DomainNames = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Primary = types.StringValue(ans.Primary)

	state.Secondary = types.StringPointerValue(ans.Secondary)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *internalDnsServerResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state internalDnsServerRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_internal_dns_server",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.UpdateInput{}

	if tokens[0] != "" {
		input.Id = tokens[0]
	}
	input.Request = &ljnPEAA.Config{}

	resp.Diagnostics.Append(plan.DomainNames.ElementsAs(ctx, &input.Request.DomainNames, false)...)
	//if len(plan.DomainNames) != 0 {
	//    input.Request.DomainNames = make([]string, 0, len(plan.DomainNames))
	//    for _, var0 := range plan.DomainNames {
	//        input.Request.DomainNames = append(input.Request.DomainNames, var0.ValueString())
	//    }
	//}

	input.Request.Name = plan.Name.ValueString()

	input.Request.Primary = plan.Primary.ValueString()

	input.Request.Secondary = plan.Secondary.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	var1, var2 := types.ListValueFrom(ctx, types.StringType, ans.DomainNames)
	state.DomainNames = var1
	resp.Diagnostics.Append(var2.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Primary = types.StringValue(ans.Primary)

	state.Secondary = types.StringPointerValue(ans.Secondary)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *internalDnsServerResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 1 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 1 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_internal_dns_server",
		"locMap":                      map[string]int{"id": 0},
		"tokens":                      tokens,
	})

	svc := xNwmFxK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := xNwmFxK.DeleteInput{}

	input.Id = tokens[0]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *internalDnsServerResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
