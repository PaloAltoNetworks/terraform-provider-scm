package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	lrzxLXR "github.com/paloaltonetworks/scm-go/netsec/schemas/ipsec/crypto/profiles"
	bUPXiuP "github.com/paloaltonetworks/scm-go/netsec/services/ipseccryptoprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &ipsecCryptoProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &ipsecCryptoProfileListDataSource{}
)

func NewIpsecCryptoProfileListDataSource() datasource.DataSource {
	return &ipsecCryptoProfileListDataSource{}
}

type ipsecCryptoProfileListDataSource struct {
	client *scm.Client
}

// ipsecCryptoProfileListDsModel is the model.
type ipsecCryptoProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []ipsecCryptoProfileListDsModel_lrzxLXR_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type ipsecCryptoProfileListDsModel_lrzxLXR_Config struct {
	Ah       *ipsecCryptoProfileListDsModel_lrzxLXR_AhObject       `tfsdk:"ah"`
	DhGroup  types.String                                          `tfsdk:"dh_group"`
	Esp      *ipsecCryptoProfileListDsModel_lrzxLXR_EspObject      `tfsdk:"esp"`
	Id       types.String                                          `tfsdk:"id"`
	Lifesize *ipsecCryptoProfileListDsModel_lrzxLXR_LifesizeObject `tfsdk:"lifesize"`
	Lifetime ipsecCryptoProfileListDsModel_lrzxLXR_LifetimeObject  `tfsdk:"lifetime"`
	Name     types.String                                          `tfsdk:"name"`
}

type ipsecCryptoProfileListDsModel_lrzxLXR_AhObject struct {
	Authentications types.List `tfsdk:"authentications"`
}

type ipsecCryptoProfileListDsModel_lrzxLXR_EspObject struct {
	Authentications types.List `tfsdk:"authentications"`
	Encryptions     types.List `tfsdk:"encryptions"`
}

type ipsecCryptoProfileListDsModel_lrzxLXR_LifesizeObject struct {
	Gb types.Int64 `tfsdk:"gb"`
	Kb types.Int64 `tfsdk:"kb"`
	Mb types.Int64 `tfsdk:"mb"`
	Tb types.Int64 `tfsdk:"tb"`
}

type ipsecCryptoProfileListDsModel_lrzxLXR_LifetimeObject struct {
	Days    types.Int64 `tfsdk:"days"`
	Hours   types.Int64 `tfsdk:"hours"`
	Minutes types.Int64 `tfsdk:"minutes"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

// Metadata returns the data source type name.
func (d *ipsecCryptoProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipsec_crypto_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *ipsecCryptoProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"ah":true, "dh_group":true, "esp":true, "id":true, "lifesize":true, "lifetime":true, "name":true} forceNew:map[string]bool(nil)
						"ah": dsschema.SingleNestedAttribute{
							Description: "The Ah param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"authentication":true} forceNew:map[string]bool(nil)
								"authentications": dsschema.ListAttribute{
									Description: "The Authentications param.",
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"dh_group": dsschema.StringAttribute{
							Description: "phase-2 DH group (PFS DH group). String must be one of these: `\"no-pfs\"`, `\"group1\"`, `\"group2\"`, `\"group5\"`, `\"group14\"`, `\"group19\"`, `\"group20\"`. Default: `\"group2\"`.",
							Computed:    true,
						},
						"esp": dsschema.SingleNestedAttribute{
							Description: "The Esp param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"authentication":true, "encryption":true} forceNew:map[string]bool(nil)
								"authentications": dsschema.ListAttribute{
									Description: "Authentication algorithm.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"encryptions": dsschema.ListAttribute{
									Description: "Encryption algorithm.",
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"lifesize": dsschema.SingleNestedAttribute{
							Description: "The Lifesize param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"gb":true, "kb":true, "mb":true, "tb":true} forceNew:map[string]bool(nil)
								"gb": dsschema.Int64Attribute{
									Description: "specify lifesize in gigabytes(GB). Value must be between 1 and 65535.",
									Computed:    true,
								},
								"kb": dsschema.Int64Attribute{
									Description: "specify lifesize in kilobytes(KB). Value must be between 1 and 65535.",
									Computed:    true,
								},
								"mb": dsschema.Int64Attribute{
									Description: "specify lifesize in megabytes(MB). Value must be between 1 and 65535.",
									Computed:    true,
								},
								"tb": dsschema.Int64Attribute{
									Description: "specify lifesize in terabytes(TB). Value must be between 1 and 65535.",
									Computed:    true,
								},
							},
						},
						"lifetime": dsschema.SingleNestedAttribute{
							Description: "The Lifetime param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"days":true, "hours":true, "minutes":true, "seconds":true} forceNew:map[string]bool(nil)
								"days": dsschema.Int64Attribute{
									Description: "specify lifetime in days. Value must be between 1 and 365.",
									Computed:    true,
								},
								"hours": dsschema.Int64Attribute{
									Description: "specify lifetime in hours. Value must be between 1 and 65535.",
									Computed:    true,
								},
								"minutes": dsschema.Int64Attribute{
									Description: "specify lifetime in minutes. Value must be between 3 and 65535.",
									Computed:    true,
								},
								"seconds": dsschema.Int64Attribute{
									Description: "specify lifetime in seconds. Value must be between 180 and 65535.",
									Computed:    true,
								},
							},
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 31 characters.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *ipsecCryptoProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *ipsecCryptoProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state ipsecCryptoProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_ipsec_crypto_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := bUPXiuP.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]ipsecCryptoProfileListDsModel_lrzxLXR_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := ipsecCryptoProfileListDsModel_lrzxLXR_Config{}

			if var0.Ah == nil {
				var1.Ah = nil
			} else {
				var1.Ah = &ipsecCryptoProfileListDsModel_lrzxLXR_AhObject{}

				var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Ah.Authentications)
				var1.Ah.Authentications = var2
				resp.Diagnostics.Append(var3.Errors()...)
			}

			var1.DhGroup = types.StringPointerValue(var0.DhGroup)

			if var0.Esp == nil {
				var1.Esp = nil
			} else {
				var1.Esp = &ipsecCryptoProfileListDsModel_lrzxLXR_EspObject{}

				var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Esp.Authentications)
				var1.Esp.Authentications = var4
				resp.Diagnostics.Append(var5.Errors()...)

				var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Esp.Encryptions)
				var1.Esp.Encryptions = var6
				resp.Diagnostics.Append(var7.Errors()...)
			}

			var1.Id = types.StringPointerValue(var0.Id)

			if var0.Lifesize == nil {
				var1.Lifesize = nil
			} else {
				var1.Lifesize = &ipsecCryptoProfileListDsModel_lrzxLXR_LifesizeObject{}

				var1.Lifesize.Gb = types.Int64PointerValue(var0.Lifesize.Gb)

				var1.Lifesize.Kb = types.Int64PointerValue(var0.Lifesize.Kb)

				var1.Lifesize.Mb = types.Int64PointerValue(var0.Lifesize.Mb)

				var1.Lifesize.Tb = types.Int64PointerValue(var0.Lifesize.Tb)
			}

			var1.Lifetime = ipsecCryptoProfileListDsModel_lrzxLXR_LifetimeObject{}

			var1.Lifetime.Days = types.Int64PointerValue(var0.Lifetime.Days)

			var1.Lifetime.Hours = types.Int64PointerValue(var0.Lifetime.Hours)

			var1.Lifetime.Minutes = types.Int64PointerValue(var0.Lifetime.Minutes)

			var1.Lifetime.Seconds = types.Int64PointerValue(var0.Lifetime.Seconds)

			var1.Name = types.StringValue(var0.Name)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &ipsecCryptoProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &ipsecCryptoProfileDataSource{}
)

func NewIpsecCryptoProfileDataSource() datasource.DataSource {
	return &ipsecCryptoProfileDataSource{}
}

type ipsecCryptoProfileDataSource struct {
	client *scm.Client
}

// ipsecCryptoProfileDsModel is the model.
type ipsecCryptoProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Ah      *ipsecCryptoProfileDsModel_lrzxLXR_AhObject  `tfsdk:"ah"`
	DhGroup types.String                                 `tfsdk:"dh_group"`
	Esp     *ipsecCryptoProfileDsModel_lrzxLXR_EspObject `tfsdk:"esp"`
	// omit input: id
	Lifesize *ipsecCryptoProfileDsModel_lrzxLXR_LifesizeObject `tfsdk:"lifesize"`
	Lifetime ipsecCryptoProfileDsModel_lrzxLXR_LifetimeObject  `tfsdk:"lifetime"`
	Name     types.String                                      `tfsdk:"name"`
}

type ipsecCryptoProfileDsModel_lrzxLXR_AhObject struct {
	Authentications types.List `tfsdk:"authentications"`
}

type ipsecCryptoProfileDsModel_lrzxLXR_EspObject struct {
	Authentications types.List `tfsdk:"authentications"`
	Encryptions     types.List `tfsdk:"encryptions"`
}

type ipsecCryptoProfileDsModel_lrzxLXR_LifesizeObject struct {
	Gb types.Int64 `tfsdk:"gb"`
	Kb types.Int64 `tfsdk:"kb"`
	Mb types.Int64 `tfsdk:"mb"`
	Tb types.Int64 `tfsdk:"tb"`
}

type ipsecCryptoProfileDsModel_lrzxLXR_LifetimeObject struct {
	Days    types.Int64 `tfsdk:"days"`
	Hours   types.Int64 `tfsdk:"hours"`
	Minutes types.Int64 `tfsdk:"minutes"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

// Metadata returns the data source type name.
func (d *ipsecCryptoProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipsec_crypto_profile"
}

// Schema defines the schema for this data source.
func (d *ipsecCryptoProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"ah":true, "dh_group":true, "esp":true, "id":true, "lifesize":true, "lifetime":true, "name":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"ah": dsschema.SingleNestedAttribute{
				Description: "The Ah param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"authentication":true} forceNew:map[string]bool(nil)
					"authentications": dsschema.ListAttribute{
						Description: "The Authentications param.",
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"dh_group": dsschema.StringAttribute{
				Description: "phase-2 DH group (PFS DH group). String must be one of these: `\"no-pfs\"`, `\"group1\"`, `\"group2\"`, `\"group5\"`, `\"group14\"`, `\"group19\"`, `\"group20\"`. Default: `\"group2\"`.",
				Computed:    true,
			},
			"esp": dsschema.SingleNestedAttribute{
				Description: "The Esp param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"authentication":true, "encryption":true} forceNew:map[string]bool(nil)
					"authentications": dsschema.ListAttribute{
						Description: "Authentication algorithm.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"encryptions": dsschema.ListAttribute{
						Description: "Encryption algorithm.",
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"lifesize": dsschema.SingleNestedAttribute{
				Description: "The Lifesize param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"gb":true, "kb":true, "mb":true, "tb":true} forceNew:map[string]bool(nil)
					"gb": dsschema.Int64Attribute{
						Description: "specify lifesize in gigabytes(GB). Value must be between 1 and 65535.",
						Computed:    true,
					},
					"kb": dsschema.Int64Attribute{
						Description: "specify lifesize in kilobytes(KB). Value must be between 1 and 65535.",
						Computed:    true,
					},
					"mb": dsschema.Int64Attribute{
						Description: "specify lifesize in megabytes(MB). Value must be between 1 and 65535.",
						Computed:    true,
					},
					"tb": dsschema.Int64Attribute{
						Description: "specify lifesize in terabytes(TB). Value must be between 1 and 65535.",
						Computed:    true,
					},
				},
			},
			"lifetime": dsschema.SingleNestedAttribute{
				Description: "The Lifetime param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"days":true, "hours":true, "minutes":true, "seconds":true} forceNew:map[string]bool(nil)
					"days": dsschema.Int64Attribute{
						Description: "specify lifetime in days. Value must be between 1 and 365.",
						Computed:    true,
					},
					"hours": dsschema.Int64Attribute{
						Description: "specify lifetime in hours. Value must be between 1 and 65535.",
						Computed:    true,
					},
					"minutes": dsschema.Int64Attribute{
						Description: "specify lifetime in minutes. Value must be between 3 and 65535.",
						Computed:    true,
					},
					"seconds": dsschema.Int64Attribute{
						Description: "specify lifetime in seconds. Value must be between 180 and 65535.",
						Computed:    true,
					},
				},
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *ipsecCryptoProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *ipsecCryptoProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state ipsecCryptoProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_ipsec_crypto_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := bUPXiuP.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.Ah == nil {
		state.Ah = nil
	} else {
		state.Ah = &ipsecCryptoProfileDsModel_lrzxLXR_AhObject{}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Ah.Authentications)
		state.Ah.Authentications = var0
		resp.Diagnostics.Append(var1.Errors()...)
	}

	state.DhGroup = types.StringPointerValue(ans.DhGroup)

	if ans.Esp == nil {
		state.Esp = nil
	} else {
		state.Esp = &ipsecCryptoProfileDsModel_lrzxLXR_EspObject{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Esp.Authentications)
		state.Esp.Authentications = var2
		resp.Diagnostics.Append(var3.Errors()...)

		var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Esp.Encryptions)
		state.Esp.Encryptions = var4
		resp.Diagnostics.Append(var5.Errors()...)
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Lifesize == nil {
		state.Lifesize = nil
	} else {
		state.Lifesize = &ipsecCryptoProfileDsModel_lrzxLXR_LifesizeObject{}

		state.Lifesize.Gb = types.Int64PointerValue(ans.Lifesize.Gb)

		state.Lifesize.Kb = types.Int64PointerValue(ans.Lifesize.Kb)

		state.Lifesize.Mb = types.Int64PointerValue(ans.Lifesize.Mb)

		state.Lifesize.Tb = types.Int64PointerValue(ans.Lifesize.Tb)
	}

	state.Lifetime = ipsecCryptoProfileDsModel_lrzxLXR_LifetimeObject{}

	state.Lifetime.Days = types.Int64PointerValue(ans.Lifetime.Days)

	state.Lifetime.Hours = types.Int64PointerValue(ans.Lifetime.Hours)

	state.Lifetime.Minutes = types.Int64PointerValue(ans.Lifetime.Minutes)

	state.Lifetime.Seconds = types.Int64PointerValue(ans.Lifetime.Seconds)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &ipsecCryptoProfileResource{}
	_ resource.ResourceWithConfigure   = &ipsecCryptoProfileResource{}
	_ resource.ResourceWithImportState = &ipsecCryptoProfileResource{}
)

func NewIpsecCryptoProfileResource() resource.Resource {
	return &ipsecCryptoProfileResource{}
}

type ipsecCryptoProfileResource struct {
	client *scm.Client
}

// ipsecCryptoProfileRsModel is the model.
type ipsecCryptoProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Ah       *ipsecCryptoProfileRsModel_lrzxLXR_AhObject       `tfsdk:"ah"`
	Device   types.String                                      `tfsdk:"device"`
	DhGroup  types.String                                      `tfsdk:"dh_group"`
	Esp      *ipsecCryptoProfileRsModel_lrzxLXR_EspObject      `tfsdk:"esp"`
	Folder   types.String                                      `tfsdk:"folder"`
	Id       types.String                                      `tfsdk:"id"`
	Lifesize *ipsecCryptoProfileRsModel_lrzxLXR_LifesizeObject `tfsdk:"lifesize"`
	Lifetime ipsecCryptoProfileRsModel_lrzxLXR_LifetimeObject  `tfsdk:"lifetime"`
	Name     types.String                                      `tfsdk:"name"`
	Snippet  types.String                                      `tfsdk:"snippet"`

	// Output.
	// omit input: ah
	// omit input: dh_group
	// omit input: esp
	// omit input: id
	// omit input: lifesize
	// omit input: lifetime
	// omit input: name
}

type ipsecCryptoProfileRsModel_lrzxLXR_AhObject struct {
	Authentications types.List `tfsdk:"authentications"`
}

type ipsecCryptoProfileRsModel_lrzxLXR_EspObject struct {
	Authentications types.List `tfsdk:"authentications"`
	Encryptions     types.List `tfsdk:"encryptions"`
}

type ipsecCryptoProfileRsModel_lrzxLXR_LifesizeObject struct {
	Gb types.Int64 `tfsdk:"gb"`
	Kb types.Int64 `tfsdk:"kb"`
	Mb types.Int64 `tfsdk:"mb"`
	Tb types.Int64 `tfsdk:"tb"`
}

type ipsecCryptoProfileRsModel_lrzxLXR_LifetimeObject struct {
	Days    types.Int64 `tfsdk:"days"`
	Hours   types.Int64 `tfsdk:"hours"`
	Minutes types.Int64 `tfsdk:"minutes"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

// Metadata returns the data source type name.
func (r *ipsecCryptoProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipsec_crypto_profile"
}

// Schema defines the schema for this data source.
func (r *ipsecCryptoProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"ah":true, "device":true, "dh_group":true, "esp":true, "folder":true, "id":true, "lifesize":true, "lifetime":true, "name":true, "snippet":true} outputs:map[string]bool{"ah":true, "dh_group":true, "esp":true, "id":true, "lifesize":true, "lifetime":true, "name":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"ah": rsschema.SingleNestedAttribute{
				Description: "The Ah param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"authentication":true} outputs:map[string]bool{"authentication":true} forceNew:map[string]bool(nil)
					"authentications": rsschema.ListAttribute{
						Description: "The Authentications param.",
						Required:    true,
						ElementType: types.StringType,
					},
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"dh_group": rsschema.StringAttribute{
				Description: "phase-2 DH group (PFS DH group). String must be one of these: `\"no-pfs\"`, `\"group1\"`, `\"group2\"`, `\"group5\"`, `\"group14\"`, `\"group19\"`, `\"group20\"`. Default: `\"group2\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("group2"),
				Validators: []validator.String{
					stringvalidator.OneOf("no-pfs", "group1", "group2", "group5", "group14", "group19", "group20"),
				},
			},
			"esp": rsschema.SingleNestedAttribute{
				Description: "The Esp param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"authentication":true, "encryption":true} outputs:map[string]bool{"authentication":true, "encryption":true} forceNew:map[string]bool(nil)
					"authentications": rsschema.ListAttribute{
						Description: "Authentication algorithm.",
						Required:    true,
						ElementType: types.StringType,
					},
					"encryptions": rsschema.ListAttribute{
						Description: "Encryption algorithm.",
						Required:    true,
						ElementType: types.StringType,
					},
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"lifesize": rsschema.SingleNestedAttribute{
				Description: "The Lifesize param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"gb":true, "kb":true, "mb":true, "tb":true} outputs:map[string]bool{"gb":true, "kb":true, "mb":true, "tb":true} forceNew:map[string]bool(nil)
					"gb": rsschema.Int64Attribute{
						Description: "specify lifesize in gigabytes(GB). Value must be between 1 and 65535.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(1, 65535),
						},
					},
					"kb": rsschema.Int64Attribute{
						Description: "specify lifesize in kilobytes(KB). Value must be between 1 and 65535.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(1, 65535),
						},
					},
					"mb": rsschema.Int64Attribute{
						Description: "specify lifesize in megabytes(MB). Value must be between 1 and 65535.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(1, 65535),
						},
					},
					"tb": rsschema.Int64Attribute{
						Description: "specify lifesize in terabytes(TB). Value must be between 1 and 65535.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(1, 65535),
						},
					},
				},
			},
			"lifetime": rsschema.SingleNestedAttribute{
				Description: "The Lifetime param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"days":true, "hours":true, "minutes":true, "seconds":true} outputs:map[string]bool{"days":true, "hours":true, "minutes":true, "seconds":true} forceNew:map[string]bool(nil)
					"days": rsschema.Int64Attribute{
						Description: "specify lifetime in days. Value must be between 1 and 365.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(1, 365),
						},
					},
					"hours": rsschema.Int64Attribute{
						Description: "specify lifetime in hours. Value must be between 1 and 65535.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(1, 65535),
						},
					},
					"minutes": rsschema.Int64Attribute{
						Description: "specify lifetime in minutes. Value must be between 3 and 65535.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(3, 65535),
						},
					},
					"seconds": rsschema.Int64Attribute{
						Description: "specify lifetime in seconds. Value must be between 180 and 65535.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(180, 65535),
						},
					},
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(31),
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *ipsecCryptoProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *ipsecCryptoProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ipsecCryptoProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_ipsec_crypto_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := bUPXiuP.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &lrzxLXR.Config{}

	if state.Ah != nil {
		input.Request.Ah = &lrzxLXR.AhObject{}

		resp.Diagnostics.Append(state.Ah.Authentications.ElementsAs(ctx, &input.Request.Ah.Authentications, false)...)
		//if len(state.Ah.Authentications) != 0 {
		//    input.Request.Ah.Authentications = make([]string, 0, len(state.Ah.Authentications))
		//    for _, var0 := range state.Ah.Authentications {
		//        input.Request.Ah.Authentications = append(input.Request.Ah.Authentications, var0.ValueString())
		//    }
		//}
	}

	input.Request.DhGroup = state.DhGroup.ValueStringPointer()

	if state.Esp != nil {
		input.Request.Esp = &lrzxLXR.EspObject{}

		resp.Diagnostics.Append(state.Esp.Authentications.ElementsAs(ctx, &input.Request.Esp.Authentications, false)...)
		//if len(state.Esp.Authentications) != 0 {
		//    input.Request.Esp.Authentications = make([]string, 0, len(state.Esp.Authentications))
		//    for _, var1 := range state.Esp.Authentications {
		//        input.Request.Esp.Authentications = append(input.Request.Esp.Authentications, var1.ValueString())
		//    }
		//}

		resp.Diagnostics.Append(state.Esp.Encryptions.ElementsAs(ctx, &input.Request.Esp.Encryptions, false)...)
		//if len(state.Esp.Encryptions) != 0 {
		//    input.Request.Esp.Encryptions = make([]string, 0, len(state.Esp.Encryptions))
		//    for _, var2 := range state.Esp.Encryptions {
		//        input.Request.Esp.Encryptions = append(input.Request.Esp.Encryptions, var2.ValueString())
		//    }
		//}
	}

	if state.Lifesize != nil {
		input.Request.Lifesize = &lrzxLXR.LifesizeObject{}

		input.Request.Lifesize.Gb = state.Lifesize.Gb.ValueInt64Pointer()

		input.Request.Lifesize.Kb = state.Lifesize.Kb.ValueInt64Pointer()

		input.Request.Lifesize.Mb = state.Lifesize.Mb.ValueInt64Pointer()

		input.Request.Lifesize.Tb = state.Lifesize.Tb.ValueInt64Pointer()
	}

	input.Request.Lifetime.Days = state.Lifetime.Days.ValueInt64Pointer()

	input.Request.Lifetime.Hours = state.Lifetime.Hours.ValueInt64Pointer()

	input.Request.Lifetime.Minutes = state.Lifetime.Minutes.ValueInt64Pointer()

	input.Request.Lifetime.Seconds = state.Lifetime.Seconds.ValueInt64Pointer()

	input.Request.Name = state.Name.ValueString()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.Ah == nil {
		state.Ah = nil
	} else {
		state.Ah = &ipsecCryptoProfileRsModel_lrzxLXR_AhObject{}

		var3, var4 := types.ListValueFrom(ctx, types.StringType, ans.Ah.Authentications)
		state.Ah.Authentications = var3
		resp.Diagnostics.Append(var4.Errors()...)
	}

	state.DhGroup = types.StringPointerValue(ans.DhGroup)

	if ans.Esp == nil {
		state.Esp = nil
	} else {
		state.Esp = &ipsecCryptoProfileRsModel_lrzxLXR_EspObject{}

		var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Esp.Authentications)
		state.Esp.Authentications = var5
		resp.Diagnostics.Append(var6.Errors()...)

		var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Esp.Encryptions)
		state.Esp.Encryptions = var7
		resp.Diagnostics.Append(var8.Errors()...)
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Lifesize == nil {
		state.Lifesize = nil
	} else {
		state.Lifesize = &ipsecCryptoProfileRsModel_lrzxLXR_LifesizeObject{}

		state.Lifesize.Gb = types.Int64PointerValue(ans.Lifesize.Gb)

		state.Lifesize.Kb = types.Int64PointerValue(ans.Lifesize.Kb)

		state.Lifesize.Mb = types.Int64PointerValue(ans.Lifesize.Mb)

		state.Lifesize.Tb = types.Int64PointerValue(ans.Lifesize.Tb)
	}

	state.Lifetime = ipsecCryptoProfileRsModel_lrzxLXR_LifetimeObject{}

	state.Lifetime.Days = types.Int64PointerValue(ans.Lifetime.Days)

	state.Lifetime.Hours = types.Int64PointerValue(ans.Lifetime.Hours)

	state.Lifetime.Minutes = types.Int64PointerValue(ans.Lifetime.Minutes)

	state.Lifetime.Seconds = types.Int64PointerValue(ans.Lifetime.Seconds)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *ipsecCryptoProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state ipsecCryptoProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_ipsec_crypto_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := bUPXiuP.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	if ans.Ah == nil {
		state.Ah = nil
	} else {
		state.Ah = &ipsecCryptoProfileRsModel_lrzxLXR_AhObject{}

		var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Ah.Authentications)
		state.Ah.Authentications = var0
		resp.Diagnostics.Append(var1.Errors()...)
	}

	state.DhGroup = types.StringPointerValue(ans.DhGroup)

	if ans.Esp == nil {
		state.Esp = nil
	} else {
		state.Esp = &ipsecCryptoProfileRsModel_lrzxLXR_EspObject{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Esp.Authentications)
		state.Esp.Authentications = var2
		resp.Diagnostics.Append(var3.Errors()...)

		var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Esp.Encryptions)
		state.Esp.Encryptions = var4
		resp.Diagnostics.Append(var5.Errors()...)
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Lifesize == nil {
		state.Lifesize = nil
	} else {
		state.Lifesize = &ipsecCryptoProfileRsModel_lrzxLXR_LifesizeObject{}

		state.Lifesize.Gb = types.Int64PointerValue(ans.Lifesize.Gb)

		state.Lifesize.Kb = types.Int64PointerValue(ans.Lifesize.Kb)

		state.Lifesize.Mb = types.Int64PointerValue(ans.Lifesize.Mb)

		state.Lifesize.Tb = types.Int64PointerValue(ans.Lifesize.Tb)
	}

	state.Lifetime = ipsecCryptoProfileRsModel_lrzxLXR_LifetimeObject{}

	state.Lifetime.Days = types.Int64PointerValue(ans.Lifetime.Days)

	state.Lifetime.Hours = types.Int64PointerValue(ans.Lifetime.Hours)

	state.Lifetime.Minutes = types.Int64PointerValue(ans.Lifetime.Minutes)

	state.Lifetime.Seconds = types.Int64PointerValue(ans.Lifetime.Seconds)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *ipsecCryptoProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state ipsecCryptoProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_ipsec_crypto_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := bUPXiuP.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &lrzxLXR.Config{}

	if plan.Ah != nil {
		input.Request.Ah = &lrzxLXR.AhObject{}

		resp.Diagnostics.Append(plan.Ah.Authentications.ElementsAs(ctx, &input.Request.Ah.Authentications, false)...)
		//if len(plan.Ah.Authentications) != 0 {
		//    input.Request.Ah.Authentications = make([]string, 0, len(plan.Ah.Authentications))
		//    for _, var0 := range plan.Ah.Authentications {
		//        input.Request.Ah.Authentications = append(input.Request.Ah.Authentications, var0.ValueString())
		//    }
		//}
	}

	input.Request.DhGroup = plan.DhGroup.ValueStringPointer()

	if plan.Esp != nil {
		input.Request.Esp = &lrzxLXR.EspObject{}

		resp.Diagnostics.Append(plan.Esp.Authentications.ElementsAs(ctx, &input.Request.Esp.Authentications, false)...)
		//if len(plan.Esp.Authentications) != 0 {
		//    input.Request.Esp.Authentications = make([]string, 0, len(plan.Esp.Authentications))
		//    for _, var1 := range plan.Esp.Authentications {
		//        input.Request.Esp.Authentications = append(input.Request.Esp.Authentications, var1.ValueString())
		//    }
		//}

		resp.Diagnostics.Append(plan.Esp.Encryptions.ElementsAs(ctx, &input.Request.Esp.Encryptions, false)...)
		//if len(plan.Esp.Encryptions) != 0 {
		//    input.Request.Esp.Encryptions = make([]string, 0, len(plan.Esp.Encryptions))
		//    for _, var2 := range plan.Esp.Encryptions {
		//        input.Request.Esp.Encryptions = append(input.Request.Esp.Encryptions, var2.ValueString())
		//    }
		//}
	}

	if plan.Lifesize != nil {
		input.Request.Lifesize = &lrzxLXR.LifesizeObject{}

		input.Request.Lifesize.Gb = plan.Lifesize.Gb.ValueInt64Pointer()

		input.Request.Lifesize.Kb = plan.Lifesize.Kb.ValueInt64Pointer()

		input.Request.Lifesize.Mb = plan.Lifesize.Mb.ValueInt64Pointer()

		input.Request.Lifesize.Tb = plan.Lifesize.Tb.ValueInt64Pointer()
	}

	input.Request.Lifetime.Days = plan.Lifetime.Days.ValueInt64Pointer()

	input.Request.Lifetime.Hours = plan.Lifetime.Hours.ValueInt64Pointer()

	input.Request.Lifetime.Minutes = plan.Lifetime.Minutes.ValueInt64Pointer()

	input.Request.Lifetime.Seconds = plan.Lifetime.Seconds.ValueInt64Pointer()

	input.Request.Name = plan.Name.ValueString()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	if ans.Ah == nil {
		state.Ah = nil
	} else {
		state.Ah = &ipsecCryptoProfileRsModel_lrzxLXR_AhObject{}

		var3, var4 := types.ListValueFrom(ctx, types.StringType, ans.Ah.Authentications)
		state.Ah.Authentications = var3
		resp.Diagnostics.Append(var4.Errors()...)
	}

	state.DhGroup = types.StringPointerValue(ans.DhGroup)

	if ans.Esp == nil {
		state.Esp = nil
	} else {
		state.Esp = &ipsecCryptoProfileRsModel_lrzxLXR_EspObject{}

		var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Esp.Authentications)
		state.Esp.Authentications = var5
		resp.Diagnostics.Append(var6.Errors()...)

		var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Esp.Encryptions)
		state.Esp.Encryptions = var7
		resp.Diagnostics.Append(var8.Errors()...)
	}

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Lifesize == nil {
		state.Lifesize = nil
	} else {
		state.Lifesize = &ipsecCryptoProfileRsModel_lrzxLXR_LifesizeObject{}

		state.Lifesize.Gb = types.Int64PointerValue(ans.Lifesize.Gb)

		state.Lifesize.Kb = types.Int64PointerValue(ans.Lifesize.Kb)

		state.Lifesize.Mb = types.Int64PointerValue(ans.Lifesize.Mb)

		state.Lifesize.Tb = types.Int64PointerValue(ans.Lifesize.Tb)
	}

	state.Lifetime = ipsecCryptoProfileRsModel_lrzxLXR_LifetimeObject{}

	state.Lifetime.Days = types.Int64PointerValue(ans.Lifetime.Days)

	state.Lifetime.Hours = types.Int64PointerValue(ans.Lifetime.Hours)

	state.Lifetime.Minutes = types.Int64PointerValue(ans.Lifetime.Minutes)

	state.Lifetime.Seconds = types.Int64PointerValue(ans.Lifetime.Seconds)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *ipsecCryptoProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_ipsec_crypto_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := bUPXiuP.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := bUPXiuP.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *ipsecCryptoProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
