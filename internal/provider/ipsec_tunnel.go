package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	nnsRzDg "github.com/paloaltonetworks/scm-go/netsec/schemas/ipsec/tunnels"
	rmBFeLV "github.com/paloaltonetworks/scm-go/netsec/services/ipsectunnels"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &ipsecTunnelListDataSource{}
	_ datasource.DataSourceWithConfigure = &ipsecTunnelListDataSource{}
)

func NewIpsecTunnelListDataSource() datasource.DataSource {
	return &ipsecTunnelListDataSource{}
}

type ipsecTunnelListDataSource struct {
	client *scm.Client
}

// ipsecTunnelListDsModel is the model.
type ipsecTunnelListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []ipsecTunnelListDsModel_nnsRzDg_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type ipsecTunnelListDsModel_nnsRzDg_Config struct {
	AntiReplay             types.Bool                                          `tfsdk:"anti_replay"`
	AutoKey                ipsecTunnelListDsModel_nnsRzDg_AutoKeyObject        `tfsdk:"auto_key"`
	CopyTos                types.Bool                                          `tfsdk:"copy_tos"`
	EnableGreEncapsulation types.Bool                                          `tfsdk:"enable_gre_encapsulation"`
	Id                     types.String                                        `tfsdk:"id"`
	Name                   types.String                                        `tfsdk:"name"`
	TunnelMonitor          *ipsecTunnelListDsModel_nnsRzDg_TunnelMonitorObject `tfsdk:"tunnel_monitor"`
}

type ipsecTunnelListDsModel_nnsRzDg_AutoKeyObject struct {
	IkeGateways        []ipsecTunnelListDsModel_nnsRzDg_IkeGatewayObject `tfsdk:"ike_gateways"`
	IpsecCryptoProfile types.String                                      `tfsdk:"ipsec_crypto_profile"`
	ProxyIdV6s         []ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6Object  `tfsdk:"proxy_id_v6s"`
	ProxyIds           []ipsecTunnelListDsModel_nnsRzDg_ProxyIdObject    `tfsdk:"proxy_ids"`
}

type ipsecTunnelListDsModel_nnsRzDg_IkeGatewayObject struct {
	Name types.String `tfsdk:"name"`
}

type ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6Object struct {
	Local    types.String                                            `tfsdk:"local"`
	Name     types.String                                            `tfsdk:"name"`
	Protocol *ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6ProtocolObject `tfsdk:"protocol"`
	Remote   types.String                                            `tfsdk:"remote"`
}

type ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6ProtocolObject struct {
	Number types.Int64                                                `tfsdk:"number"`
	Tcp    *ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6TcpProtocolObject `tfsdk:"tcp"`
	Udp    *ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6UdpProtocolObject `tfsdk:"udp"`
}

type ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6TcpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6UdpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelListDsModel_nnsRzDg_ProxyIdObject struct {
	Local    types.String                                          `tfsdk:"local"`
	Name     types.String                                          `tfsdk:"name"`
	Protocol *ipsecTunnelListDsModel_nnsRzDg_ProxyIdProtocolObject `tfsdk:"protocol"`
	Remote   types.String                                          `tfsdk:"remote"`
}

type ipsecTunnelListDsModel_nnsRzDg_ProxyIdProtocolObject struct {
	Number types.Int64                                              `tfsdk:"number"`
	Tcp    *ipsecTunnelListDsModel_nnsRzDg_ProxyIdTcpProtocolObject `tfsdk:"tcp"`
	Udp    *ipsecTunnelListDsModel_nnsRzDg_ProxyIdUdpProtocolObject `tfsdk:"udp"`
}

type ipsecTunnelListDsModel_nnsRzDg_ProxyIdTcpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelListDsModel_nnsRzDg_ProxyIdUdpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelListDsModel_nnsRzDg_TunnelMonitorObject struct {
	DestinationIp types.String `tfsdk:"destination_ip"`
	Enable        types.Bool   `tfsdk:"enable"`
	ProxyId       types.String `tfsdk:"proxy_id"`
}

// Metadata returns the data source type name.
func (d *ipsecTunnelListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipsec_tunnel_list"
}

// Schema defines the schema for this listing data source.
func (d *ipsecTunnelListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"anti_replay":true, "auto_key":true, "copy_tos":true, "enable_gre_encapsulation":true, "id":true, "name":true, "tunnel_monitor":true} forceNew:map[string]bool(nil)
						"anti_replay": dsschema.BoolAttribute{
							Description: "Enable Anti-Replay check on this tunnel.",
							Computed:    true,
						},
						"auto_key": dsschema.SingleNestedAttribute{
							Description: "The AutoKey param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"ike_gateway":true, "ipsec_crypto_profile":true, "proxy_id":true, "proxy_id_v6":true} forceNew:map[string]bool(nil)
								"ike_gateways": dsschema.ListNestedAttribute{
									Description: "The IkeGateways param.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
										},
									},
								},
								"ipsec_crypto_profile": dsschema.StringAttribute{
									Description: "The IpsecCryptoProfile param.",
									Computed:    true,
								},
								"proxy_id_v6s": dsschema.ListNestedAttribute{
									Description: "IPv6 type of proxy_id values.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"local":true, "name":true, "protocol":true, "remote":true} forceNew:map[string]bool(nil)
											"local": dsschema.StringAttribute{
												Description: "The Local param.",
												Computed:    true,
											},
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
											"protocol": dsschema.SingleNestedAttribute{
												Description: "The Protocol param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"number":true, "tcp":true, "udp":true} forceNew:map[string]bool(nil)
													"number": dsschema.Int64Attribute{
														Description: "IP protocol number. Value must be between 1 and 254.",
														Computed:    true,
													},
													"tcp": dsschema.SingleNestedAttribute{
														Description: "The Tcp param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
															"local_port": dsschema.Int64Attribute{
																Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
																Computed:    true,
															},
															"remote_port": dsschema.Int64Attribute{
																Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
																Computed:    true,
															},
														},
													},
													"udp": dsschema.SingleNestedAttribute{
														Description: "The Udp param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
															"local_port": dsschema.Int64Attribute{
																Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
																Computed:    true,
															},
															"remote_port": dsschema.Int64Attribute{
																Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
																Computed:    true,
															},
														},
													},
												},
											},
											"remote": dsschema.StringAttribute{
												Description: "The Remote param.",
												Computed:    true,
											},
										},
									},
								},
								"proxy_ids": dsschema.ListNestedAttribute{
									Description: "IPv4 type of proxy_id values.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"local":true, "name":true, "protocol":true, "remote":true} forceNew:map[string]bool(nil)
											"local": dsschema.StringAttribute{
												Description: "The Local param.",
												Computed:    true,
											},
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
											"protocol": dsschema.SingleNestedAttribute{
												Description: "The Protocol param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"number":true, "tcp":true, "udp":true} forceNew:map[string]bool(nil)
													"number": dsschema.Int64Attribute{
														Description: "IP protocol number. Value must be between 1 and 254.",
														Computed:    true,
													},
													"tcp": dsschema.SingleNestedAttribute{
														Description: "The Tcp param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
															"local_port": dsschema.Int64Attribute{
																Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
																Computed:    true,
															},
															"remote_port": dsschema.Int64Attribute{
																Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
																Computed:    true,
															},
														},
													},
													"udp": dsschema.SingleNestedAttribute{
														Description: "The Udp param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
															"local_port": dsschema.Int64Attribute{
																Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
																Computed:    true,
															},
															"remote_port": dsschema.Int64Attribute{
																Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
																Computed:    true,
															},
														},
													},
												},
											},
											"remote": dsschema.StringAttribute{
												Description: "The Remote param.",
												Computed:    true,
											},
										},
									},
								},
							},
						},
						"copy_tos": dsschema.BoolAttribute{
							Description: "Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.",
							Computed:    true,
						},
						"enable_gre_encapsulation": dsschema.BoolAttribute{
							Description: "allow GRE over IPSec. Default: `false`.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"tunnel_monitor": dsschema.SingleNestedAttribute{
							Description: "The TunnelMonitor param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"destination_ip":true, "enable":true, "proxy_id":true} forceNew:map[string]bool(nil)
								"destination_ip": dsschema.StringAttribute{
									Description: "Destination IP to send ICMP probe.",
									Computed:    true,
								},
								"enable": dsschema.BoolAttribute{
									Description: "Enable tunnel monitoring on this tunnel. Default: `true`.",
									Computed:    true,
								},
								"proxy_id": dsschema.StringAttribute{
									Description: "Which proxy-id (or proxy-id-v6) the monitoring traffic will use.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *ipsecTunnelListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *ipsecTunnelListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state ipsecTunnelListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_ipsec_tunnel_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := rmBFeLV.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]ipsecTunnelListDsModel_nnsRzDg_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := ipsecTunnelListDsModel_nnsRzDg_Config{}

			var1.AntiReplay = types.BoolPointerValue(var0.AntiReplay)

			var1.AutoKey = ipsecTunnelListDsModel_nnsRzDg_AutoKeyObject{}

			if len(var0.AutoKey.IkeGateways) == 0 {
				var1.AutoKey.IkeGateways = nil
			} else {
				var1.AutoKey.IkeGateways = make([]ipsecTunnelListDsModel_nnsRzDg_IkeGatewayObject, 0, len(var0.AutoKey.IkeGateways))
				for _, var2 := range var0.AutoKey.IkeGateways {
					var3 := ipsecTunnelListDsModel_nnsRzDg_IkeGatewayObject{}

					var3.Name = types.StringPointerValue(var2.Name)
					var1.AutoKey.IkeGateways = append(var1.AutoKey.IkeGateways, var3)
				}
			}

			var1.AutoKey.IpsecCryptoProfile = types.StringValue(var0.AutoKey.IpsecCryptoProfile)

			if len(var0.AutoKey.ProxyIdV6s) == 0 {
				var1.AutoKey.ProxyIdV6s = nil
			} else {
				var1.AutoKey.ProxyIdV6s = make([]ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6Object, 0, len(var0.AutoKey.ProxyIdV6s))
				for _, var4 := range var0.AutoKey.ProxyIdV6s {
					var5 := ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6Object{}

					var5.Local = types.StringPointerValue(var4.Local)

					var5.Name = types.StringValue(var4.Name)

					if var4.Protocol == nil {
						var5.Protocol = nil
					} else {
						var5.Protocol = &ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6ProtocolObject{}

						var5.Protocol.Number = types.Int64PointerValue(var4.Protocol.Number)

						if var4.Protocol.Tcp == nil {
							var5.Protocol.Tcp = nil
						} else {
							var5.Protocol.Tcp = &ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6TcpProtocolObject{}

							var5.Protocol.Tcp.LocalPort = types.Int64PointerValue(var4.Protocol.Tcp.LocalPort)

							var5.Protocol.Tcp.RemotePort = types.Int64PointerValue(var4.Protocol.Tcp.RemotePort)
						}

						if var4.Protocol.Udp == nil {
							var5.Protocol.Udp = nil
						} else {
							var5.Protocol.Udp = &ipsecTunnelListDsModel_nnsRzDg_ProxyIdV6UdpProtocolObject{}

							var5.Protocol.Udp.LocalPort = types.Int64PointerValue(var4.Protocol.Udp.LocalPort)

							var5.Protocol.Udp.RemotePort = types.Int64PointerValue(var4.Protocol.Udp.RemotePort)
						}
					}

					var5.Remote = types.StringPointerValue(var4.Remote)
					var1.AutoKey.ProxyIdV6s = append(var1.AutoKey.ProxyIdV6s, var5)
				}
			}

			if len(var0.AutoKey.ProxyIds) == 0 {
				var1.AutoKey.ProxyIds = nil
			} else {
				var1.AutoKey.ProxyIds = make([]ipsecTunnelListDsModel_nnsRzDg_ProxyIdObject, 0, len(var0.AutoKey.ProxyIds))
				for _, var6 := range var0.AutoKey.ProxyIds {
					var7 := ipsecTunnelListDsModel_nnsRzDg_ProxyIdObject{}

					var7.Local = types.StringPointerValue(var6.Local)

					var7.Name = types.StringValue(var6.Name)

					if var6.Protocol == nil {
						var7.Protocol = nil
					} else {
						var7.Protocol = &ipsecTunnelListDsModel_nnsRzDg_ProxyIdProtocolObject{}

						var7.Protocol.Number = types.Int64PointerValue(var6.Protocol.Number)

						if var6.Protocol.Tcp == nil {
							var7.Protocol.Tcp = nil
						} else {
							var7.Protocol.Tcp = &ipsecTunnelListDsModel_nnsRzDg_ProxyIdTcpProtocolObject{}

							var7.Protocol.Tcp.LocalPort = types.Int64PointerValue(var6.Protocol.Tcp.LocalPort)

							var7.Protocol.Tcp.RemotePort = types.Int64PointerValue(var6.Protocol.Tcp.RemotePort)
						}

						if var6.Protocol.Udp == nil {
							var7.Protocol.Udp = nil
						} else {
							var7.Protocol.Udp = &ipsecTunnelListDsModel_nnsRzDg_ProxyIdUdpProtocolObject{}

							var7.Protocol.Udp.LocalPort = types.Int64PointerValue(var6.Protocol.Udp.LocalPort)

							var7.Protocol.Udp.RemotePort = types.Int64PointerValue(var6.Protocol.Udp.RemotePort)
						}
					}

					var7.Remote = types.StringPointerValue(var6.Remote)
					var1.AutoKey.ProxyIds = append(var1.AutoKey.ProxyIds, var7)
				}
			}

			var1.CopyTos = types.BoolPointerValue(var0.CopyTos)

			var1.EnableGreEncapsulation = types.BoolPointerValue(var0.EnableGreEncapsulation)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			if var0.TunnelMonitor == nil {
				var1.TunnelMonitor = nil
			} else {
				var1.TunnelMonitor = &ipsecTunnelListDsModel_nnsRzDg_TunnelMonitorObject{}

				var1.TunnelMonitor.DestinationIp = types.StringValue(var0.TunnelMonitor.DestinationIp)

				var1.TunnelMonitor.Enable = types.BoolPointerValue(var0.TunnelMonitor.Enable)

				var1.TunnelMonitor.ProxyId = types.StringPointerValue(var0.TunnelMonitor.ProxyId)
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &ipsecTunnelDataSource{}
	_ datasource.DataSourceWithConfigure = &ipsecTunnelDataSource{}
)

func NewIpsecTunnelDataSource() datasource.DataSource {
	return &ipsecTunnelDataSource{}
}

type ipsecTunnelDataSource struct {
	client *scm.Client
}

// ipsecTunnelDsModel is the model.
type ipsecTunnelDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	AntiReplay             types.Bool                               `tfsdk:"anti_replay"`
	AutoKey                ipsecTunnelDsModel_nnsRzDg_AutoKeyObject `tfsdk:"auto_key"`
	CopyTos                types.Bool                               `tfsdk:"copy_tos"`
	EnableGreEncapsulation types.Bool                               `tfsdk:"enable_gre_encapsulation"`
	// omit input: id
	Name          types.String                                    `tfsdk:"name"`
	TunnelMonitor *ipsecTunnelDsModel_nnsRzDg_TunnelMonitorObject `tfsdk:"tunnel_monitor"`
}

type ipsecTunnelDsModel_nnsRzDg_AutoKeyObject struct {
	IkeGateways        []ipsecTunnelDsModel_nnsRzDg_IkeGatewayObject `tfsdk:"ike_gateways"`
	IpsecCryptoProfile types.String                                  `tfsdk:"ipsec_crypto_profile"`
	ProxyIdV6s         []ipsecTunnelDsModel_nnsRzDg_ProxyIdV6Object  `tfsdk:"proxy_id_v6s"`
	ProxyIds           []ipsecTunnelDsModel_nnsRzDg_ProxyIdObject    `tfsdk:"proxy_ids"`
}

type ipsecTunnelDsModel_nnsRzDg_IkeGatewayObject struct {
	Name types.String `tfsdk:"name"`
}

type ipsecTunnelDsModel_nnsRzDg_ProxyIdV6Object struct {
	Local    types.String                                        `tfsdk:"local"`
	Name     types.String                                        `tfsdk:"name"`
	Protocol *ipsecTunnelDsModel_nnsRzDg_ProxyIdV6ProtocolObject `tfsdk:"protocol"`
	Remote   types.String                                        `tfsdk:"remote"`
}

type ipsecTunnelDsModel_nnsRzDg_ProxyIdV6ProtocolObject struct {
	Number types.Int64                                            `tfsdk:"number"`
	Tcp    *ipsecTunnelDsModel_nnsRzDg_ProxyIdV6TcpProtocolObject `tfsdk:"tcp"`
	Udp    *ipsecTunnelDsModel_nnsRzDg_ProxyIdV6UdpProtocolObject `tfsdk:"udp"`
}

type ipsecTunnelDsModel_nnsRzDg_ProxyIdV6TcpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelDsModel_nnsRzDg_ProxyIdV6UdpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelDsModel_nnsRzDg_ProxyIdObject struct {
	Local    types.String                                      `tfsdk:"local"`
	Name     types.String                                      `tfsdk:"name"`
	Protocol *ipsecTunnelDsModel_nnsRzDg_ProxyIdProtocolObject `tfsdk:"protocol"`
	Remote   types.String                                      `tfsdk:"remote"`
}

type ipsecTunnelDsModel_nnsRzDg_ProxyIdProtocolObject struct {
	Number types.Int64                                          `tfsdk:"number"`
	Tcp    *ipsecTunnelDsModel_nnsRzDg_ProxyIdTcpProtocolObject `tfsdk:"tcp"`
	Udp    *ipsecTunnelDsModel_nnsRzDg_ProxyIdUdpProtocolObject `tfsdk:"udp"`
}

type ipsecTunnelDsModel_nnsRzDg_ProxyIdTcpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelDsModel_nnsRzDg_ProxyIdUdpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelDsModel_nnsRzDg_TunnelMonitorObject struct {
	DestinationIp types.String `tfsdk:"destination_ip"`
	Enable        types.Bool   `tfsdk:"enable"`
	ProxyId       types.String `tfsdk:"proxy_id"`
}

// Metadata returns the data source type name.
func (d *ipsecTunnelDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipsec_tunnel"
}

// Schema defines the schema for this data source.
func (d *ipsecTunnelDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"anti_replay":true, "auto_key":true, "copy_tos":true, "enable_gre_encapsulation":true, "id":true, "name":true, "tfid":true, "tunnel_monitor":true} forceNew:map[string]bool{"id":true}
			"anti_replay": dsschema.BoolAttribute{
				Description: "Enable Anti-Replay check on this tunnel.",
				Computed:    true,
			},
			"auto_key": dsschema.SingleNestedAttribute{
				Description: "The AutoKey param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"ike_gateway":true, "ipsec_crypto_profile":true, "proxy_id":true, "proxy_id_v6":true} forceNew:map[string]bool(nil)
					"ike_gateways": dsschema.ListNestedAttribute{
						Description: "The IkeGateways param.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
							},
						},
					},
					"ipsec_crypto_profile": dsschema.StringAttribute{
						Description: "The IpsecCryptoProfile param.",
						Computed:    true,
					},
					"proxy_id_v6s": dsschema.ListNestedAttribute{
						Description: "IPv6 type of proxy_id values.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"local":true, "name":true, "protocol":true, "remote":true} forceNew:map[string]bool(nil)
								"local": dsschema.StringAttribute{
									Description: "The Local param.",
									Computed:    true,
								},
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
								"protocol": dsschema.SingleNestedAttribute{
									Description: "The Protocol param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"number":true, "tcp":true, "udp":true} forceNew:map[string]bool(nil)
										"number": dsschema.Int64Attribute{
											Description: "IP protocol number. Value must be between 1 and 254.",
											Computed:    true,
										},
										"tcp": dsschema.SingleNestedAttribute{
											Description: "The Tcp param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
												"local_port": dsschema.Int64Attribute{
													Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
													Computed:    true,
												},
												"remote_port": dsschema.Int64Attribute{
													Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
													Computed:    true,
												},
											},
										},
										"udp": dsschema.SingleNestedAttribute{
											Description: "The Udp param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
												"local_port": dsschema.Int64Attribute{
													Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
													Computed:    true,
												},
												"remote_port": dsschema.Int64Attribute{
													Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
													Computed:    true,
												},
											},
										},
									},
								},
								"remote": dsschema.StringAttribute{
									Description: "The Remote param.",
									Computed:    true,
								},
							},
						},
					},
					"proxy_ids": dsschema.ListNestedAttribute{
						Description: "IPv4 type of proxy_id values.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"local":true, "name":true, "protocol":true, "remote":true} forceNew:map[string]bool(nil)
								"local": dsschema.StringAttribute{
									Description: "The Local param.",
									Computed:    true,
								},
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
								"protocol": dsschema.SingleNestedAttribute{
									Description: "The Protocol param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"number":true, "tcp":true, "udp":true} forceNew:map[string]bool(nil)
										"number": dsschema.Int64Attribute{
											Description: "IP protocol number. Value must be between 1 and 254.",
											Computed:    true,
										},
										"tcp": dsschema.SingleNestedAttribute{
											Description: "The Tcp param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
												"local_port": dsschema.Int64Attribute{
													Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
													Computed:    true,
												},
												"remote_port": dsschema.Int64Attribute{
													Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
													Computed:    true,
												},
											},
										},
										"udp": dsschema.SingleNestedAttribute{
											Description: "The Udp param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
												"local_port": dsschema.Int64Attribute{
													Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
													Computed:    true,
												},
												"remote_port": dsschema.Int64Attribute{
													Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
													Computed:    true,
												},
											},
										},
									},
								},
								"remote": dsschema.StringAttribute{
									Description: "The Remote param.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"copy_tos": dsschema.BoolAttribute{
				Description: "Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.",
				Computed:    true,
			},
			"enable_gre_encapsulation": dsschema.BoolAttribute{
				Description: "allow GRE over IPSec. Default: `false`.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"tunnel_monitor": dsschema.SingleNestedAttribute{
				Description: "The TunnelMonitor param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"destination_ip":true, "enable":true, "proxy_id":true} forceNew:map[string]bool(nil)
					"destination_ip": dsschema.StringAttribute{
						Description: "Destination IP to send ICMP probe.",
						Computed:    true,
					},
					"enable": dsschema.BoolAttribute{
						Description: "Enable tunnel monitoring on this tunnel. Default: `true`.",
						Computed:    true,
					},
					"proxy_id": dsschema.StringAttribute{
						Description: "Which proxy-id (or proxy-id-v6) the monitoring traffic will use.",
						Computed:    true,
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (d *ipsecTunnelDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *ipsecTunnelDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state ipsecTunnelDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_ipsec_tunnel",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := rmBFeLV.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AntiReplay = types.BoolPointerValue(ans.AntiReplay)

	state.AutoKey = ipsecTunnelDsModel_nnsRzDg_AutoKeyObject{}

	if len(ans.AutoKey.IkeGateways) == 0 {
		state.AutoKey.IkeGateways = nil
	} else {
		state.AutoKey.IkeGateways = make([]ipsecTunnelDsModel_nnsRzDg_IkeGatewayObject, 0, len(ans.AutoKey.IkeGateways))
		for _, var0 := range ans.AutoKey.IkeGateways {
			var1 := ipsecTunnelDsModel_nnsRzDg_IkeGatewayObject{}

			var1.Name = types.StringPointerValue(var0.Name)
			state.AutoKey.IkeGateways = append(state.AutoKey.IkeGateways, var1)
		}
	}

	state.AutoKey.IpsecCryptoProfile = types.StringValue(ans.AutoKey.IpsecCryptoProfile)

	if len(ans.AutoKey.ProxyIdV6s) == 0 {
		state.AutoKey.ProxyIdV6s = nil
	} else {
		state.AutoKey.ProxyIdV6s = make([]ipsecTunnelDsModel_nnsRzDg_ProxyIdV6Object, 0, len(ans.AutoKey.ProxyIdV6s))
		for _, var2 := range ans.AutoKey.ProxyIdV6s {
			var3 := ipsecTunnelDsModel_nnsRzDg_ProxyIdV6Object{}

			var3.Local = types.StringPointerValue(var2.Local)

			var3.Name = types.StringValue(var2.Name)

			if var2.Protocol == nil {
				var3.Protocol = nil
			} else {
				var3.Protocol = &ipsecTunnelDsModel_nnsRzDg_ProxyIdV6ProtocolObject{}

				var3.Protocol.Number = types.Int64PointerValue(var2.Protocol.Number)

				if var2.Protocol.Tcp == nil {
					var3.Protocol.Tcp = nil
				} else {
					var3.Protocol.Tcp = &ipsecTunnelDsModel_nnsRzDg_ProxyIdV6TcpProtocolObject{}

					var3.Protocol.Tcp.LocalPort = types.Int64PointerValue(var2.Protocol.Tcp.LocalPort)

					var3.Protocol.Tcp.RemotePort = types.Int64PointerValue(var2.Protocol.Tcp.RemotePort)
				}

				if var2.Protocol.Udp == nil {
					var3.Protocol.Udp = nil
				} else {
					var3.Protocol.Udp = &ipsecTunnelDsModel_nnsRzDg_ProxyIdV6UdpProtocolObject{}

					var3.Protocol.Udp.LocalPort = types.Int64PointerValue(var2.Protocol.Udp.LocalPort)

					var3.Protocol.Udp.RemotePort = types.Int64PointerValue(var2.Protocol.Udp.RemotePort)
				}
			}

			var3.Remote = types.StringPointerValue(var2.Remote)
			state.AutoKey.ProxyIdV6s = append(state.AutoKey.ProxyIdV6s, var3)
		}
	}

	if len(ans.AutoKey.ProxyIds) == 0 {
		state.AutoKey.ProxyIds = nil
	} else {
		state.AutoKey.ProxyIds = make([]ipsecTunnelDsModel_nnsRzDg_ProxyIdObject, 0, len(ans.AutoKey.ProxyIds))
		for _, var4 := range ans.AutoKey.ProxyIds {
			var5 := ipsecTunnelDsModel_nnsRzDg_ProxyIdObject{}

			var5.Local = types.StringPointerValue(var4.Local)

			var5.Name = types.StringValue(var4.Name)

			if var4.Protocol == nil {
				var5.Protocol = nil
			} else {
				var5.Protocol = &ipsecTunnelDsModel_nnsRzDg_ProxyIdProtocolObject{}

				var5.Protocol.Number = types.Int64PointerValue(var4.Protocol.Number)

				if var4.Protocol.Tcp == nil {
					var5.Protocol.Tcp = nil
				} else {
					var5.Protocol.Tcp = &ipsecTunnelDsModel_nnsRzDg_ProxyIdTcpProtocolObject{}

					var5.Protocol.Tcp.LocalPort = types.Int64PointerValue(var4.Protocol.Tcp.LocalPort)

					var5.Protocol.Tcp.RemotePort = types.Int64PointerValue(var4.Protocol.Tcp.RemotePort)
				}

				if var4.Protocol.Udp == nil {
					var5.Protocol.Udp = nil
				} else {
					var5.Protocol.Udp = &ipsecTunnelDsModel_nnsRzDg_ProxyIdUdpProtocolObject{}

					var5.Protocol.Udp.LocalPort = types.Int64PointerValue(var4.Protocol.Udp.LocalPort)

					var5.Protocol.Udp.RemotePort = types.Int64PointerValue(var4.Protocol.Udp.RemotePort)
				}
			}

			var5.Remote = types.StringPointerValue(var4.Remote)
			state.AutoKey.ProxyIds = append(state.AutoKey.ProxyIds, var5)
		}
	}

	state.CopyTos = types.BoolPointerValue(ans.CopyTos)

	state.EnableGreEncapsulation = types.BoolPointerValue(ans.EnableGreEncapsulation)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if ans.TunnelMonitor == nil {
		state.TunnelMonitor = nil
	} else {
		state.TunnelMonitor = &ipsecTunnelDsModel_nnsRzDg_TunnelMonitorObject{}

		state.TunnelMonitor.DestinationIp = types.StringValue(ans.TunnelMonitor.DestinationIp)

		state.TunnelMonitor.Enable = types.BoolPointerValue(ans.TunnelMonitor.Enable)

		state.TunnelMonitor.ProxyId = types.StringPointerValue(ans.TunnelMonitor.ProxyId)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &ipsecTunnelResource{}
	_ resource.ResourceWithConfigure   = &ipsecTunnelResource{}
	_ resource.ResourceWithImportState = &ipsecTunnelResource{}
)

func NewIpsecTunnelResource() resource.Resource {
	return &ipsecTunnelResource{}
}

type ipsecTunnelResource struct {
	client *scm.Client
}

// ipsecTunnelRsModel is the model.
type ipsecTunnelRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	AntiReplay             types.Bool                                      `tfsdk:"anti_replay"`
	AutoKey                ipsecTunnelRsModel_nnsRzDg_AutoKeyObject        `tfsdk:"auto_key"`
	CopyTos                types.Bool                                      `tfsdk:"copy_tos"`
	Device                 types.String                                    `tfsdk:"device"`
	EnableGreEncapsulation types.Bool                                      `tfsdk:"enable_gre_encapsulation"`
	Folder                 types.String                                    `tfsdk:"folder"`
	Id                     types.String                                    `tfsdk:"id"`
	Name                   types.String                                    `tfsdk:"name"`
	Snippet                types.String                                    `tfsdk:"snippet"`
	TunnelMonitor          *ipsecTunnelRsModel_nnsRzDg_TunnelMonitorObject `tfsdk:"tunnel_monitor"`

	// Output.
	// omit input: anti_replay
	// omit input: auto_key
	// omit input: copy_tos
	// omit input: enable_gre_encapsulation
	// omit input: id
	// omit input: name
	// omit input: tunnel_monitor
}

type ipsecTunnelRsModel_nnsRzDg_AutoKeyObject struct {
	IkeGateways        []ipsecTunnelRsModel_nnsRzDg_IkeGatewayObject `tfsdk:"ike_gateways"`
	IpsecCryptoProfile types.String                                  `tfsdk:"ipsec_crypto_profile"`
	ProxyIdV6s         []ipsecTunnelRsModel_nnsRzDg_ProxyIdV6Object  `tfsdk:"proxy_id_v6s"`
	ProxyIds           []ipsecTunnelRsModel_nnsRzDg_ProxyIdObject    `tfsdk:"proxy_ids"`
}

type ipsecTunnelRsModel_nnsRzDg_IkeGatewayObject struct {
	Name types.String `tfsdk:"name"`
}

type ipsecTunnelRsModel_nnsRzDg_ProxyIdV6Object struct {
	Local    types.String                                        `tfsdk:"local"`
	Name     types.String                                        `tfsdk:"name"`
	Protocol *ipsecTunnelRsModel_nnsRzDg_ProxyIdV6ProtocolObject `tfsdk:"protocol"`
	Remote   types.String                                        `tfsdk:"remote"`
}

type ipsecTunnelRsModel_nnsRzDg_ProxyIdV6ProtocolObject struct {
	Number types.Int64                                            `tfsdk:"number"`
	Tcp    *ipsecTunnelRsModel_nnsRzDg_ProxyIdV6TcpProtocolObject `tfsdk:"tcp"`
	Udp    *ipsecTunnelRsModel_nnsRzDg_ProxyIdV6UdpProtocolObject `tfsdk:"udp"`
}

type ipsecTunnelRsModel_nnsRzDg_ProxyIdV6TcpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelRsModel_nnsRzDg_ProxyIdV6UdpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelRsModel_nnsRzDg_ProxyIdObject struct {
	Local    types.String                                      `tfsdk:"local"`
	Name     types.String                                      `tfsdk:"name"`
	Protocol *ipsecTunnelRsModel_nnsRzDg_ProxyIdProtocolObject `tfsdk:"protocol"`
	Remote   types.String                                      `tfsdk:"remote"`
}

type ipsecTunnelRsModel_nnsRzDg_ProxyIdProtocolObject struct {
	Number types.Int64                                          `tfsdk:"number"`
	Tcp    *ipsecTunnelRsModel_nnsRzDg_ProxyIdTcpProtocolObject `tfsdk:"tcp"`
	Udp    *ipsecTunnelRsModel_nnsRzDg_ProxyIdUdpProtocolObject `tfsdk:"udp"`
}

type ipsecTunnelRsModel_nnsRzDg_ProxyIdTcpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelRsModel_nnsRzDg_ProxyIdUdpProtocolObject struct {
	LocalPort  types.Int64 `tfsdk:"local_port"`
	RemotePort types.Int64 `tfsdk:"remote_port"`
}

type ipsecTunnelRsModel_nnsRzDg_TunnelMonitorObject struct {
	DestinationIp types.String `tfsdk:"destination_ip"`
	Enable        types.Bool   `tfsdk:"enable"`
	ProxyId       types.String `tfsdk:"proxy_id"`
}

// Metadata returns the data source type name.
func (r *ipsecTunnelResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipsec_tunnel"
}

// Schema defines the schema for this data source.
func (r *ipsecTunnelResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"anti_replay":true, "auto_key":true, "copy_tos":true, "device":true, "enable_gre_encapsulation":true, "folder":true, "id":true, "name":true, "snippet":true, "tunnel_monitor":true} outputs:map[string]bool{"anti_replay":true, "auto_key":true, "copy_tos":true, "enable_gre_encapsulation":true, "id":true, "name":true, "tfid":true, "tunnel_monitor":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"anti_replay": rsschema.BoolAttribute{
				Description: "Enable Anti-Replay check on this tunnel.",
				Optional:    true,
			},
			"auto_key": rsschema.SingleNestedAttribute{
				Description: "The AutoKey param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"ike_gateway":true, "ipsec_crypto_profile":true, "proxy_id":true, "proxy_id_v6":true} outputs:map[string]bool{"ike_gateway":true, "ipsec_crypto_profile":true, "proxy_id":true, "proxy_id_v6":true} forceNew:map[string]bool(nil)
					"ike_gateways": rsschema.ListNestedAttribute{
						Description: "The IkeGateways param.",
						Required:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"name":true} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Optional:    true,
								},
							},
						},
					},
					"ipsec_crypto_profile": rsschema.StringAttribute{
						Description: "The IpsecCryptoProfile param.",
						Required:    true,
					},
					"proxy_id_v6s": rsschema.ListNestedAttribute{
						Description: "IPv6 type of proxy_id values.",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"local":true, "name":true, "protocol":true, "remote":true} outputs:map[string]bool{"local":true, "name":true, "protocol":true, "remote":true} forceNew:map[string]bool(nil)
								"local": rsschema.StringAttribute{
									Description: "The Local param.",
									Optional:    true,
								},
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Required:    true,
								},
								"protocol": rsschema.SingleNestedAttribute{
									Description: "The Protocol param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"number":true, "tcp":true, "udp":true} outputs:map[string]bool{"number":true, "tcp":true, "udp":true} forceNew:map[string]bool(nil)
										"number": rsschema.Int64Attribute{
											Description: "IP protocol number. Value must be between 1 and 254. Ensure that only one of the following is specified: `number`, `tcp`, `udp`",
											Optional:    true,
											Validators: []validator.Int64{
												int64validator.Between(1, 254),
												int64validator.ExactlyOneOf(
													path.MatchRelative(),
													path.MatchRelative().AtParent().AtName("tcp"),
													path.MatchRelative().AtParent().AtName("udp"),
												),
											},
										},
										"tcp": rsschema.SingleNestedAttribute{
											Description: "The Tcp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"local_port":true, "remote_port":true} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
												"local_port": rsschema.Int64Attribute{
													Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
													Optional:    true,
													Computed:    true,
													Default:     int64default.StaticInt64(0),
													Validators: []validator.Int64{
														int64validator.Between(0, 65535),
													},
												},
												"remote_port": rsschema.Int64Attribute{
													Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
													Optional:    true,
													Computed:    true,
													Default:     int64default.StaticInt64(0),
													Validators: []validator.Int64{
														int64validator.Between(0, 65535),
													},
												},
											},
										},
										"udp": rsschema.SingleNestedAttribute{
											Description: "The Udp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"local_port":true, "remote_port":true} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
												"local_port": rsschema.Int64Attribute{
													Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
													Optional:    true,
													Computed:    true,
													Default:     int64default.StaticInt64(0),
													Validators: []validator.Int64{
														int64validator.Between(0, 65535),
													},
												},
												"remote_port": rsschema.Int64Attribute{
													Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
													Optional:    true,
													Computed:    true,
													Default:     int64default.StaticInt64(0),
													Validators: []validator.Int64{
														int64validator.Between(0, 65535),
													},
												},
											},
										},
									},
								},
								"remote": rsschema.StringAttribute{
									Description: "The Remote param.",
									Optional:    true,
								},
							},
						},
					},
					"proxy_ids": rsschema.ListNestedAttribute{
						Description: "IPv4 type of proxy_id values.",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"local":true, "name":true, "protocol":true, "remote":true} outputs:map[string]bool{"local":true, "name":true, "protocol":true, "remote":true} forceNew:map[string]bool(nil)
								"local": rsschema.StringAttribute{
									Description: "The Local param.",
									Optional:    true,
								},
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Required:    true,
								},
								"protocol": rsschema.SingleNestedAttribute{
									Description: "The Protocol param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"number":true, "tcp":true, "udp":true} outputs:map[string]bool{"number":true, "tcp":true, "udp":true} forceNew:map[string]bool(nil)
										"number": rsschema.Int64Attribute{
											Description: "IP protocol number. Value must be between 1 and 254. Ensure that only one of the following is specified: `number`, `tcp`, `udp`",
											Optional:    true,
											Validators: []validator.Int64{
												int64validator.Between(1, 254),
												int64validator.ExactlyOneOf(
													path.MatchRelative(),
													path.MatchRelative().AtParent().AtName("tcp"),
													path.MatchRelative().AtParent().AtName("udp"),
												),
											},
										},
										"tcp": rsschema.SingleNestedAttribute{
											Description: "The Tcp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"local_port":true, "remote_port":true} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
												"local_port": rsschema.Int64Attribute{
													Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
													Optional:    true,
													Computed:    true,
													Default:     int64default.StaticInt64(0),
													Validators: []validator.Int64{
														int64validator.Between(0, 65535),
													},
												},
												"remote_port": rsschema.Int64Attribute{
													Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
													Optional:    true,
													Computed:    true,
													Default:     int64default.StaticInt64(0),
													Validators: []validator.Int64{
														int64validator.Between(0, 65535),
													},
												},
											},
										},
										"udp": rsschema.SingleNestedAttribute{
											Description: "The Udp param. Ensure that only one of the following is specified: `number`, `tcp`, `udp`",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"local_port":true, "remote_port":true} outputs:map[string]bool{"local_port":true, "remote_port":true} forceNew:map[string]bool(nil)
												"local_port": rsschema.Int64Attribute{
													Description: "The LocalPort param. Value must be between 0 and 65535. Default: `0`.",
													Optional:    true,
													Computed:    true,
													Default:     int64default.StaticInt64(0),
													Validators: []validator.Int64{
														int64validator.Between(0, 65535),
													},
												},
												"remote_port": rsschema.Int64Attribute{
													Description: "The RemotePort param. Value must be between 0 and 65535. Default: `0`.",
													Optional:    true,
													Computed:    true,
													Default:     int64default.StaticInt64(0),
													Validators: []validator.Int64{
														int64validator.Between(0, 65535),
													},
												},
											},
										},
									},
								},
								"remote": rsschema.StringAttribute{
									Description: "The Remote param.",
									Optional:    true,
								},
							},
						},
					},
				},
			},
			"copy_tos": rsschema.BoolAttribute{
				Description: "Copy IP TOS bits from inner packet to IPSec packet (not recommended). Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"enable_gre_encapsulation": rsschema.BoolAttribute{
				Description: "allow GRE over IPSec. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"tunnel_monitor": rsschema.SingleNestedAttribute{
				Description: "The TunnelMonitor param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"destination_ip":true, "enable":true, "proxy_id":true} outputs:map[string]bool{"destination_ip":true, "enable":true, "proxy_id":true} forceNew:map[string]bool(nil)
					"destination_ip": rsschema.StringAttribute{
						Description: "Destination IP to send ICMP probe.",
						Required:    true,
					},
					"enable": rsschema.BoolAttribute{
						Description: "Enable tunnel monitoring on this tunnel. Default: `true`.",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(true),
					},
					"proxy_id": rsschema.StringAttribute{
						Description: "Which proxy-id (or proxy-id-v6) the monitoring traffic will use.",
						Optional:    true,
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *ipsecTunnelResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *ipsecTunnelResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ipsecTunnelRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_ipsec_tunnel",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := rmBFeLV.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &nnsRzDg.Config{}

	input.Request.AntiReplay = state.AntiReplay.ValueBoolPointer()

	if len(state.AutoKey.IkeGateways) != 0 {
		input.Request.AutoKey.IkeGateways = make([]nnsRzDg.IkeGatewayObject, 0, len(state.AutoKey.IkeGateways))
		for _, var0 := range state.AutoKey.IkeGateways {
			var var1 nnsRzDg.IkeGatewayObject

			var1.Name = var0.Name.ValueStringPointer()
			input.Request.AutoKey.IkeGateways = append(input.Request.AutoKey.IkeGateways, var1)
		}
	}

	input.Request.AutoKey.IpsecCryptoProfile = state.AutoKey.IpsecCryptoProfile.ValueString()

	if len(state.AutoKey.ProxyIdV6s) != 0 {
		input.Request.AutoKey.ProxyIdV6s = make([]nnsRzDg.ProxyIdV6Object, 0, len(state.AutoKey.ProxyIdV6s))
		for _, var2 := range state.AutoKey.ProxyIdV6s {
			var var3 nnsRzDg.ProxyIdV6Object

			var3.Local = var2.Local.ValueStringPointer()

			var3.Name = var2.Name.ValueString()

			if var2.Protocol != nil {
				var3.Protocol = &nnsRzDg.ProxyIdV6ProtocolObject{}

				var3.Protocol.Number = var2.Protocol.Number.ValueInt64Pointer()

				if var2.Protocol.Tcp != nil {
					var3.Protocol.Tcp = &nnsRzDg.ProxyIdV6TcpProtocolObject{}

					var3.Protocol.Tcp.LocalPort = var2.Protocol.Tcp.LocalPort.ValueInt64Pointer()

					var3.Protocol.Tcp.RemotePort = var2.Protocol.Tcp.RemotePort.ValueInt64Pointer()
				}

				if var2.Protocol.Udp != nil {
					var3.Protocol.Udp = &nnsRzDg.ProxyIdV6UdpProtocolObject{}

					var3.Protocol.Udp.LocalPort = var2.Protocol.Udp.LocalPort.ValueInt64Pointer()

					var3.Protocol.Udp.RemotePort = var2.Protocol.Udp.RemotePort.ValueInt64Pointer()
				}
			}

			var3.Remote = var2.Remote.ValueStringPointer()
			input.Request.AutoKey.ProxyIdV6s = append(input.Request.AutoKey.ProxyIdV6s, var3)
		}
	}

	if len(state.AutoKey.ProxyIds) != 0 {
		input.Request.AutoKey.ProxyIds = make([]nnsRzDg.ProxyIdObject, 0, len(state.AutoKey.ProxyIds))
		for _, var4 := range state.AutoKey.ProxyIds {
			var var5 nnsRzDg.ProxyIdObject

			var5.Local = var4.Local.ValueStringPointer()

			var5.Name = var4.Name.ValueString()

			if var4.Protocol != nil {
				var5.Protocol = &nnsRzDg.ProxyIdProtocolObject{}

				var5.Protocol.Number = var4.Protocol.Number.ValueInt64Pointer()

				if var4.Protocol.Tcp != nil {
					var5.Protocol.Tcp = &nnsRzDg.ProxyIdTcpProtocolObject{}

					var5.Protocol.Tcp.LocalPort = var4.Protocol.Tcp.LocalPort.ValueInt64Pointer()

					var5.Protocol.Tcp.RemotePort = var4.Protocol.Tcp.RemotePort.ValueInt64Pointer()
				}

				if var4.Protocol.Udp != nil {
					var5.Protocol.Udp = &nnsRzDg.ProxyIdUdpProtocolObject{}

					var5.Protocol.Udp.LocalPort = var4.Protocol.Udp.LocalPort.ValueInt64Pointer()

					var5.Protocol.Udp.RemotePort = var4.Protocol.Udp.RemotePort.ValueInt64Pointer()
				}
			}

			var5.Remote = var4.Remote.ValueStringPointer()
			input.Request.AutoKey.ProxyIds = append(input.Request.AutoKey.ProxyIds, var5)
		}
	}

	input.Request.CopyTos = state.CopyTos.ValueBoolPointer()

	input.Request.EnableGreEncapsulation = state.EnableGreEncapsulation.ValueBoolPointer()

	input.Request.Name = state.Name.ValueString()

	if state.TunnelMonitor != nil {
		input.Request.TunnelMonitor = &nnsRzDg.TunnelMonitorObject{}

		input.Request.TunnelMonitor.DestinationIp = state.TunnelMonitor.DestinationIp.ValueString()

		input.Request.TunnelMonitor.Enable = state.TunnelMonitor.Enable.ValueBoolPointer()

		input.Request.TunnelMonitor.ProxyId = state.TunnelMonitor.ProxyId.ValueStringPointer()
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.AntiReplay = types.BoolPointerValue(ans.AntiReplay)

	state.AutoKey = ipsecTunnelRsModel_nnsRzDg_AutoKeyObject{}

	if len(ans.AutoKey.IkeGateways) == 0 {
		state.AutoKey.IkeGateways = nil
	} else {
		state.AutoKey.IkeGateways = make([]ipsecTunnelRsModel_nnsRzDg_IkeGatewayObject, 0, len(ans.AutoKey.IkeGateways))
		for _, var6 := range ans.AutoKey.IkeGateways {
			var7 := ipsecTunnelRsModel_nnsRzDg_IkeGatewayObject{}

			var7.Name = types.StringPointerValue(var6.Name)
			state.AutoKey.IkeGateways = append(state.AutoKey.IkeGateways, var7)
		}
	}

	state.AutoKey.IpsecCryptoProfile = types.StringValue(ans.AutoKey.IpsecCryptoProfile)

	if len(ans.AutoKey.ProxyIdV6s) == 0 {
		state.AutoKey.ProxyIdV6s = nil
	} else {
		state.AutoKey.ProxyIdV6s = make([]ipsecTunnelRsModel_nnsRzDg_ProxyIdV6Object, 0, len(ans.AutoKey.ProxyIdV6s))
		for _, var8 := range ans.AutoKey.ProxyIdV6s {
			var9 := ipsecTunnelRsModel_nnsRzDg_ProxyIdV6Object{}

			var9.Local = types.StringPointerValue(var8.Local)

			var9.Name = types.StringValue(var8.Name)

			if var8.Protocol == nil {
				var9.Protocol = nil
			} else {
				var9.Protocol = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6ProtocolObject{}

				var9.Protocol.Number = types.Int64PointerValue(var8.Protocol.Number)

				if var8.Protocol.Tcp == nil {
					var9.Protocol.Tcp = nil
				} else {
					var9.Protocol.Tcp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6TcpProtocolObject{}

					var9.Protocol.Tcp.LocalPort = types.Int64PointerValue(var8.Protocol.Tcp.LocalPort)

					var9.Protocol.Tcp.RemotePort = types.Int64PointerValue(var8.Protocol.Tcp.RemotePort)
				}

				if var8.Protocol.Udp == nil {
					var9.Protocol.Udp = nil
				} else {
					var9.Protocol.Udp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6UdpProtocolObject{}

					var9.Protocol.Udp.LocalPort = types.Int64PointerValue(var8.Protocol.Udp.LocalPort)

					var9.Protocol.Udp.RemotePort = types.Int64PointerValue(var8.Protocol.Udp.RemotePort)
				}
			}

			var9.Remote = types.StringPointerValue(var8.Remote)
			state.AutoKey.ProxyIdV6s = append(state.AutoKey.ProxyIdV6s, var9)
		}
	}

	if len(ans.AutoKey.ProxyIds) == 0 {
		state.AutoKey.ProxyIds = nil
	} else {
		state.AutoKey.ProxyIds = make([]ipsecTunnelRsModel_nnsRzDg_ProxyIdObject, 0, len(ans.AutoKey.ProxyIds))
		for _, var10 := range ans.AutoKey.ProxyIds {
			var11 := ipsecTunnelRsModel_nnsRzDg_ProxyIdObject{}

			var11.Local = types.StringPointerValue(var10.Local)

			var11.Name = types.StringValue(var10.Name)

			if var10.Protocol == nil {
				var11.Protocol = nil
			} else {
				var11.Protocol = &ipsecTunnelRsModel_nnsRzDg_ProxyIdProtocolObject{}

				var11.Protocol.Number = types.Int64PointerValue(var10.Protocol.Number)

				if var10.Protocol.Tcp == nil {
					var11.Protocol.Tcp = nil
				} else {
					var11.Protocol.Tcp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdTcpProtocolObject{}

					var11.Protocol.Tcp.LocalPort = types.Int64PointerValue(var10.Protocol.Tcp.LocalPort)

					var11.Protocol.Tcp.RemotePort = types.Int64PointerValue(var10.Protocol.Tcp.RemotePort)
				}

				if var10.Protocol.Udp == nil {
					var11.Protocol.Udp = nil
				} else {
					var11.Protocol.Udp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdUdpProtocolObject{}

					var11.Protocol.Udp.LocalPort = types.Int64PointerValue(var10.Protocol.Udp.LocalPort)

					var11.Protocol.Udp.RemotePort = types.Int64PointerValue(var10.Protocol.Udp.RemotePort)
				}
			}

			var11.Remote = types.StringPointerValue(var10.Remote)
			state.AutoKey.ProxyIds = append(state.AutoKey.ProxyIds, var11)
		}
	}

	state.CopyTos = types.BoolPointerValue(ans.CopyTos)

	state.EnableGreEncapsulation = types.BoolPointerValue(ans.EnableGreEncapsulation)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if ans.TunnelMonitor == nil {
		state.TunnelMonitor = nil
	} else {
		state.TunnelMonitor = &ipsecTunnelRsModel_nnsRzDg_TunnelMonitorObject{}

		state.TunnelMonitor.DestinationIp = types.StringValue(ans.TunnelMonitor.DestinationIp)

		state.TunnelMonitor.Enable = types.BoolPointerValue(ans.TunnelMonitor.Enable)

		state.TunnelMonitor.ProxyId = types.StringPointerValue(ans.TunnelMonitor.ProxyId)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *ipsecTunnelResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state ipsecTunnelRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_ipsec_tunnel",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := rmBFeLV.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.AntiReplay = types.BoolPointerValue(ans.AntiReplay)

	state.AutoKey = ipsecTunnelRsModel_nnsRzDg_AutoKeyObject{}

	if len(ans.AutoKey.IkeGateways) == 0 {
		state.AutoKey.IkeGateways = nil
	} else {
		state.AutoKey.IkeGateways = make([]ipsecTunnelRsModel_nnsRzDg_IkeGatewayObject, 0, len(ans.AutoKey.IkeGateways))
		for _, var0 := range ans.AutoKey.IkeGateways {
			var1 := ipsecTunnelRsModel_nnsRzDg_IkeGatewayObject{}

			var1.Name = types.StringPointerValue(var0.Name)
			state.AutoKey.IkeGateways = append(state.AutoKey.IkeGateways, var1)
		}
	}

	state.AutoKey.IpsecCryptoProfile = types.StringValue(ans.AutoKey.IpsecCryptoProfile)

	if len(ans.AutoKey.ProxyIdV6s) == 0 {
		state.AutoKey.ProxyIdV6s = nil
	} else {
		state.AutoKey.ProxyIdV6s = make([]ipsecTunnelRsModel_nnsRzDg_ProxyIdV6Object, 0, len(ans.AutoKey.ProxyIdV6s))
		for _, var2 := range ans.AutoKey.ProxyIdV6s {
			var3 := ipsecTunnelRsModel_nnsRzDg_ProxyIdV6Object{}

			var3.Local = types.StringPointerValue(var2.Local)

			var3.Name = types.StringValue(var2.Name)

			if var2.Protocol == nil {
				var3.Protocol = nil
			} else {
				var3.Protocol = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6ProtocolObject{}

				var3.Protocol.Number = types.Int64PointerValue(var2.Protocol.Number)

				if var2.Protocol.Tcp == nil {
					var3.Protocol.Tcp = nil
				} else {
					var3.Protocol.Tcp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6TcpProtocolObject{}

					var3.Protocol.Tcp.LocalPort = types.Int64PointerValue(var2.Protocol.Tcp.LocalPort)

					var3.Protocol.Tcp.RemotePort = types.Int64PointerValue(var2.Protocol.Tcp.RemotePort)
				}

				if var2.Protocol.Udp == nil {
					var3.Protocol.Udp = nil
				} else {
					var3.Protocol.Udp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6UdpProtocolObject{}

					var3.Protocol.Udp.LocalPort = types.Int64PointerValue(var2.Protocol.Udp.LocalPort)

					var3.Protocol.Udp.RemotePort = types.Int64PointerValue(var2.Protocol.Udp.RemotePort)
				}
			}

			var3.Remote = types.StringPointerValue(var2.Remote)
			state.AutoKey.ProxyIdV6s = append(state.AutoKey.ProxyIdV6s, var3)
		}
	}

	if len(ans.AutoKey.ProxyIds) == 0 {
		state.AutoKey.ProxyIds = nil
	} else {
		state.AutoKey.ProxyIds = make([]ipsecTunnelRsModel_nnsRzDg_ProxyIdObject, 0, len(ans.AutoKey.ProxyIds))
		for _, var4 := range ans.AutoKey.ProxyIds {
			var5 := ipsecTunnelRsModel_nnsRzDg_ProxyIdObject{}

			var5.Local = types.StringPointerValue(var4.Local)

			var5.Name = types.StringValue(var4.Name)

			if var4.Protocol == nil {
				var5.Protocol = nil
			} else {
				var5.Protocol = &ipsecTunnelRsModel_nnsRzDg_ProxyIdProtocolObject{}

				var5.Protocol.Number = types.Int64PointerValue(var4.Protocol.Number)

				if var4.Protocol.Tcp == nil {
					var5.Protocol.Tcp = nil
				} else {
					var5.Protocol.Tcp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdTcpProtocolObject{}

					var5.Protocol.Tcp.LocalPort = types.Int64PointerValue(var4.Protocol.Tcp.LocalPort)

					var5.Protocol.Tcp.RemotePort = types.Int64PointerValue(var4.Protocol.Tcp.RemotePort)
				}

				if var4.Protocol.Udp == nil {
					var5.Protocol.Udp = nil
				} else {
					var5.Protocol.Udp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdUdpProtocolObject{}

					var5.Protocol.Udp.LocalPort = types.Int64PointerValue(var4.Protocol.Udp.LocalPort)

					var5.Protocol.Udp.RemotePort = types.Int64PointerValue(var4.Protocol.Udp.RemotePort)
				}
			}

			var5.Remote = types.StringPointerValue(var4.Remote)
			state.AutoKey.ProxyIds = append(state.AutoKey.ProxyIds, var5)
		}
	}

	state.CopyTos = types.BoolPointerValue(ans.CopyTos)

	state.EnableGreEncapsulation = types.BoolPointerValue(ans.EnableGreEncapsulation)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if ans.TunnelMonitor == nil {
		state.TunnelMonitor = nil
	} else {
		state.TunnelMonitor = &ipsecTunnelRsModel_nnsRzDg_TunnelMonitorObject{}

		state.TunnelMonitor.DestinationIp = types.StringValue(ans.TunnelMonitor.DestinationIp)

		state.TunnelMonitor.Enable = types.BoolPointerValue(ans.TunnelMonitor.Enable)

		state.TunnelMonitor.ProxyId = types.StringPointerValue(ans.TunnelMonitor.ProxyId)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *ipsecTunnelResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state ipsecTunnelRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_ipsec_tunnel",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := rmBFeLV.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &nnsRzDg.Config{}

	input.Request.AntiReplay = plan.AntiReplay.ValueBoolPointer()

	if len(plan.AutoKey.IkeGateways) != 0 {
		input.Request.AutoKey.IkeGateways = make([]nnsRzDg.IkeGatewayObject, 0, len(plan.AutoKey.IkeGateways))
		for _, var0 := range plan.AutoKey.IkeGateways {
			var var1 nnsRzDg.IkeGatewayObject

			var1.Name = var0.Name.ValueStringPointer()
			input.Request.AutoKey.IkeGateways = append(input.Request.AutoKey.IkeGateways, var1)
		}
	}

	input.Request.AutoKey.IpsecCryptoProfile = plan.AutoKey.IpsecCryptoProfile.ValueString()

	if len(plan.AutoKey.ProxyIdV6s) != 0 {
		input.Request.AutoKey.ProxyIdV6s = make([]nnsRzDg.ProxyIdV6Object, 0, len(plan.AutoKey.ProxyIdV6s))
		for _, var2 := range plan.AutoKey.ProxyIdV6s {
			var var3 nnsRzDg.ProxyIdV6Object

			var3.Local = var2.Local.ValueStringPointer()

			var3.Name = var2.Name.ValueString()

			if var2.Protocol != nil {
				var3.Protocol = &nnsRzDg.ProxyIdV6ProtocolObject{}

				var3.Protocol.Number = var2.Protocol.Number.ValueInt64Pointer()

				if var2.Protocol.Tcp != nil {
					var3.Protocol.Tcp = &nnsRzDg.ProxyIdV6TcpProtocolObject{}

					var3.Protocol.Tcp.LocalPort = var2.Protocol.Tcp.LocalPort.ValueInt64Pointer()

					var3.Protocol.Tcp.RemotePort = var2.Protocol.Tcp.RemotePort.ValueInt64Pointer()
				}

				if var2.Protocol.Udp != nil {
					var3.Protocol.Udp = &nnsRzDg.ProxyIdV6UdpProtocolObject{}

					var3.Protocol.Udp.LocalPort = var2.Protocol.Udp.LocalPort.ValueInt64Pointer()

					var3.Protocol.Udp.RemotePort = var2.Protocol.Udp.RemotePort.ValueInt64Pointer()
				}
			}

			var3.Remote = var2.Remote.ValueStringPointer()
			input.Request.AutoKey.ProxyIdV6s = append(input.Request.AutoKey.ProxyIdV6s, var3)
		}
	}

	if len(plan.AutoKey.ProxyIds) != 0 {
		input.Request.AutoKey.ProxyIds = make([]nnsRzDg.ProxyIdObject, 0, len(plan.AutoKey.ProxyIds))
		for _, var4 := range plan.AutoKey.ProxyIds {
			var var5 nnsRzDg.ProxyIdObject

			var5.Local = var4.Local.ValueStringPointer()

			var5.Name = var4.Name.ValueString()

			if var4.Protocol != nil {
				var5.Protocol = &nnsRzDg.ProxyIdProtocolObject{}

				var5.Protocol.Number = var4.Protocol.Number.ValueInt64Pointer()

				if var4.Protocol.Tcp != nil {
					var5.Protocol.Tcp = &nnsRzDg.ProxyIdTcpProtocolObject{}

					var5.Protocol.Tcp.LocalPort = var4.Protocol.Tcp.LocalPort.ValueInt64Pointer()

					var5.Protocol.Tcp.RemotePort = var4.Protocol.Tcp.RemotePort.ValueInt64Pointer()
				}

				if var4.Protocol.Udp != nil {
					var5.Protocol.Udp = &nnsRzDg.ProxyIdUdpProtocolObject{}

					var5.Protocol.Udp.LocalPort = var4.Protocol.Udp.LocalPort.ValueInt64Pointer()

					var5.Protocol.Udp.RemotePort = var4.Protocol.Udp.RemotePort.ValueInt64Pointer()
				}
			}

			var5.Remote = var4.Remote.ValueStringPointer()
			input.Request.AutoKey.ProxyIds = append(input.Request.AutoKey.ProxyIds, var5)
		}
	}

	input.Request.CopyTos = plan.CopyTos.ValueBoolPointer()

	input.Request.EnableGreEncapsulation = plan.EnableGreEncapsulation.ValueBoolPointer()

	input.Request.Name = plan.Name.ValueString()

	if plan.TunnelMonitor != nil {
		input.Request.TunnelMonitor = &nnsRzDg.TunnelMonitorObject{}

		input.Request.TunnelMonitor.DestinationIp = plan.TunnelMonitor.DestinationIp.ValueString()

		input.Request.TunnelMonitor.Enable = plan.TunnelMonitor.Enable.ValueBoolPointer()

		input.Request.TunnelMonitor.ProxyId = plan.TunnelMonitor.ProxyId.ValueStringPointer()
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.AntiReplay = types.BoolPointerValue(ans.AntiReplay)

	state.AutoKey = ipsecTunnelRsModel_nnsRzDg_AutoKeyObject{}

	if len(ans.AutoKey.IkeGateways) == 0 {
		state.AutoKey.IkeGateways = nil
	} else {
		state.AutoKey.IkeGateways = make([]ipsecTunnelRsModel_nnsRzDg_IkeGatewayObject, 0, len(ans.AutoKey.IkeGateways))
		for _, var6 := range ans.AutoKey.IkeGateways {
			var7 := ipsecTunnelRsModel_nnsRzDg_IkeGatewayObject{}

			var7.Name = types.StringPointerValue(var6.Name)
			state.AutoKey.IkeGateways = append(state.AutoKey.IkeGateways, var7)
		}
	}

	state.AutoKey.IpsecCryptoProfile = types.StringValue(ans.AutoKey.IpsecCryptoProfile)

	if len(ans.AutoKey.ProxyIdV6s) == 0 {
		state.AutoKey.ProxyIdV6s = nil
	} else {
		state.AutoKey.ProxyIdV6s = make([]ipsecTunnelRsModel_nnsRzDg_ProxyIdV6Object, 0, len(ans.AutoKey.ProxyIdV6s))
		for _, var8 := range ans.AutoKey.ProxyIdV6s {
			var9 := ipsecTunnelRsModel_nnsRzDg_ProxyIdV6Object{}

			var9.Local = types.StringPointerValue(var8.Local)

			var9.Name = types.StringValue(var8.Name)

			if var8.Protocol == nil {
				var9.Protocol = nil
			} else {
				var9.Protocol = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6ProtocolObject{}

				var9.Protocol.Number = types.Int64PointerValue(var8.Protocol.Number)

				if var8.Protocol.Tcp == nil {
					var9.Protocol.Tcp = nil
				} else {
					var9.Protocol.Tcp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6TcpProtocolObject{}

					var9.Protocol.Tcp.LocalPort = types.Int64PointerValue(var8.Protocol.Tcp.LocalPort)

					var9.Protocol.Tcp.RemotePort = types.Int64PointerValue(var8.Protocol.Tcp.RemotePort)
				}

				if var8.Protocol.Udp == nil {
					var9.Protocol.Udp = nil
				} else {
					var9.Protocol.Udp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdV6UdpProtocolObject{}

					var9.Protocol.Udp.LocalPort = types.Int64PointerValue(var8.Protocol.Udp.LocalPort)

					var9.Protocol.Udp.RemotePort = types.Int64PointerValue(var8.Protocol.Udp.RemotePort)
				}
			}

			var9.Remote = types.StringPointerValue(var8.Remote)
			state.AutoKey.ProxyIdV6s = append(state.AutoKey.ProxyIdV6s, var9)
		}
	}

	if len(ans.AutoKey.ProxyIds) == 0 {
		state.AutoKey.ProxyIds = nil
	} else {
		state.AutoKey.ProxyIds = make([]ipsecTunnelRsModel_nnsRzDg_ProxyIdObject, 0, len(ans.AutoKey.ProxyIds))
		for _, var10 := range ans.AutoKey.ProxyIds {
			var11 := ipsecTunnelRsModel_nnsRzDg_ProxyIdObject{}

			var11.Local = types.StringPointerValue(var10.Local)

			var11.Name = types.StringValue(var10.Name)

			if var10.Protocol == nil {
				var11.Protocol = nil
			} else {
				var11.Protocol = &ipsecTunnelRsModel_nnsRzDg_ProxyIdProtocolObject{}

				var11.Protocol.Number = types.Int64PointerValue(var10.Protocol.Number)

				if var10.Protocol.Tcp == nil {
					var11.Protocol.Tcp = nil
				} else {
					var11.Protocol.Tcp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdTcpProtocolObject{}

					var11.Protocol.Tcp.LocalPort = types.Int64PointerValue(var10.Protocol.Tcp.LocalPort)

					var11.Protocol.Tcp.RemotePort = types.Int64PointerValue(var10.Protocol.Tcp.RemotePort)
				}

				if var10.Protocol.Udp == nil {
					var11.Protocol.Udp = nil
				} else {
					var11.Protocol.Udp = &ipsecTunnelRsModel_nnsRzDg_ProxyIdUdpProtocolObject{}

					var11.Protocol.Udp.LocalPort = types.Int64PointerValue(var10.Protocol.Udp.LocalPort)

					var11.Protocol.Udp.RemotePort = types.Int64PointerValue(var10.Protocol.Udp.RemotePort)
				}
			}

			var11.Remote = types.StringPointerValue(var10.Remote)
			state.AutoKey.ProxyIds = append(state.AutoKey.ProxyIds, var11)
		}
	}

	state.CopyTos = types.BoolPointerValue(ans.CopyTos)

	state.EnableGreEncapsulation = types.BoolPointerValue(ans.EnableGreEncapsulation)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if ans.TunnelMonitor == nil {
		state.TunnelMonitor = nil
	} else {
		state.TunnelMonitor = &ipsecTunnelRsModel_nnsRzDg_TunnelMonitorObject{}

		state.TunnelMonitor.DestinationIp = types.StringValue(ans.TunnelMonitor.DestinationIp)

		state.TunnelMonitor.Enable = types.BoolPointerValue(ans.TunnelMonitor.Enable)

		state.TunnelMonitor.ProxyId = types.StringPointerValue(ans.TunnelMonitor.ProxyId)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *ipsecTunnelResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_ipsec_tunnel",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := rmBFeLV.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *ipsecTunnelResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
