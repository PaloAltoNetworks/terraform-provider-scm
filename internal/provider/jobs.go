package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	mIAatvm "github.com/paloaltonetworks/scm-go/netsec/services/jobs"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &jobsListDataSource{}
	_ datasource.DataSourceWithConfigure = &jobsListDataSource{}
)

func NewJobsListDataSource() datasource.DataSource {
	return &jobsListDataSource{}
}

type jobsListDataSource struct {
	client *scm.Client
}

// jobsListDsModel is the model.
type jobsListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.

	// Output.
	Data   []jobsListDsModel_qFWAgJG_Config `tfsdk:"data"`
	Limit  types.Int64                      `tfsdk:"limit"`
	Offset types.Int64                      `tfsdk:"offset"`
	Total  types.Int64                      `tfsdk:"total"`
}

type jobsListDsModel_qFWAgJG_Config struct {
	Description types.String `tfsdk:"description"`
	DeviceName  types.String `tfsdk:"device_name"`
	EndTs       types.String `tfsdk:"end_ts"`
	Id          types.Int64  `tfsdk:"id"`
	JobResult   types.Int64  `tfsdk:"job_result"`
	JobStatus   types.Int64  `tfsdk:"job_status"`
	JobType     types.Int64  `tfsdk:"job_type"`
	ParentId    types.Int64  `tfsdk:"parent_id"`
	Percent     types.Int64  `tfsdk:"percent"`
	ResultStr   types.String `tfsdk:"result_str"`
	StartTs     types.String `tfsdk:"start_ts"`
	StatusStr   types.String `tfsdk:"status_str"`
	Summary     types.String `tfsdk:"summary"`
	TypeStr     types.String `tfsdk:"type_str"`
	Uname       types.String `tfsdk:"uname"`
}

// Metadata returns the data source type name.
func (d *jobsListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_jobs_list"
}

// Schema defines the schema for this listing data source.
func (d *jobsListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "device_name":true, "end_ts":true, "id":true, "job_result":true, "job_status":true, "job_type":true, "parent_id":true, "percent":true, "result_str":true, "start_ts":true, "status_str":true, "summary":true, "type_str":true, "uname":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "A description provided by the administrator or service account.",
							Computed:    true,
						},
						"device_name": dsschema.StringAttribute{
							Description: "The name of the device.",
							Computed:    true,
						},
						"end_ts": dsschema.StringAttribute{
							Description: "The timestamp indicating when the job was finished.",
							Computed:    true,
						},
						"id": dsschema.Int64Attribute{
							Description: "The job ID.",
							Computed:    true,
						},
						"job_result": dsschema.Int64Attribute{
							Description: "The job result.",
							Computed:    true,
						},
						"job_status": dsschema.Int64Attribute{
							Description: "The current status of the job.",
							Computed:    true,
						},
						"job_type": dsschema.Int64Attribute{
							Description: "The job type.",
							Computed:    true,
						},
						"parent_id": dsschema.Int64Attribute{
							Description: "The parent job ID.",
							Computed:    true,
						},
						"percent": dsschema.Int64Attribute{
							Description: "Job completion percentage. Value must be less than or equal to 100.",
							Computed:    true,
						},
						"result_str": dsschema.StringAttribute{
							Description: "The result of the job. String must be one of these: `\"OK\"`, `\"FAIL\"`, `\"PEND\"`, `\"WAIT\"`, `\"CANCELLED\"`.",
							Computed:    true,
						},
						"start_ts": dsschema.StringAttribute{
							Description: "The timestamp indicating when the job was created.",
							Computed:    true,
						},
						"status_str": dsschema.StringAttribute{
							Description: "The current status of the job. String must be one of these: `\"ACT\"`, `\"FIN\"`, `\"PEND\"`, `\"PUSHSENT\"`, `\"PUSHFAIL\"`.",
							Computed:    true,
						},
						"summary": dsschema.StringAttribute{
							Description: "The completion summary of the job.",
							Computed:    true,
						},
						"type_str": dsschema.StringAttribute{
							Description: "The job type. String must be one of these: `\"CommitAll\"`, `\"CommitAndPush\"`, `\"NGFW-Bootstrap-Push\"`, `\"Validate\"`.",
							Computed:    true,
						},
						"uname": dsschema.StringAttribute{
							Description: "The administrator or service account that created the job.",
							Computed:    true,
						},
					},
				},
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Computed:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *jobsListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *jobsListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state jobsListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_jobs_list",
		"terraform_provider_function": "Read",
	})

	// Prepare to run the command.
	svc := mIAatvm.NewClient(d.client)

	// Perform the operation.
	ans, err := svc.List(ctx)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString("x")

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]jobsListDsModel_qFWAgJG_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := jobsListDsModel_qFWAgJG_Config{}

			var1.Description = types.StringValue(var0.Description)

			var1.DeviceName = types.StringValue(var0.DeviceName)

			var1.EndTs = types.StringValue(var0.EndTs)

			var1.Id = types.Int64Value(var0.Id)

			var1.JobResult = types.Int64Value(var0.JobResult)

			var1.JobStatus = types.Int64Value(var0.JobStatus)

			var1.JobType = types.Int64Value(var0.JobType)

			var1.ParentId = types.Int64Value(var0.ParentId)

			var1.Percent = types.Int64Value(var0.Percent)

			var1.ResultStr = types.StringValue(var0.ResultStr)

			var1.StartTs = types.StringValue(var0.StartTs)

			var1.StatusStr = types.StringValue(var0.StatusStr)

			var1.Summary = types.StringValue(var0.Summary)

			var1.TypeStr = types.StringValue(var0.TypeStr)

			var1.Uname = types.StringValue(var0.Uname)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &jobsDataSource{}
	_ datasource.DataSourceWithConfigure = &jobsDataSource{}
)

func NewJobsDataSource() datasource.DataSource {
	return &jobsDataSource{}
}

type jobsDataSource struct {
	client *scm.Client
}

// jobsDsModel is the model.
type jobsDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.Int64 `tfsdk:"id"`

	// Output.
	Description types.String `tfsdk:"description"`
	DeviceName  types.String `tfsdk:"device_name"`
	EndTs       types.String `tfsdk:"end_ts"`
	// omit input: id
	JobResult types.Int64  `tfsdk:"job_result"`
	JobStatus types.Int64  `tfsdk:"job_status"`
	JobType   types.Int64  `tfsdk:"job_type"`
	ParentId  types.Int64  `tfsdk:"parent_id"`
	Percent   types.Int64  `tfsdk:"percent"`
	ResultStr types.String `tfsdk:"result_str"`
	StartTs   types.String `tfsdk:"start_ts"`
	StatusStr types.String `tfsdk:"status_str"`
	Summary   types.String `tfsdk:"summary"`
	TypeStr   types.String `tfsdk:"type_str"`
	Uname     types.String `tfsdk:"uname"`
}

// Metadata returns the data source type name.
func (d *jobsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_jobs"
}

// Schema defines the schema for this data source.
func (d *jobsDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"description":true, "device_name":true, "end_ts":true, "id":true, "job_result":true, "job_status":true, "job_type":true, "parent_id":true, "percent":true, "result_str":true, "start_ts":true, "status_str":true, "summary":true, "tfid":true, "type_str":true, "uname":true} forceNew:map[string]bool{"id":true}
			"description": dsschema.StringAttribute{
				Description: "A description provided by the administrator or service account.",
				Computed:    true,
			},
			"device_name": dsschema.StringAttribute{
				Description: "The name of the device.",
				Computed:    true,
			},
			"end_ts": dsschema.StringAttribute{
				Description: "The timestamp indicating when the job was finished.",
				Computed:    true,
			},
			"id": dsschema.Int64Attribute{
				Description: "The Id param.",
				Required:    true,
			},
			"job_result": dsschema.Int64Attribute{
				Description: "The job result.",
				Computed:    true,
			},
			"job_status": dsschema.Int64Attribute{
				Description: "The current status of the job.",
				Computed:    true,
			},
			"job_type": dsschema.Int64Attribute{
				Description: "The job type.",
				Computed:    true,
			},
			"parent_id": dsschema.Int64Attribute{
				Description: "The parent job ID.",
				Computed:    true,
			},
			"percent": dsschema.Int64Attribute{
				Description: "Job completion percentage. Value must be less than or equal to 100.",
				Computed:    true,
			},
			"result_str": dsschema.StringAttribute{
				Description: "The result of the job. String must be one of these: `\"OK\"`, `\"FAIL\"`, `\"PEND\"`, `\"WAIT\"`, `\"CANCELLED\"`.",
				Computed:    true,
			},
			"start_ts": dsschema.StringAttribute{
				Description: "The timestamp indicating when the job was created.",
				Computed:    true,
			},
			"status_str": dsschema.StringAttribute{
				Description: "The current status of the job. String must be one of these: `\"ACT\"`, `\"FIN\"`, `\"PEND\"`, `\"PUSHSENT\"`, `\"PUSHFAIL\"`.",
				Computed:    true,
			},
			"summary": dsschema.StringAttribute{
				Description: "The completion summary of the job.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"type_str": dsschema.StringAttribute{
				Description: "The job type. String must be one of these: `\"CommitAll\"`, `\"CommitAndPush\"`, `\"NGFW-Bootstrap-Push\"`, `\"Validate\"`.",
				Computed:    true,
			},
			"uname": dsschema.StringAttribute{
				Description: "The administrator or service account that created the job.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *jobsDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *jobsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state jobsDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_jobs",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueInt64(),
	})

	// Prepare to run the command.
	svc := mIAatvm.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := mIAatvm.ReadInput{}

	input.Id = state.Id.ValueInt64()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(strconv.FormatInt(input.Id, 10))

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringValue(ans.Description)

	state.DeviceName = types.StringValue(ans.DeviceName)

	state.EndTs = types.StringValue(ans.EndTs)

	state.Id = types.Int64Value(ans.Id)

	state.JobResult = types.Int64Value(ans.JobResult)

	state.JobStatus = types.Int64Value(ans.JobStatus)

	state.JobType = types.Int64Value(ans.JobType)

	state.ParentId = types.Int64Value(ans.ParentId)

	state.Percent = types.Int64Value(ans.Percent)

	state.ResultStr = types.StringValue(ans.ResultStr)

	state.StartTs = types.StringValue(ans.StartTs)

	state.StatusStr = types.StringValue(ans.StatusStr)

	state.Summary = types.StringValue(ans.Summary)

	state.TypeStr = types.StringValue(ans.TypeStr)

	state.Uname = types.StringValue(ans.Uname)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
