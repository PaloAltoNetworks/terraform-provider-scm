package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	lhPcfTR "github.com/paloaltonetworks/scm-go/netsec/services/labels/id"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source.
var (
	_ datasource.DataSource              = &labelsGetbyidResponseDataSource{}
	_ datasource.DataSourceWithConfigure = &labelsGetbyidResponseDataSource{}
)

func NewLabelsGetbyidResponseDataSource() datasource.DataSource {
	return &labelsGetbyidResponseDataSource{}
}

type labelsGetbyidResponseDataSource struct {
	client *scm.Client
}

// labelsGetbyidResponseDsModel is the model.
type labelsGetbyidResponseDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Description types.String `tfsdk:"description"`
	Folders     types.List   `tfsdk:"folders"`
	// omit input: id
	Name     types.String `tfsdk:"name"`
	Snippets types.List   `tfsdk:"snippets"`
}

// Metadata returns the data source type name.
func (d *labelsGetbyidResponseDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_labels_getbyid_response"
}

// Schema defines the schema for this data source.
func (d *labelsGetbyidResponseDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"description":true, "folders":true, "id":true, "name":true, "snippets":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"folders": dsschema.ListAttribute{
				Description: "The Folders param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"snippets": dsschema.ListAttribute{
				Description: "The Snippets param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *labelsGetbyidResponseDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *labelsGetbyidResponseDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state labelsGetbyidResponseDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_labels_getbyid_response",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := lhPcfTR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := lhPcfTR.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Folders)
	state.Folders = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Snippets)
	state.Snippets = var2
	resp.Diagnostics.Append(var3.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
