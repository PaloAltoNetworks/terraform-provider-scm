package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	quvWIWu "github.com/paloaltonetworks/scm-go/netsec/schemas/ldap/server/profiles"
	hHIIBxy "github.com/paloaltonetworks/scm-go/netsec/services/ldapserverprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &ldapServerProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &ldapServerProfileListDataSource{}
)

func NewLdapServerProfileListDataSource() datasource.DataSource {
	return &ldapServerProfileListDataSource{}
}

type ldapServerProfileListDataSource struct {
	client *scm.Client
}

// ldapServerProfileListDsModel is the model.
type ldapServerProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []ldapServerProfileListDsModel_quvWIWu_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type ldapServerProfileListDsModel_quvWIWu_Config struct {
	Base                    types.String                                        `tfsdk:"base"`
	BindDn                  types.String                                        `tfsdk:"bind_dn"`
	BindPassword            types.String                                        `tfsdk:"bind_password"`
	BindTimelimit           types.String                                        `tfsdk:"bind_timelimit"`
	Id                      types.String                                        `tfsdk:"id"`
	LdapType                types.String                                        `tfsdk:"ldap_type"`
	RetryInterval           types.Int64                                         `tfsdk:"retry_interval"`
	Servers                 []ldapServerProfileListDsModel_quvWIWu_ServerObject `tfsdk:"servers"`
	Ssl                     types.Bool                                          `tfsdk:"ssl"`
	Timelimit               types.Int64                                         `tfsdk:"timelimit"`
	VerifyServerCertificate types.Bool                                          `tfsdk:"verify_server_certificate"`
}

type ldapServerProfileListDsModel_quvWIWu_ServerObject struct {
	Address types.String `tfsdk:"address"`
	Name    types.String `tfsdk:"name"`
	Port    types.Int64  `tfsdk:"port"`
}

// Metadata returns the data source type name.
func (d *ldapServerProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ldap_server_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *ldapServerProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"base":true, "bind_dn":true, "bind_password":true, "bind_timelimit":true, "id":true, "ldap_type":true, "retry_interval":true, "server":true, "ssl":true, "timelimit":true, "verify_server_certificate":true} forceNew:map[string]bool(nil)
						"base": dsschema.StringAttribute{
							Description: "The Base param. String length must not exceed 255 characters.",
							Computed:    true,
						},
						"bind_dn": dsschema.StringAttribute{
							Description: "The BindDn param. String length must not exceed 255 characters.",
							Computed:    true,
						},
						"bind_password": dsschema.StringAttribute{
							Description: "The BindPassword param. String length must not exceed 121 characters.",
							Computed:    true,
							Sensitive:   true,
						},
						"bind_timelimit": dsschema.StringAttribute{
							Description: "The BindTimelimit param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"ldap_type": dsschema.StringAttribute{
							Description: "The LdapType param. String must be one of these: `\"active-directory\"`, `\"e-directory\"`, `\"sun\"`, `\"other\"`.",
							Computed:    true,
						},
						"retry_interval": dsschema.Int64Attribute{
							Description: "The RetryInterval param.",
							Computed:    true,
						},
						"servers": dsschema.ListNestedAttribute{
							Description: "The Servers param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"address":true, "name":true, "port":true} forceNew:map[string]bool(nil)
									"address": dsschema.StringAttribute{
										Description: "The Address param.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"port": dsschema.Int64Attribute{
										Description: "The Port param. Value must be between 1 and 65535.",
										Computed:    true,
									},
								},
							},
						},
						"ssl": dsschema.BoolAttribute{
							Description: "The Ssl param.",
							Computed:    true,
						},
						"timelimit": dsschema.Int64Attribute{
							Description: "The Timelimit param.",
							Computed:    true,
						},
						"verify_server_certificate": dsschema.BoolAttribute{
							Description: "The VerifyServerCertificate param.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *ldapServerProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *ldapServerProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state ldapServerProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_ldap_server_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := hHIIBxy.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := hHIIBxy.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]ldapServerProfileListDsModel_quvWIWu_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := ldapServerProfileListDsModel_quvWIWu_Config{}

			var1.Base = types.StringPointerValue(var0.Base)

			var1.BindDn = types.StringPointerValue(var0.BindDn)

			var1.BindPassword = types.StringPointerValue(var0.BindPassword)

			var1.BindTimelimit = types.StringPointerValue(var0.BindTimelimit)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.LdapType = types.StringPointerValue(var0.LdapType)

			var1.RetryInterval = types.Int64PointerValue(var0.RetryInterval)

			if len(var0.Servers) == 0 {
				var1.Servers = nil
			} else {
				var1.Servers = make([]ldapServerProfileListDsModel_quvWIWu_ServerObject, 0, len(var0.Servers))
				for _, var2 := range var0.Servers {
					var3 := ldapServerProfileListDsModel_quvWIWu_ServerObject{}

					var3.Address = types.StringPointerValue(var2.Address)

					var3.Name = types.StringPointerValue(var2.Name)

					var3.Port = types.Int64PointerValue(var2.Port)
					var1.Servers = append(var1.Servers, var3)
				}
			}

			var1.Ssl = types.BoolPointerValue(var0.Ssl)

			var1.Timelimit = types.Int64PointerValue(var0.Timelimit)

			var1.VerifyServerCertificate = types.BoolPointerValue(var0.VerifyServerCertificate)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &ldapServerProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &ldapServerProfileDataSource{}
)

func NewLdapServerProfileDataSource() datasource.DataSource {
	return &ldapServerProfileDataSource{}
}

type ldapServerProfileDataSource struct {
	client *scm.Client
}

// ldapServerProfileDsModel is the model.
type ldapServerProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Base          types.String `tfsdk:"base"`
	BindDn        types.String `tfsdk:"bind_dn"`
	BindPassword  types.String `tfsdk:"bind_password"`
	BindTimelimit types.String `tfsdk:"bind_timelimit"`
	// omit input: id
	LdapType                types.String                                    `tfsdk:"ldap_type"`
	RetryInterval           types.Int64                                     `tfsdk:"retry_interval"`
	Servers                 []ldapServerProfileDsModel_quvWIWu_ServerObject `tfsdk:"servers"`
	Ssl                     types.Bool                                      `tfsdk:"ssl"`
	Timelimit               types.Int64                                     `tfsdk:"timelimit"`
	VerifyServerCertificate types.Bool                                      `tfsdk:"verify_server_certificate"`
}

type ldapServerProfileDsModel_quvWIWu_ServerObject struct {
	Address types.String `tfsdk:"address"`
	Name    types.String `tfsdk:"name"`
	Port    types.Int64  `tfsdk:"port"`
}

// Metadata returns the data source type name.
func (d *ldapServerProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ldap_server_profile"
}

// Schema defines the schema for this data source.
func (d *ldapServerProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"base":true, "bind_dn":true, "bind_password":true, "bind_timelimit":true, "id":true, "ldap_type":true, "retry_interval":true, "server":true, "ssl":true, "tfid":true, "timelimit":true, "verify_server_certificate":true} forceNew:map[string]bool{"id":true}
			"base": dsschema.StringAttribute{
				Description: "The Base param. String length must not exceed 255 characters.",
				Computed:    true,
			},
			"bind_dn": dsschema.StringAttribute{
				Description: "The BindDn param. String length must not exceed 255 characters.",
				Computed:    true,
			},
			"bind_password": dsschema.StringAttribute{
				Description: "The BindPassword param. String length must not exceed 121 characters.",
				Computed:    true,
				Sensitive:   true,
			},
			"bind_timelimit": dsschema.StringAttribute{
				Description: "The BindTimelimit param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"ldap_type": dsschema.StringAttribute{
				Description: "The LdapType param. String must be one of these: `\"active-directory\"`, `\"e-directory\"`, `\"sun\"`, `\"other\"`.",
				Computed:    true,
			},
			"retry_interval": dsschema.Int64Attribute{
				Description: "The RetryInterval param.",
				Computed:    true,
			},
			"servers": dsschema.ListNestedAttribute{
				Description: "The Servers param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"address":true, "name":true, "port":true} forceNew:map[string]bool(nil)
						"address": dsschema.StringAttribute{
							Description: "The Address param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"port": dsschema.Int64Attribute{
							Description: "The Port param. Value must be between 1 and 65535.",
							Computed:    true,
						},
					},
				},
			},
			"ssl": dsschema.BoolAttribute{
				Description: "The Ssl param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"timelimit": dsschema.Int64Attribute{
				Description: "The Timelimit param.",
				Computed:    true,
			},
			"verify_server_certificate": dsschema.BoolAttribute{
				Description: "The VerifyServerCertificate param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *ldapServerProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *ldapServerProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state ldapServerProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_ldap_server_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := hHIIBxy.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := hHIIBxy.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Base = types.StringPointerValue(ans.Base)

	state.BindDn = types.StringPointerValue(ans.BindDn)

	state.BindPassword = types.StringPointerValue(ans.BindPassword)

	state.BindTimelimit = types.StringPointerValue(ans.BindTimelimit)

	state.Id = types.StringPointerValue(ans.Id)

	state.LdapType = types.StringPointerValue(ans.LdapType)

	state.RetryInterval = types.Int64PointerValue(ans.RetryInterval)

	if len(ans.Servers) == 0 {
		state.Servers = nil
	} else {
		state.Servers = make([]ldapServerProfileDsModel_quvWIWu_ServerObject, 0, len(ans.Servers))
		for _, var0 := range ans.Servers {
			var1 := ldapServerProfileDsModel_quvWIWu_ServerObject{}

			var1.Address = types.StringPointerValue(var0.Address)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.Port = types.Int64PointerValue(var0.Port)
			state.Servers = append(state.Servers, var1)
		}
	}

	state.Ssl = types.BoolPointerValue(ans.Ssl)

	state.Timelimit = types.Int64PointerValue(ans.Timelimit)

	state.VerifyServerCertificate = types.BoolPointerValue(ans.VerifyServerCertificate)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &ldapServerProfileResource{}
	_ resource.ResourceWithConfigure   = &ldapServerProfileResource{}
	_ resource.ResourceWithImportState = &ldapServerProfileResource{}
)

func NewLdapServerProfileResource() resource.Resource {
	return &ldapServerProfileResource{}
}

type ldapServerProfileResource struct {
	client *scm.Client
}

// ldapServerProfileRsModel is the model.
type ldapServerProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Base                    types.String                                    `tfsdk:"base"`
	BindDn                  types.String                                    `tfsdk:"bind_dn"`
	BindPassword            types.String                                    `tfsdk:"bind_password"`
	BindTimelimit           types.String                                    `tfsdk:"bind_timelimit"`
	Device                  types.String                                    `tfsdk:"device"`
	Folder                  types.String                                    `tfsdk:"folder"`
	Id                      types.String                                    `tfsdk:"id"`
	LdapType                types.String                                    `tfsdk:"ldap_type"`
	RetryInterval           types.Int64                                     `tfsdk:"retry_interval"`
	Servers                 []ldapServerProfileRsModel_quvWIWu_ServerObject `tfsdk:"servers"`
	Snippet                 types.String                                    `tfsdk:"snippet"`
	Ssl                     types.Bool                                      `tfsdk:"ssl"`
	Timelimit               types.Int64                                     `tfsdk:"timelimit"`
	VerifyServerCertificate types.Bool                                      `tfsdk:"verify_server_certificate"`

	// Output.
	// omit input: base
	// omit input: bind_dn
	// omit input: bind_password
	// omit input: bind_timelimit
	// omit input: id
	// omit input: ldap_type
	// omit input: retry_interval
	// omit input: servers
	// omit input: ssl
	// omit input: timelimit
	// omit input: verify_server_certificate
}

type ldapServerProfileRsModel_quvWIWu_ServerObject struct {
	Address types.String `tfsdk:"address"`
	Name    types.String `tfsdk:"name"`
	Port    types.Int64  `tfsdk:"port"`
}

// Metadata returns the data source type name.
func (r *ldapServerProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ldap_server_profile"
}

// Schema defines the schema for this data source.
func (r *ldapServerProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"base":true, "bind_dn":true, "bind_password":true, "bind_timelimit":true, "device":true, "folder":true, "id":true, "ldap_type":true, "retry_interval":true, "server":true, "snippet":true, "ssl":true, "timelimit":true, "verify_server_certificate":true} outputs:map[string]bool{"base":true, "bind_dn":true, "bind_password":true, "bind_timelimit":true, "id":true, "ldap_type":true, "retry_interval":true, "server":true, "ssl":true, "tfid":true, "timelimit":true, "verify_server_certificate":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"base": rsschema.StringAttribute{
				Description: "The Base param. String length must not exceed 255 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(255),
				},
			},
			"bind_dn": rsschema.StringAttribute{
				Description: "The BindDn param. String length must not exceed 255 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(255),
				},
			},
			"bind_password": rsschema.StringAttribute{
				Description: "The BindPassword param. String length must not exceed 121 characters.",
				Optional:    true,
				Sensitive:   true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(121),
				},
			},
			"bind_timelimit": rsschema.StringAttribute{
				Description: "The BindTimelimit param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"ldap_type": rsschema.StringAttribute{
				Description: "The LdapType param. String must be one of these: `\"active-directory\"`, `\"e-directory\"`, `\"sun\"`, `\"other\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("active-directory", "e-directory", "sun", "other"),
				},
			},
			"retry_interval": rsschema.Int64Attribute{
				Description: "The RetryInterval param.",
				Optional:    true,
			},
			"servers": rsschema.ListNestedAttribute{
				Description: "The Servers param.",
				Required:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"address":true, "name":true, "port":true} outputs:map[string]bool{"address":true, "name":true, "port":true} forceNew:map[string]bool(nil)
						"address": rsschema.StringAttribute{
							Description: "The Address param.",
							Optional:    true,
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
						"port": rsschema.Int64Attribute{
							Description: "The Port param. Value must be between 1 and 65535.",
							Optional:    true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"ssl": rsschema.BoolAttribute{
				Description: "The Ssl param.",
				Optional:    true,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"timelimit": rsschema.Int64Attribute{
				Description: "The Timelimit param.",
				Optional:    true,
			},
			"verify_server_certificate": rsschema.BoolAttribute{
				Description: "The VerifyServerCertificate param.",
				Optional:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *ldapServerProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *ldapServerProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ldapServerProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_ldap_server_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := hHIIBxy.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := hHIIBxy.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &quvWIWu.Config{}

	input.Request.Base = state.Base.ValueStringPointer()

	input.Request.BindDn = state.BindDn.ValueStringPointer()

	input.Request.BindPassword = state.BindPassword.ValueStringPointer()

	input.Request.BindTimelimit = state.BindTimelimit.ValueStringPointer()

	input.Request.LdapType = state.LdapType.ValueStringPointer()

	input.Request.RetryInterval = state.RetryInterval.ValueInt64Pointer()

	if len(state.Servers) != 0 {
		input.Request.Servers = make([]quvWIWu.ServerObject, 0, len(state.Servers))
		for _, var0 := range state.Servers {
			var var1 quvWIWu.ServerObject

			var1.Address = var0.Address.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()

			var1.Port = var0.Port.ValueInt64Pointer()
			input.Request.Servers = append(input.Request.Servers, var1)
		}
	}

	input.Request.Ssl = state.Ssl.ValueBoolPointer()

	input.Request.Timelimit = state.Timelimit.ValueInt64Pointer()

	input.Request.VerifyServerCertificate = state.VerifyServerCertificate.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Base = types.StringPointerValue(ans.Base)

	state.BindDn = types.StringPointerValue(ans.BindDn)

	state.BindPassword = types.StringPointerValue(ans.BindPassword)

	state.BindTimelimit = types.StringPointerValue(ans.BindTimelimit)

	state.Id = types.StringPointerValue(ans.Id)

	state.LdapType = types.StringPointerValue(ans.LdapType)

	state.RetryInterval = types.Int64PointerValue(ans.RetryInterval)

	if len(ans.Servers) == 0 {
		state.Servers = nil
	} else {
		state.Servers = make([]ldapServerProfileRsModel_quvWIWu_ServerObject, 0, len(ans.Servers))
		for _, var2 := range ans.Servers {
			var3 := ldapServerProfileRsModel_quvWIWu_ServerObject{}

			var3.Address = types.StringPointerValue(var2.Address)

			var3.Name = types.StringPointerValue(var2.Name)

			var3.Port = types.Int64PointerValue(var2.Port)
			state.Servers = append(state.Servers, var3)
		}
	}

	state.Ssl = types.BoolPointerValue(ans.Ssl)

	state.Timelimit = types.Int64PointerValue(ans.Timelimit)

	state.VerifyServerCertificate = types.BoolPointerValue(ans.VerifyServerCertificate)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *ldapServerProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state ldapServerProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_ldap_server_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := hHIIBxy.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := hHIIBxy.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Base = types.StringPointerValue(ans.Base)

	state.BindDn = types.StringPointerValue(ans.BindDn)

	state.BindPassword = types.StringPointerValue(ans.BindPassword)

	state.BindTimelimit = types.StringPointerValue(ans.BindTimelimit)

	state.Id = types.StringPointerValue(ans.Id)

	state.LdapType = types.StringPointerValue(ans.LdapType)

	state.RetryInterval = types.Int64PointerValue(ans.RetryInterval)

	if len(ans.Servers) == 0 {
		state.Servers = nil
	} else {
		state.Servers = make([]ldapServerProfileRsModel_quvWIWu_ServerObject, 0, len(ans.Servers))
		for _, var0 := range ans.Servers {
			var1 := ldapServerProfileRsModel_quvWIWu_ServerObject{}

			var1.Address = types.StringPointerValue(var0.Address)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.Port = types.Int64PointerValue(var0.Port)
			state.Servers = append(state.Servers, var1)
		}
	}

	state.Ssl = types.BoolPointerValue(ans.Ssl)

	state.Timelimit = types.Int64PointerValue(ans.Timelimit)

	state.VerifyServerCertificate = types.BoolPointerValue(ans.VerifyServerCertificate)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *ldapServerProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state ldapServerProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_ldap_server_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := hHIIBxy.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := hHIIBxy.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &quvWIWu.Config{}

	input.Request.Base = plan.Base.ValueStringPointer()

	input.Request.BindDn = plan.BindDn.ValueStringPointer()

	input.Request.BindPassword = plan.BindPassword.ValueStringPointer()

	input.Request.BindTimelimit = plan.BindTimelimit.ValueStringPointer()

	input.Request.LdapType = plan.LdapType.ValueStringPointer()

	input.Request.RetryInterval = plan.RetryInterval.ValueInt64Pointer()

	if len(plan.Servers) != 0 {
		input.Request.Servers = make([]quvWIWu.ServerObject, 0, len(plan.Servers))
		for _, var0 := range plan.Servers {
			var var1 quvWIWu.ServerObject

			var1.Address = var0.Address.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()

			var1.Port = var0.Port.ValueInt64Pointer()
			input.Request.Servers = append(input.Request.Servers, var1)
		}
	}

	input.Request.Ssl = plan.Ssl.ValueBoolPointer()

	input.Request.Timelimit = plan.Timelimit.ValueInt64Pointer()

	input.Request.VerifyServerCertificate = plan.VerifyServerCertificate.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Base = types.StringPointerValue(ans.Base)

	state.BindDn = types.StringPointerValue(ans.BindDn)

	state.BindPassword = types.StringPointerValue(ans.BindPassword)

	state.BindTimelimit = types.StringPointerValue(ans.BindTimelimit)

	state.Id = types.StringPointerValue(ans.Id)

	state.LdapType = types.StringPointerValue(ans.LdapType)

	state.RetryInterval = types.Int64PointerValue(ans.RetryInterval)

	if len(ans.Servers) == 0 {
		state.Servers = nil
	} else {
		state.Servers = make([]ldapServerProfileRsModel_quvWIWu_ServerObject, 0, len(ans.Servers))
		for _, var2 := range ans.Servers {
			var3 := ldapServerProfileRsModel_quvWIWu_ServerObject{}

			var3.Address = types.StringPointerValue(var2.Address)

			var3.Name = types.StringPointerValue(var2.Name)

			var3.Port = types.Int64PointerValue(var2.Port)
			state.Servers = append(state.Servers, var3)
		}
	}

	state.Ssl = types.BoolPointerValue(ans.Ssl)

	state.Timelimit = types.Int64PointerValue(ans.Timelimit)

	state.VerifyServerCertificate = types.BoolPointerValue(ans.VerifyServerCertificate)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *ldapServerProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_ldap_server_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := hHIIBxy.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := hHIIBxy.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *ldapServerProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
