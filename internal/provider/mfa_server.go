package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	oPPPeKY "github.com/paloaltonetworks/scm-go/netsec/schemas/mfa/servers"
	jhtSIUK "github.com/paloaltonetworks/scm-go/netsec/services/mfaservers"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source.
var (
	_ datasource.DataSource              = &mfaServerDataSource{}
	_ datasource.DataSourceWithConfigure = &mfaServerDataSource{}
)

func NewMfaServerDataSource() datasource.DataSource {
	return &mfaServerDataSource{}
}

type mfaServerDataSource struct {
	client *scm.Client
}

// mfaServerDsModel is the model.
type mfaServerDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	// omit input: id
	MfaCertProfile types.String                                  `tfsdk:"mfa_cert_profile"`
	MfaVendorType  *mfaServerDsModel_oPPPeKY_MfaVendorTypeObject `tfsdk:"mfa_vendor_type"`
	Name           types.String                                  `tfsdk:"name"`
}

type mfaServerDsModel_oPPPeKY_MfaVendorTypeObject struct {
	DuoSecurityV2      *mfaServerDsModel_oPPPeKY_DuoSecurityV2Object      `tfsdk:"duo_security_v2"`
	OktaAdaptiveV1     *mfaServerDsModel_oPPPeKY_OktaAdaptiveV1Object     `tfsdk:"okta_adaptive_v1"`
	PingIdentityV1     *mfaServerDsModel_oPPPeKY_PingIdentityV1Object     `tfsdk:"ping_identity_v1"`
	RsaSecuridAccessV1 *mfaServerDsModel_oPPPeKY_RsaSecuridAccessV1Object `tfsdk:"rsa_securid_access_v1"`
}

type mfaServerDsModel_oPPPeKY_DuoSecurityV2Object struct {
	DuoApiHost        types.String `tfsdk:"duo_api_host"`
	DuoBaseuri        types.String `tfsdk:"duo_baseuri"`
	DuoIntegrationKey types.String `tfsdk:"duo_integration_key"`
	DuoSecretKey      types.String `tfsdk:"duo_secret_key"`
	DuoTimeout        types.String `tfsdk:"duo_timeout"`
}

type mfaServerDsModel_oPPPeKY_OktaAdaptiveV1Object struct {
	OktaApiHost types.String `tfsdk:"okta_api_host"`
	OktaBaseuri types.String `tfsdk:"okta_baseuri"`
	OktaOrg     types.String `tfsdk:"okta_org"`
	OktaTimeout types.String `tfsdk:"okta_timeout"`
	OktaToken   types.String `tfsdk:"okta_token"`
}

type mfaServerDsModel_oPPPeKY_PingIdentityV1Object struct {
	PingApiHost  types.String `tfsdk:"ping_api_host"`
	PingBaseuri  types.String `tfsdk:"ping_baseuri"`
	PingOrg      types.String `tfsdk:"ping_org"`
	PingOrgAlias types.String `tfsdk:"ping_org_alias"`
	PingTimeout  types.String `tfsdk:"ping_timeout"`
	PingToken    types.String `tfsdk:"ping_token"`
}

type mfaServerDsModel_oPPPeKY_RsaSecuridAccessV1Object struct {
	RsaAccessid          types.String `tfsdk:"rsa_accessid"`
	RsaAccesskey         types.String `tfsdk:"rsa_accesskey"`
	RsaApiHost           types.String `tfsdk:"rsa_api_host"`
	RsaAssurancepolicyid types.String `tfsdk:"rsa_assurancepolicyid"`
	RsaBaseuri           types.String `tfsdk:"rsa_baseuri"`
	RsaTimeout           types.String `tfsdk:"rsa_timeout"`
}

// Metadata returns the data source type name.
func (d *mfaServerDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mfa_server"
}

// Schema defines the schema for this data source.
func (d *mfaServerDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"id":true, "mfa_cert_profile":true, "mfa_vendor_type":true, "name":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"mfa_cert_profile": dsschema.StringAttribute{
				Description: "The MfaCertProfile param.",
				Computed:    true,
			},
			"mfa_vendor_type": dsschema.SingleNestedAttribute{
				Description: "The MfaVendorType param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"duo_security_v2":true, "okta_adaptive_v1":true, "ping_identity_v1":true, "rsa_securid_access_v1":true} forceNew:map[string]bool(nil)
					"duo_security_v2": dsschema.SingleNestedAttribute{
						Description: "The DuoSecurityV2 param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"duo_api_host":true, "duo_baseuri":true, "duo_integration_key":true, "duo_secret_key":true, "duo_timeout":true} forceNew:map[string]bool(nil)
							"duo_api_host": dsschema.StringAttribute{
								Description: "The DuoApiHost param.",
								Computed:    true,
							},
							"duo_baseuri": dsschema.StringAttribute{
								Description: "The DuoBaseuri param.",
								Computed:    true,
							},
							"duo_integration_key": dsschema.StringAttribute{
								Description: "The DuoIntegrationKey param.",
								Computed:    true,
							},
							"duo_secret_key": dsschema.StringAttribute{
								Description: "The DuoSecretKey param.",
								Computed:    true,
							},
							"duo_timeout": dsschema.StringAttribute{
								Description: "The DuoTimeout param.",
								Computed:    true,
							},
						},
					},
					"okta_adaptive_v1": dsschema.SingleNestedAttribute{
						Description: "The OktaAdaptiveV1 param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"okta_api_host":true, "okta_baseuri":true, "okta_org":true, "okta_timeout":true, "okta_token":true} forceNew:map[string]bool(nil)
							"okta_api_host": dsschema.StringAttribute{
								Description: "The OktaApiHost param.",
								Computed:    true,
							},
							"okta_baseuri": dsschema.StringAttribute{
								Description: "The OktaBaseuri param.",
								Computed:    true,
							},
							"okta_org": dsschema.StringAttribute{
								Description: "The OktaOrg param.",
								Computed:    true,
							},
							"okta_timeout": dsschema.StringAttribute{
								Description: "The OktaTimeout param.",
								Computed:    true,
							},
							"okta_token": dsschema.StringAttribute{
								Description: "The OktaToken param.",
								Computed:    true,
							},
						},
					},
					"ping_identity_v1": dsschema.SingleNestedAttribute{
						Description: "The PingIdentityV1 param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"ping_api_host":true, "ping_baseuri":true, "ping_org":true, "ping_org_alias":true, "ping_timeout":true, "ping_token":true} forceNew:map[string]bool(nil)
							"ping_api_host": dsschema.StringAttribute{
								Description: "The PingApiHost param.",
								Computed:    true,
							},
							"ping_baseuri": dsschema.StringAttribute{
								Description: "The PingBaseuri param.",
								Computed:    true,
							},
							"ping_org": dsschema.StringAttribute{
								Description: "The PingOrg param.",
								Computed:    true,
							},
							"ping_org_alias": dsschema.StringAttribute{
								Description: "The PingOrgAlias param.",
								Computed:    true,
							},
							"ping_timeout": dsschema.StringAttribute{
								Description: "The PingTimeout param.",
								Computed:    true,
							},
							"ping_token": dsschema.StringAttribute{
								Description: "The PingToken param.",
								Computed:    true,
							},
						},
					},
					"rsa_securid_access_v1": dsschema.SingleNestedAttribute{
						Description: "The RsaSecuridAccessV1 param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"rsa_accessid":true, "rsa_accesskey":true, "rsa_api_host":true, "rsa_assurancepolicyid":true, "rsa_baseuri":true, "rsa_timeout":true} forceNew:map[string]bool(nil)
							"rsa_accessid": dsschema.StringAttribute{
								Description: "The RsaAccessid param.",
								Computed:    true,
							},
							"rsa_accesskey": dsschema.StringAttribute{
								Description: "The RsaAccesskey param.",
								Computed:    true,
							},
							"rsa_api_host": dsschema.StringAttribute{
								Description: "The RsaApiHost param.",
								Computed:    true,
							},
							"rsa_assurancepolicyid": dsschema.StringAttribute{
								Description: "The RsaAssurancepolicyid param.",
								Computed:    true,
							},
							"rsa_baseuri": dsschema.StringAttribute{
								Description: "The RsaBaseuri param.",
								Computed:    true,
							},
							"rsa_timeout": dsschema.StringAttribute{
								Description: "The RsaTimeout param.",
								Computed:    true,
							},
						},
					},
				},
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *mfaServerDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *mfaServerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state mfaServerDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_mfa_server",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := jhtSIUK.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := jhtSIUK.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	state.MfaCertProfile = types.StringValue(ans.MfaCertProfile)

	if ans.MfaVendorType == nil {
		state.MfaVendorType = nil
	} else {
		state.MfaVendorType = &mfaServerDsModel_oPPPeKY_MfaVendorTypeObject{}

		if ans.MfaVendorType.DuoSecurityV2 == nil {
			state.MfaVendorType.DuoSecurityV2 = nil
		} else {
			state.MfaVendorType.DuoSecurityV2 = &mfaServerDsModel_oPPPeKY_DuoSecurityV2Object{}

			state.MfaVendorType.DuoSecurityV2.DuoApiHost = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoApiHost)

			state.MfaVendorType.DuoSecurityV2.DuoBaseuri = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoBaseuri)

			state.MfaVendorType.DuoSecurityV2.DuoIntegrationKey = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoIntegrationKey)

			state.MfaVendorType.DuoSecurityV2.DuoSecretKey = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoSecretKey)

			state.MfaVendorType.DuoSecurityV2.DuoTimeout = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoTimeout)
		}

		if ans.MfaVendorType.OktaAdaptiveV1 == nil {
			state.MfaVendorType.OktaAdaptiveV1 = nil
		} else {
			state.MfaVendorType.OktaAdaptiveV1 = &mfaServerDsModel_oPPPeKY_OktaAdaptiveV1Object{}

			state.MfaVendorType.OktaAdaptiveV1.OktaApiHost = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaApiHost)

			state.MfaVendorType.OktaAdaptiveV1.OktaBaseuri = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaBaseuri)

			state.MfaVendorType.OktaAdaptiveV1.OktaOrg = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaOrg)

			state.MfaVendorType.OktaAdaptiveV1.OktaTimeout = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaTimeout)

			state.MfaVendorType.OktaAdaptiveV1.OktaToken = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaToken)
		}

		if ans.MfaVendorType.PingIdentityV1 == nil {
			state.MfaVendorType.PingIdentityV1 = nil
		} else {
			state.MfaVendorType.PingIdentityV1 = &mfaServerDsModel_oPPPeKY_PingIdentityV1Object{}

			state.MfaVendorType.PingIdentityV1.PingApiHost = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingApiHost)

			state.MfaVendorType.PingIdentityV1.PingBaseuri = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingBaseuri)

			state.MfaVendorType.PingIdentityV1.PingOrg = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingOrg)

			state.MfaVendorType.PingIdentityV1.PingOrgAlias = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingOrgAlias)

			state.MfaVendorType.PingIdentityV1.PingTimeout = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingTimeout)

			state.MfaVendorType.PingIdentityV1.PingToken = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingToken)
		}

		if ans.MfaVendorType.RsaSecuridAccessV1 == nil {
			state.MfaVendorType.RsaSecuridAccessV1 = nil
		} else {
			state.MfaVendorType.RsaSecuridAccessV1 = &mfaServerDsModel_oPPPeKY_RsaSecuridAccessV1Object{}

			state.MfaVendorType.RsaSecuridAccessV1.RsaAccessid = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAccessid)

			state.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey)

			state.MfaVendorType.RsaSecuridAccessV1.RsaApiHost = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaApiHost)

			state.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid)

			state.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri)

			state.MfaVendorType.RsaSecuridAccessV1.RsaTimeout = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaTimeout)
		}
	}

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &mfaServerResource{}
	_ resource.ResourceWithConfigure   = &mfaServerResource{}
	_ resource.ResourceWithImportState = &mfaServerResource{}
)

func NewMfaServerResource() resource.Resource {
	return &mfaServerResource{}
}

type mfaServerResource struct {
	client *scm.Client
}

// mfaServerRsModel is the model.
type mfaServerRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device         types.String                                  `tfsdk:"device"`
	Folder         types.String                                  `tfsdk:"folder"`
	Id             types.String                                  `tfsdk:"id"`
	MfaCertProfile types.String                                  `tfsdk:"mfa_cert_profile"`
	MfaVendorType  *mfaServerRsModel_oPPPeKY_MfaVendorTypeObject `tfsdk:"mfa_vendor_type"`
	Name           types.String                                  `tfsdk:"name"`
	Snippet        types.String                                  `tfsdk:"snippet"`

	// Output.
	// omit input: id
	// omit input: mfa_cert_profile
	// omit input: mfa_vendor_type
	// omit input: name
}

type mfaServerRsModel_oPPPeKY_MfaVendorTypeObject struct {
	DuoSecurityV2      *mfaServerRsModel_oPPPeKY_DuoSecurityV2Object      `tfsdk:"duo_security_v2"`
	OktaAdaptiveV1     *mfaServerRsModel_oPPPeKY_OktaAdaptiveV1Object     `tfsdk:"okta_adaptive_v1"`
	PingIdentityV1     *mfaServerRsModel_oPPPeKY_PingIdentityV1Object     `tfsdk:"ping_identity_v1"`
	RsaSecuridAccessV1 *mfaServerRsModel_oPPPeKY_RsaSecuridAccessV1Object `tfsdk:"rsa_securid_access_v1"`
}

type mfaServerRsModel_oPPPeKY_DuoSecurityV2Object struct {
	DuoApiHost        types.String `tfsdk:"duo_api_host"`
	DuoBaseuri        types.String `tfsdk:"duo_baseuri"`
	DuoIntegrationKey types.String `tfsdk:"duo_integration_key"`
	DuoSecretKey      types.String `tfsdk:"duo_secret_key"`
	DuoTimeout        types.String `tfsdk:"duo_timeout"`
}

type mfaServerRsModel_oPPPeKY_OktaAdaptiveV1Object struct {
	OktaApiHost types.String `tfsdk:"okta_api_host"`
	OktaBaseuri types.String `tfsdk:"okta_baseuri"`
	OktaOrg     types.String `tfsdk:"okta_org"`
	OktaTimeout types.String `tfsdk:"okta_timeout"`
	OktaToken   types.String `tfsdk:"okta_token"`
}

type mfaServerRsModel_oPPPeKY_PingIdentityV1Object struct {
	PingApiHost  types.String `tfsdk:"ping_api_host"`
	PingBaseuri  types.String `tfsdk:"ping_baseuri"`
	PingOrg      types.String `tfsdk:"ping_org"`
	PingOrgAlias types.String `tfsdk:"ping_org_alias"`
	PingTimeout  types.String `tfsdk:"ping_timeout"`
	PingToken    types.String `tfsdk:"ping_token"`
}

type mfaServerRsModel_oPPPeKY_RsaSecuridAccessV1Object struct {
	RsaAccessid          types.String `tfsdk:"rsa_accessid"`
	RsaAccesskey         types.String `tfsdk:"rsa_accesskey"`
	RsaApiHost           types.String `tfsdk:"rsa_api_host"`
	RsaAssurancepolicyid types.String `tfsdk:"rsa_assurancepolicyid"`
	RsaBaseuri           types.String `tfsdk:"rsa_baseuri"`
	RsaTimeout           types.String `tfsdk:"rsa_timeout"`
}

// Metadata returns the data source type name.
func (r *mfaServerResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_mfa_server"
}

// Schema defines the schema for this data source.
func (r *mfaServerResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "id":true, "mfa_cert_profile":true, "mfa_vendor_type":true, "name":true, "snippet":true} outputs:map[string]bool{"id":true, "mfa_cert_profile":true, "mfa_vendor_type":true, "name":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"mfa_cert_profile": rsschema.StringAttribute{
				Description: "The MfaCertProfile param.",
				Required:    true,
			},
			"mfa_vendor_type": rsschema.SingleNestedAttribute{
				Description: "The MfaVendorType param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"duo_security_v2":true, "okta_adaptive_v1":true, "ping_identity_v1":true, "rsa_securid_access_v1":true} outputs:map[string]bool{"duo_security_v2":true, "okta_adaptive_v1":true, "ping_identity_v1":true, "rsa_securid_access_v1":true} forceNew:map[string]bool(nil)
					"duo_security_v2": rsschema.SingleNestedAttribute{
						Description: "The DuoSecurityV2 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`",
						Optional:    true,
						Validators: []validator.Object{
							objectvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("okta_adaptive_v1"),
								path.MatchRelative().AtParent().AtName("ping_identity_v1"),
								path.MatchRelative().AtParent().AtName("rsa_securid_access_v1"),
							),
						},
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"duo_api_host":true, "duo_baseuri":true, "duo_integration_key":true, "duo_secret_key":true, "duo_timeout":true} outputs:map[string]bool{"duo_api_host":true, "duo_baseuri":true, "duo_integration_key":true, "duo_secret_key":true, "duo_timeout":true} forceNew:map[string]bool(nil)
							"duo_api_host": rsschema.StringAttribute{
								Description: "The DuoApiHost param.",
								Optional:    true,
							},
							"duo_baseuri": rsschema.StringAttribute{
								Description: "The DuoBaseuri param.",
								Optional:    true,
							},
							"duo_integration_key": rsschema.StringAttribute{
								Description: "The DuoIntegrationKey param.",
								Optional:    true,
							},
							"duo_secret_key": rsschema.StringAttribute{
								Description: "The DuoSecretKey param.",
								Optional:    true,
							},
							"duo_timeout": rsschema.StringAttribute{
								Description: "The DuoTimeout param.",
								Optional:    true,
							},
						},
					},
					"okta_adaptive_v1": rsschema.SingleNestedAttribute{
						Description: "The OktaAdaptiveV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"okta_api_host":true, "okta_baseuri":true, "okta_org":true, "okta_timeout":true, "okta_token":true} outputs:map[string]bool{"okta_api_host":true, "okta_baseuri":true, "okta_org":true, "okta_timeout":true, "okta_token":true} forceNew:map[string]bool(nil)
							"okta_api_host": rsschema.StringAttribute{
								Description: "The OktaApiHost param.",
								Optional:    true,
							},
							"okta_baseuri": rsschema.StringAttribute{
								Description: "The OktaBaseuri param.",
								Optional:    true,
							},
							"okta_org": rsschema.StringAttribute{
								Description: "The OktaOrg param.",
								Optional:    true,
							},
							"okta_timeout": rsschema.StringAttribute{
								Description: "The OktaTimeout param.",
								Optional:    true,
							},
							"okta_token": rsschema.StringAttribute{
								Description: "The OktaToken param.",
								Optional:    true,
							},
						},
					},
					"ping_identity_v1": rsschema.SingleNestedAttribute{
						Description: "The PingIdentityV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"ping_api_host":true, "ping_baseuri":true, "ping_org":true, "ping_org_alias":true, "ping_timeout":true, "ping_token":true} outputs:map[string]bool{"ping_api_host":true, "ping_baseuri":true, "ping_org":true, "ping_org_alias":true, "ping_timeout":true, "ping_token":true} forceNew:map[string]bool(nil)
							"ping_api_host": rsschema.StringAttribute{
								Description: "The PingApiHost param.",
								Optional:    true,
							},
							"ping_baseuri": rsschema.StringAttribute{
								Description: "The PingBaseuri param.",
								Optional:    true,
							},
							"ping_org": rsschema.StringAttribute{
								Description: "The PingOrg param.",
								Optional:    true,
							},
							"ping_org_alias": rsschema.StringAttribute{
								Description: "The PingOrgAlias param.",
								Optional:    true,
							},
							"ping_timeout": rsschema.StringAttribute{
								Description: "The PingTimeout param.",
								Optional:    true,
							},
							"ping_token": rsschema.StringAttribute{
								Description: "The PingToken param.",
								Optional:    true,
							},
						},
					},
					"rsa_securid_access_v1": rsschema.SingleNestedAttribute{
						Description: "The RsaSecuridAccessV1 param. Ensure that only one of the following is specified: `duo_security_v2`, `okta_adaptive_v1`, `ping_identity_v1`, `rsa_securid_access_v1`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"rsa_accessid":true, "rsa_accesskey":true, "rsa_api_host":true, "rsa_assurancepolicyid":true, "rsa_baseuri":true, "rsa_timeout":true} outputs:map[string]bool{"rsa_accessid":true, "rsa_accesskey":true, "rsa_api_host":true, "rsa_assurancepolicyid":true, "rsa_baseuri":true, "rsa_timeout":true} forceNew:map[string]bool(nil)
							"rsa_accessid": rsschema.StringAttribute{
								Description: "The RsaAccessid param.",
								Optional:    true,
							},
							"rsa_accesskey": rsschema.StringAttribute{
								Description: "The RsaAccesskey param.",
								Optional:    true,
							},
							"rsa_api_host": rsschema.StringAttribute{
								Description: "The RsaApiHost param.",
								Optional:    true,
							},
							"rsa_assurancepolicyid": rsschema.StringAttribute{
								Description: "The RsaAssurancepolicyid param.",
								Optional:    true,
							},
							"rsa_baseuri": rsschema.StringAttribute{
								Description: "The RsaBaseuri param.",
								Optional:    true,
							},
							"rsa_timeout": rsschema.StringAttribute{
								Description: "The RsaTimeout param.",
								Optional:    true,
							},
						},
					},
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *mfaServerResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *mfaServerResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state mfaServerRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_mfa_server",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := jhtSIUK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := jhtSIUK.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &oPPPeKY.Config{}

	input.Request.MfaCertProfile = state.MfaCertProfile.ValueString()

	if state.MfaVendorType != nil {
		input.Request.MfaVendorType = &oPPPeKY.MfaVendorTypeObject{}

		if state.MfaVendorType.DuoSecurityV2 != nil {
			input.Request.MfaVendorType.DuoSecurityV2 = &oPPPeKY.DuoSecurityV2Object{}

			input.Request.MfaVendorType.DuoSecurityV2.DuoApiHost = state.MfaVendorType.DuoSecurityV2.DuoApiHost.ValueStringPointer()

			input.Request.MfaVendorType.DuoSecurityV2.DuoBaseuri = state.MfaVendorType.DuoSecurityV2.DuoBaseuri.ValueStringPointer()

			input.Request.MfaVendorType.DuoSecurityV2.DuoIntegrationKey = state.MfaVendorType.DuoSecurityV2.DuoIntegrationKey.ValueStringPointer()

			input.Request.MfaVendorType.DuoSecurityV2.DuoSecretKey = state.MfaVendorType.DuoSecurityV2.DuoSecretKey.ValueStringPointer()

			input.Request.MfaVendorType.DuoSecurityV2.DuoTimeout = state.MfaVendorType.DuoSecurityV2.DuoTimeout.ValueStringPointer()
		}

		if state.MfaVendorType.OktaAdaptiveV1 != nil {
			input.Request.MfaVendorType.OktaAdaptiveV1 = &oPPPeKY.OktaAdaptiveV1Object{}

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaApiHost = state.MfaVendorType.OktaAdaptiveV1.OktaApiHost.ValueStringPointer()

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaBaseuri = state.MfaVendorType.OktaAdaptiveV1.OktaBaseuri.ValueStringPointer()

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaOrg = state.MfaVendorType.OktaAdaptiveV1.OktaOrg.ValueStringPointer()

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaTimeout = state.MfaVendorType.OktaAdaptiveV1.OktaTimeout.ValueStringPointer()

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaToken = state.MfaVendorType.OktaAdaptiveV1.OktaToken.ValueStringPointer()
		}

		if state.MfaVendorType.PingIdentityV1 != nil {
			input.Request.MfaVendorType.PingIdentityV1 = &oPPPeKY.PingIdentityV1Object{}

			input.Request.MfaVendorType.PingIdentityV1.PingApiHost = state.MfaVendorType.PingIdentityV1.PingApiHost.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingBaseuri = state.MfaVendorType.PingIdentityV1.PingBaseuri.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingOrg = state.MfaVendorType.PingIdentityV1.PingOrg.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingOrgAlias = state.MfaVendorType.PingIdentityV1.PingOrgAlias.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingTimeout = state.MfaVendorType.PingIdentityV1.PingTimeout.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingToken = state.MfaVendorType.PingIdentityV1.PingToken.ValueStringPointer()
		}

		if state.MfaVendorType.RsaSecuridAccessV1 != nil {
			input.Request.MfaVendorType.RsaSecuridAccessV1 = &oPPPeKY.RsaSecuridAccessV1Object{}

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaAccessid = state.MfaVendorType.RsaSecuridAccessV1.RsaAccessid.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey = state.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaApiHost = state.MfaVendorType.RsaSecuridAccessV1.RsaApiHost.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid = state.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri = state.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaTimeout = state.MfaVendorType.RsaSecuridAccessV1.RsaTimeout.ValueStringPointer()
		}
	}

	input.Request.Name = state.Name.ValueString()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	state.MfaCertProfile = types.StringValue(ans.MfaCertProfile)

	if ans.MfaVendorType == nil {
		state.MfaVendorType = nil
	} else {
		state.MfaVendorType = &mfaServerRsModel_oPPPeKY_MfaVendorTypeObject{}

		if ans.MfaVendorType.DuoSecurityV2 == nil {
			state.MfaVendorType.DuoSecurityV2 = nil
		} else {
			state.MfaVendorType.DuoSecurityV2 = &mfaServerRsModel_oPPPeKY_DuoSecurityV2Object{}

			state.MfaVendorType.DuoSecurityV2.DuoApiHost = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoApiHost)

			state.MfaVendorType.DuoSecurityV2.DuoBaseuri = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoBaseuri)

			state.MfaVendorType.DuoSecurityV2.DuoIntegrationKey = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoIntegrationKey)

			state.MfaVendorType.DuoSecurityV2.DuoSecretKey = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoSecretKey)

			state.MfaVendorType.DuoSecurityV2.DuoTimeout = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoTimeout)
		}

		if ans.MfaVendorType.OktaAdaptiveV1 == nil {
			state.MfaVendorType.OktaAdaptiveV1 = nil
		} else {
			state.MfaVendorType.OktaAdaptiveV1 = &mfaServerRsModel_oPPPeKY_OktaAdaptiveV1Object{}

			state.MfaVendorType.OktaAdaptiveV1.OktaApiHost = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaApiHost)

			state.MfaVendorType.OktaAdaptiveV1.OktaBaseuri = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaBaseuri)

			state.MfaVendorType.OktaAdaptiveV1.OktaOrg = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaOrg)

			state.MfaVendorType.OktaAdaptiveV1.OktaTimeout = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaTimeout)

			state.MfaVendorType.OktaAdaptiveV1.OktaToken = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaToken)
		}

		if ans.MfaVendorType.PingIdentityV1 == nil {
			state.MfaVendorType.PingIdentityV1 = nil
		} else {
			state.MfaVendorType.PingIdentityV1 = &mfaServerRsModel_oPPPeKY_PingIdentityV1Object{}

			state.MfaVendorType.PingIdentityV1.PingApiHost = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingApiHost)

			state.MfaVendorType.PingIdentityV1.PingBaseuri = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingBaseuri)

			state.MfaVendorType.PingIdentityV1.PingOrg = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingOrg)

			state.MfaVendorType.PingIdentityV1.PingOrgAlias = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingOrgAlias)

			state.MfaVendorType.PingIdentityV1.PingTimeout = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingTimeout)

			state.MfaVendorType.PingIdentityV1.PingToken = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingToken)
		}

		if ans.MfaVendorType.RsaSecuridAccessV1 == nil {
			state.MfaVendorType.RsaSecuridAccessV1 = nil
		} else {
			state.MfaVendorType.RsaSecuridAccessV1 = &mfaServerRsModel_oPPPeKY_RsaSecuridAccessV1Object{}

			state.MfaVendorType.RsaSecuridAccessV1.RsaAccessid = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAccessid)

			state.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey)

			state.MfaVendorType.RsaSecuridAccessV1.RsaApiHost = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaApiHost)

			state.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid)

			state.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri)

			state.MfaVendorType.RsaSecuridAccessV1.RsaTimeout = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaTimeout)
		}
	}

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *mfaServerResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state mfaServerRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_mfa_server",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := jhtSIUK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := jhtSIUK.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Id = types.StringPointerValue(ans.Id)

	state.MfaCertProfile = types.StringValue(ans.MfaCertProfile)

	if ans.MfaVendorType == nil {
		state.MfaVendorType = nil
	} else {
		state.MfaVendorType = &mfaServerRsModel_oPPPeKY_MfaVendorTypeObject{}

		if ans.MfaVendorType.DuoSecurityV2 == nil {
			state.MfaVendorType.DuoSecurityV2 = nil
		} else {
			state.MfaVendorType.DuoSecurityV2 = &mfaServerRsModel_oPPPeKY_DuoSecurityV2Object{}

			state.MfaVendorType.DuoSecurityV2.DuoApiHost = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoApiHost)

			state.MfaVendorType.DuoSecurityV2.DuoBaseuri = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoBaseuri)

			state.MfaVendorType.DuoSecurityV2.DuoIntegrationKey = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoIntegrationKey)

			state.MfaVendorType.DuoSecurityV2.DuoSecretKey = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoSecretKey)

			state.MfaVendorType.DuoSecurityV2.DuoTimeout = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoTimeout)
		}

		if ans.MfaVendorType.OktaAdaptiveV1 == nil {
			state.MfaVendorType.OktaAdaptiveV1 = nil
		} else {
			state.MfaVendorType.OktaAdaptiveV1 = &mfaServerRsModel_oPPPeKY_OktaAdaptiveV1Object{}

			state.MfaVendorType.OktaAdaptiveV1.OktaApiHost = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaApiHost)

			state.MfaVendorType.OktaAdaptiveV1.OktaBaseuri = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaBaseuri)

			state.MfaVendorType.OktaAdaptiveV1.OktaOrg = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaOrg)

			state.MfaVendorType.OktaAdaptiveV1.OktaTimeout = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaTimeout)

			state.MfaVendorType.OktaAdaptiveV1.OktaToken = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaToken)
		}

		if ans.MfaVendorType.PingIdentityV1 == nil {
			state.MfaVendorType.PingIdentityV1 = nil
		} else {
			state.MfaVendorType.PingIdentityV1 = &mfaServerRsModel_oPPPeKY_PingIdentityV1Object{}

			state.MfaVendorType.PingIdentityV1.PingApiHost = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingApiHost)

			state.MfaVendorType.PingIdentityV1.PingBaseuri = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingBaseuri)

			state.MfaVendorType.PingIdentityV1.PingOrg = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingOrg)

			state.MfaVendorType.PingIdentityV1.PingOrgAlias = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingOrgAlias)

			state.MfaVendorType.PingIdentityV1.PingTimeout = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingTimeout)

			state.MfaVendorType.PingIdentityV1.PingToken = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingToken)
		}

		if ans.MfaVendorType.RsaSecuridAccessV1 == nil {
			state.MfaVendorType.RsaSecuridAccessV1 = nil
		} else {
			state.MfaVendorType.RsaSecuridAccessV1 = &mfaServerRsModel_oPPPeKY_RsaSecuridAccessV1Object{}

			state.MfaVendorType.RsaSecuridAccessV1.RsaAccessid = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAccessid)

			state.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey)

			state.MfaVendorType.RsaSecuridAccessV1.RsaApiHost = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaApiHost)

			state.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid)

			state.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri)

			state.MfaVendorType.RsaSecuridAccessV1.RsaTimeout = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaTimeout)
		}
	}

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *mfaServerResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state mfaServerRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_mfa_server",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := jhtSIUK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := jhtSIUK.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &oPPPeKY.Config{}

	input.Request.MfaCertProfile = plan.MfaCertProfile.ValueString()

	if plan.MfaVendorType != nil {
		input.Request.MfaVendorType = &oPPPeKY.MfaVendorTypeObject{}

		if plan.MfaVendorType.DuoSecurityV2 != nil {
			input.Request.MfaVendorType.DuoSecurityV2 = &oPPPeKY.DuoSecurityV2Object{}

			input.Request.MfaVendorType.DuoSecurityV2.DuoApiHost = plan.MfaVendorType.DuoSecurityV2.DuoApiHost.ValueStringPointer()

			input.Request.MfaVendorType.DuoSecurityV2.DuoBaseuri = plan.MfaVendorType.DuoSecurityV2.DuoBaseuri.ValueStringPointer()

			input.Request.MfaVendorType.DuoSecurityV2.DuoIntegrationKey = plan.MfaVendorType.DuoSecurityV2.DuoIntegrationKey.ValueStringPointer()

			input.Request.MfaVendorType.DuoSecurityV2.DuoSecretKey = plan.MfaVendorType.DuoSecurityV2.DuoSecretKey.ValueStringPointer()

			input.Request.MfaVendorType.DuoSecurityV2.DuoTimeout = plan.MfaVendorType.DuoSecurityV2.DuoTimeout.ValueStringPointer()
		}

		if plan.MfaVendorType.OktaAdaptiveV1 != nil {
			input.Request.MfaVendorType.OktaAdaptiveV1 = &oPPPeKY.OktaAdaptiveV1Object{}

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaApiHost = plan.MfaVendorType.OktaAdaptiveV1.OktaApiHost.ValueStringPointer()

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaBaseuri = plan.MfaVendorType.OktaAdaptiveV1.OktaBaseuri.ValueStringPointer()

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaOrg = plan.MfaVendorType.OktaAdaptiveV1.OktaOrg.ValueStringPointer()

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaTimeout = plan.MfaVendorType.OktaAdaptiveV1.OktaTimeout.ValueStringPointer()

			input.Request.MfaVendorType.OktaAdaptiveV1.OktaToken = plan.MfaVendorType.OktaAdaptiveV1.OktaToken.ValueStringPointer()
		}

		if plan.MfaVendorType.PingIdentityV1 != nil {
			input.Request.MfaVendorType.PingIdentityV1 = &oPPPeKY.PingIdentityV1Object{}

			input.Request.MfaVendorType.PingIdentityV1.PingApiHost = plan.MfaVendorType.PingIdentityV1.PingApiHost.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingBaseuri = plan.MfaVendorType.PingIdentityV1.PingBaseuri.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingOrg = plan.MfaVendorType.PingIdentityV1.PingOrg.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingOrgAlias = plan.MfaVendorType.PingIdentityV1.PingOrgAlias.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingTimeout = plan.MfaVendorType.PingIdentityV1.PingTimeout.ValueStringPointer()

			input.Request.MfaVendorType.PingIdentityV1.PingToken = plan.MfaVendorType.PingIdentityV1.PingToken.ValueStringPointer()
		}

		if plan.MfaVendorType.RsaSecuridAccessV1 != nil {
			input.Request.MfaVendorType.RsaSecuridAccessV1 = &oPPPeKY.RsaSecuridAccessV1Object{}

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaAccessid = plan.MfaVendorType.RsaSecuridAccessV1.RsaAccessid.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey = plan.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaApiHost = plan.MfaVendorType.RsaSecuridAccessV1.RsaApiHost.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid = plan.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri = plan.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri.ValueStringPointer()

			input.Request.MfaVendorType.RsaSecuridAccessV1.RsaTimeout = plan.MfaVendorType.RsaSecuridAccessV1.RsaTimeout.ValueStringPointer()
		}
	}

	input.Request.Name = plan.Name.ValueString()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Id = types.StringPointerValue(ans.Id)

	state.MfaCertProfile = types.StringValue(ans.MfaCertProfile)

	if ans.MfaVendorType == nil {
		state.MfaVendorType = nil
	} else {
		state.MfaVendorType = &mfaServerRsModel_oPPPeKY_MfaVendorTypeObject{}

		if ans.MfaVendorType.DuoSecurityV2 == nil {
			state.MfaVendorType.DuoSecurityV2 = nil
		} else {
			state.MfaVendorType.DuoSecurityV2 = &mfaServerRsModel_oPPPeKY_DuoSecurityV2Object{}

			state.MfaVendorType.DuoSecurityV2.DuoApiHost = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoApiHost)

			state.MfaVendorType.DuoSecurityV2.DuoBaseuri = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoBaseuri)

			state.MfaVendorType.DuoSecurityV2.DuoIntegrationKey = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoIntegrationKey)

			state.MfaVendorType.DuoSecurityV2.DuoSecretKey = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoSecretKey)

			state.MfaVendorType.DuoSecurityV2.DuoTimeout = types.StringPointerValue(ans.MfaVendorType.DuoSecurityV2.DuoTimeout)
		}

		if ans.MfaVendorType.OktaAdaptiveV1 == nil {
			state.MfaVendorType.OktaAdaptiveV1 = nil
		} else {
			state.MfaVendorType.OktaAdaptiveV1 = &mfaServerRsModel_oPPPeKY_OktaAdaptiveV1Object{}

			state.MfaVendorType.OktaAdaptiveV1.OktaApiHost = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaApiHost)

			state.MfaVendorType.OktaAdaptiveV1.OktaBaseuri = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaBaseuri)

			state.MfaVendorType.OktaAdaptiveV1.OktaOrg = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaOrg)

			state.MfaVendorType.OktaAdaptiveV1.OktaTimeout = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaTimeout)

			state.MfaVendorType.OktaAdaptiveV1.OktaToken = types.StringPointerValue(ans.MfaVendorType.OktaAdaptiveV1.OktaToken)
		}

		if ans.MfaVendorType.PingIdentityV1 == nil {
			state.MfaVendorType.PingIdentityV1 = nil
		} else {
			state.MfaVendorType.PingIdentityV1 = &mfaServerRsModel_oPPPeKY_PingIdentityV1Object{}

			state.MfaVendorType.PingIdentityV1.PingApiHost = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingApiHost)

			state.MfaVendorType.PingIdentityV1.PingBaseuri = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingBaseuri)

			state.MfaVendorType.PingIdentityV1.PingOrg = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingOrg)

			state.MfaVendorType.PingIdentityV1.PingOrgAlias = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingOrgAlias)

			state.MfaVendorType.PingIdentityV1.PingTimeout = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingTimeout)

			state.MfaVendorType.PingIdentityV1.PingToken = types.StringPointerValue(ans.MfaVendorType.PingIdentityV1.PingToken)
		}

		if ans.MfaVendorType.RsaSecuridAccessV1 == nil {
			state.MfaVendorType.RsaSecuridAccessV1 = nil
		} else {
			state.MfaVendorType.RsaSecuridAccessV1 = &mfaServerRsModel_oPPPeKY_RsaSecuridAccessV1Object{}

			state.MfaVendorType.RsaSecuridAccessV1.RsaAccessid = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAccessid)

			state.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAccesskey)

			state.MfaVendorType.RsaSecuridAccessV1.RsaApiHost = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaApiHost)

			state.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaAssurancepolicyid)

			state.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaBaseuri)

			state.MfaVendorType.RsaSecuridAccessV1.RsaTimeout = types.StringPointerValue(ans.MfaVendorType.RsaSecuridAccessV1.RsaTimeout)
		}
	}

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *mfaServerResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_mfa_server",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := jhtSIUK.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := jhtSIUK.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *mfaServerResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
