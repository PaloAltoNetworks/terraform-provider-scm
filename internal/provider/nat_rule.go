package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	aeWshcf "github.com/paloaltonetworks/scm-go/netsec/schemas/nat/rules"
	mvZFtQR "github.com/paloaltonetworks/scm-go/netsec/services/natrules"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &natRuleListDataSource{}
	_ datasource.DataSourceWithConfigure = &natRuleListDataSource{}
)

func NewNatRuleListDataSource() datasource.DataSource {
	return &natRuleListDataSource{}
}

type natRuleListDataSource struct {
	client *scm.Client
}

// natRuleListDsModel is the model.
type natRuleListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device   types.String `tfsdk:"device"`
	Folder   types.String `tfsdk:"folder"`
	Limit    types.Int64  `tfsdk:"limit"`
	Name     types.String `tfsdk:"name"`
	Offset   types.Int64  `tfsdk:"offset"`
	Position types.String `tfsdk:"position"`
	Snippet  types.String `tfsdk:"snippet"`

	// Output.
	Data []natRuleListDsModel_aeWshcf_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type natRuleListDsModel_aeWshcf_Config struct {
	ActiveActiveDeviceBinding     types.String                                                    `tfsdk:"active_active_device_binding"`
	Description                   types.String                                                    `tfsdk:"description"`
	DestinationTranslation        *natRuleListDsModel_aeWshcf_DestinationTranslationObject        `tfsdk:"destination_translation"`
	Destinations                  types.List                                                      `tfsdk:"destinations"`
	Device                        types.String                                                    `tfsdk:"device"`
	Disabled                      types.Bool                                                      `tfsdk:"disabled"`
	DynamicDestinationTranslation *natRuleListDsModel_aeWshcf_DynamicDestinationTranslationObject `tfsdk:"dynamic_destination_translation"`
	Folder                        types.String                                                    `tfsdk:"folder"`
	Froms                         types.List                                                      `tfsdk:"froms"`
	GroupTag                      types.String                                                    `tfsdk:"group_tag"`
	Id                            types.String                                                    `tfsdk:"id"`
	Name                          types.String                                                    `tfsdk:"name"`
	NatType                       types.String                                                    `tfsdk:"nat_type"`
	Service                       types.String                                                    `tfsdk:"service"`
	Snippet                       types.String                                                    `tfsdk:"snippet"`
	SourceTranslation             *natRuleListDsModel_aeWshcf_SourceTranslationObject             `tfsdk:"source_translation"`
	Sources                       types.List                                                      `tfsdk:"sources"`
	Tags                          types.List                                                      `tfsdk:"tags"`
	Target                        *natRuleListDsModel_aeWshcf_TargetObject                        `tfsdk:"target"`
	ToInterface                   types.String                                                    `tfsdk:"to_interface"`
	Tos                           types.List                                                      `tfsdk:"tos"`
}

type natRuleListDsModel_aeWshcf_DestinationTranslationObject struct {
	DnsRewrite              *natRuleListDsModel_aeWshcf_DnsRewriteObject `tfsdk:"dns_rewrite"`
	TranslatedAddressSingle types.String                                 `tfsdk:"translated_address_single"`
	TranslatedPort          types.Int64                                  `tfsdk:"translated_port"`
}

type natRuleListDsModel_aeWshcf_DnsRewriteObject struct {
	Direction types.String `tfsdk:"direction"`
}

type natRuleListDsModel_aeWshcf_DynamicDestinationTranslationObject struct {
	Distribution            types.String `tfsdk:"distribution"`
	TranslatedAddressSingle types.String `tfsdk:"translated_address_single"`
	TranslatedPort          types.Int64  `tfsdk:"translated_port"`
}

type natRuleListDsModel_aeWshcf_SourceTranslationObject struct {
	BiDirectional           types.String                               `tfsdk:"bi_directional"`
	Fallback                *natRuleListDsModel_aeWshcf_FallbackObject `tfsdk:"fallback"`
	TranslatedAddressArray  types.List                                 `tfsdk:"translated_address_array"`
	TranslatedAddressSingle types.String                               `tfsdk:"translated_address_single"`
}

type natRuleListDsModel_aeWshcf_FallbackObject struct {
	Interface types.String `tfsdk:"interface"`
}

type natRuleListDsModel_aeWshcf_TargetObject struct {
	Devices []natRuleListDsModel_aeWshcf_DevicesObject `tfsdk:"devices"`
	Negate  types.Bool                                 `tfsdk:"negate"`
	Tags    types.List                                 `tfsdk:"tags"`
}

type natRuleListDsModel_aeWshcf_DevicesObject struct {
	Name types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (d *natRuleListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_nat_rule_list"
}

// Schema defines the schema for this listing data source.
func (d *natRuleListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"active_active_device_binding":true, "description":true, "destination":true, "destination_translation":true, "device":true, "disabled":true, "dynamic_destination_translation":true, "folder":true, "from":true, "group_tag":true, "id":true, "name":true, "nat_type":true, "service":true, "snippet":true, "source":true, "source_translation":true, "tag":true, "target":true, "to":true, "to_interface":true} forceNew:map[string]bool(nil)
						"active_active_device_binding": dsschema.StringAttribute{
							Description: "The ActiveActiveDeviceBinding param. String must be one of these: `\"primary\"`, `\"both\"`, `\"0\"`, `\"1\"`.",
							Computed:    true,
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"destination_translation": dsschema.SingleNestedAttribute{
							Description: "Static destination translation parameter.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"dns_rewrite":true, "translated_address_single":true, "translated_port":true} forceNew:map[string]bool(nil)
								"dns_rewrite": dsschema.SingleNestedAttribute{
									Description: "The DnsRewrite param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"direction":true} forceNew:map[string]bool(nil)
										"direction": dsschema.StringAttribute{
											Description: "The Direction param. String must be one of these: `\"reverse\"`, `\"forward\"`. Default: `\"reverse\"`.",
											Computed:    true,
										},
									},
								},
								"translated_address_single": dsschema.StringAttribute{
									Description: "The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.",
									Computed:    true,
								},
								"translated_port": dsschema.Int64Attribute{
									Description: "The TranslatedPort param.",
									Computed:    true,
								},
							},
						},
						"destinations": dsschema.ListAttribute{
							Description: "The destination address(es).",
							Computed:    true,
							ElementType: types.StringType,
						},
						"device": dsschema.StringAttribute{
							Description: "The device in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
							Computed:    true,
						},
						"disabled": dsschema.BoolAttribute{
							Description: "The Disabled param.",
							Computed:    true,
						},
						"dynamic_destination_translation": dsschema.SingleNestedAttribute{
							Description: "Dynamic destination translation parameter.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"distribution":true, "translated_address_single":true, "translated_port":true} forceNew:map[string]bool(nil)
								"distribution": dsschema.StringAttribute{
									Description: "The Distribution param. String must be one of these: `\"round-robin\"`, `\"source-ip-hash\"`, `\"ip-modulo\"`, `\"ip-hash\"`, `\"least-sessions\"`. Default: `\"round-robin\"`.",
									Computed:    true,
								},
								"translated_address_single": dsschema.StringAttribute{
									Description: "The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.",
									Computed:    true,
								},
								"translated_port": dsschema.Int64Attribute{
									Description: "The TranslatedPort param.",
									Computed:    true,
								},
							},
						},
						"folder": dsschema.StringAttribute{
							Description: "The folder in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
							Computed:    true,
						},
						"froms": dsschema.ListAttribute{
							Description: "The source security zone(s).",
							Computed:    true,
							ElementType: types.StringType,
						},
						"group_tag": dsschema.StringAttribute{
							Description: "The GroupTag param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "The Id param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"nat_type": dsschema.StringAttribute{
							Description: "The NatType param. String must be one of these: `\"ipv4\"`, `\"nat64\"`, `\"nptv6\"`.",
							Computed:    true,
						},
						"service": dsschema.StringAttribute{
							Description: "The Service param.",
							Computed:    true,
						},
						"snippet": dsschema.StringAttribute{
							Description: "The snippet in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
							Computed:    true,
						},
						"source_translation": dsschema.SingleNestedAttribute{
							Description: "The SourceTranslation param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"bi_directional":true, "fallback":true, "translated_address_array":true, "translated_address_single":true} forceNew:map[string]bool(nil)
								"bi_directional": dsschema.StringAttribute{
									Description: "The BiDirectional param. String must be one of these: `\"yes\"`, `\"no\"`.",
									Computed:    true,
								},
								"fallback": dsschema.SingleNestedAttribute{
									Description: "The Fallback param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"interface":true} forceNew:map[string]bool(nil)
										"interface": dsschema.StringAttribute{
											Description: "The Interface param.",
											Computed:    true,
										},
									},
								},
								"translated_address_array": dsschema.ListAttribute{
									Description: "The TranslatedAddressArray param.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"translated_address_single": dsschema.StringAttribute{
									Description: "The TranslatedAddressSingle param. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.",
									Computed:    true,
								},
							},
						},
						"sources": dsschema.ListAttribute{
							Description: "The source address(es).",
							Computed:    true,
							ElementType: types.StringType,
						},
						"tags": dsschema.ListAttribute{
							Description: "The Tags param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"target": dsschema.SingleNestedAttribute{
							Description: "The Target param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"devices":true, "negate":true, "tags":true} forceNew:map[string]bool(nil)
								"devices": dsschema.ListNestedAttribute{
									Description: "The Devices param.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
										},
									},
								},
								"negate": dsschema.BoolAttribute{
									Description: "The Negate param.",
									Computed:    true,
								},
								"tags": dsschema.ListAttribute{
									Description: "The Tags param.",
									Computed:    true,
									ElementType: types.StringType,
								},
							},
						},
						"to_interface": dsschema.StringAttribute{
							Description: "The ToInterface param.",
							Computed:    true,
						},
						"tos": dsschema.ListAttribute{
							Description: "The destination security zone(s).",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"position": dsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *natRuleListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *natRuleListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state natRuleListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_nat_rule_list",
		"terraform_provider_function": "Read",
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"position":                    state.Position.ValueString(),
	})

	// Prepare to run the command.
	svc := mvZFtQR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.ListInput{}

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Position = state.Position.ValueString()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Position)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]natRuleListDsModel_aeWshcf_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := natRuleListDsModel_aeWshcf_Config{}

			var1.ActiveActiveDeviceBinding = types.StringPointerValue(var0.ActiveActiveDeviceBinding)

			var1.Description = types.StringPointerValue(var0.Description)

			if var0.DestinationTranslation == nil {
				var1.DestinationTranslation = nil
			} else {
				var1.DestinationTranslation = &natRuleListDsModel_aeWshcf_DestinationTranslationObject{}

				if var0.DestinationTranslation.DnsRewrite == nil {
					var1.DestinationTranslation.DnsRewrite = nil
				} else {
					var1.DestinationTranslation.DnsRewrite = &natRuleListDsModel_aeWshcf_DnsRewriteObject{}

					var1.DestinationTranslation.DnsRewrite.Direction = types.StringValue(var0.DestinationTranslation.DnsRewrite.Direction)
				}

				var1.DestinationTranslation.TranslatedAddressSingle = types.StringValue(var0.DestinationTranslation.TranslatedAddressSingle)

				var1.DestinationTranslation.TranslatedPort = types.Int64PointerValue(var0.DestinationTranslation.TranslatedPort)
			}

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Destinations)
			var1.Destinations = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Device = types.StringPointerValue(var0.Device)

			var1.Disabled = types.BoolPointerValue(var0.Disabled)

			if var0.DynamicDestinationTranslation == nil {
				var1.DynamicDestinationTranslation = nil
			} else {
				var1.DynamicDestinationTranslation = &natRuleListDsModel_aeWshcf_DynamicDestinationTranslationObject{}

				var1.DynamicDestinationTranslation.Distribution = types.StringValue(var0.DynamicDestinationTranslation.Distribution)

				var1.DynamicDestinationTranslation.TranslatedAddressSingle = types.StringValue(var0.DynamicDestinationTranslation.TranslatedAddressSingle)

				var1.DynamicDestinationTranslation.TranslatedPort = types.Int64PointerValue(var0.DynamicDestinationTranslation.TranslatedPort)
			}

			var1.Folder = types.StringPointerValue(var0.Folder)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Froms)
			var1.Froms = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.GroupTag = types.StringPointerValue(var0.GroupTag)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.NatType = types.StringPointerValue(var0.NatType)

			var1.Service = types.StringValue(var0.Service)

			var1.Snippet = types.StringPointerValue(var0.Snippet)

			if var0.SourceTranslation == nil {
				var1.SourceTranslation = nil
			} else {
				var1.SourceTranslation = &natRuleListDsModel_aeWshcf_SourceTranslationObject{}

				var1.SourceTranslation.BiDirectional = types.StringPointerValue(var0.SourceTranslation.BiDirectional)

				if var0.SourceTranslation.Fallback == nil {
					var1.SourceTranslation.Fallback = nil
				} else {
					var1.SourceTranslation.Fallback = &natRuleListDsModel_aeWshcf_FallbackObject{}

					var1.SourceTranslation.Fallback.Interface = types.StringPointerValue(var0.SourceTranslation.Fallback.Interface)
				}

				var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.SourceTranslation.TranslatedAddressArray)
				var1.SourceTranslation.TranslatedAddressArray = var6
				resp.Diagnostics.Append(var7.Errors()...)

				var1.SourceTranslation.TranslatedAddressSingle = types.StringPointerValue(var0.SourceTranslation.TranslatedAddressSingle)
			}

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.Sources)
			var1.Sources = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.Tags)
			var1.Tags = var10
			resp.Diagnostics.Append(var11.Errors()...)

			if var0.Target == nil {
				var1.Target = nil
			} else {
				var1.Target = &natRuleListDsModel_aeWshcf_TargetObject{}

				if len(var0.Target.Devices) == 0 {
					var1.Target.Devices = nil
				} else {
					var1.Target.Devices = make([]natRuleListDsModel_aeWshcf_DevicesObject, 0, len(var0.Target.Devices))
					for _, var12 := range var0.Target.Devices {
						var13 := natRuleListDsModel_aeWshcf_DevicesObject{}

						var13.Name = types.StringPointerValue(var12.Name)
						var1.Target.Devices = append(var1.Target.Devices, var13)
					}
				}

				var1.Target.Negate = types.BoolPointerValue(var0.Target.Negate)

				var14, var15 := types.ListValueFrom(ctx, types.StringType, var0.Target.Tags)
				var1.Target.Tags = var14
				resp.Diagnostics.Append(var15.Errors()...)
			}

			var1.ToInterface = types.StringPointerValue(var0.ToInterface)

			var16, var17 := types.ListValueFrom(ctx, types.StringType, var0.Tos)
			var1.Tos = var16
			resp.Diagnostics.Append(var17.Errors()...)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &natRuleDataSource{}
	_ datasource.DataSourceWithConfigure = &natRuleDataSource{}
)

func NewNatRuleDataSource() datasource.DataSource {
	return &natRuleDataSource{}
}

type natRuleDataSource struct {
	client *scm.Client
}

// natRuleDsModel is the model.
type natRuleDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	ActiveActiveDeviceBinding     types.String                                                `tfsdk:"active_active_device_binding"`
	Description                   types.String                                                `tfsdk:"description"`
	DestinationTranslation        *natRuleDsModel_aeWshcf_DestinationTranslationObject        `tfsdk:"destination_translation"`
	Destinations                  types.List                                                  `tfsdk:"destinations"`
	Device                        types.String                                                `tfsdk:"device"`
	Disabled                      types.Bool                                                  `tfsdk:"disabled"`
	DynamicDestinationTranslation *natRuleDsModel_aeWshcf_DynamicDestinationTranslationObject `tfsdk:"dynamic_destination_translation"`
	Folder                        types.String                                                `tfsdk:"folder"`
	Froms                         types.List                                                  `tfsdk:"froms"`
	GroupTag                      types.String                                                `tfsdk:"group_tag"`
	// omit input: id
	Name              types.String                                    `tfsdk:"name"`
	NatType           types.String                                    `tfsdk:"nat_type"`
	Service           types.String                                    `tfsdk:"service"`
	Snippet           types.String                                    `tfsdk:"snippet"`
	SourceTranslation *natRuleDsModel_aeWshcf_SourceTranslationObject `tfsdk:"source_translation"`
	Sources           types.List                                      `tfsdk:"sources"`
	Tags              types.List                                      `tfsdk:"tags"`
	Target            *natRuleDsModel_aeWshcf_TargetObject            `tfsdk:"target"`
	ToInterface       types.String                                    `tfsdk:"to_interface"`
	Tos               types.List                                      `tfsdk:"tos"`
}

type natRuleDsModel_aeWshcf_DestinationTranslationObject struct {
	DnsRewrite              *natRuleDsModel_aeWshcf_DnsRewriteObject `tfsdk:"dns_rewrite"`
	TranslatedAddressSingle types.String                             `tfsdk:"translated_address_single"`
	TranslatedPort          types.Int64                              `tfsdk:"translated_port"`
}

type natRuleDsModel_aeWshcf_DnsRewriteObject struct {
	Direction types.String `tfsdk:"direction"`
}

type natRuleDsModel_aeWshcf_DynamicDestinationTranslationObject struct {
	Distribution            types.String `tfsdk:"distribution"`
	TranslatedAddressSingle types.String `tfsdk:"translated_address_single"`
	TranslatedPort          types.Int64  `tfsdk:"translated_port"`
}

type natRuleDsModel_aeWshcf_SourceTranslationObject struct {
	BiDirectional           types.String                           `tfsdk:"bi_directional"`
	Fallback                *natRuleDsModel_aeWshcf_FallbackObject `tfsdk:"fallback"`
	TranslatedAddressArray  types.List                             `tfsdk:"translated_address_array"`
	TranslatedAddressSingle types.String                           `tfsdk:"translated_address_single"`
}

type natRuleDsModel_aeWshcf_FallbackObject struct {
	Interface types.String `tfsdk:"interface"`
}

type natRuleDsModel_aeWshcf_TargetObject struct {
	Devices []natRuleDsModel_aeWshcf_DevicesObject `tfsdk:"devices"`
	Negate  types.Bool                             `tfsdk:"negate"`
	Tags    types.List                             `tfsdk:"tags"`
}

type natRuleDsModel_aeWshcf_DevicesObject struct {
	Name types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (d *natRuleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_nat_rule"
}

// Schema defines the schema for this data source.
func (d *natRuleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"active_active_device_binding":true, "description":true, "destination":true, "destination_translation":true, "device":true, "disabled":true, "dynamic_destination_translation":true, "folder":true, "from":true, "group_tag":true, "id":true, "name":true, "nat_type":true, "service":true, "snippet":true, "source":true, "source_translation":true, "tag":true, "target":true, "tfid":true, "to":true, "to_interface":true} forceNew:map[string]bool{"id":true}
			"active_active_device_binding": dsschema.StringAttribute{
				Description: "The ActiveActiveDeviceBinding param. String must be one of these: `\"primary\"`, `\"both\"`, `\"0\"`, `\"1\"`.",
				Computed:    true,
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"destination_translation": dsschema.SingleNestedAttribute{
				Description: "Static destination translation parameter.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"dns_rewrite":true, "translated_address_single":true, "translated_port":true} forceNew:map[string]bool(nil)
					"dns_rewrite": dsschema.SingleNestedAttribute{
						Description: "The DnsRewrite param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"direction":true} forceNew:map[string]bool(nil)
							"direction": dsschema.StringAttribute{
								Description: "The Direction param. String must be one of these: `\"reverse\"`, `\"forward\"`. Default: `\"reverse\"`.",
								Computed:    true,
							},
						},
					},
					"translated_address_single": dsschema.StringAttribute{
						Description: "The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.",
						Computed:    true,
					},
					"translated_port": dsschema.Int64Attribute{
						Description: "The TranslatedPort param.",
						Computed:    true,
					},
				},
			},
			"destinations": dsschema.ListAttribute{
				Description: "The destination address(es).",
				Computed:    true,
				ElementType: types.StringType,
			},
			"device": dsschema.StringAttribute{
				Description: "The device in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
				Computed:    true,
			},
			"disabled": dsschema.BoolAttribute{
				Description: "The Disabled param.",
				Computed:    true,
			},
			"dynamic_destination_translation": dsschema.SingleNestedAttribute{
				Description: "Dynamic destination translation parameter.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"distribution":true, "translated_address_single":true, "translated_port":true} forceNew:map[string]bool(nil)
					"distribution": dsschema.StringAttribute{
						Description: "The Distribution param. String must be one of these: `\"round-robin\"`, `\"source-ip-hash\"`, `\"ip-modulo\"`, `\"ip-hash\"`, `\"least-sessions\"`. Default: `\"round-robin\"`.",
						Computed:    true,
					},
					"translated_address_single": dsschema.StringAttribute{
						Description: "The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.",
						Computed:    true,
					},
					"translated_port": dsschema.Int64Attribute{
						Description: "The TranslatedPort param.",
						Computed:    true,
					},
				},
			},
			"folder": dsschema.StringAttribute{
				Description: "The folder in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
				Computed:    true,
			},
			"froms": dsschema.ListAttribute{
				Description: "The source security zone(s).",
				Computed:    true,
				ElementType: types.StringType,
			},
			"group_tag": dsschema.StringAttribute{
				Description: "The GroupTag param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"nat_type": dsschema.StringAttribute{
				Description: "The NatType param. String must be one of these: `\"ipv4\"`, `\"nat64\"`, `\"nptv6\"`.",
				Computed:    true,
			},
			"service": dsschema.StringAttribute{
				Description: "The Service param.",
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The snippet in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
				Computed:    true,
			},
			"source_translation": dsschema.SingleNestedAttribute{
				Description: "The SourceTranslation param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"bi_directional":true, "fallback":true, "translated_address_array":true, "translated_address_single":true} forceNew:map[string]bool(nil)
					"bi_directional": dsschema.StringAttribute{
						Description: "The BiDirectional param. String must be one of these: `\"yes\"`, `\"no\"`.",
						Computed:    true,
					},
					"fallback": dsschema.SingleNestedAttribute{
						Description: "The Fallback param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"interface":true} forceNew:map[string]bool(nil)
							"interface": dsschema.StringAttribute{
								Description: "The Interface param.",
								Computed:    true,
							},
						},
					},
					"translated_address_array": dsschema.ListAttribute{
						Description: "The TranslatedAddressArray param.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"translated_address_single": dsschema.StringAttribute{
						Description: "The TranslatedAddressSingle param. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.",
						Computed:    true,
					},
				},
			},
			"sources": dsschema.ListAttribute{
				Description: "The source address(es).",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tags": dsschema.ListAttribute{
				Description: "The Tags param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"target": dsschema.SingleNestedAttribute{
				Description: "The Target param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"devices":true, "negate":true, "tags":true} forceNew:map[string]bool(nil)
					"devices": dsschema.ListNestedAttribute{
						Description: "The Devices param.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
							},
						},
					},
					"negate": dsschema.BoolAttribute{
						Description: "The Negate param.",
						Computed:    true,
					},
					"tags": dsschema.ListAttribute{
						Description: "The Tags param.",
						Computed:    true,
						ElementType: types.StringType,
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"to_interface": dsschema.StringAttribute{
				Description: "The ToInterface param.",
				Computed:    true,
			},
			"tos": dsschema.ListAttribute{
				Description: "The destination security zone(s).",
				Computed:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (d *natRuleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *natRuleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state natRuleDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_nat_rule",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := mvZFtQR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.ActiveActiveDeviceBinding = types.StringPointerValue(ans.ActiveActiveDeviceBinding)

	state.Description = types.StringPointerValue(ans.Description)

	if ans.DestinationTranslation == nil {
		state.DestinationTranslation = nil
	} else {
		state.DestinationTranslation = &natRuleDsModel_aeWshcf_DestinationTranslationObject{}

		if ans.DestinationTranslation.DnsRewrite == nil {
			state.DestinationTranslation.DnsRewrite = nil
		} else {
			state.DestinationTranslation.DnsRewrite = &natRuleDsModel_aeWshcf_DnsRewriteObject{}

			state.DestinationTranslation.DnsRewrite.Direction = types.StringValue(ans.DestinationTranslation.DnsRewrite.Direction)
		}

		state.DestinationTranslation.TranslatedAddressSingle = types.StringValue(ans.DestinationTranslation.TranslatedAddressSingle)

		state.DestinationTranslation.TranslatedPort = types.Int64PointerValue(ans.DestinationTranslation.TranslatedPort)
	}

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Device = types.StringPointerValue(ans.Device)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	if ans.DynamicDestinationTranslation == nil {
		state.DynamicDestinationTranslation = nil
	} else {
		state.DynamicDestinationTranslation = &natRuleDsModel_aeWshcf_DynamicDestinationTranslationObject{}

		state.DynamicDestinationTranslation.Distribution = types.StringValue(ans.DynamicDestinationTranslation.Distribution)

		state.DynamicDestinationTranslation.TranslatedAddressSingle = types.StringValue(ans.DynamicDestinationTranslation.TranslatedAddressSingle)

		state.DynamicDestinationTranslation.TranslatedPort = types.Int64PointerValue(ans.DynamicDestinationTranslation.TranslatedPort)
	}

	state.Folder = types.StringPointerValue(ans.Folder)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NatType = types.StringPointerValue(ans.NatType)

	state.Service = types.StringValue(ans.Service)

	state.Snippet = types.StringPointerValue(ans.Snippet)

	if ans.SourceTranslation == nil {
		state.SourceTranslation = nil
	} else {
		state.SourceTranslation = &natRuleDsModel_aeWshcf_SourceTranslationObject{}

		state.SourceTranslation.BiDirectional = types.StringPointerValue(ans.SourceTranslation.BiDirectional)

		if ans.SourceTranslation.Fallback == nil {
			state.SourceTranslation.Fallback = nil
		} else {
			state.SourceTranslation.Fallback = &natRuleDsModel_aeWshcf_FallbackObject{}

			state.SourceTranslation.Fallback.Interface = types.StringPointerValue(ans.SourceTranslation.Fallback.Interface)
		}

		var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.SourceTranslation.TranslatedAddressArray)
		state.SourceTranslation.TranslatedAddressArray = var4
		resp.Diagnostics.Append(var5.Errors()...)

		state.SourceTranslation.TranslatedAddressSingle = types.StringPointerValue(ans.SourceTranslation.TranslatedAddressSingle)
	}

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var8
	resp.Diagnostics.Append(var9.Errors()...)

	if ans.Target == nil {
		state.Target = nil
	} else {
		state.Target = &natRuleDsModel_aeWshcf_TargetObject{}

		if len(ans.Target.Devices) == 0 {
			state.Target.Devices = nil
		} else {
			state.Target.Devices = make([]natRuleDsModel_aeWshcf_DevicesObject, 0, len(ans.Target.Devices))
			for _, var10 := range ans.Target.Devices {
				var11 := natRuleDsModel_aeWshcf_DevicesObject{}

				var11.Name = types.StringPointerValue(var10.Name)
				state.Target.Devices = append(state.Target.Devices, var11)
			}
		}

		state.Target.Negate = types.BoolPointerValue(ans.Target.Negate)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.Target.Tags)
		state.Target.Tags = var12
		resp.Diagnostics.Append(var13.Errors()...)
	}

	state.ToInterface = types.StringPointerValue(ans.ToInterface)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var14
	resp.Diagnostics.Append(var15.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &natRuleResource{}
	_ resource.ResourceWithConfigure   = &natRuleResource{}
	_ resource.ResourceWithImportState = &natRuleResource{}
)

func NewNatRuleResource() resource.Resource {
	return &natRuleResource{}
}

type natRuleResource struct {
	client *scm.Client
}

// natRuleRsModel is the model.
type natRuleRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	ActiveActiveDeviceBinding     types.String                                                `tfsdk:"active_active_device_binding"`
	Description                   types.String                                                `tfsdk:"description"`
	DestinationTranslation        *natRuleRsModel_aeWshcf_DestinationTranslationObject        `tfsdk:"destination_translation"`
	Destinations                  types.List                                                  `tfsdk:"destinations"`
	Device                        types.String                                                `tfsdk:"device"`
	Disabled                      types.Bool                                                  `tfsdk:"disabled"`
	DynamicDestinationTranslation *natRuleRsModel_aeWshcf_DynamicDestinationTranslationObject `tfsdk:"dynamic_destination_translation"`
	Folder                        types.String                                                `tfsdk:"folder"`
	Froms                         types.List                                                  `tfsdk:"froms"`
	GroupTag                      types.String                                                `tfsdk:"group_tag"`
	Id                            types.String                                                `tfsdk:"id"`
	Name                          types.String                                                `tfsdk:"name"`
	NatType                       types.String                                                `tfsdk:"nat_type"`
	Position                      types.String                                                `tfsdk:"position"`
	Service                       types.String                                                `tfsdk:"service"`
	Snippet                       types.String                                                `tfsdk:"snippet"`
	SourceTranslation             *natRuleRsModel_aeWshcf_SourceTranslationObject             `tfsdk:"source_translation"`
	Sources                       types.List                                                  `tfsdk:"sources"`
	Tags                          types.List                                                  `tfsdk:"tags"`
	Target                        *natRuleRsModel_aeWshcf_TargetObject                        `tfsdk:"target"`
	ToInterface                   types.String                                                `tfsdk:"to_interface"`
	Tos                           types.List                                                  `tfsdk:"tos"`

	// Output.
	// omit input: active_active_device_binding
	// omit input: description
	// omit input: destination_translation
	// omit input: destinations
	// omit input: device
	// omit input: disabled
	// omit input: dynamic_destination_translation
	// omit input: folder
	// omit input: froms
	// omit input: group_tag
	// omit input: id
	// omit input: name
	// omit input: nat_type
	// omit input: service
	// omit input: snippet
	// omit input: source_translation
	// omit input: sources
	// omit input: tags
	// omit input: target
	// omit input: to_interface
	// omit input: tos
}

type natRuleRsModel_aeWshcf_DestinationTranslationObject struct {
	DnsRewrite              *natRuleRsModel_aeWshcf_DnsRewriteObject `tfsdk:"dns_rewrite"`
	TranslatedAddressSingle types.String                             `tfsdk:"translated_address_single"`
	TranslatedPort          types.Int64                              `tfsdk:"translated_port"`
}

type natRuleRsModel_aeWshcf_DnsRewriteObject struct {
	Direction types.String `tfsdk:"direction"`
}

type natRuleRsModel_aeWshcf_DynamicDestinationTranslationObject struct {
	Distribution            types.String `tfsdk:"distribution"`
	TranslatedAddressSingle types.String `tfsdk:"translated_address_single"`
	TranslatedPort          types.Int64  `tfsdk:"translated_port"`
}

type natRuleRsModel_aeWshcf_SourceTranslationObject struct {
	BiDirectional           types.String                           `tfsdk:"bi_directional"`
	Fallback                *natRuleRsModel_aeWshcf_FallbackObject `tfsdk:"fallback"`
	TranslatedAddressArray  types.List                             `tfsdk:"translated_address_array"`
	TranslatedAddressSingle types.String                           `tfsdk:"translated_address_single"`
}

type natRuleRsModel_aeWshcf_FallbackObject struct {
	Interface types.String `tfsdk:"interface"`
}

type natRuleRsModel_aeWshcf_TargetObject struct {
	Devices []natRuleRsModel_aeWshcf_DevicesObject `tfsdk:"devices"`
	Negate  types.Bool                             `tfsdk:"negate"`
	Tags    types.List                             `tfsdk:"tags"`
}

type natRuleRsModel_aeWshcf_DevicesObject struct {
	Name types.String `tfsdk:"name"`
}

// Metadata returns the data source type name.
func (r *natRuleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_nat_rule"
}

// Schema defines the schema for this data source.
func (r *natRuleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"active_active_device_binding":true, "description":true, "destination":true, "destination_translation":true, "device":true, "disabled":true, "dynamic_destination_translation":true, "folder":true, "from":true, "group_tag":true, "id":true, "name":true, "nat_type":true, "position":true, "service":true, "snippet":true, "source":true, "source_translation":true, "tag":true, "target":true, "to":true, "to_interface":true} outputs:map[string]bool{"active_active_device_binding":true, "description":true, "destination":true, "destination_translation":true, "device":true, "disabled":true, "dynamic_destination_translation":true, "folder":true, "from":true, "group_tag":true, "id":true, "name":true, "nat_type":true, "service":true, "snippet":true, "source":true, "source_translation":true, "tag":true, "target":true, "tfid":true, "to":true, "to_interface":true} forceNew:map[string]bool{"position":true}
			"active_active_device_binding": rsschema.StringAttribute{
				Description: "The ActiveActiveDeviceBinding param. String must be one of these: `\"primary\"`, `\"both\"`, `\"0\"`, `\"1\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("primary", "both", "0", "1"),
				},
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"destination_translation": rsschema.SingleNestedAttribute{
				Description: "Static destination translation parameter.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"dns_rewrite":true, "translated_address_single":true, "translated_port":true} outputs:map[string]bool{"dns_rewrite":true, "translated_address_single":true, "translated_port":true} forceNew:map[string]bool(nil)
					"dns_rewrite": rsschema.SingleNestedAttribute{
						Description: "The DnsRewrite param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"direction":true} outputs:map[string]bool{"direction":true} forceNew:map[string]bool(nil)
							"direction": rsschema.StringAttribute{
								Description: "The Direction param. String must be one of these: `\"reverse\"`, `\"forward\"`. Default: `\"reverse\"`.",
								Optional:    true,
								Computed:    true,
								Default:     stringdefault.StaticString("reverse"),
								Validators: []validator.String{
									stringvalidator.OneOf("reverse", "forward"),
								},
							},
						},
					},
					"translated_address_single": rsschema.StringAttribute{
						Description: "The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.",
						Required:    true,
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$"), ""),
						},
					},
					"translated_port": rsschema.Int64Attribute{
						Description: "The TranslatedPort param.",
						Optional:    true,
					},
				},
			},
			"destinations": rsschema.ListAttribute{
				Description: "The destination address(es).",
				Required:    true,
				ElementType: types.StringType,
			},
			"device": rsschema.StringAttribute{
				Description: "The device in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(64),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z\\d-_\\. ]+$"), ""),
				},
			},
			"disabled": rsschema.BoolAttribute{
				Description: "The Disabled param.",
				Optional:    true,
			},
			"dynamic_destination_translation": rsschema.SingleNestedAttribute{
				Description: "Dynamic destination translation parameter.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"distribution":true, "translated_address_single":true, "translated_port":true} outputs:map[string]bool{"distribution":true, "translated_address_single":true, "translated_port":true} forceNew:map[string]bool(nil)
					"distribution": rsschema.StringAttribute{
						Description: "The Distribution param. String must be one of these: `\"round-robin\"`, `\"source-ip-hash\"`, `\"ip-modulo\"`, `\"ip-hash\"`, `\"least-sessions\"`. Default: `\"round-robin\"`.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("round-robin"),
						Validators: []validator.String{
							stringvalidator.OneOf("round-robin", "source-ip-hash", "ip-modulo", "ip-hash", "least-sessions"),
						},
					},
					"translated_address_single": rsschema.StringAttribute{
						Description: "The ip address to be translated. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`.",
						Required:    true,
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$"), ""),
						},
					},
					"translated_port": rsschema.Int64Attribute{
						Description: "The TranslatedPort param.",
						Optional:    true,
					},
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The folder in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(64),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z\\d-_\\. ]+$"), ""),
				},
			},
			"froms": rsschema.ListAttribute{
				Description: "The source security zone(s).",
				Required:    true,
				ElementType: types.StringType,
			},
			"group_tag": rsschema.StringAttribute{
				Description: "The GroupTag param.",
				Optional:    true,
			},
			"id": rsschema.StringAttribute{
				Description: "The Id param.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"nat_type": rsschema.StringAttribute{
				Description: "The NatType param. String must be one of these: `\"ipv4\"`, `\"nat64\"`, `\"nptv6\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("ipv4", "nat64", "nptv6"),
				},
			},
			"position": rsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("pre"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("pre", "post"),
				},
			},
			"service": rsschema.StringAttribute{
				Description: "The Service param.",
				Required:    true,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The snippet in which the resource is defined. String length must not exceed 64 characters. String validation regex: `^[a-zA-Z\\d-_\\. ]+$`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(64),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z\\d-_\\. ]+$"), ""),
				},
			},
			"source_translation": rsschema.SingleNestedAttribute{
				Description: "The SourceTranslation param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"bi_directional":true, "fallback":true, "translated_address_array":true, "translated_address_single":true} outputs:map[string]bool{"bi_directional":true, "fallback":true, "translated_address_array":true, "translated_address_single":true} forceNew:map[string]bool(nil)
					"bi_directional": rsschema.StringAttribute{
						Description: "The BiDirectional param. String must be one of these: `\"yes\"`, `\"no\"`.",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.OneOf("yes", "no"),
						},
					},
					"fallback": rsschema.SingleNestedAttribute{
						Description: "The Fallback param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"interface":true} outputs:map[string]bool{"interface":true} forceNew:map[string]bool(nil)
							"interface": rsschema.StringAttribute{
								Description: "The Interface param. Ensure that only one of the following is specified: `interface`",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.ExactlyOneOf(
										path.MatchRelative(),
									),
								},
							},
						},
					},
					"translated_address_array": rsschema.ListAttribute{
						Description: "The TranslatedAddressArray param. Ensure that only one of the following is specified: `translated_address_array`, `translated_address_single`",
						Optional:    true,
						ElementType: types.StringType,
						Validators: []validator.List{
							listvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("translated_address_single"),
							),
						},
					},
					"translated_address_single": rsschema.StringAttribute{
						Description: "The TranslatedAddressSingle param. String validation regex: `^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$`. Ensure that only one of the following is specified: `translated_address_array`, `translated_address_single`",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$"), ""),
						},
					},
				},
			},
			"sources": rsschema.ListAttribute{
				Description: "The source address(es).",
				Required:    true,
				ElementType: types.StringType,
			},
			"tags": rsschema.ListAttribute{
				Description: "The Tags param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"target": rsschema.SingleNestedAttribute{
				Description: "The Target param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"devices":true, "negate":true, "tags":true} outputs:map[string]bool{"devices":true, "negate":true, "tags":true} forceNew:map[string]bool(nil)
					"devices": rsschema.ListNestedAttribute{
						Description: "The Devices param.",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"name":true} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Optional:    true,
								},
							},
						},
					},
					"negate": rsschema.BoolAttribute{
						Description: "The Negate param.",
						Optional:    true,
					},
					"tags": rsschema.ListAttribute{
						Description: "The Tags param.",
						Optional:    true,
						ElementType: types.StringType,
					},
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"to_interface": rsschema.StringAttribute{
				Description: "The ToInterface param.",
				Optional:    true,
			},
			"tos": rsschema.ListAttribute{
				Description: "The destination security zone(s).",
				Required:    true,
				ElementType: types.StringType,
			},
		},
	}
}

// Configure prepares the struct.
func (r *natRuleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *natRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state natRuleRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_nat_rule",
		"terraform_provider_function": "Create",
		"position":                    state.Position.ValueString(),
	})

	// Prepare to create the config.
	svc := mvZFtQR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.CreateInput{}

	input.Position = state.Position.ValueString()
	input.Request = &aeWshcf.Config{}

	input.Request.ActiveActiveDeviceBinding = state.ActiveActiveDeviceBinding.ValueStringPointer()

	input.Request.Description = state.Description.ValueStringPointer()

	if state.DestinationTranslation != nil {
		input.Request.DestinationTranslation = &aeWshcf.DestinationTranslationObject{}

		if state.DestinationTranslation.DnsRewrite != nil {
			input.Request.DestinationTranslation.DnsRewrite = &aeWshcf.DnsRewriteObject{}

			input.Request.DestinationTranslation.DnsRewrite.Direction = state.DestinationTranslation.DnsRewrite.Direction.ValueString()
		}

		input.Request.DestinationTranslation.TranslatedAddressSingle = state.DestinationTranslation.TranslatedAddressSingle.ValueString()

		input.Request.DestinationTranslation.TranslatedPort = state.DestinationTranslation.TranslatedPort.ValueInt64Pointer()
	}

	resp.Diagnostics.Append(state.Destinations.ElementsAs(ctx, &input.Request.Destinations, false)...)
	//if len(state.Destinations) != 0 {
	//    input.Request.Destinations = make([]string, 0, len(state.Destinations))
	//    for _, var0 := range state.Destinations {
	//        input.Request.Destinations = append(input.Request.Destinations, var0.ValueString())
	//    }
	//}

	input.Request.Device = state.Device.ValueStringPointer()

	input.Request.Disabled = state.Disabled.ValueBoolPointer()

	if state.DynamicDestinationTranslation != nil {
		input.Request.DynamicDestinationTranslation = &aeWshcf.DynamicDestinationTranslationObject{}

		input.Request.DynamicDestinationTranslation.Distribution = state.DynamicDestinationTranslation.Distribution.ValueString()

		input.Request.DynamicDestinationTranslation.TranslatedAddressSingle = state.DynamicDestinationTranslation.TranslatedAddressSingle.ValueString()

		input.Request.DynamicDestinationTranslation.TranslatedPort = state.DynamicDestinationTranslation.TranslatedPort.ValueInt64Pointer()
	}

	input.Request.Folder = state.Folder.ValueStringPointer()

	resp.Diagnostics.Append(state.Froms.ElementsAs(ctx, &input.Request.Froms, false)...)
	//if len(state.Froms) != 0 {
	//    input.Request.Froms = make([]string, 0, len(state.Froms))
	//    for _, var1 := range state.Froms {
	//        input.Request.Froms = append(input.Request.Froms, var1.ValueString())
	//    }
	//}

	input.Request.GroupTag = state.GroupTag.ValueStringPointer()

	input.Request.Name = state.Name.ValueString()

	input.Request.NatType = state.NatType.ValueStringPointer()

	input.Request.Service = state.Service.ValueString()

	input.Request.Snippet = state.Snippet.ValueStringPointer()

	if state.SourceTranslation != nil {
		input.Request.SourceTranslation = &aeWshcf.SourceTranslationObject{}

		input.Request.SourceTranslation.BiDirectional = state.SourceTranslation.BiDirectional.ValueStringPointer()

		if state.SourceTranslation.Fallback != nil {
			input.Request.SourceTranslation.Fallback = &aeWshcf.FallbackObject{}

			input.Request.SourceTranslation.Fallback.Interface = state.SourceTranslation.Fallback.Interface.ValueStringPointer()
		}

		resp.Diagnostics.Append(state.SourceTranslation.TranslatedAddressArray.ElementsAs(ctx, &input.Request.SourceTranslation.TranslatedAddressArray, false)...)
		//if len(state.SourceTranslation.TranslatedAddressArray) != 0 {
		//    input.Request.SourceTranslation.TranslatedAddressArray = make([]string, 0, len(state.SourceTranslation.TranslatedAddressArray))
		//    for _, var2 := range state.SourceTranslation.TranslatedAddressArray {
		//        input.Request.SourceTranslation.TranslatedAddressArray = append(input.Request.SourceTranslation.TranslatedAddressArray, var2.ValueString())
		//    }
		//}

		input.Request.SourceTranslation.TranslatedAddressSingle = state.SourceTranslation.TranslatedAddressSingle.ValueStringPointer()
	}

	resp.Diagnostics.Append(state.Sources.ElementsAs(ctx, &input.Request.Sources, false)...)
	//if len(state.Sources) != 0 {
	//    input.Request.Sources = make([]string, 0, len(state.Sources))
	//    for _, var3 := range state.Sources {
	//        input.Request.Sources = append(input.Request.Sources, var3.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Tags.ElementsAs(ctx, &input.Request.Tags, false)...)
	//if len(state.Tags) != 0 {
	//    input.Request.Tags = make([]string, 0, len(state.Tags))
	//    for _, var4 := range state.Tags {
	//        input.Request.Tags = append(input.Request.Tags, var4.ValueString())
	//    }
	//}

	if state.Target != nil {
		input.Request.Target = &aeWshcf.TargetObject{}

		if len(state.Target.Devices) != 0 {
			input.Request.Target.Devices = make([]aeWshcf.DevicesObject, 0, len(state.Target.Devices))
			for _, var5 := range state.Target.Devices {
				var var6 aeWshcf.DevicesObject

				var6.Name = var5.Name.ValueStringPointer()
				input.Request.Target.Devices = append(input.Request.Target.Devices, var6)
			}
		}

		input.Request.Target.Negate = state.Target.Negate.ValueBoolPointer()

		resp.Diagnostics.Append(state.Target.Tags.ElementsAs(ctx, &input.Request.Target.Tags, false)...)
		//if len(state.Target.Tags) != 0 {
		//    input.Request.Target.Tags = make([]string, 0, len(state.Target.Tags))
		//    for _, var7 := range state.Target.Tags {
		//        input.Request.Target.Tags = append(input.Request.Target.Tags, var7.ValueString())
		//    }
		//}
	}

	input.Request.ToInterface = state.ToInterface.ValueStringPointer()

	resp.Diagnostics.Append(state.Tos.ElementsAs(ctx, &input.Request.Tos, false)...)
	//if len(state.Tos) != 0 {
	//    input.Request.Tos = make([]string, 0, len(state.Tos))
	//    for _, var8 := range state.Tos {
	//        input.Request.Tos = append(input.Request.Tos, var8.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.ActiveActiveDeviceBinding = types.StringPointerValue(ans.ActiveActiveDeviceBinding)

	state.Description = types.StringPointerValue(ans.Description)

	if ans.DestinationTranslation == nil {
		state.DestinationTranslation = nil
	} else {
		state.DestinationTranslation = &natRuleRsModel_aeWshcf_DestinationTranslationObject{}

		if ans.DestinationTranslation.DnsRewrite == nil {
			state.DestinationTranslation.DnsRewrite = nil
		} else {
			state.DestinationTranslation.DnsRewrite = &natRuleRsModel_aeWshcf_DnsRewriteObject{}

			state.DestinationTranslation.DnsRewrite.Direction = types.StringValue(ans.DestinationTranslation.DnsRewrite.Direction)
		}

		state.DestinationTranslation.TranslatedAddressSingle = types.StringValue(ans.DestinationTranslation.TranslatedAddressSingle)

		state.DestinationTranslation.TranslatedPort = types.Int64PointerValue(ans.DestinationTranslation.TranslatedPort)
	}

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var9
	resp.Diagnostics.Append(var10.Errors()...)

	state.Device = types.StringPointerValue(ans.Device)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	if ans.DynamicDestinationTranslation == nil {
		state.DynamicDestinationTranslation = nil
	} else {
		state.DynamicDestinationTranslation = &natRuleRsModel_aeWshcf_DynamicDestinationTranslationObject{}

		state.DynamicDestinationTranslation.Distribution = types.StringValue(ans.DynamicDestinationTranslation.Distribution)

		state.DynamicDestinationTranslation.TranslatedAddressSingle = types.StringValue(ans.DynamicDestinationTranslation.TranslatedAddressSingle)

		state.DynamicDestinationTranslation.TranslatedPort = types.Int64PointerValue(ans.DynamicDestinationTranslation.TranslatedPort)
	}

	state.Folder = types.StringPointerValue(ans.Folder)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var11
	resp.Diagnostics.Append(var12.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NatType = types.StringPointerValue(ans.NatType)

	state.Service = types.StringValue(ans.Service)

	state.Snippet = types.StringPointerValue(ans.Snippet)

	if ans.SourceTranslation == nil {
		state.SourceTranslation = nil
	} else {
		state.SourceTranslation = &natRuleRsModel_aeWshcf_SourceTranslationObject{}

		state.SourceTranslation.BiDirectional = types.StringPointerValue(ans.SourceTranslation.BiDirectional)

		if ans.SourceTranslation.Fallback == nil {
			state.SourceTranslation.Fallback = nil
		} else {
			state.SourceTranslation.Fallback = &natRuleRsModel_aeWshcf_FallbackObject{}

			state.SourceTranslation.Fallback.Interface = types.StringPointerValue(ans.SourceTranslation.Fallback.Interface)
		}

		var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.SourceTranslation.TranslatedAddressArray)
		state.SourceTranslation.TranslatedAddressArray = var13
		resp.Diagnostics.Append(var14.Errors()...)

		state.SourceTranslation.TranslatedAddressSingle = types.StringPointerValue(ans.SourceTranslation.TranslatedAddressSingle)
	}

	var15, var16 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var15
	resp.Diagnostics.Append(var16.Errors()...)

	var17, var18 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var17
	resp.Diagnostics.Append(var18.Errors()...)

	if ans.Target == nil {
		state.Target = nil
	} else {
		state.Target = &natRuleRsModel_aeWshcf_TargetObject{}

		if len(ans.Target.Devices) == 0 {
			state.Target.Devices = nil
		} else {
			state.Target.Devices = make([]natRuleRsModel_aeWshcf_DevicesObject, 0, len(ans.Target.Devices))
			for _, var19 := range ans.Target.Devices {
				var20 := natRuleRsModel_aeWshcf_DevicesObject{}

				var20.Name = types.StringPointerValue(var19.Name)
				state.Target.Devices = append(state.Target.Devices, var20)
			}
		}

		state.Target.Negate = types.BoolPointerValue(ans.Target.Negate)

		var21, var22 := types.ListValueFrom(ctx, types.StringType, ans.Target.Tags)
		state.Target.Tags = var21
		resp.Diagnostics.Append(var22.Errors()...)
	}

	state.ToInterface = types.StringPointerValue(ans.ToInterface)

	var23, var24 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var23
	resp.Diagnostics.Append(var24.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *natRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state natRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_nat_rule",
		"locMap":                      map[string]int{"id": 1, "position": 0},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := mvZFtQR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.ReadInput{}

	input.Id = tokens[1]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Position = types.StringNull()
	} else {
		state.Position = types.StringValue(tokens[0])
	}
	state.Tfid = savestate.Tfid

	state.ActiveActiveDeviceBinding = types.StringPointerValue(ans.ActiveActiveDeviceBinding)

	state.Description = types.StringPointerValue(ans.Description)

	if ans.DestinationTranslation == nil {
		state.DestinationTranslation = nil
	} else {
		state.DestinationTranslation = &natRuleRsModel_aeWshcf_DestinationTranslationObject{}

		if ans.DestinationTranslation.DnsRewrite == nil {
			state.DestinationTranslation.DnsRewrite = nil
		} else {
			state.DestinationTranslation.DnsRewrite = &natRuleRsModel_aeWshcf_DnsRewriteObject{}

			state.DestinationTranslation.DnsRewrite.Direction = types.StringValue(ans.DestinationTranslation.DnsRewrite.Direction)
		}

		state.DestinationTranslation.TranslatedAddressSingle = types.StringValue(ans.DestinationTranslation.TranslatedAddressSingle)

		state.DestinationTranslation.TranslatedPort = types.Int64PointerValue(ans.DestinationTranslation.TranslatedPort)
	}

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var0
	resp.Diagnostics.Append(var1.Errors()...)

	state.Device = types.StringPointerValue(ans.Device)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	if ans.DynamicDestinationTranslation == nil {
		state.DynamicDestinationTranslation = nil
	} else {
		state.DynamicDestinationTranslation = &natRuleRsModel_aeWshcf_DynamicDestinationTranslationObject{}

		state.DynamicDestinationTranslation.Distribution = types.StringValue(ans.DynamicDestinationTranslation.Distribution)

		state.DynamicDestinationTranslation.TranslatedAddressSingle = types.StringValue(ans.DynamicDestinationTranslation.TranslatedAddressSingle)

		state.DynamicDestinationTranslation.TranslatedPort = types.Int64PointerValue(ans.DynamicDestinationTranslation.TranslatedPort)
	}

	state.Folder = types.StringPointerValue(ans.Folder)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NatType = types.StringPointerValue(ans.NatType)

	state.Service = types.StringValue(ans.Service)

	state.Snippet = types.StringPointerValue(ans.Snippet)

	if ans.SourceTranslation == nil {
		state.SourceTranslation = nil
	} else {
		state.SourceTranslation = &natRuleRsModel_aeWshcf_SourceTranslationObject{}

		state.SourceTranslation.BiDirectional = types.StringPointerValue(ans.SourceTranslation.BiDirectional)

		if ans.SourceTranslation.Fallback == nil {
			state.SourceTranslation.Fallback = nil
		} else {
			state.SourceTranslation.Fallback = &natRuleRsModel_aeWshcf_FallbackObject{}

			state.SourceTranslation.Fallback.Interface = types.StringPointerValue(ans.SourceTranslation.Fallback.Interface)
		}

		var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.SourceTranslation.TranslatedAddressArray)
		state.SourceTranslation.TranslatedAddressArray = var4
		resp.Diagnostics.Append(var5.Errors()...)

		state.SourceTranslation.TranslatedAddressSingle = types.StringPointerValue(ans.SourceTranslation.TranslatedAddressSingle)
	}

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var8
	resp.Diagnostics.Append(var9.Errors()...)

	if ans.Target == nil {
		state.Target = nil
	} else {
		state.Target = &natRuleRsModel_aeWshcf_TargetObject{}

		if len(ans.Target.Devices) == 0 {
			state.Target.Devices = nil
		} else {
			state.Target.Devices = make([]natRuleRsModel_aeWshcf_DevicesObject, 0, len(ans.Target.Devices))
			for _, var10 := range ans.Target.Devices {
				var11 := natRuleRsModel_aeWshcf_DevicesObject{}

				var11.Name = types.StringPointerValue(var10.Name)
				state.Target.Devices = append(state.Target.Devices, var11)
			}
		}

		state.Target.Negate = types.BoolPointerValue(ans.Target.Negate)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.Target.Tags)
		state.Target.Tags = var12
		resp.Diagnostics.Append(var13.Errors()...)
	}

	state.ToInterface = types.StringPointerValue(ans.ToInterface)

	var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var14
	resp.Diagnostics.Append(var15.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *natRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state natRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_nat_rule",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := mvZFtQR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.UpdateInput{}

	if tokens[1] != "" {
		input.Id = tokens[1]
	}

	if tokens[0] != "" {
		input.Position = tokens[0]
	}
	input.Request = &aeWshcf.Config{}

	input.Request.ActiveActiveDeviceBinding = plan.ActiveActiveDeviceBinding.ValueStringPointer()

	input.Request.Description = plan.Description.ValueStringPointer()

	if plan.DestinationTranslation != nil {
		input.Request.DestinationTranslation = &aeWshcf.DestinationTranslationObject{}

		if plan.DestinationTranslation.DnsRewrite != nil {
			input.Request.DestinationTranslation.DnsRewrite = &aeWshcf.DnsRewriteObject{}

			input.Request.DestinationTranslation.DnsRewrite.Direction = plan.DestinationTranslation.DnsRewrite.Direction.ValueString()
		}

		input.Request.DestinationTranslation.TranslatedAddressSingle = plan.DestinationTranslation.TranslatedAddressSingle.ValueString()

		input.Request.DestinationTranslation.TranslatedPort = plan.DestinationTranslation.TranslatedPort.ValueInt64Pointer()
	}

	resp.Diagnostics.Append(plan.Destinations.ElementsAs(ctx, &input.Request.Destinations, false)...)
	//if len(plan.Destinations) != 0 {
	//    input.Request.Destinations = make([]string, 0, len(plan.Destinations))
	//    for _, var0 := range plan.Destinations {
	//        input.Request.Destinations = append(input.Request.Destinations, var0.ValueString())
	//    }
	//}

	input.Request.Device = plan.Device.ValueStringPointer()

	input.Request.Disabled = plan.Disabled.ValueBoolPointer()

	if plan.DynamicDestinationTranslation != nil {
		input.Request.DynamicDestinationTranslation = &aeWshcf.DynamicDestinationTranslationObject{}

		input.Request.DynamicDestinationTranslation.Distribution = plan.DynamicDestinationTranslation.Distribution.ValueString()

		input.Request.DynamicDestinationTranslation.TranslatedAddressSingle = plan.DynamicDestinationTranslation.TranslatedAddressSingle.ValueString()

		input.Request.DynamicDestinationTranslation.TranslatedPort = plan.DynamicDestinationTranslation.TranslatedPort.ValueInt64Pointer()
	}

	input.Request.Folder = plan.Folder.ValueStringPointer()

	resp.Diagnostics.Append(plan.Froms.ElementsAs(ctx, &input.Request.Froms, false)...)
	//if len(plan.Froms) != 0 {
	//    input.Request.Froms = make([]string, 0, len(plan.Froms))
	//    for _, var1 := range plan.Froms {
	//        input.Request.Froms = append(input.Request.Froms, var1.ValueString())
	//    }
	//}

	input.Request.GroupTag = plan.GroupTag.ValueStringPointer()

	input.Request.Name = plan.Name.ValueString()

	input.Request.NatType = plan.NatType.ValueStringPointer()

	input.Request.Service = plan.Service.ValueString()

	input.Request.Snippet = plan.Snippet.ValueStringPointer()

	if plan.SourceTranslation != nil {
		input.Request.SourceTranslation = &aeWshcf.SourceTranslationObject{}

		input.Request.SourceTranslation.BiDirectional = plan.SourceTranslation.BiDirectional.ValueStringPointer()

		if plan.SourceTranslation.Fallback != nil {
			input.Request.SourceTranslation.Fallback = &aeWshcf.FallbackObject{}

			input.Request.SourceTranslation.Fallback.Interface = plan.SourceTranslation.Fallback.Interface.ValueStringPointer()
		}

		resp.Diagnostics.Append(plan.SourceTranslation.TranslatedAddressArray.ElementsAs(ctx, &input.Request.SourceTranslation.TranslatedAddressArray, false)...)
		//if len(plan.SourceTranslation.TranslatedAddressArray) != 0 {
		//    input.Request.SourceTranslation.TranslatedAddressArray = make([]string, 0, len(plan.SourceTranslation.TranslatedAddressArray))
		//    for _, var2 := range plan.SourceTranslation.TranslatedAddressArray {
		//        input.Request.SourceTranslation.TranslatedAddressArray = append(input.Request.SourceTranslation.TranslatedAddressArray, var2.ValueString())
		//    }
		//}

		input.Request.SourceTranslation.TranslatedAddressSingle = plan.SourceTranslation.TranslatedAddressSingle.ValueStringPointer()
	}

	resp.Diagnostics.Append(plan.Sources.ElementsAs(ctx, &input.Request.Sources, false)...)
	//if len(plan.Sources) != 0 {
	//    input.Request.Sources = make([]string, 0, len(plan.Sources))
	//    for _, var3 := range plan.Sources {
	//        input.Request.Sources = append(input.Request.Sources, var3.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Tags.ElementsAs(ctx, &input.Request.Tags, false)...)
	//if len(plan.Tags) != 0 {
	//    input.Request.Tags = make([]string, 0, len(plan.Tags))
	//    for _, var4 := range plan.Tags {
	//        input.Request.Tags = append(input.Request.Tags, var4.ValueString())
	//    }
	//}

	if plan.Target != nil {
		input.Request.Target = &aeWshcf.TargetObject{}

		if len(plan.Target.Devices) != 0 {
			input.Request.Target.Devices = make([]aeWshcf.DevicesObject, 0, len(plan.Target.Devices))
			for _, var5 := range plan.Target.Devices {
				var var6 aeWshcf.DevicesObject

				var6.Name = var5.Name.ValueStringPointer()
				input.Request.Target.Devices = append(input.Request.Target.Devices, var6)
			}
		}

		input.Request.Target.Negate = plan.Target.Negate.ValueBoolPointer()

		resp.Diagnostics.Append(plan.Target.Tags.ElementsAs(ctx, &input.Request.Target.Tags, false)...)
		//if len(plan.Target.Tags) != 0 {
		//    input.Request.Target.Tags = make([]string, 0, len(plan.Target.Tags))
		//    for _, var7 := range plan.Target.Tags {
		//        input.Request.Target.Tags = append(input.Request.Target.Tags, var7.ValueString())
		//    }
		//}
	}

	input.Request.ToInterface = plan.ToInterface.ValueStringPointer()

	resp.Diagnostics.Append(plan.Tos.ElementsAs(ctx, &input.Request.Tos, false)...)
	//if len(plan.Tos) != 0 {
	//    input.Request.Tos = make([]string, 0, len(plan.Tos))
	//    for _, var8 := range plan.Tos {
	//        input.Request.Tos = append(input.Request.Tos, var8.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.ActiveActiveDeviceBinding = types.StringPointerValue(ans.ActiveActiveDeviceBinding)

	state.Description = types.StringPointerValue(ans.Description)

	if ans.DestinationTranslation == nil {
		state.DestinationTranslation = nil
	} else {
		state.DestinationTranslation = &natRuleRsModel_aeWshcf_DestinationTranslationObject{}

		if ans.DestinationTranslation.DnsRewrite == nil {
			state.DestinationTranslation.DnsRewrite = nil
		} else {
			state.DestinationTranslation.DnsRewrite = &natRuleRsModel_aeWshcf_DnsRewriteObject{}

			state.DestinationTranslation.DnsRewrite.Direction = types.StringValue(ans.DestinationTranslation.DnsRewrite.Direction)
		}

		state.DestinationTranslation.TranslatedAddressSingle = types.StringValue(ans.DestinationTranslation.TranslatedAddressSingle)

		state.DestinationTranslation.TranslatedPort = types.Int64PointerValue(ans.DestinationTranslation.TranslatedPort)
	}

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Destinations)
	state.Destinations = var9
	resp.Diagnostics.Append(var10.Errors()...)

	state.Device = types.StringPointerValue(ans.Device)

	state.Disabled = types.BoolPointerValue(ans.Disabled)

	if ans.DynamicDestinationTranslation == nil {
		state.DynamicDestinationTranslation = nil
	} else {
		state.DynamicDestinationTranslation = &natRuleRsModel_aeWshcf_DynamicDestinationTranslationObject{}

		state.DynamicDestinationTranslation.Distribution = types.StringValue(ans.DynamicDestinationTranslation.Distribution)

		state.DynamicDestinationTranslation.TranslatedAddressSingle = types.StringValue(ans.DynamicDestinationTranslation.TranslatedAddressSingle)

		state.DynamicDestinationTranslation.TranslatedPort = types.Int64PointerValue(ans.DynamicDestinationTranslation.TranslatedPort)
	}

	state.Folder = types.StringPointerValue(ans.Folder)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Froms)
	state.Froms = var11
	resp.Diagnostics.Append(var12.Errors()...)

	state.GroupTag = types.StringPointerValue(ans.GroupTag)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.NatType = types.StringPointerValue(ans.NatType)

	state.Service = types.StringValue(ans.Service)

	state.Snippet = types.StringPointerValue(ans.Snippet)

	if ans.SourceTranslation == nil {
		state.SourceTranslation = nil
	} else {
		state.SourceTranslation = &natRuleRsModel_aeWshcf_SourceTranslationObject{}

		state.SourceTranslation.BiDirectional = types.StringPointerValue(ans.SourceTranslation.BiDirectional)

		if ans.SourceTranslation.Fallback == nil {
			state.SourceTranslation.Fallback = nil
		} else {
			state.SourceTranslation.Fallback = &natRuleRsModel_aeWshcf_FallbackObject{}

			state.SourceTranslation.Fallback.Interface = types.StringPointerValue(ans.SourceTranslation.Fallback.Interface)
		}

		var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.SourceTranslation.TranslatedAddressArray)
		state.SourceTranslation.TranslatedAddressArray = var13
		resp.Diagnostics.Append(var14.Errors()...)

		state.SourceTranslation.TranslatedAddressSingle = types.StringPointerValue(ans.SourceTranslation.TranslatedAddressSingle)
	}

	var15, var16 := types.ListValueFrom(ctx, types.StringType, ans.Sources)
	state.Sources = var15
	resp.Diagnostics.Append(var16.Errors()...)

	var17, var18 := types.ListValueFrom(ctx, types.StringType, ans.Tags)
	state.Tags = var17
	resp.Diagnostics.Append(var18.Errors()...)

	if ans.Target == nil {
		state.Target = nil
	} else {
		state.Target = &natRuleRsModel_aeWshcf_TargetObject{}

		if len(ans.Target.Devices) == 0 {
			state.Target.Devices = nil
		} else {
			state.Target.Devices = make([]natRuleRsModel_aeWshcf_DevicesObject, 0, len(ans.Target.Devices))
			for _, var19 := range ans.Target.Devices {
				var20 := natRuleRsModel_aeWshcf_DevicesObject{}

				var20.Name = types.StringPointerValue(var19.Name)
				state.Target.Devices = append(state.Target.Devices, var20)
			}
		}

		state.Target.Negate = types.BoolPointerValue(ans.Target.Negate)

		var21, var22 := types.ListValueFrom(ctx, types.StringType, ans.Target.Tags)
		state.Target.Tags = var21
		resp.Diagnostics.Append(var22.Errors()...)
	}

	state.ToInterface = types.StringPointerValue(ans.ToInterface)

	var23, var24 := types.ListValueFrom(ctx, types.StringType, ans.Tos)
	state.Tos = var23
	resp.Diagnostics.Append(var24.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *natRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_nat_rule",
		"locMap":                      map[string]int{"id": 1, "position": 0},
		"tokens":                      tokens,
	})

	svc := mvZFtQR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.DeleteInput{}

	input.Id = tokens[1]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *natRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
