package provider

import (
	"context"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/paloaltonetworks/scm-go/generated/network_services"
	models "github.com/paloaltonetworks/terraform-provider-scm/internal/models/network_services"
)

// --- Unpacker for LogicalRouters ---
func unpackLogicalRoutersToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRouters, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRouters", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRouters
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRouters
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Device.IsNull() && !model.Device.IsUnknown() {
		sdk.Device = model.Device.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Device", "value": *sdk.Device})
	}

	// Handling Primitives
	if !model.Folder.IsNull() && !model.Folder.IsUnknown() {
		sdk.Folder = model.Folder.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Folder", "value": *sdk.Folder})
	}

	// Handling Primitives
	if !model.Id.IsNull() && !model.Id.IsUnknown() {
		sdk.Id = model.Id.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Id", "value": *sdk.Id})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.RoutingStack.IsNull() && !model.RoutingStack.IsUnknown() {
		sdk.RoutingStack = model.RoutingStack.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RoutingStack", "value": *sdk.RoutingStack})
	}

	// Handling Primitives
	if !model.Snippet.IsNull() && !model.Snippet.IsUnknown() {
		sdk.Snippet = model.Snippet.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Snippet", "value": *sdk.Snippet})
	}

	// Handling Lists
	if !model.Vrf.IsNull() && !model.Vrf.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Vrf")
		unpacked, d := unpackLogicalRoutersVrfInnerListToSdk(ctx, model.Vrf)
		diags.Append(d...)
		sdk.Vrf = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRouters", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRouters ---
func packLogicalRoutersFromSdk(ctx context.Context, sdk network_services.LogicalRouters) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRouters", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRouters
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Device != nil {
		model.Device = basetypes.NewStringValue(*sdk.Device)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Device", "value": *sdk.Device})
	} else {
		model.Device = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Folder != nil {
		model.Folder = basetypes.NewStringValue(*sdk.Folder)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Folder", "value": *sdk.Folder})
	} else {
		model.Folder = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Id != nil {
		model.Id = basetypes.NewStringValue(*sdk.Id)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Id", "value": *sdk.Id})
	} else {
		model.Id = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.RoutingStack != nil {
		model.RoutingStack = basetypes.NewStringValue(*sdk.RoutingStack)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RoutingStack", "value": *sdk.RoutingStack})
	} else {
		model.RoutingStack = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Snippet != nil {
		model.Snippet = basetypes.NewStringValue(*sdk.Snippet)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Snippet", "value": *sdk.Snippet})
	} else {
		model.Snippet = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Vrf != nil {
		tflog.Debug(ctx, "Packing list of objects for field Vrf")
		packed, d := packLogicalRoutersVrfInnerListFromSdk(ctx, sdk.Vrf)
		diags.Append(d...)
		model.Vrf = packed
	} else {
		model.Vrf = basetypes.NewListNull(models.LogicalRoutersVrfInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRouters{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRouters", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRouters ---
func unpackLogicalRoutersListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRouters, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRouters")
	diags := diag.Diagnostics{}
	var data []models.LogicalRouters
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRouters, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRouters{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRouters", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRouters ---
func packLogicalRoutersListFromSdk(ctx context.Context, sdks []network_services.LogicalRouters) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRouters")
	diags := diag.Diagnostics{}
	var data []models.LogicalRouters

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRouters
		obj, d := packLogicalRoutersFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRouters{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRouters", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRouters{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInner ---
func unpackLogicalRoutersVrfInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInner
	var d diag.Diagnostics
	// Handling Objects
	if !model.AdminDists.IsNull() && !model.AdminDists.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AdminDists")
		unpacked, d := unpackLogicalRoutersVrfInnerAdminDistsToSdk(ctx, model.AdminDists)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AdminDists"})
		}
		if unpacked != nil {
			sdk.AdminDists = unpacked
		}
	}

	// Handling Objects
	if !model.Bgp.IsNull() && !model.Bgp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bgp")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpToSdk(ctx, model.Bgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bgp"})
		}
		if unpacked != nil {
			sdk.Bgp = unpacked
		}
	}

	// Handling Objects
	if !model.Ecmp.IsNull() && !model.Ecmp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ecmp")
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpToSdk(ctx, model.Ecmp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ecmp"})
		}
		if unpacked != nil {
			sdk.Ecmp = unpacked
		}
	}

	// Handling Primitives
	if !model.GlobalVrid.IsNull() && !model.GlobalVrid.IsUnknown() {
		val := float32(model.GlobalVrid.ValueFloat64())
		sdk.GlobalVrid = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GlobalVrid", "value": *sdk.GlobalVrid})
	}

	// Handling Lists
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Interface")
		diags.Append(model.Interface.ElementsAs(ctx, &sdk.Interface, false)...)
	}

	// Handling Objects
	if !model.Multicast.IsNull() && !model.Multicast.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Multicast")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastToSdk(ctx, model.Multicast)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Multicast"})
		}
		if unpacked != nil {
			sdk.Multicast = unpacked
		}
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Objects
	if !model.Ospf.IsNull() && !model.Ospf.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ospf")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfToSdk(ctx, model.Ospf)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ospf"})
		}
		if unpacked != nil {
			sdk.Ospf = unpacked
		}
	}

	// Handling Objects
	if !model.Ospfv3.IsNull() && !model.Ospfv3.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ospfv3")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3ToSdk(ctx, model.Ospfv3)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ospfv3"})
		}
		if unpacked != nil {
			sdk.Ospfv3 = unpacked
		}
	}

	// Handling Objects
	if !model.RibFilter.IsNull() && !model.RibFilter.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field RibFilter")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterToSdk(ctx, model.RibFilter)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "RibFilter"})
		}
		if unpacked != nil {
			sdk.RibFilter = unpacked
		}
	}

	// Handling Objects
	if !model.Rip.IsNull() && !model.Rip.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Rip")
		unpacked, d := unpackLogicalRoutersVrfInnerRipToSdk(ctx, model.Rip)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Rip"})
		}
		if unpacked != nil {
			sdk.Rip = unpacked
		}
	}

	// Handling Objects
	if !model.RoutingTable.IsNull() && !model.RoutingTable.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field RoutingTable")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableToSdk(ctx, model.RoutingTable)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "RoutingTable"})
		}
		if unpacked != nil {
			sdk.RoutingTable = unpacked
		}
	}

	// Handling Primitives
	if !model.SdwanType.IsNull() && !model.SdwanType.IsUnknown() {
		sdk.SdwanType = model.SdwanType.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SdwanType", "value": *sdk.SdwanType})
	}

	// Handling Objects
	if !model.VrAdminDists.IsNull() && !model.VrAdminDists.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field VrAdminDists")
		unpacked, d := unpackLogicalRoutersVrfInnerVrAdminDistsToSdk(ctx, model.VrAdminDists)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "VrAdminDists"})
		}
		if unpacked != nil {
			sdk.VrAdminDists = unpacked
		}
	}

	// Handling Primitives
	if !model.ZoneName.IsNull() && !model.ZoneName.IsUnknown() {
		sdk.ZoneName = model.ZoneName.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ZoneName", "value": *sdk.ZoneName})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInner ---
func packLogicalRoutersVrfInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInner
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AdminDists != nil {
		tflog.Debug(ctx, "Packing nested object for field AdminDists")
		packed, d := packLogicalRoutersVrfInnerAdminDistsFromSdk(ctx, *sdk.AdminDists)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AdminDists"})
		}
		model.AdminDists = packed
	} else {
		model.AdminDists = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerAdminDists{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bgp != nil {
		tflog.Debug(ctx, "Packing nested object for field Bgp")
		packed, d := packLogicalRoutersVrfInnerBgpFromSdk(ctx, *sdk.Bgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bgp"})
		}
		model.Bgp = packed
	} else {
		model.Bgp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ecmp != nil {
		tflog.Debug(ctx, "Packing nested object for field Ecmp")
		packed, d := packLogicalRoutersVrfInnerEcmpFromSdk(ctx, *sdk.Ecmp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ecmp"})
		}
		model.Ecmp = packed
	} else {
		model.Ecmp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerEcmp{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GlobalVrid != nil {
		model.GlobalVrid = basetypes.NewFloat64Value(float64(*sdk.GlobalVrid))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GlobalVrid", "value": *sdk.GlobalVrid})
	} else {
		model.GlobalVrid = basetypes.NewFloat64Null()
	}
	// Handling Lists
	if sdk.Interface != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Interface")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Interface, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Interface)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Interface = basetypes.NewListNull(elemType)
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Multicast != nil {
		tflog.Debug(ctx, "Packing nested object for field Multicast")
		packed, d := packLogicalRoutersVrfInnerMulticastFromSdk(ctx, *sdk.Multicast)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Multicast"})
		}
		model.Multicast = packed
	} else {
		model.Multicast = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticast{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ospf != nil {
		tflog.Debug(ctx, "Packing nested object for field Ospf")
		packed, d := packLogicalRoutersVrfInnerOspfFromSdk(ctx, *sdk.Ospf)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ospf"})
		}
		model.Ospf = packed
	} else {
		model.Ospf = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspf{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ospfv3 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ospfv3")
		packed, d := packLogicalRoutersVrfInnerOspfv3FromSdk(ctx, *sdk.Ospfv3)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ospfv3"})
		}
		model.Ospfv3 = packed
	} else {
		model.Ospfv3 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.RibFilter != nil {
		tflog.Debug(ctx, "Packing nested object for field RibFilter")
		packed, d := packLogicalRoutersVrfInnerRibFilterFromSdk(ctx, *sdk.RibFilter)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "RibFilter"})
		}
		model.RibFilter = packed
	} else {
		model.RibFilter = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilter{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Rip != nil {
		tflog.Debug(ctx, "Packing nested object for field Rip")
		packed, d := packLogicalRoutersVrfInnerRipFromSdk(ctx, *sdk.Rip)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Rip"})
		}
		model.Rip = packed
	} else {
		model.Rip = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRip{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.RoutingTable != nil {
		tflog.Debug(ctx, "Packing nested object for field RoutingTable")
		packed, d := packLogicalRoutersVrfInnerRoutingTableFromSdk(ctx, *sdk.RoutingTable)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "RoutingTable"})
		}
		model.RoutingTable = packed
	} else {
		model.RoutingTable = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTable{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SdwanType != nil {
		model.SdwanType = basetypes.NewStringValue(*sdk.SdwanType)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SdwanType", "value": *sdk.SdwanType})
	} else {
		model.SdwanType = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.VrAdminDists != nil {
		tflog.Debug(ctx, "Packing nested object for field VrAdminDists")
		packed, d := packLogicalRoutersVrfInnerVrAdminDistsFromSdk(ctx, *sdk.VrAdminDists)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "VrAdminDists"})
		}
		model.VrAdminDists = packed
	} else {
		model.VrAdminDists = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerVrAdminDists{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ZoneName != nil {
		model.ZoneName = basetypes.NewStringValue(*sdk.ZoneName)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ZoneName", "value": *sdk.ZoneName})
	} else {
		model.ZoneName = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInner ---
func unpackLogicalRoutersVrfInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInner ---
func packLogicalRoutersVrfInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInner
		obj, d := packLogicalRoutersVrfInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerAdminDists ---
func unpackLogicalRoutersVrfInnerAdminDistsToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerAdminDists, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerAdminDists", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerAdminDists
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerAdminDists
	var d diag.Diagnostics
	// Handling Primitives
	if !model.BgpExternal.IsNull() && !model.BgpExternal.IsUnknown() {
		val := float32(model.BgpExternal.ValueFloat64())
		sdk.BgpExternal = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "BgpExternal", "value": *sdk.BgpExternal})
	}

	// Handling Primitives
	if !model.BgpInternal.IsNull() && !model.BgpInternal.IsUnknown() {
		val := float32(model.BgpInternal.ValueFloat64())
		sdk.BgpInternal = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "BgpInternal", "value": *sdk.BgpInternal})
	}

	// Handling Primitives
	if !model.BgpLocal.IsNull() && !model.BgpLocal.IsUnknown() {
		val := float32(model.BgpLocal.ValueFloat64())
		sdk.BgpLocal = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "BgpLocal", "value": *sdk.BgpLocal})
	}

	// Handling Primitives
	if !model.OspfExt.IsNull() && !model.OspfExt.IsUnknown() {
		val := float32(model.OspfExt.ValueFloat64())
		sdk.OspfExt = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OspfExt", "value": *sdk.OspfExt})
	}

	// Handling Primitives
	if !model.OspfInter.IsNull() && !model.OspfInter.IsUnknown() {
		val := float32(model.OspfInter.ValueFloat64())
		sdk.OspfInter = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OspfInter", "value": *sdk.OspfInter})
	}

	// Handling Primitives
	if !model.OspfIntra.IsNull() && !model.OspfIntra.IsUnknown() {
		val := float32(model.OspfIntra.ValueFloat64())
		sdk.OspfIntra = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OspfIntra", "value": *sdk.OspfIntra})
	}

	// Handling Primitives
	if !model.Ospfv3Ext.IsNull() && !model.Ospfv3Ext.IsUnknown() {
		val := float32(model.Ospfv3Ext.ValueFloat64())
		sdk.Ospfv3Ext = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ospfv3Ext", "value": *sdk.Ospfv3Ext})
	}

	// Handling Primitives
	if !model.Ospfv3Inter.IsNull() && !model.Ospfv3Inter.IsUnknown() {
		val := float32(model.Ospfv3Inter.ValueFloat64())
		sdk.Ospfv3Inter = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ospfv3Inter", "value": *sdk.Ospfv3Inter})
	}

	// Handling Primitives
	if !model.Ospfv3Intra.IsNull() && !model.Ospfv3Intra.IsUnknown() {
		val := float32(model.Ospfv3Intra.ValueFloat64())
		sdk.Ospfv3Intra = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ospfv3Intra", "value": *sdk.Ospfv3Intra})
	}

	// Handling Primitives
	if !model.Rip.IsNull() && !model.Rip.IsUnknown() {
		val := float32(model.Rip.ValueFloat64())
		sdk.Rip = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Rip", "value": *sdk.Rip})
	}

	// Handling Primitives
	if !model.Static.IsNull() && !model.Static.IsUnknown() {
		val := float32(model.Static.ValueFloat64())
		sdk.Static = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Static", "value": *sdk.Static})
	}

	// Handling Primitives
	if !model.StaticIpv6.IsNull() && !model.StaticIpv6.IsUnknown() {
		val := float32(model.StaticIpv6.ValueFloat64())
		sdk.StaticIpv6 = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "StaticIpv6", "value": *sdk.StaticIpv6})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerAdminDists", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerAdminDists ---
func packLogicalRoutersVrfInnerAdminDistsFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerAdminDists) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerAdminDists", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerAdminDists
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.BgpExternal != nil {
		model.BgpExternal = basetypes.NewFloat64Value(float64(*sdk.BgpExternal))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "BgpExternal", "value": *sdk.BgpExternal})
	} else {
		model.BgpExternal = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.BgpInternal != nil {
		model.BgpInternal = basetypes.NewFloat64Value(float64(*sdk.BgpInternal))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "BgpInternal", "value": *sdk.BgpInternal})
	} else {
		model.BgpInternal = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.BgpLocal != nil {
		model.BgpLocal = basetypes.NewFloat64Value(float64(*sdk.BgpLocal))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "BgpLocal", "value": *sdk.BgpLocal})
	} else {
		model.BgpLocal = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OspfExt != nil {
		model.OspfExt = basetypes.NewFloat64Value(float64(*sdk.OspfExt))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OspfExt", "value": *sdk.OspfExt})
	} else {
		model.OspfExt = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OspfInter != nil {
		model.OspfInter = basetypes.NewFloat64Value(float64(*sdk.OspfInter))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OspfInter", "value": *sdk.OspfInter})
	} else {
		model.OspfInter = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OspfIntra != nil {
		model.OspfIntra = basetypes.NewFloat64Value(float64(*sdk.OspfIntra))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OspfIntra", "value": *sdk.OspfIntra})
	} else {
		model.OspfIntra = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ospfv3Ext != nil {
		model.Ospfv3Ext = basetypes.NewFloat64Value(float64(*sdk.Ospfv3Ext))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ospfv3Ext", "value": *sdk.Ospfv3Ext})
	} else {
		model.Ospfv3Ext = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ospfv3Inter != nil {
		model.Ospfv3Inter = basetypes.NewFloat64Value(float64(*sdk.Ospfv3Inter))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ospfv3Inter", "value": *sdk.Ospfv3Inter})
	} else {
		model.Ospfv3Inter = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ospfv3Intra != nil {
		model.Ospfv3Intra = basetypes.NewFloat64Value(float64(*sdk.Ospfv3Intra))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ospfv3Intra", "value": *sdk.Ospfv3Intra})
	} else {
		model.Ospfv3Intra = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Rip != nil {
		model.Rip = basetypes.NewFloat64Value(float64(*sdk.Rip))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Rip", "value": *sdk.Rip})
	} else {
		model.Rip = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Static != nil {
		model.Static = basetypes.NewFloat64Value(float64(*sdk.Static))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Static", "value": *sdk.Static})
	} else {
		model.Static = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.StaticIpv6 != nil {
		model.StaticIpv6 = basetypes.NewFloat64Value(float64(*sdk.StaticIpv6))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "StaticIpv6", "value": *sdk.StaticIpv6})
	} else {
		model.StaticIpv6 = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerAdminDists{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerAdminDists", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerAdminDists ---
func unpackLogicalRoutersVrfInnerAdminDistsListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerAdminDists, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerAdminDists")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerAdminDists
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerAdminDists, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerAdminDists{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerAdminDistsToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerAdminDists", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerAdminDists ---
func packLogicalRoutersVrfInnerAdminDistsListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerAdminDists) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerAdminDists")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerAdminDists

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerAdminDists
		obj, d := packLogicalRoutersVrfInnerAdminDistsFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerAdminDists{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerAdminDists", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerAdminDists{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgp ---
func unpackLogicalRoutersVrfInnerBgpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgp
	var d diag.Diagnostics
	// Handling Objects
	if !model.AdvertiseNetwork.IsNull() && !model.AdvertiseNetwork.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AdvertiseNetwork")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkToSdk(ctx, model.AdvertiseNetwork)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AdvertiseNetwork"})
		}
		if unpacked != nil {
			sdk.AdvertiseNetwork = unpacked
		}
	}

	// Handling Objects
	if !model.Aggregate.IsNull() && !model.Aggregate.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Aggregate")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateToSdk(ctx, model.Aggregate)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Aggregate"})
		}
		if unpacked != nil {
			sdk.Aggregate = unpacked
		}
	}

	// Handling Lists
	if !model.AggregateRoutes.IsNull() && !model.AggregateRoutes.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AggregateRoutes")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerListToSdk(ctx, model.AggregateRoutes)
		diags.Append(d...)
		sdk.AggregateRoutes = unpacked
	}

	// Handling Primitives
	if !model.AllowRedistDefaultRoute.IsNull() && !model.AllowRedistDefaultRoute.IsUnknown() {
		sdk.AllowRedistDefaultRoute = model.AllowRedistDefaultRoute.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AllowRedistDefaultRoute", "value": *sdk.AllowRedistDefaultRoute})
	}

	// Handling Primitives
	if !model.AlwaysAdvertiseNetworkRoute.IsNull() && !model.AlwaysAdvertiseNetworkRoute.IsUnknown() {
		sdk.AlwaysAdvertiseNetworkRoute = model.AlwaysAdvertiseNetworkRoute.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AlwaysAdvertiseNetworkRoute", "value": *sdk.AlwaysAdvertiseNetworkRoute})
	}

	// Handling Primitives
	if !model.AsFormat.IsNull() && !model.AsFormat.IsUnknown() {
		sdk.AsFormat = model.AsFormat.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AsFormat", "value": *sdk.AsFormat})
	}

	// Handling Primitives
	if !model.ConfederationMemberAs.IsNull() && !model.ConfederationMemberAs.IsUnknown() {
		sdk.ConfederationMemberAs = model.ConfederationMemberAs.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ConfederationMemberAs", "value": *sdk.ConfederationMemberAs})
	}

	// Handling Primitives
	if !model.DefaultLocalPreference.IsNull() && !model.DefaultLocalPreference.IsUnknown() {
		val := float32(model.DefaultLocalPreference.ValueFloat64())
		sdk.DefaultLocalPreference = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DefaultLocalPreference", "value": *sdk.DefaultLocalPreference})
	}

	// Handling Primitives
	if !model.EcmpMultiAs.IsNull() && !model.EcmpMultiAs.IsUnknown() {
		sdk.EcmpMultiAs = model.EcmpMultiAs.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "EcmpMultiAs", "value": *sdk.EcmpMultiAs})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.EnforceFirstAs.IsNull() && !model.EnforceFirstAs.IsUnknown() {
		sdk.EnforceFirstAs = model.EnforceFirstAs.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "EnforceFirstAs", "value": *sdk.EnforceFirstAs})
	}

	// Handling Primitives
	if !model.FastExternalFailover.IsNull() && !model.FastExternalFailover.IsUnknown() {
		sdk.FastExternalFailover = model.FastExternalFailover.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "FastExternalFailover", "value": *sdk.FastExternalFailover})
	}

	// Handling Objects
	if !model.GlobalBfd.IsNull() && !model.GlobalBfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GlobalBfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.GlobalBfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GlobalBfd"})
		}
		if unpacked != nil {
			sdk.GlobalBfd = unpacked
		}
	}

	// Handling Objects
	if !model.GracefulRestart.IsNull() && !model.GracefulRestart.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GracefulRestart")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGracefulRestartToSdk(ctx, model.GracefulRestart)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GracefulRestart"})
		}
		if unpacked != nil {
			sdk.GracefulRestart = unpacked
		}
	}

	// Handling Primitives
	if !model.GracefulShutdown.IsNull() && !model.GracefulShutdown.IsUnknown() {
		sdk.GracefulShutdown = model.GracefulShutdown.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GracefulShutdown", "value": *sdk.GracefulShutdown})
	}

	// Handling Primitives
	if !model.InstallRoute.IsNull() && !model.InstallRoute.IsUnknown() {
		sdk.InstallRoute = model.InstallRoute.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "InstallRoute", "value": *sdk.InstallRoute})
	}

	// Handling Primitives
	if !model.LocalAs.IsNull() && !model.LocalAs.IsUnknown() {
		sdk.LocalAs = model.LocalAs.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "LocalAs", "value": *sdk.LocalAs})
	}

	// Handling Objects
	if !model.Med.IsNull() && !model.Med.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Med")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpMedToSdk(ctx, model.Med)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Med"})
		}
		if unpacked != nil {
			sdk.Med = unpacked
		}
	}

	// Handling Lists
	if !model.PeerGroup.IsNull() && !model.PeerGroup.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field PeerGroup")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerListToSdk(ctx, model.PeerGroup)
		diags.Append(d...)
		sdk.PeerGroup = unpacked
	}

	// Handling Objects
	if !model.Policy.IsNull() && !model.Policy.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Policy")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyToSdk(ctx, model.Policy)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Policy"})
		}
		if unpacked != nil {
			sdk.Policy = unpacked
		}
	}

	// Handling Lists
	if !model.RedistRules.IsNull() && !model.RedistRules.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field RedistRules")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpRedistRulesInnerListToSdk(ctx, model.RedistRules)
		diags.Append(d...)
		sdk.RedistRules = unpacked
	}

	// Handling Objects
	if !model.RedistributionProfile.IsNull() && !model.RedistributionProfile.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field RedistributionProfile")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpRedistributionProfileToSdk(ctx, model.RedistributionProfile)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "RedistributionProfile"})
		}
		if unpacked != nil {
			sdk.RedistributionProfile = unpacked
		}
	}

	// Handling Primitives
	if !model.RejectDefaultRoute.IsNull() && !model.RejectDefaultRoute.IsUnknown() {
		sdk.RejectDefaultRoute = model.RejectDefaultRoute.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RejectDefaultRoute", "value": *sdk.RejectDefaultRoute})
	}

	// Handling Primitives
	if !model.RouterId.IsNull() && !model.RouterId.IsUnknown() {
		sdk.RouterId = model.RouterId.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouterId", "value": *sdk.RouterId})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgp ---
func packLogicalRoutersVrfInnerBgpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgp
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AdvertiseNetwork != nil {
		tflog.Debug(ctx, "Packing nested object for field AdvertiseNetwork")
		packed, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkFromSdk(ctx, *sdk.AdvertiseNetwork)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AdvertiseNetwork"})
		}
		model.AdvertiseNetwork = packed
	} else {
		model.AdvertiseNetwork = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetwork{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Aggregate != nil {
		tflog.Debug(ctx, "Packing nested object for field Aggregate")
		packed, d := packLogicalRoutersVrfInnerBgpAggregateFromSdk(ctx, *sdk.Aggregate)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Aggregate"})
		}
		model.Aggregate = packed
	} else {
		model.Aggregate = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpAggregate{}.AttrTypes())
	}
	// Handling Lists
	if sdk.AggregateRoutes != nil {
		tflog.Debug(ctx, "Packing list of objects for field AggregateRoutes")
		packed, d := packLogicalRoutersVrfInnerBgpAggregateRoutesInnerListFromSdk(ctx, sdk.AggregateRoutes)
		diags.Append(d...)
		model.AggregateRoutes = packed
	} else {
		model.AggregateRoutes = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAggregateRoutesInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AllowRedistDefaultRoute != nil {
		model.AllowRedistDefaultRoute = basetypes.NewBoolValue(*sdk.AllowRedistDefaultRoute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AllowRedistDefaultRoute", "value": *sdk.AllowRedistDefaultRoute})
	} else {
		model.AllowRedistDefaultRoute = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AlwaysAdvertiseNetworkRoute != nil {
		model.AlwaysAdvertiseNetworkRoute = basetypes.NewBoolValue(*sdk.AlwaysAdvertiseNetworkRoute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AlwaysAdvertiseNetworkRoute", "value": *sdk.AlwaysAdvertiseNetworkRoute})
	} else {
		model.AlwaysAdvertiseNetworkRoute = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AsFormat != nil {
		model.AsFormat = basetypes.NewStringValue(*sdk.AsFormat)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AsFormat", "value": *sdk.AsFormat})
	} else {
		model.AsFormat = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ConfederationMemberAs != nil {
		model.ConfederationMemberAs = basetypes.NewStringValue(*sdk.ConfederationMemberAs)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ConfederationMemberAs", "value": *sdk.ConfederationMemberAs})
	} else {
		model.ConfederationMemberAs = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.DefaultLocalPreference != nil {
		model.DefaultLocalPreference = basetypes.NewFloat64Value(float64(*sdk.DefaultLocalPreference))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DefaultLocalPreference", "value": *sdk.DefaultLocalPreference})
	} else {
		model.DefaultLocalPreference = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.EcmpMultiAs != nil {
		model.EcmpMultiAs = basetypes.NewBoolValue(*sdk.EcmpMultiAs)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "EcmpMultiAs", "value": *sdk.EcmpMultiAs})
	} else {
		model.EcmpMultiAs = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.EnforceFirstAs != nil {
		model.EnforceFirstAs = basetypes.NewBoolValue(*sdk.EnforceFirstAs)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "EnforceFirstAs", "value": *sdk.EnforceFirstAs})
	} else {
		model.EnforceFirstAs = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.FastExternalFailover != nil {
		model.FastExternalFailover = basetypes.NewBoolValue(*sdk.FastExternalFailover)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "FastExternalFailover", "value": *sdk.FastExternalFailover})
	} else {
		model.FastExternalFailover = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GlobalBfd != nil {
		tflog.Debug(ctx, "Packing nested object for field GlobalBfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.GlobalBfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GlobalBfd"})
		}
		model.GlobalBfd = packed
	} else {
		model.GlobalBfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GracefulRestart != nil {
		tflog.Debug(ctx, "Packing nested object for field GracefulRestart")
		packed, d := packLogicalRoutersVrfInnerBgpGracefulRestartFromSdk(ctx, *sdk.GracefulRestart)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GracefulRestart"})
		}
		model.GracefulRestart = packed
	} else {
		model.GracefulRestart = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGracefulRestart{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GracefulShutdown != nil {
		model.GracefulShutdown = basetypes.NewBoolValue(*sdk.GracefulShutdown)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GracefulShutdown", "value": *sdk.GracefulShutdown})
	} else {
		model.GracefulShutdown = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.InstallRoute != nil {
		model.InstallRoute = basetypes.NewBoolValue(*sdk.InstallRoute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "InstallRoute", "value": *sdk.InstallRoute})
	} else {
		model.InstallRoute = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.LocalAs != nil {
		model.LocalAs = basetypes.NewStringValue(*sdk.LocalAs)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "LocalAs", "value": *sdk.LocalAs})
	} else {
		model.LocalAs = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Med != nil {
		tflog.Debug(ctx, "Packing nested object for field Med")
		packed, d := packLogicalRoutersVrfInnerBgpMedFromSdk(ctx, *sdk.Med)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Med"})
		}
		model.Med = packed
	} else {
		model.Med = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpMed{}.AttrTypes())
	}
	// Handling Lists
	if sdk.PeerGroup != nil {
		tflog.Debug(ctx, "Packing list of objects for field PeerGroup")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerListFromSdk(ctx, sdk.PeerGroup)
		diags.Append(d...)
		model.PeerGroup = packed
	} else {
		model.PeerGroup = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Policy != nil {
		tflog.Debug(ctx, "Packing nested object for field Policy")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyFromSdk(ctx, *sdk.Policy)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Policy"})
		}
		model.Policy = packed
	} else {
		model.Policy = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicy{}.AttrTypes())
	}
	// Handling Lists
	if sdk.RedistRules != nil {
		tflog.Debug(ctx, "Packing list of objects for field RedistRules")
		packed, d := packLogicalRoutersVrfInnerBgpRedistRulesInnerListFromSdk(ctx, sdk.RedistRules)
		diags.Append(d...)
		model.RedistRules = packed
	} else {
		model.RedistRules = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpRedistRulesInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.RedistributionProfile != nil {
		tflog.Debug(ctx, "Packing nested object for field RedistributionProfile")
		packed, d := packLogicalRoutersVrfInnerBgpRedistributionProfileFromSdk(ctx, *sdk.RedistributionProfile)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "RedistributionProfile"})
		}
		model.RedistributionProfile = packed
	} else {
		model.RedistributionProfile = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpRedistributionProfile{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RejectDefaultRoute != nil {
		model.RejectDefaultRoute = basetypes.NewBoolValue(*sdk.RejectDefaultRoute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RejectDefaultRoute", "value": *sdk.RejectDefaultRoute})
	} else {
		model.RejectDefaultRoute = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouterId != nil {
		model.RouterId = basetypes.NewStringValue(*sdk.RouterId)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouterId", "value": *sdk.RouterId})
	} else {
		model.RouterId = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgp ---
func unpackLogicalRoutersVrfInnerBgpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgp ---
func packLogicalRoutersVrfInnerBgpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgp
		obj, d := packLogicalRoutersVrfInnerBgpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetwork ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAdvertiseNetwork, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetwork", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetwork
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetwork
	var d diag.Diagnostics
	// Handling Objects
	if !model.Ipv4.IsNull() && !model.Ipv4.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv4")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4ToSdk(ctx, model.Ipv4)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv4"})
		}
		if unpacked != nil {
			sdk.Ipv4 = unpacked
		}
	}

	// Handling Objects
	if !model.Ipv6.IsNull() && !model.Ipv6.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv6")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6ToSdk(ctx, model.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv6"})
		}
		if unpacked != nil {
			sdk.Ipv6 = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetwork", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAdvertiseNetwork ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetwork) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetwork", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetwork
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv4 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv4")
		packed, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4FromSdk(ctx, *sdk.Ipv4)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv4"})
		}
		model.Ipv4 = packed
	} else {
		model.Ipv4 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv6 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv6")
		packed, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6FromSdk(ctx, *sdk.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv6"})
		}
		model.Ipv6 = packed
	} else {
		model.Ipv6 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetwork{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetwork", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetwork ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetwork, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetwork")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetwork
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetwork, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetwork{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetwork", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAdvertiseNetwork ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAdvertiseNetwork) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetwork")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetwork

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAdvertiseNetwork
		obj, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetwork{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetwork", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetwork{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4 ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4
	var d diag.Diagnostics
	// Handling Lists
	if !model.Network.IsNull() && !model.Network.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Network")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInnerListToSdk(ctx, model.Network)
		diags.Append(d...)
		sdk.Network = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4 ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Network != nil {
		tflog.Debug(ctx, "Packing list of objects for field Network")
		packed, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInnerListFromSdk(ctx, sdk.Network)
		diags.Append(d...)
		model.Network = packed
	} else {
		model.Network = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4 ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4 ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4
		obj, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Backdoor.IsNull() && !model.Backdoor.IsUnknown() {
		sdk.Backdoor = model.Backdoor.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Backdoor", "value": *sdk.Backdoor})
	}

	// Handling Primitives
	if !model.Multicast.IsNull() && !model.Multicast.IsUnknown() {
		sdk.Multicast = model.Multicast.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Multicast", "value": *sdk.Multicast})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Unicast.IsNull() && !model.Unicast.IsUnknown() {
		sdk.Unicast = model.Unicast.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Unicast", "value": *sdk.Unicast})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Backdoor != nil {
		model.Backdoor = basetypes.NewBoolValue(*sdk.Backdoor)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Backdoor", "value": *sdk.Backdoor})
	} else {
		model.Backdoor = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Multicast != nil {
		model.Multicast = basetypes.NewBoolValue(*sdk.Multicast)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Multicast", "value": *sdk.Multicast})
	} else {
		model.Multicast = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Unicast != nil {
		model.Unicast = basetypes.NewBoolValue(*sdk.Unicast)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Unicast", "value": *sdk.Unicast})
	} else {
		model.Unicast = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner
		obj, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv4NetworkInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6 ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6
	var d diag.Diagnostics
	// Handling Lists
	if !model.Network.IsNull() && !model.Network.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Network")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInnerListToSdk(ctx, model.Network)
		diags.Append(d...)
		sdk.Network = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6 ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Network != nil {
		tflog.Debug(ctx, "Packing list of objects for field Network")
		packed, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInnerListFromSdk(ctx, sdk.Network)
		diags.Append(d...)
		model.Network = packed
	} else {
		model.Network = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6 ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6 ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6
		obj, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Unicast.IsNull() && !model.Unicast.IsUnknown() {
		sdk.Unicast = model.Unicast.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Unicast", "value": *sdk.Unicast})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Unicast != nil {
		model.Unicast = basetypes.NewBoolValue(*sdk.Unicast)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Unicast", "value": *sdk.Unicast})
	} else {
		model.Unicast = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner ---
func unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner ---
func packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner
		obj, d := packLogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAdvertiseNetworkIpv6NetworkInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAggregate ---
func unpackLogicalRoutersVrfInnerBgpAggregateToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAggregate, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAggregate", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAggregate
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAggregate
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AggregateMed.IsNull() && !model.AggregateMed.IsUnknown() {
		sdk.AggregateMed = model.AggregateMed.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AggregateMed", "value": *sdk.AggregateMed})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAggregate", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAggregate ---
func packLogicalRoutersVrfInnerBgpAggregateFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAggregate) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAggregate", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAggregate
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AggregateMed != nil {
		model.AggregateMed = basetypes.NewBoolValue(*sdk.AggregateMed)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AggregateMed", "value": *sdk.AggregateMed})
	} else {
		model.AggregateMed = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregate{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAggregate", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAggregate ---
func unpackLogicalRoutersVrfInnerBgpAggregateListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAggregate, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAggregate")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAggregate
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAggregate, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregate{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAggregate", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAggregate ---
func packLogicalRoutersVrfInnerBgpAggregateListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAggregate) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAggregate")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAggregate

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAggregate
		obj, d := packLogicalRoutersVrfInnerBgpAggregateFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAggregate{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAggregate", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregate{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAggregateRoutesInner ---
func unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AsSet.IsNull() && !model.AsSet.IsUnknown() {
		sdk.AsSet = model.AsSet.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AsSet", "value": *sdk.AsSet})
	}

	// Handling Primitives
	if !model.Description.IsNull() && !model.Description.IsUnknown() {
		sdk.Description = model.Description.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Description", "value": *sdk.Description})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.SameMed.IsNull() && !model.SameMed.IsUnknown() {
		sdk.SameMed = model.SameMed.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SameMed", "value": *sdk.SameMed})
	}

	// Handling Primitives
	if !model.SummaryOnly.IsNull() && !model.SummaryOnly.IsUnknown() {
		sdk.SummaryOnly = model.SummaryOnly.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SummaryOnly", "value": *sdk.SummaryOnly})
	}

	// Handling Objects
	if !model.Type.IsNull() && !model.Type.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Type")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeToSdk(ctx, model.Type)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Type"})
		}
		if unpacked != nil {
			sdk.Type = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAggregateRoutesInner ---
func packLogicalRoutersVrfInnerBgpAggregateRoutesInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AsSet != nil {
		model.AsSet = basetypes.NewBoolValue(*sdk.AsSet)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AsSet", "value": *sdk.AsSet})
	} else {
		model.AsSet = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Description != nil {
		model.Description = basetypes.NewStringValue(*sdk.Description)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Description", "value": *sdk.Description})
	} else {
		model.Description = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.SameMed != nil {
		model.SameMed = basetypes.NewBoolValue(*sdk.SameMed)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SameMed", "value": *sdk.SameMed})
	} else {
		model.SameMed = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SummaryOnly != nil {
		model.SummaryOnly = basetypes.NewBoolValue(*sdk.SummaryOnly)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SummaryOnly", "value": *sdk.SummaryOnly})
	} else {
		model.SummaryOnly = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Type != nil {
		tflog.Debug(ctx, "Packing nested object for field Type")
		packed, d := packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeFromSdk(ctx, *sdk.Type)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Type"})
		}
		model.Type = packed
	} else {
		model.Type = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAggregateRoutesInner ---
func unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAggregateRoutesInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAggregateRoutesInner ---
func packLogicalRoutersVrfInnerBgpAggregateRoutesInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAggregateRoutesInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInner
		obj, d := packLogicalRoutersVrfInnerBgpAggregateRoutesInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAggregateRoutesInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAggregateRoutesInnerType ---
func unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType
	var d diag.Diagnostics
	// Handling Objects
	if !model.Ipv4.IsNull() && !model.Ipv4.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv4")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4ToSdk(ctx, model.Ipv4)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv4"})
		}
		if unpacked != nil {
			sdk.Ipv4 = unpacked
		}
	}

	// Handling Objects
	if !model.Ipv6.IsNull() && !model.Ipv6.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv6")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4ToSdk(ctx, model.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv6"})
		}
		if unpacked != nil {
			sdk.Ipv6 = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAggregateRoutesInnerType ---
func packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv4 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv4")
		packed, d := packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4FromSdk(ctx, *sdk.Ipv4)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv4"})
		}
		model.Ipv4 = packed
	} else {
		model.Ipv4 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv6 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv6")
		packed, d := packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4FromSdk(ctx, *sdk.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv6"})
		}
		model.Ipv6 = packed
	} else {
		model.Ipv6 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAggregateRoutesInnerType ---
func unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAggregateRoutesInnerType ---
func packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType
		obj, d := packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerType{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4 ---
func unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AttributeMap.IsNull() && !model.AttributeMap.IsUnknown() {
		sdk.AttributeMap = model.AttributeMap.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AttributeMap", "value": *sdk.AttributeMap})
	}

	// Handling Primitives
	if !model.SummaryPrefix.IsNull() && !model.SummaryPrefix.IsUnknown() {
		sdk.SummaryPrefix = model.SummaryPrefix.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SummaryPrefix", "value": *sdk.SummaryPrefix})
	}

	// Handling Primitives
	if !model.SuppressMap.IsNull() && !model.SuppressMap.IsUnknown() {
		sdk.SuppressMap = model.SuppressMap.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SuppressMap", "value": *sdk.SuppressMap})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4 ---
func packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AttributeMap != nil {
		model.AttributeMap = basetypes.NewStringValue(*sdk.AttributeMap)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AttributeMap", "value": *sdk.AttributeMap})
	} else {
		model.AttributeMap = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SummaryPrefix != nil {
		model.SummaryPrefix = basetypes.NewStringValue(*sdk.SummaryPrefix)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SummaryPrefix", "value": *sdk.SummaryPrefix})
	} else {
		model.SummaryPrefix = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SuppressMap != nil {
		model.SuppressMap = basetypes.NewStringValue(*sdk.SuppressMap)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SuppressMap", "value": *sdk.SuppressMap})
	} else {
		model.SuppressMap = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4 ---
func unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4 ---
func packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4
		obj, d := packLogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpAggregateRoutesInnerTypeIpv4{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpGlobalBfd ---
func unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpGlobalBfd, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpGlobalBfd", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpGlobalBfd
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpGlobalBfd
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Profile.IsNull() && !model.Profile.IsUnknown() {
		sdk.Profile = model.Profile.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Profile", "value": *sdk.Profile})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpGlobalBfd", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpGlobalBfd ---
func packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpGlobalBfd) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpGlobalBfd", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpGlobalBfd
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Profile != nil {
		model.Profile = basetypes.NewStringValue(*sdk.Profile)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Profile", "value": *sdk.Profile})
	} else {
		model.Profile = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpGlobalBfd", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpGlobalBfd ---
func unpackLogicalRoutersVrfInnerBgpGlobalBfdListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpGlobalBfd, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpGlobalBfd")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpGlobalBfd
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpGlobalBfd, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpGlobalBfd", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpGlobalBfd ---
func packLogicalRoutersVrfInnerBgpGlobalBfdListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpGlobalBfd) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpGlobalBfd")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpGlobalBfd

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpGlobalBfd
		obj, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpGlobalBfd", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpGracefulRestart ---
func unpackLogicalRoutersVrfInnerBgpGracefulRestartToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpGracefulRestart, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpGracefulRestart", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpGracefulRestart
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpGracefulRestart
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.LocalRestartTime.IsNull() && !model.LocalRestartTime.IsUnknown() {
		val := float32(model.LocalRestartTime.ValueFloat64())
		sdk.LocalRestartTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "LocalRestartTime", "value": *sdk.LocalRestartTime})
	}

	// Handling Primitives
	if !model.MaxPeerRestartTime.IsNull() && !model.MaxPeerRestartTime.IsUnknown() {
		val := float32(model.MaxPeerRestartTime.ValueFloat64())
		sdk.MaxPeerRestartTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxPeerRestartTime", "value": *sdk.MaxPeerRestartTime})
	}

	// Handling Primitives
	if !model.StaleRouteTime.IsNull() && !model.StaleRouteTime.IsUnknown() {
		val := float32(model.StaleRouteTime.ValueFloat64())
		sdk.StaleRouteTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "StaleRouteTime", "value": *sdk.StaleRouteTime})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpGracefulRestart", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpGracefulRestart ---
func packLogicalRoutersVrfInnerBgpGracefulRestartFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpGracefulRestart) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpGracefulRestart", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpGracefulRestart
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.LocalRestartTime != nil {
		model.LocalRestartTime = basetypes.NewFloat64Value(float64(*sdk.LocalRestartTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "LocalRestartTime", "value": *sdk.LocalRestartTime})
	} else {
		model.LocalRestartTime = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxPeerRestartTime != nil {
		model.MaxPeerRestartTime = basetypes.NewFloat64Value(float64(*sdk.MaxPeerRestartTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxPeerRestartTime", "value": *sdk.MaxPeerRestartTime})
	} else {
		model.MaxPeerRestartTime = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.StaleRouteTime != nil {
		model.StaleRouteTime = basetypes.NewFloat64Value(float64(*sdk.StaleRouteTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "StaleRouteTime", "value": *sdk.StaleRouteTime})
	} else {
		model.StaleRouteTime = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpGracefulRestart{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpGracefulRestart", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpGracefulRestart ---
func unpackLogicalRoutersVrfInnerBgpGracefulRestartListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpGracefulRestart, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpGracefulRestart")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpGracefulRestart
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpGracefulRestart, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpGracefulRestart{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGracefulRestartToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpGracefulRestart", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpGracefulRestart ---
func packLogicalRoutersVrfInnerBgpGracefulRestartListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpGracefulRestart) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpGracefulRestart")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpGracefulRestart

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpGracefulRestart
		obj, d := packLogicalRoutersVrfInnerBgpGracefulRestartFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpGracefulRestart{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpGracefulRestart", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpGracefulRestart{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpMed ---
func unpackLogicalRoutersVrfInnerBgpMedToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpMed, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpMed", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpMed
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpMed
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AlwaysCompareMed.IsNull() && !model.AlwaysCompareMed.IsUnknown() {
		sdk.AlwaysCompareMed = model.AlwaysCompareMed.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AlwaysCompareMed", "value": *sdk.AlwaysCompareMed})
	}

	// Handling Primitives
	if !model.DeterministicMedComparison.IsNull() && !model.DeterministicMedComparison.IsUnknown() {
		sdk.DeterministicMedComparison = model.DeterministicMedComparison.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DeterministicMedComparison", "value": *sdk.DeterministicMedComparison})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpMed", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpMed ---
func packLogicalRoutersVrfInnerBgpMedFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpMed) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpMed", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpMed
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AlwaysCompareMed != nil {
		model.AlwaysCompareMed = basetypes.NewBoolValue(*sdk.AlwaysCompareMed)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AlwaysCompareMed", "value": *sdk.AlwaysCompareMed})
	} else {
		model.AlwaysCompareMed = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.DeterministicMedComparison != nil {
		model.DeterministicMedComparison = basetypes.NewBoolValue(*sdk.DeterministicMedComparison)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DeterministicMedComparison", "value": *sdk.DeterministicMedComparison})
	} else {
		model.DeterministicMedComparison = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpMed{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpMed", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpMed ---
func unpackLogicalRoutersVrfInnerBgpMedListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpMed, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpMed")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpMed
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpMed, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpMed{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpMedToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpMed", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpMed ---
func packLogicalRoutersVrfInnerBgpMedListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpMed) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpMed")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpMed

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpMed
		obj, d := packLogicalRoutersVrfInnerBgpMedFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpMed{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpMed", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpMed{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInner ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInner
	var d diag.Diagnostics
	// Handling Objects
	if !model.AddressFamily.IsNull() && !model.AddressFamily.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AddressFamily")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyToSdk(ctx, model.AddressFamily)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AddressFamily"})
		}
		if unpacked != nil {
			sdk.AddressFamily = unpacked
		}
	}

	// Handling Primitives
	if !model.AggregatedConfedAsPath.IsNull() && !model.AggregatedConfedAsPath.IsUnknown() {
		sdk.AggregatedConfedAsPath = model.AggregatedConfedAsPath.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AggregatedConfedAsPath", "value": *sdk.AggregatedConfedAsPath})
	}

	// Handling Objects
	if !model.ConnectionOptions.IsNull() && !model.ConnectionOptions.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field ConnectionOptions")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptionsToSdk(ctx, model.ConnectionOptions)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "ConnectionOptions"})
		}
		if unpacked != nil {
			sdk.ConnectionOptions = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Objects
	if !model.FilteringProfile.IsNull() && !model.FilteringProfile.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field FilteringProfile")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyToSdk(ctx, model.FilteringProfile)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "FilteringProfile"})
		}
		if unpacked != nil {
			sdk.FilteringProfile = unpacked
		}
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Lists
	if !model.Peer.IsNull() && !model.Peer.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Peer")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerListToSdk(ctx, model.Peer)
		diags.Append(d...)
		sdk.Peer = unpacked
	}

	// Handling Primitives
	if !model.SoftResetWithStoredInfo.IsNull() && !model.SoftResetWithStoredInfo.IsUnknown() {
		sdk.SoftResetWithStoredInfo = model.SoftResetWithStoredInfo.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SoftResetWithStoredInfo", "value": *sdk.SoftResetWithStoredInfo})
	}

	// Handling Objects
	if !model.Type.IsNull() && !model.Type.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Type")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeToSdk(ctx, model.Type)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Type"})
		}
		if unpacked != nil {
			sdk.Type = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInner ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInner
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AddressFamily != nil {
		tflog.Debug(ctx, "Packing nested object for field AddressFamily")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyFromSdk(ctx, *sdk.AddressFamily)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AddressFamily"})
		}
		model.AddressFamily = packed
	} else {
		model.AddressFamily = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AggregatedConfedAsPath != nil {
		model.AggregatedConfedAsPath = basetypes.NewBoolValue(*sdk.AggregatedConfedAsPath)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AggregatedConfedAsPath", "value": *sdk.AggregatedConfedAsPath})
	} else {
		model.AggregatedConfedAsPath = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.ConnectionOptions != nil {
		tflog.Debug(ctx, "Packing nested object for field ConnectionOptions")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptionsFromSdk(ctx, *sdk.ConnectionOptions)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "ConnectionOptions"})
		}
		model.ConnectionOptions = packed
	} else {
		model.ConnectionOptions = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.FilteringProfile != nil {
		tflog.Debug(ctx, "Packing nested object for field FilteringProfile")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyFromSdk(ctx, *sdk.FilteringProfile)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "FilteringProfile"})
		}
		model.FilteringProfile = packed
	} else {
		model.FilteringProfile = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Lists
	if sdk.Peer != nil {
		tflog.Debug(ctx, "Packing list of objects for field Peer")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerListFromSdk(ctx, sdk.Peer)
		diags.Append(d...)
		model.Peer = packed
	} else {
		model.Peer = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SoftResetWithStoredInfo != nil {
		model.SoftResetWithStoredInfo = basetypes.NewBoolValue(*sdk.SoftResetWithStoredInfo)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SoftResetWithStoredInfo", "value": *sdk.SoftResetWithStoredInfo})
	} else {
		model.SoftResetWithStoredInfo = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Type != nil {
		tflog.Debug(ctx, "Packing nested object for field Type")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeFromSdk(ctx, *sdk.Type)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Type"})
		}
		model.Type = packed
	} else {
		model.Type = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerType{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInner ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInner ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInner
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Ipv4.IsNull() && !model.Ipv4.IsUnknown() {
		sdk.Ipv4 = model.Ipv4.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ipv4", "value": *sdk.Ipv4})
	}

	// Handling Primitives
	if !model.Ipv6.IsNull() && !model.Ipv6.IsUnknown() {
		sdk.Ipv6 = model.Ipv6.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ipv6", "value": *sdk.Ipv6})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ipv4 != nil {
		model.Ipv4 = basetypes.NewStringValue(*sdk.Ipv4)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ipv4", "value": *sdk.Ipv4})
	} else {
		model.Ipv4 = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ipv6 != nil {
		model.Ipv6 = basetypes.NewStringValue(*sdk.Ipv6)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ipv6", "value": *sdk.Ipv6})
	} else {
		model.Ipv6 = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptionsToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Primitives
	if !model.Dampening.IsNull() && !model.Dampening.IsUnknown() {
		sdk.Dampening = model.Dampening.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Dampening", "value": *sdk.Dampening})
	}

	// Handling Primitives
	if !model.Multihop.IsNull() && !model.Multihop.IsUnknown() {
		val := float32(model.Multihop.ValueFloat64())
		sdk.Multihop = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Multihop", "value": *sdk.Multihop})
	}

	// Handling Primitives
	if !model.Timers.IsNull() && !model.Timers.IsUnknown() {
		sdk.Timers = model.Timers.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Timers", "value": *sdk.Timers})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptionsFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Dampening != nil {
		model.Dampening = basetypes.NewStringValue(*sdk.Dampening)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Dampening", "value": *sdk.Dampening})
	} else {
		model.Dampening = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Multihop != nil {
		model.Multihop = basetypes.NewFloat64Value(float64(*sdk.Multihop))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Multihop", "value": *sdk.Multihop})
	} else {
		model.Multihop = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Timers != nil {
		model.Timers = basetypes.NewStringValue(*sdk.Timers)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Timers", "value": *sdk.Timers})
	} else {
		model.Timers = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptionsListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptionsToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptionsListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptionsFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner
	var d diag.Diagnostics
	// Handling Objects
	if !model.Bfd.IsNull() && !model.Bfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdToSdk(ctx, model.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bfd"})
		}
		if unpacked != nil {
			sdk.Bfd = unpacked
		}
	}

	// Handling Objects
	if !model.ConnectionOptions.IsNull() && !model.ConnectionOptions.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field ConnectionOptions")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsToSdk(ctx, model.ConnectionOptions)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "ConnectionOptions"})
		}
		if unpacked != nil {
			sdk.ConnectionOptions = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.EnableMpBgp.IsNull() && !model.EnableMpBgp.IsUnknown() {
		sdk.EnableMpBgp = model.EnableMpBgp.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "EnableMpBgp", "value": *sdk.EnableMpBgp})
	}

	// Handling Primitives
	if !model.EnableSenderSideLoopDetection.IsNull() && !model.EnableSenderSideLoopDetection.IsUnknown() {
		sdk.EnableSenderSideLoopDetection = model.EnableSenderSideLoopDetection.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "EnableSenderSideLoopDetection", "value": *sdk.EnableSenderSideLoopDetection})
	}

	// Handling Objects
	if !model.Inherit.IsNull() && !model.Inherit.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Inherit")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritToSdk(ctx, model.Inherit)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Inherit"})
		}
		if unpacked != nil {
			sdk.Inherit = unpacked
		}
	}

	// Handling Objects
	if !model.LocalAddress.IsNull() && !model.LocalAddress.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field LocalAddress")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressToSdk(ctx, model.LocalAddress)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "LocalAddress"})
		}
		if unpacked != nil {
			sdk.LocalAddress = unpacked
		}
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Passive.IsNull() && !model.Passive.IsUnknown() {
		sdk.Passive = model.Passive.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Passive", "value": *sdk.Passive})
	}

	// Handling Objects
	if !model.PeerAddress.IsNull() && !model.PeerAddress.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field PeerAddress")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressToSdk(ctx, model.PeerAddress)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "PeerAddress"})
		}
		if unpacked != nil {
			sdk.PeerAddress = unpacked
		}
	}

	// Handling Primitives
	if !model.PeerAs.IsNull() && !model.PeerAs.IsUnknown() {
		sdk.PeerAs = model.PeerAs.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "PeerAs", "value": *sdk.PeerAs})
	}

	// Handling Primitives
	if !model.PeeringType.IsNull() && !model.PeeringType.IsUnknown() {
		sdk.PeeringType = model.PeeringType.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "PeeringType", "value": *sdk.PeeringType})
	}

	// Handling Primitives
	if !model.ReflectorClient.IsNull() && !model.ReflectorClient.IsUnknown() {
		sdk.ReflectorClient = model.ReflectorClient.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ReflectorClient", "value": *sdk.ReflectorClient})
	}

	// Handling Objects
	if !model.SubsequentAddressFamilyIdentifier.IsNull() && !model.SubsequentAddressFamilyIdentifier.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field SubsequentAddressFamilyIdentifier")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifierToSdk(ctx, model.SubsequentAddressFamilyIdentifier)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "SubsequentAddressFamilyIdentifier"})
		}
		if unpacked != nil {
			sdk.SubsequentAddressFamilyIdentifier = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bfd != nil {
		tflog.Debug(ctx, "Packing nested object for field Bfd")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdFromSdk(ctx, *sdk.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bfd"})
		}
		model.Bfd = packed
	} else {
		model.Bfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.ConnectionOptions != nil {
		tflog.Debug(ctx, "Packing nested object for field ConnectionOptions")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsFromSdk(ctx, *sdk.ConnectionOptions)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "ConnectionOptions"})
		}
		model.ConnectionOptions = packed
	} else {
		model.ConnectionOptions = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.EnableMpBgp != nil {
		model.EnableMpBgp = basetypes.NewBoolValue(*sdk.EnableMpBgp)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "EnableMpBgp", "value": *sdk.EnableMpBgp})
	} else {
		model.EnableMpBgp = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.EnableSenderSideLoopDetection != nil {
		model.EnableSenderSideLoopDetection = basetypes.NewBoolValue(*sdk.EnableSenderSideLoopDetection)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "EnableSenderSideLoopDetection", "value": *sdk.EnableSenderSideLoopDetection})
	} else {
		model.EnableSenderSideLoopDetection = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Inherit != nil {
		tflog.Debug(ctx, "Packing nested object for field Inherit")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritFromSdk(ctx, *sdk.Inherit)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Inherit"})
		}
		model.Inherit = packed
	} else {
		model.Inherit = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.LocalAddress != nil {
		tflog.Debug(ctx, "Packing nested object for field LocalAddress")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressFromSdk(ctx, *sdk.LocalAddress)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "LocalAddress"})
		}
		model.LocalAddress = packed
	} else {
		model.LocalAddress = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Passive != nil {
		model.Passive = basetypes.NewBoolValue(*sdk.Passive)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Passive", "value": *sdk.Passive})
	} else {
		model.Passive = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.PeerAddress != nil {
		tflog.Debug(ctx, "Packing nested object for field PeerAddress")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressFromSdk(ctx, *sdk.PeerAddress)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "PeerAddress"})
		}
		model.PeerAddress = packed
	} else {
		model.PeerAddress = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.PeerAs != nil {
		model.PeerAs = basetypes.NewStringValue(*sdk.PeerAs)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "PeerAs", "value": *sdk.PeerAs})
	} else {
		model.PeerAs = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.PeeringType != nil {
		model.PeeringType = basetypes.NewStringValue(*sdk.PeeringType)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "PeeringType", "value": *sdk.PeeringType})
	} else {
		model.PeeringType = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ReflectorClient != nil {
		model.ReflectorClient = basetypes.NewStringValue(*sdk.ReflectorClient)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ReflectorClient", "value": *sdk.ReflectorClient})
	} else {
		model.ReflectorClient = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.SubsequentAddressFamilyIdentifier != nil {
		tflog.Debug(ctx, "Packing nested object for field SubsequentAddressFamilyIdentifier")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifierFromSdk(ctx, *sdk.SubsequentAddressFamilyIdentifier)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "SubsequentAddressFamilyIdentifier"})
		}
		model.SubsequentAddressFamilyIdentifier = packed
	} else {
		model.SubsequentAddressFamilyIdentifier = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd
	var d diag.Diagnostics
	// Handling Objects
	if !model.Multihop.IsNull() && !model.Multihop.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Multihop")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihopToSdk(ctx, model.Multihop)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Multihop"})
		}
		if unpacked != nil {
			sdk.Multihop = unpacked
		}
	}

	// Handling Primitives
	if !model.Profile.IsNull() && !model.Profile.IsUnknown() {
		sdk.Profile = model.Profile.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Profile", "value": *sdk.Profile})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Multihop != nil {
		tflog.Debug(ctx, "Packing nested object for field Multihop")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihopFromSdk(ctx, *sdk.Multihop)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Multihop"})
		}
		model.Multihop = packed
	} else {
		model.Multihop = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Profile != nil {
		model.Profile = basetypes.NewStringValue(*sdk.Profile)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Profile", "value": *sdk.Profile})
	} else {
		model.Profile = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfd{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihopToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop
	var d diag.Diagnostics
	// Handling Primitives
	if !model.MinReceivedTtl.IsNull() && !model.MinReceivedTtl.IsUnknown() {
		val := float32(model.MinReceivedTtl.ValueFloat64())
		sdk.MinReceivedTtl = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MinReceivedTtl", "value": *sdk.MinReceivedTtl})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihopFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.MinReceivedTtl != nil {
		model.MinReceivedTtl = basetypes.NewFloat64Value(float64(*sdk.MinReceivedTtl))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MinReceivedTtl", "value": *sdk.MinReceivedTtl})
	} else {
		model.MinReceivedTtl = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihopListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihopToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihopListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihopFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerBfdMultihop{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Primitives
	if !model.Dampening.IsNull() && !model.Dampening.IsUnknown() {
		sdk.Dampening = model.Dampening.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Dampening", "value": *sdk.Dampening})
	}

	// Handling Primitives
	if !model.HoldTime.IsNull() && !model.HoldTime.IsUnknown() {
		sdk.HoldTime = model.HoldTime.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "HoldTime", "value": *sdk.HoldTime})
	}

	// Handling Primitives
	if !model.IdleHoldTime.IsNull() && !model.IdleHoldTime.IsUnknown() {
		val := float32(model.IdleHoldTime.ValueFloat64())
		sdk.IdleHoldTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "IdleHoldTime", "value": *sdk.IdleHoldTime})
	}

	// Handling Objects
	if !model.IncomingBgpConnection.IsNull() && !model.IncomingBgpConnection.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field IncomingBgpConnection")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnectionToSdk(ctx, model.IncomingBgpConnection)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "IncomingBgpConnection"})
		}
		if unpacked != nil {
			sdk.IncomingBgpConnection = unpacked
		}
	}

	// Handling Primitives
	if !model.KeepAliveInterval.IsNull() && !model.KeepAliveInterval.IsUnknown() {
		sdk.KeepAliveInterval = model.KeepAliveInterval.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "KeepAliveInterval", "value": *sdk.KeepAliveInterval})
	}

	// Handling Primitives
	if !model.MaxPrefixes.IsNull() && !model.MaxPrefixes.IsUnknown() {
		sdk.MaxPrefixes = model.MaxPrefixes.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxPrefixes", "value": *sdk.MaxPrefixes})
	}

	// Handling Primitives
	if !model.MinRouteAdvInterval.IsNull() && !model.MinRouteAdvInterval.IsUnknown() {
		val := float32(model.MinRouteAdvInterval.ValueFloat64())
		sdk.MinRouteAdvInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MinRouteAdvInterval", "value": *sdk.MinRouteAdvInterval})
	}

	// Handling Primitives
	if !model.Multihop.IsNull() && !model.Multihop.IsUnknown() {
		sdk.Multihop = model.Multihop.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Multihop", "value": *sdk.Multihop})
	}

	// Handling Primitives
	if !model.OpenDelayTime.IsNull() && !model.OpenDelayTime.IsUnknown() {
		val := float32(model.OpenDelayTime.ValueFloat64())
		sdk.OpenDelayTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OpenDelayTime", "value": *sdk.OpenDelayTime})
	}

	// Handling Objects
	if !model.OutgoingBgpConnection.IsNull() && !model.OutgoingBgpConnection.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field OutgoingBgpConnection")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnectionToSdk(ctx, model.OutgoingBgpConnection)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "OutgoingBgpConnection"})
		}
		if unpacked != nil {
			sdk.OutgoingBgpConnection = unpacked
		}
	}

	// Handling Primitives
	if !model.Timers.IsNull() && !model.Timers.IsUnknown() {
		sdk.Timers = model.Timers.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Timers", "value": *sdk.Timers})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Dampening != nil {
		model.Dampening = basetypes.NewStringValue(*sdk.Dampening)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Dampening", "value": *sdk.Dampening})
	} else {
		model.Dampening = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.HoldTime != nil {
		model.HoldTime = basetypes.NewStringValue(*sdk.HoldTime)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "HoldTime", "value": *sdk.HoldTime})
	} else {
		model.HoldTime = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.IdleHoldTime != nil {
		model.IdleHoldTime = basetypes.NewFloat64Value(float64(*sdk.IdleHoldTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "IdleHoldTime", "value": *sdk.IdleHoldTime})
	} else {
		model.IdleHoldTime = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.IncomingBgpConnection != nil {
		tflog.Debug(ctx, "Packing nested object for field IncomingBgpConnection")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnectionFromSdk(ctx, *sdk.IncomingBgpConnection)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "IncomingBgpConnection"})
		}
		model.IncomingBgpConnection = packed
	} else {
		model.IncomingBgpConnection = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.KeepAliveInterval != nil {
		model.KeepAliveInterval = basetypes.NewStringValue(*sdk.KeepAliveInterval)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "KeepAliveInterval", "value": *sdk.KeepAliveInterval})
	} else {
		model.KeepAliveInterval = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxPrefixes != nil {
		model.MaxPrefixes = basetypes.NewStringValue(*sdk.MaxPrefixes)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxPrefixes", "value": *sdk.MaxPrefixes})
	} else {
		model.MaxPrefixes = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MinRouteAdvInterval != nil {
		model.MinRouteAdvInterval = basetypes.NewFloat64Value(float64(*sdk.MinRouteAdvInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MinRouteAdvInterval", "value": *sdk.MinRouteAdvInterval})
	} else {
		model.MinRouteAdvInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Multihop != nil {
		model.Multihop = basetypes.NewStringValue(*sdk.Multihop)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Multihop", "value": *sdk.Multihop})
	} else {
		model.Multihop = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OpenDelayTime != nil {
		model.OpenDelayTime = basetypes.NewFloat64Value(float64(*sdk.OpenDelayTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OpenDelayTime", "value": *sdk.OpenDelayTime})
	} else {
		model.OpenDelayTime = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.OutgoingBgpConnection != nil {
		tflog.Debug(ctx, "Packing nested object for field OutgoingBgpConnection")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnectionFromSdk(ctx, *sdk.OutgoingBgpConnection)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "OutgoingBgpConnection"})
		}
		model.OutgoingBgpConnection = packed
	} else {
		model.OutgoingBgpConnection = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Timers != nil {
		model.Timers = basetypes.NewStringValue(*sdk.Timers)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Timers", "value": *sdk.Timers})
	} else {
		model.Timers = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptions{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnectionToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Allow.IsNull() && !model.Allow.IsUnknown() {
		sdk.Allow = model.Allow.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Allow", "value": *sdk.Allow})
	}

	// Handling Primitives
	if !model.RemotePort.IsNull() && !model.RemotePort.IsUnknown() {
		val := float32(model.RemotePort.ValueFloat64())
		sdk.RemotePort = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RemotePort", "value": *sdk.RemotePort})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnectionFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Allow != nil {
		model.Allow = basetypes.NewBoolValue(*sdk.Allow)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Allow", "value": *sdk.Allow})
	} else {
		model.Allow = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RemotePort != nil {
		model.RemotePort = basetypes.NewFloat64Value(float64(*sdk.RemotePort))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RemotePort", "value": *sdk.RemotePort})
	} else {
		model.RemotePort = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnectionListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnectionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnectionListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnectionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsIncomingBgpConnection{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnectionToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Allow.IsNull() && !model.Allow.IsUnknown() {
		sdk.Allow = model.Allow.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Allow", "value": *sdk.Allow})
	}

	// Handling Primitives
	if !model.LocalPort.IsNull() && !model.LocalPort.IsUnknown() {
		val := float32(model.LocalPort.ValueFloat64())
		sdk.LocalPort = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "LocalPort", "value": *sdk.LocalPort})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnectionFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Allow != nil {
		model.Allow = basetypes.NewBoolValue(*sdk.Allow)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Allow", "value": *sdk.Allow})
	} else {
		model.Allow = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.LocalPort != nil {
		model.LocalPort = basetypes.NewFloat64Value(float64(*sdk.LocalPort))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "LocalPort", "value": *sdk.LocalPort})
	} else {
		model.LocalPort = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnectionListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnectionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnectionListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnectionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerConnectionOptionsOutgoingBgpConnection{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit
	var d diag.Diagnostics
	// Handling Objects
	if !model.No.IsNull() && !model.No.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field No")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNoToSdk(ctx, model.No)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "No"})
		}
		if unpacked != nil {
			sdk.No = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.Yes.IsNull() && !model.Yes.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Yes")
		sdk.Yes = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.No != nil {
		tflog.Debug(ctx, "Packing nested object for field No")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNoFromSdk(ctx, *sdk.No)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "No"})
		}
		model.No = packed
	} else {
		model.No = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Yes != nil && !reflect.ValueOf(sdk.Yes).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Yes")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Yes, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Yes = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInherit{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNoToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo
	var d diag.Diagnostics
	// Handling Objects
	if !model.AddressFamily.IsNull() && !model.AddressFamily.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AddressFamily")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyToSdk(ctx, model.AddressFamily)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AddressFamily"})
		}
		if unpacked != nil {
			sdk.AddressFamily = unpacked
		}
	}

	// Handling Objects
	if !model.FilteringProfile.IsNull() && !model.FilteringProfile.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field FilteringProfile")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyToSdk(ctx, model.FilteringProfile)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "FilteringProfile"})
		}
		if unpacked != nil {
			sdk.FilteringProfile = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNoFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AddressFamily != nil {
		tflog.Debug(ctx, "Packing nested object for field AddressFamily")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyFromSdk(ctx, *sdk.AddressFamily)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AddressFamily"})
		}
		model.AddressFamily = packed
	} else {
		model.AddressFamily = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.FilteringProfile != nil {
		tflog.Debug(ctx, "Packing nested object for field FilteringProfile")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamilyFromSdk(ctx, *sdk.FilteringProfile)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "FilteringProfile"})
		}
		model.FilteringProfile = packed
	} else {
		model.FilteringProfile = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNoListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNoToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNoListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNoFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerInheritNo{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Ip.IsNull() && !model.Ip.IsUnknown() {
		sdk.Ip = model.Ip.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ip", "value": *sdk.Ip})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ip != nil {
		model.Ip = basetypes.NewStringValue(*sdk.Ip)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ip", "value": *sdk.Ip})
	} else {
		model.Ip = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Fqdn.IsNull() && !model.Fqdn.IsUnknown() {
		sdk.Fqdn = model.Fqdn.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Fqdn", "value": *sdk.Fqdn})
	}

	// Handling Primitives
	if !model.Ip.IsNull() && !model.Ip.IsUnknown() {
		sdk.Ip = model.Ip.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ip", "value": *sdk.Ip})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Fqdn != nil {
		model.Fqdn = basetypes.NewStringValue(*sdk.Fqdn)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Fqdn", "value": *sdk.Fqdn})
	} else {
		model.Fqdn = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ip != nil {
		model.Ip = basetypes.NewStringValue(*sdk.Ip)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ip", "value": *sdk.Ip})
	} else {
		model.Ip = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifierToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Multicast.IsNull() && !model.Multicast.IsUnknown() {
		sdk.Multicast = model.Multicast.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Multicast", "value": *sdk.Multicast})
	}

	// Handling Primitives
	if !model.Unicast.IsNull() && !model.Unicast.IsUnknown() {
		sdk.Unicast = model.Unicast.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Unicast", "value": *sdk.Unicast})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifierFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Multicast != nil {
		model.Multicast = basetypes.NewBoolValue(*sdk.Multicast)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Multicast", "value": *sdk.Multicast})
	} else {
		model.Multicast = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Unicast != nil {
		model.Unicast = basetypes.NewBoolValue(*sdk.Unicast)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Unicast", "value": *sdk.Unicast})
	} else {
		model.Unicast = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifierListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifierToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifierListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifierFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerSubsequentAddressFamilyIdentifier{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerType ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerType", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerType
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerType
	var d diag.Diagnostics
	// Handling Objects
	if !model.Ebgp.IsNull() && !model.Ebgp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ebgp")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpToSdk(ctx, model.Ebgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ebgp"})
		}
		if unpacked != nil {
			sdk.Ebgp = unpacked
		}
	}

	// Handling Objects
	if !model.EbgpConfed.IsNull() && !model.EbgpConfed.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field EbgpConfed")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedToSdk(ctx, model.EbgpConfed)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "EbgpConfed"})
		}
		if unpacked != nil {
			sdk.EbgpConfed = unpacked
		}
	}

	// Handling Objects
	if !model.Ibgp.IsNull() && !model.Ibgp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ibgp")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedToSdk(ctx, model.Ibgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ibgp"})
		}
		if unpacked != nil {
			sdk.Ibgp = unpacked
		}
	}

	// Handling Objects
	if !model.IbgpConfed.IsNull() && !model.IbgpConfed.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field IbgpConfed")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedToSdk(ctx, model.IbgpConfed)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "IbgpConfed"})
		}
		if unpacked != nil {
			sdk.IbgpConfed = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerType ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerType) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerType", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerType
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ebgp != nil {
		tflog.Debug(ctx, "Packing nested object for field Ebgp")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpFromSdk(ctx, *sdk.Ebgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ebgp"})
		}
		model.Ebgp = packed
	} else {
		model.Ebgp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.EbgpConfed != nil {
		tflog.Debug(ctx, "Packing nested object for field EbgpConfed")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedFromSdk(ctx, *sdk.EbgpConfed)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "EbgpConfed"})
		}
		model.EbgpConfed = packed
	} else {
		model.EbgpConfed = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ibgp != nil {
		tflog.Debug(ctx, "Packing nested object for field Ibgp")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedFromSdk(ctx, *sdk.Ibgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ibgp"})
		}
		model.Ibgp = packed
	} else {
		model.Ibgp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.IbgpConfed != nil {
		tflog.Debug(ctx, "Packing nested object for field IbgpConfed")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedFromSdk(ctx, *sdk.IbgpConfed)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "IbgpConfed"})
		}
		model.IbgpConfed = packed
	} else {
		model.IbgpConfed = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerType{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerType ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerType
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerType, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerType{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerType ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerType) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerType

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerType
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerType{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerType{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp
	var d diag.Diagnostics
	// Handling Primitives
	if !model.ExportNexthop.IsNull() && !model.ExportNexthop.IsUnknown() {
		sdk.ExportNexthop = model.ExportNexthop.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ExportNexthop", "value": *sdk.ExportNexthop})
	}

	// Handling Primitives
	if !model.ImportNexthop.IsNull() && !model.ImportNexthop.IsUnknown() {
		sdk.ImportNexthop = model.ImportNexthop.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ImportNexthop", "value": *sdk.ImportNexthop})
	}

	// Handling Primitives
	if !model.RemovePrivateAs.IsNull() && !model.RemovePrivateAs.IsUnknown() {
		sdk.RemovePrivateAs = model.RemovePrivateAs.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RemovePrivateAs", "value": *sdk.RemovePrivateAs})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.ExportNexthop != nil {
		model.ExportNexthop = basetypes.NewStringValue(*sdk.ExportNexthop)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ExportNexthop", "value": *sdk.ExportNexthop})
	} else {
		model.ExportNexthop = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ImportNexthop != nil {
		model.ImportNexthop = basetypes.NewStringValue(*sdk.ImportNexthop)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ImportNexthop", "value": *sdk.ImportNexthop})
	} else {
		model.ImportNexthop = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RemovePrivateAs != nil {
		model.RemovePrivateAs = basetypes.NewBoolValue(*sdk.RemovePrivateAs)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RemovePrivateAs", "value": *sdk.RemovePrivateAs})
	} else {
		model.RemovePrivateAs = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed
	var d diag.Diagnostics
	// Handling Primitives
	if !model.ExportNexthop.IsNull() && !model.ExportNexthop.IsUnknown() {
		sdk.ExportNexthop = model.ExportNexthop.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ExportNexthop", "value": *sdk.ExportNexthop})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.ExportNexthop != nil {
		model.ExportNexthop = basetypes.NewStringValue(*sdk.ExportNexthop)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ExportNexthop", "value": *sdk.ExportNexthop})
	} else {
		model.ExportNexthop = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed ---
func unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed ---
func packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed
		obj, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfedFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPeerGroupInnerTypeEbgpConfed{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicy ---
func unpackLogicalRoutersVrfInnerBgpPolicyToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicy, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicy", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicy
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicy
	var d diag.Diagnostics
	// Handling Objects
	if !model.Aggregation.IsNull() && !model.Aggregation.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Aggregation")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationToSdk(ctx, model.Aggregation)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Aggregation"})
		}
		if unpacked != nil {
			sdk.Aggregation = unpacked
		}
	}

	// Handling Objects
	if !model.ConditionalAdvertisement.IsNull() && !model.ConditionalAdvertisement.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field ConditionalAdvertisement")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementToSdk(ctx, model.ConditionalAdvertisement)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "ConditionalAdvertisement"})
		}
		if unpacked != nil {
			sdk.ConditionalAdvertisement = unpacked
		}
	}

	// Handling Objects
	if !model.Export.IsNull() && !model.Export.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Export")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportToSdk(ctx, model.Export)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Export"})
		}
		if unpacked != nil {
			sdk.Export = unpacked
		}
	}

	// Handling Objects
	if !model.Import.IsNull() && !model.Import.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Import")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyImportToSdk(ctx, model.Import)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Import"})
		}
		if unpacked != nil {
			sdk.Import = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicy", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicy ---
func packLogicalRoutersVrfInnerBgpPolicyFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicy) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicy", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicy
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Aggregation != nil {
		tflog.Debug(ctx, "Packing nested object for field Aggregation")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationFromSdk(ctx, *sdk.Aggregation)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Aggregation"})
		}
		model.Aggregation = packed
	} else {
		model.Aggregation = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregation{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.ConditionalAdvertisement != nil {
		tflog.Debug(ctx, "Packing nested object for field ConditionalAdvertisement")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementFromSdk(ctx, *sdk.ConditionalAdvertisement)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "ConditionalAdvertisement"})
		}
		model.ConditionalAdvertisement = packed
	} else {
		model.ConditionalAdvertisement = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Export != nil {
		tflog.Debug(ctx, "Packing nested object for field Export")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyExportFromSdk(ctx, *sdk.Export)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Export"})
		}
		model.Export = packed
	} else {
		model.Export = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyExport{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Import != nil {
		tflog.Debug(ctx, "Packing nested object for field Import")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyImportFromSdk(ctx, *sdk.Import)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Import"})
		}
		model.Import = packed
	} else {
		model.Import = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyImport{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicy{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicy", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicy ---
func unpackLogicalRoutersVrfInnerBgpPolicyListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicy, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicy")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicy
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicy, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicy{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicy", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicy ---
func packLogicalRoutersVrfInnerBgpPolicyListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicy) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicy")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicy

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicy
		obj, d := packLogicalRoutersVrfInnerBgpPolicyFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicy{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicy", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicy{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregation ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregation, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregation", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregation
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregation
	var d diag.Diagnostics
	// Handling Lists
	if !model.Address.IsNull() && !model.Address.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Address")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerListToSdk(ctx, model.Address)
		diags.Append(d...)
		sdk.Address = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregation", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregation ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregation) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregation", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregation
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Address != nil {
		tflog.Debug(ctx, "Packing list of objects for field Address")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerListFromSdk(ctx, sdk.Address)
		diags.Append(d...)
		model.Address = packed
	} else {
		model.Address = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregation{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregation", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregation ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregation, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregation")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregation
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregation, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregation{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregation", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregation ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregation) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregation")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregation

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregation
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregation{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregation", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregation{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner
	var d diag.Diagnostics
	// Handling Lists
	if !model.AdvertiseFilters.IsNull() && !model.AdvertiseFilters.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AdvertiseFilters")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListToSdk(ctx, model.AdvertiseFilters)
		diags.Append(d...)
		sdk.AdvertiseFilters = unpacked
	}

	// Handling Objects
	if !model.AggregateRouteAttributes.IsNull() && !model.AggregateRouteAttributes.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AggregateRouteAttributes")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesToSdk(ctx, model.AggregateRouteAttributes)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AggregateRouteAttributes"})
		}
		if unpacked != nil {
			sdk.AggregateRouteAttributes = unpacked
		}
	}

	// Handling Primitives
	if !model.AsSet.IsNull() && !model.AsSet.IsUnknown() {
		sdk.AsSet = model.AsSet.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AsSet", "value": *sdk.AsSet})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Prefix.IsNull() && !model.Prefix.IsUnknown() {
		sdk.Prefix = model.Prefix.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Prefix", "value": *sdk.Prefix})
	}

	// Handling Primitives
	if !model.Summary.IsNull() && !model.Summary.IsUnknown() {
		sdk.Summary = model.Summary.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Summary", "value": *sdk.Summary})
	}

	// Handling Lists
	if !model.SuppressFilters.IsNull() && !model.SuppressFilters.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field SuppressFilters")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListToSdk(ctx, model.SuppressFilters)
		diags.Append(d...)
		sdk.SuppressFilters = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AdvertiseFilters != nil {
		tflog.Debug(ctx, "Packing list of objects for field AdvertiseFilters")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListFromSdk(ctx, sdk.AdvertiseFilters)
		diags.Append(d...)
		model.AdvertiseFilters = packed
	} else {
		model.AdvertiseFilters = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AggregateRouteAttributes != nil {
		tflog.Debug(ctx, "Packing nested object for field AggregateRouteAttributes")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesFromSdk(ctx, *sdk.AggregateRouteAttributes)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AggregateRouteAttributes"})
		}
		model.AggregateRouteAttributes = packed
	} else {
		model.AggregateRouteAttributes = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AsSet != nil {
		model.AsSet = basetypes.NewBoolValue(*sdk.AsSet)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AsSet", "value": *sdk.AsSet})
	} else {
		model.AsSet = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Prefix != nil {
		model.Prefix = basetypes.NewStringValue(*sdk.Prefix)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Prefix", "value": *sdk.Prefix})
	} else {
		model.Prefix = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Summary != nil {
		model.Summary = basetypes.NewBoolValue(*sdk.Summary)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Summary", "value": *sdk.Summary})
	} else {
		model.Summary = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.SuppressFilters != nil {
		tflog.Debug(ctx, "Packing list of objects for field SuppressFilters")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListFromSdk(ctx, sdk.SuppressFilters)
		diags.Append(d...)
		model.SuppressFilters = packed
	} else {
		model.SuppressFilters = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Objects
	if !model.Match.IsNull() && !model.Match.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Match")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchToSdk(ctx, model.Match)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Match"})
		}
		if unpacked != nil {
			sdk.Match = unpacked
		}
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Match != nil {
		tflog.Debug(ctx, "Packing nested object for field Match")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchFromSdk(ctx, *sdk.Match)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Match"})
		}
		model.Match = packed
	} else {
		model.Match = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch
	var d diag.Diagnostics
	// Handling Lists
	if !model.AddressPrefix.IsNull() && !model.AddressPrefix.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AddressPrefix")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInnerListToSdk(ctx, model.AddressPrefix)
		diags.Append(d...)
		sdk.AddressPrefix = unpacked
	}

	// Handling Primitives
	if !model.Afi.IsNull() && !model.Afi.IsUnknown() {
		sdk.Afi = model.Afi.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Afi", "value": *sdk.Afi})
	}

	// Handling Objects
	if !model.AsPath.IsNull() && !model.AsPath.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AsPath")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathToSdk(ctx, model.AsPath)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AsPath"})
		}
		if unpacked != nil {
			sdk.AsPath = unpacked
		}
	}

	// Handling Objects
	if !model.Community.IsNull() && !model.Community.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Community")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathToSdk(ctx, model.Community)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Community"})
		}
		if unpacked != nil {
			sdk.Community = unpacked
		}
	}

	// Handling Objects
	if !model.ExtendedCommunity.IsNull() && !model.ExtendedCommunity.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field ExtendedCommunity")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathToSdk(ctx, model.ExtendedCommunity)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "ExtendedCommunity"})
		}
		if unpacked != nil {
			sdk.ExtendedCommunity = unpacked
		}
	}

	// Handling Lists
	if !model.FromPeer.IsNull() && !model.FromPeer.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field FromPeer")
		diags.Append(model.FromPeer.ElementsAs(ctx, &sdk.FromPeer, false)...)
	}

	// Handling Primitives
	if !model.Med.IsNull() && !model.Med.IsUnknown() {
		val := float32(model.Med.ValueFloat64())
		sdk.Med = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Med", "value": *sdk.Med})
	}

	// Handling Lists
	if !model.Nexthop.IsNull() && !model.Nexthop.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Nexthop")
		diags.Append(model.Nexthop.ElementsAs(ctx, &sdk.Nexthop, false)...)
	}

	// Handling Primitives
	if !model.RouteTable.IsNull() && !model.RouteTable.IsUnknown() {
		sdk.RouteTable = model.RouteTable.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouteTable", "value": *sdk.RouteTable})
	}

	// Handling Primitives
	if !model.Safi.IsNull() && !model.Safi.IsUnknown() {
		sdk.Safi = model.Safi.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Safi", "value": *sdk.Safi})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AddressPrefix != nil {
		tflog.Debug(ctx, "Packing list of objects for field AddressPrefix")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInnerListFromSdk(ctx, sdk.AddressPrefix)
		diags.Append(d...)
		model.AddressPrefix = packed
	} else {
		model.AddressPrefix = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Afi != nil {
		model.Afi = basetypes.NewStringValue(*sdk.Afi)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Afi", "value": *sdk.Afi})
	} else {
		model.Afi = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AsPath != nil {
		tflog.Debug(ctx, "Packing nested object for field AsPath")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathFromSdk(ctx, *sdk.AsPath)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AsPath"})
		}
		model.AsPath = packed
	} else {
		model.AsPath = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Community != nil {
		tflog.Debug(ctx, "Packing nested object for field Community")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathFromSdk(ctx, *sdk.Community)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Community"})
		}
		model.Community = packed
	} else {
		model.Community = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.ExtendedCommunity != nil {
		tflog.Debug(ctx, "Packing nested object for field ExtendedCommunity")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathFromSdk(ctx, *sdk.ExtendedCommunity)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "ExtendedCommunity"})
		}
		model.ExtendedCommunity = packed
	} else {
		model.ExtendedCommunity = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrTypes())
	}
	// Handling Lists
	if sdk.FromPeer != nil {
		tflog.Debug(ctx, "Packing list of primitives for field FromPeer")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.FromPeer, d = basetypes.NewListValueFrom(ctx, elemType, sdk.FromPeer)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.FromPeer = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Med != nil {
		model.Med = basetypes.NewFloat64Value(float64(*sdk.Med))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Med", "value": *sdk.Med})
	} else {
		model.Med = basetypes.NewFloat64Null()
	}
	// Handling Lists
	if sdk.Nexthop != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Nexthop")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Nexthop, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Nexthop)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Nexthop = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouteTable != nil {
		model.RouteTable = basetypes.NewStringValue(*sdk.RouteTable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouteTable", "value": *sdk.RouteTable})
	} else {
		model.RouteTable = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Safi != nil {
		model.Safi = basetypes.NewStringValue(*sdk.Safi)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Safi", "value": *sdk.Safi})
	} else {
		model.Safi = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Exact.IsNull() && !model.Exact.IsUnknown() {
		sdk.Exact = model.Exact.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Exact", "value": *sdk.Exact})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Exact != nil {
		model.Exact = basetypes.NewBoolValue(*sdk.Exact)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Exact", "value": *sdk.Exact})
	} else {
		model.Exact = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAddressPrefixInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Regex.IsNull() && !model.Regex.IsUnknown() {
		sdk.Regex = model.Regex.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Regex", "value": *sdk.Regex})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Regex != nil {
		model.Regex = basetypes.NewStringValue(*sdk.Regex)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Regex", "value": *sdk.Regex})
	} else {
		model.Regex = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes
	var d diag.Diagnostics
	// Handling Objects
	if !model.AsPath.IsNull() && !model.AsPath.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AsPath")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathToSdk(ctx, model.AsPath)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AsPath"})
		}
		if unpacked != nil {
			sdk.AsPath = unpacked
		}
	}

	// Handling Primitives
	if !model.AsPathLimit.IsNull() && !model.AsPathLimit.IsUnknown() {
		val := float32(model.AsPathLimit.ValueFloat64())
		sdk.AsPathLimit = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AsPathLimit", "value": *sdk.AsPathLimit})
	}

	// Handling Objects
	if !model.Community.IsNull() && !model.Community.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Community")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityToSdk(ctx, model.Community)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Community"})
		}
		if unpacked != nil {
			sdk.Community = unpacked
		}
	}

	// Handling Objects
	if !model.ExtendedCommunity.IsNull() && !model.ExtendedCommunity.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field ExtendedCommunity")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityToSdk(ctx, model.ExtendedCommunity)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "ExtendedCommunity"})
		}
		if unpacked != nil {
			sdk.ExtendedCommunity = unpacked
		}
	}

	// Handling Primitives
	if !model.LocalPreference.IsNull() && !model.LocalPreference.IsUnknown() {
		val := float32(model.LocalPreference.ValueFloat64())
		sdk.LocalPreference = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "LocalPreference", "value": *sdk.LocalPreference})
	}

	// Handling Primitives
	if !model.Med.IsNull() && !model.Med.IsUnknown() {
		val := float32(model.Med.ValueFloat64())
		sdk.Med = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Med", "value": *sdk.Med})
	}

	// Handling Primitives
	if !model.Nexthop.IsNull() && !model.Nexthop.IsUnknown() {
		sdk.Nexthop = model.Nexthop.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Nexthop", "value": *sdk.Nexthop})
	}

	// Handling Primitives
	if !model.Origin.IsNull() && !model.Origin.IsUnknown() {
		sdk.Origin = model.Origin.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Origin", "value": *sdk.Origin})
	}

	// Handling Primitives
	if !model.Weight.IsNull() && !model.Weight.IsUnknown() {
		val := float32(model.Weight.ValueFloat64())
		sdk.Weight = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Weight", "value": *sdk.Weight})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AsPath != nil {
		tflog.Debug(ctx, "Packing nested object for field AsPath")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathFromSdk(ctx, *sdk.AsPath)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AsPath"})
		}
		model.AsPath = packed
	} else {
		model.AsPath = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AsPathLimit != nil {
		model.AsPathLimit = basetypes.NewFloat64Value(float64(*sdk.AsPathLimit))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AsPathLimit", "value": *sdk.AsPathLimit})
	} else {
		model.AsPathLimit = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Community != nil {
		tflog.Debug(ctx, "Packing nested object for field Community")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityFromSdk(ctx, *sdk.Community)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Community"})
		}
		model.Community = packed
	} else {
		model.Community = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.ExtendedCommunity != nil {
		tflog.Debug(ctx, "Packing nested object for field ExtendedCommunity")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityFromSdk(ctx, *sdk.ExtendedCommunity)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "ExtendedCommunity"})
		}
		model.ExtendedCommunity = packed
	} else {
		model.ExtendedCommunity = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.LocalPreference != nil {
		model.LocalPreference = basetypes.NewFloat64Value(float64(*sdk.LocalPreference))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "LocalPreference", "value": *sdk.LocalPreference})
	} else {
		model.LocalPreference = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Med != nil {
		model.Med = basetypes.NewFloat64Value(float64(*sdk.Med))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Med", "value": *sdk.Med})
	} else {
		model.Med = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Nexthop != nil {
		model.Nexthop = basetypes.NewStringValue(*sdk.Nexthop)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Nexthop", "value": *sdk.Nexthop})
	} else {
		model.Nexthop = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Origin != nil {
		model.Origin = basetypes.NewStringValue(*sdk.Origin)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Origin", "value": *sdk.Origin})
	} else {
		model.Origin = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Weight != nil {
		model.Weight = basetypes.NewFloat64Value(float64(*sdk.Weight))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Weight", "value": *sdk.Weight})
	} else {
		model.Weight = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.None.IsNull() && !model.None.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field None")
		sdk.None = make(map[string]interface{})
	}

	// Handling Primitives
	if !model.Prepend.IsNull() && !model.Prepend.IsUnknown() {
		val := float32(model.Prepend.ValueFloat64())
		sdk.Prepend = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Prepend", "value": *sdk.Prepend})
	}

	// Handling Typeless Objects
	if !model.Remove.IsNull() && !model.Remove.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Remove")
		sdk.Remove = make(map[string]interface{})
	}

	// Handling Primitives
	if !model.RemoveAndPrepend.IsNull() && !model.RemoveAndPrepend.IsUnknown() {
		val := float32(model.RemoveAndPrepend.ValueFloat64())
		sdk.RemoveAndPrepend = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RemoveAndPrepend", "value": *sdk.RemoveAndPrepend})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.None != nil && !reflect.ValueOf(sdk.None).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field None")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.None, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.None = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Prepend != nil {
		model.Prepend = basetypes.NewFloat64Value(float64(*sdk.Prepend))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Prepend", "value": *sdk.Prepend})
	} else {
		model.Prepend = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Remove != nil && !reflect.ValueOf(sdk.Remove).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Remove")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Remove, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Remove = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RemoveAndPrepend != nil {
		model.RemoveAndPrepend = basetypes.NewFloat64Value(float64(*sdk.RemoveAndPrepend))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RemoveAndPrepend", "value": *sdk.RemoveAndPrepend})
	} else {
		model.RemoveAndPrepend = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity
	var d diag.Diagnostics
	// Handling Lists
	if !model.Append.IsNull() && !model.Append.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Append")
		diags.Append(model.Append.ElementsAs(ctx, &sdk.Append, false)...)
	}

	// Handling Typeless Objects
	if !model.None.IsNull() && !model.None.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field None")
		sdk.None = make(map[string]interface{})
	}

	// Handling Lists
	if !model.Overwrite.IsNull() && !model.Overwrite.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Overwrite")
		diags.Append(model.Overwrite.ElementsAs(ctx, &sdk.Overwrite, false)...)
	}

	// Handling Typeless Objects
	if !model.RemoveAll.IsNull() && !model.RemoveAll.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field RemoveAll")
		sdk.RemoveAll = make(map[string]interface{})
	}

	// Handling Primitives
	if !model.RemoveRegex.IsNull() && !model.RemoveRegex.IsUnknown() {
		sdk.RemoveRegex = model.RemoveRegex.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RemoveRegex", "value": *sdk.RemoveRegex})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Append != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Append")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Append, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Append)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Append = basetypes.NewListNull(elemType)
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.None != nil && !reflect.ValueOf(sdk.None).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field None")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.None, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.None = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Lists
	if sdk.Overwrite != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Overwrite")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Overwrite, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Overwrite)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Overwrite = basetypes.NewListNull(elemType)
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.RemoveAll != nil && !reflect.ValueOf(sdk.RemoveAll).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field RemoveAll")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.RemoveAll, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.RemoveAll = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RemoveRegex != nil {
		model.RemoveRegex = basetypes.NewStringValue(*sdk.RemoveRegex)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RemoveRegex", "value": *sdk.RemoveRegex})
	} else {
		model.RemoveRegex = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity ---
func unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity ---
func packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity
		obj, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement ---
func unpackLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement
	var d diag.Diagnostics
	// Handling Lists
	if !model.Policy.IsNull() && !model.Policy.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Policy")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInnerListToSdk(ctx, model.Policy)
		diags.Append(d...)
		sdk.Policy = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement ---
func packLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Policy != nil {
		tflog.Debug(ctx, "Packing list of objects for field Policy")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInnerListFromSdk(ctx, sdk.Policy)
		diags.Append(d...)
		model.Policy = packed
	} else {
		model.Policy = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement ---
func unpackLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement ---
func packLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement
		obj, d := packLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisement{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner
	var d diag.Diagnostics
	// Handling Lists
	if !model.AdvertiseFilters.IsNull() && !model.AdvertiseFilters.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AdvertiseFilters")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListToSdk(ctx, model.AdvertiseFilters)
		diags.Append(d...)
		sdk.AdvertiseFilters = unpacked
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Lists
	if !model.NonExistFilters.IsNull() && !model.NonExistFilters.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field NonExistFilters")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListToSdk(ctx, model.NonExistFilters)
		diags.Append(d...)
		sdk.NonExistFilters = unpacked
	}

	// Handling Lists
	if !model.UsedBy.IsNull() && !model.UsedBy.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field UsedBy")
		diags.Append(model.UsedBy.ElementsAs(ctx, &sdk.UsedBy, false)...)
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner ---
func packLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AdvertiseFilters != nil {
		tflog.Debug(ctx, "Packing list of objects for field AdvertiseFilters")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListFromSdk(ctx, sdk.AdvertiseFilters)
		diags.Append(d...)
		model.AdvertiseFilters = packed
	} else {
		model.AdvertiseFilters = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Lists
	if sdk.NonExistFilters != nil {
		tflog.Debug(ctx, "Packing list of objects for field NonExistFilters")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerListFromSdk(ctx, sdk.NonExistFilters)
		diags.Append(d...)
		model.NonExistFilters = packed
	} else {
		model.NonExistFilters = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInner{}.AttrType())
	}
	// Handling Lists
	if sdk.UsedBy != nil {
		tflog.Debug(ctx, "Packing list of primitives for field UsedBy")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.UsedBy, d = basetypes.NewListValueFrom(ctx, elemType, sdk.UsedBy)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.UsedBy = basetypes.NewListNull(elemType)
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner ---
func packLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner
		obj, d := packLogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyConditionalAdvertisementPolicyInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyExport ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyExport, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExport", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExport
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyExport
	var d diag.Diagnostics
	// Handling Lists
	if !model.Rules.IsNull() && !model.Rules.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Rules")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerListToSdk(ctx, model.Rules)
		diags.Append(d...)
		sdk.Rules = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExport", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyExport ---
func packLogicalRoutersVrfInnerBgpPolicyExportFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyExport) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyExport", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExport
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Rules != nil {
		tflog.Debug(ctx, "Packing list of objects for field Rules")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerListFromSdk(ctx, sdk.Rules)
		diags.Append(d...)
		model.Rules = packed
	} else {
		model.Rules = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExport{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyExport", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyExport ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyExport, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExport")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExport
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyExport, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExport{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExport", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyExport ---
func packLogicalRoutersVrfInnerBgpPolicyExportListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyExport) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExport")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExport

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyExport
		obj, d := packLogicalRoutersVrfInnerBgpPolicyExportFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExport{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExport", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExport{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInner
	var d diag.Diagnostics
	// Handling Objects
	if !model.Action.IsNull() && !model.Action.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Action")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionToSdk(ctx, model.Action)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Action"})
		}
		if unpacked != nil {
			sdk.Action = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Objects
	if !model.Match.IsNull() && !model.Match.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Match")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchToSdk(ctx, model.Match)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Match"})
		}
		if unpacked != nil {
			sdk.Match = unpacked
		}
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Lists
	if !model.UsedBy.IsNull() && !model.UsedBy.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field UsedBy")
		diags.Append(model.UsedBy.ElementsAs(ctx, &sdk.UsedBy, false)...)
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInner ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Action != nil {
		tflog.Debug(ctx, "Packing nested object for field Action")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionFromSdk(ctx, *sdk.Action)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Action"})
		}
		model.Action = packed
	} else {
		model.Action = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Match != nil {
		tflog.Debug(ctx, "Packing nested object for field Match")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchFromSdk(ctx, *sdk.Match)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Match"})
		}
		model.Match = packed
	} else {
		model.Match = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Lists
	if sdk.UsedBy != nil {
		tflog.Debug(ctx, "Packing list of primitives for field UsedBy")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.UsedBy, d = basetypes.NewListValueFrom(ctx, elemType, sdk.UsedBy)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.UsedBy = basetypes.NewListNull(elemType)
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInner ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner
		obj, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction
	var d diag.Diagnostics
	// Handling Objects
	if !model.Allow.IsNull() && !model.Allow.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Allow")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowToSdk(ctx, model.Allow)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Allow"})
		}
		if unpacked != nil {
			sdk.Allow = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.Deny.IsNull() && !model.Deny.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Deny")
		sdk.Deny = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Allow != nil {
		tflog.Debug(ctx, "Packing nested object for field Allow")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowFromSdk(ctx, *sdk.Allow)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Allow"})
		}
		model.Allow = packed
	} else {
		model.Allow = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Deny != nil && !reflect.ValueOf(sdk.Deny).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Deny")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Deny, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Deny = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction
		obj, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerAction{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow
	var d diag.Diagnostics
	// Handling Objects
	if !model.Update.IsNull() && !model.Update.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Update")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdateToSdk(ctx, model.Update)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Update"})
		}
		if unpacked != nil {
			sdk.Update = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Update != nil {
		tflog.Debug(ctx, "Packing nested object for field Update")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdateFromSdk(ctx, *sdk.Update)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Update"})
		}
		model.Update = packed
	} else {
		model.Update = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow
		obj, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllow{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdateToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate
	var d diag.Diagnostics
	// Handling Objects
	if !model.AsPath.IsNull() && !model.AsPath.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AsPath")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathToSdk(ctx, model.AsPath)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AsPath"})
		}
		if unpacked != nil {
			sdk.AsPath = unpacked
		}
	}

	// Handling Primitives
	if !model.AsPathLimit.IsNull() && !model.AsPathLimit.IsUnknown() {
		val := float32(model.AsPathLimit.ValueFloat64())
		sdk.AsPathLimit = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AsPathLimit", "value": *sdk.AsPathLimit})
	}

	// Handling Objects
	if !model.Community.IsNull() && !model.Community.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Community")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityToSdk(ctx, model.Community)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Community"})
		}
		if unpacked != nil {
			sdk.Community = unpacked
		}
	}

	// Handling Objects
	if !model.ExtendedCommunity.IsNull() && !model.ExtendedCommunity.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field ExtendedCommunity")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityToSdk(ctx, model.ExtendedCommunity)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "ExtendedCommunity"})
		}
		if unpacked != nil {
			sdk.ExtendedCommunity = unpacked
		}
	}

	// Handling Primitives
	if !model.LocalPreference.IsNull() && !model.LocalPreference.IsUnknown() {
		val := float32(model.LocalPreference.ValueFloat64())
		sdk.LocalPreference = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "LocalPreference", "value": *sdk.LocalPreference})
	}

	// Handling Primitives
	if !model.Med.IsNull() && !model.Med.IsUnknown() {
		val := float32(model.Med.ValueFloat64())
		sdk.Med = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Med", "value": *sdk.Med})
	}

	// Handling Primitives
	if !model.Nexthop.IsNull() && !model.Nexthop.IsUnknown() {
		sdk.Nexthop = model.Nexthop.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Nexthop", "value": *sdk.Nexthop})
	}

	// Handling Primitives
	if !model.Origin.IsNull() && !model.Origin.IsUnknown() {
		sdk.Origin = model.Origin.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Origin", "value": *sdk.Origin})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdateFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AsPath != nil {
		tflog.Debug(ctx, "Packing nested object for field AsPath")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPathFromSdk(ctx, *sdk.AsPath)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AsPath"})
		}
		model.AsPath = packed
	} else {
		model.AsPath = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesAsPath{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AsPathLimit != nil {
		model.AsPathLimit = basetypes.NewFloat64Value(float64(*sdk.AsPathLimit))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AsPathLimit", "value": *sdk.AsPathLimit})
	} else {
		model.AsPathLimit = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Community != nil {
		tflog.Debug(ctx, "Packing nested object for field Community")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityFromSdk(ctx, *sdk.Community)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Community"})
		}
		model.Community = packed
	} else {
		model.Community = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.ExtendedCommunity != nil {
		tflog.Debug(ctx, "Packing nested object for field ExtendedCommunity")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunityFromSdk(ctx, *sdk.ExtendedCommunity)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "ExtendedCommunity"})
		}
		model.ExtendedCommunity = packed
	} else {
		model.ExtendedCommunity = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesCommunity{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.LocalPreference != nil {
		model.LocalPreference = basetypes.NewFloat64Value(float64(*sdk.LocalPreference))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "LocalPreference", "value": *sdk.LocalPreference})
	} else {
		model.LocalPreference = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Med != nil {
		model.Med = basetypes.NewFloat64Value(float64(*sdk.Med))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Med", "value": *sdk.Med})
	} else {
		model.Med = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Nexthop != nil {
		model.Nexthop = basetypes.NewStringValue(*sdk.Nexthop)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Nexthop", "value": *sdk.Nexthop})
	} else {
		model.Nexthop = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Origin != nil {
		model.Origin = basetypes.NewStringValue(*sdk.Origin)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Origin", "value": *sdk.Origin})
	} else {
		model.Origin = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdateListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdateToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdateListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate
		obj, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdateFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerActionAllowUpdate{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch
	var d diag.Diagnostics
	// Handling Lists
	if !model.AddressPrefix.IsNull() && !model.AddressPrefix.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AddressPrefix")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInnerListToSdk(ctx, model.AddressPrefix)
		diags.Append(d...)
		sdk.AddressPrefix = unpacked
	}

	// Handling Primitives
	if !model.Afi.IsNull() && !model.Afi.IsUnknown() {
		sdk.Afi = model.Afi.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Afi", "value": *sdk.Afi})
	}

	// Handling Objects
	if !model.AsPath.IsNull() && !model.AsPath.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AsPath")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathToSdk(ctx, model.AsPath)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AsPath"})
		}
		if unpacked != nil {
			sdk.AsPath = unpacked
		}
	}

	// Handling Objects
	if !model.Community.IsNull() && !model.Community.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Community")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathToSdk(ctx, model.Community)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Community"})
		}
		if unpacked != nil {
			sdk.Community = unpacked
		}
	}

	// Handling Objects
	if !model.ExtendedCommunity.IsNull() && !model.ExtendedCommunity.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field ExtendedCommunity")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathToSdk(ctx, model.ExtendedCommunity)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "ExtendedCommunity"})
		}
		if unpacked != nil {
			sdk.ExtendedCommunity = unpacked
		}
	}

	// Handling Lists
	if !model.FromPeer.IsNull() && !model.FromPeer.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field FromPeer")
		diags.Append(model.FromPeer.ElementsAs(ctx, &sdk.FromPeer, false)...)
	}

	// Handling Primitives
	if !model.Med.IsNull() && !model.Med.IsUnknown() {
		val := float32(model.Med.ValueFloat64())
		sdk.Med = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Med", "value": *sdk.Med})
	}

	// Handling Lists
	if !model.Nexthop.IsNull() && !model.Nexthop.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Nexthop")
		diags.Append(model.Nexthop.ElementsAs(ctx, &sdk.Nexthop, false)...)
	}

	// Handling Primitives
	if !model.RouteTable.IsNull() && !model.RouteTable.IsUnknown() {
		sdk.RouteTable = model.RouteTable.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouteTable", "value": *sdk.RouteTable})
	}

	// Handling Primitives
	if !model.Safi.IsNull() && !model.Safi.IsUnknown() {
		sdk.Safi = model.Safi.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Safi", "value": *sdk.Safi})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AddressPrefix != nil {
		tflog.Debug(ctx, "Packing list of objects for field AddressPrefix")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInnerListFromSdk(ctx, sdk.AddressPrefix)
		diags.Append(d...)
		model.AddressPrefix = packed
	} else {
		model.AddressPrefix = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Afi != nil {
		model.Afi = basetypes.NewStringValue(*sdk.Afi)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Afi", "value": *sdk.Afi})
	} else {
		model.Afi = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AsPath != nil {
		tflog.Debug(ctx, "Packing nested object for field AsPath")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathFromSdk(ctx, *sdk.AsPath)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AsPath"})
		}
		model.AsPath = packed
	} else {
		model.AsPath = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Community != nil {
		tflog.Debug(ctx, "Packing nested object for field Community")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathFromSdk(ctx, *sdk.Community)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Community"})
		}
		model.Community = packed
	} else {
		model.Community = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.ExtendedCommunity != nil {
		tflog.Debug(ctx, "Packing nested object for field ExtendedCommunity")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPathFromSdk(ctx, *sdk.ExtendedCommunity)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "ExtendedCommunity"})
		}
		model.ExtendedCommunity = packed
	} else {
		model.ExtendedCommunity = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchAsPath{}.AttrTypes())
	}
	// Handling Lists
	if sdk.FromPeer != nil {
		tflog.Debug(ctx, "Packing list of primitives for field FromPeer")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.FromPeer, d = basetypes.NewListValueFrom(ctx, elemType, sdk.FromPeer)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.FromPeer = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Med != nil {
		model.Med = basetypes.NewFloat64Value(float64(*sdk.Med))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Med", "value": *sdk.Med})
	} else {
		model.Med = basetypes.NewFloat64Null()
	}
	// Handling Lists
	if sdk.Nexthop != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Nexthop")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Nexthop, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Nexthop)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Nexthop = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouteTable != nil {
		model.RouteTable = basetypes.NewStringValue(*sdk.RouteTable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouteTable", "value": *sdk.RouteTable})
	} else {
		model.RouteTable = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Safi != nil {
		model.Safi = basetypes.NewStringValue(*sdk.Safi)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Safi", "value": *sdk.Safi})
	} else {
		model.Safi = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch
		obj, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatch{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Exact.IsNull() && !model.Exact.IsUnknown() {
		sdk.Exact = model.Exact.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Exact", "value": *sdk.Exact})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Exact != nil {
		model.Exact = basetypes.NewBoolValue(*sdk.Exact)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Exact", "value": *sdk.Exact})
	} else {
		model.Exact = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner ---
func packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner
		obj, d := packLogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyExportRulesInnerMatchAddressPrefixInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyImport ---
func unpackLogicalRoutersVrfInnerBgpPolicyImportToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyImport, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImport", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyImport
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyImport
	var d diag.Diagnostics
	// Handling Lists
	if !model.Rules.IsNull() && !model.Rules.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Rules")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerListToSdk(ctx, model.Rules)
		diags.Append(d...)
		sdk.Rules = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImport", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyImport ---
func packLogicalRoutersVrfInnerBgpPolicyImportFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyImport) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyImport", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyImport
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Rules != nil {
		tflog.Debug(ctx, "Packing list of objects for field Rules")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerListFromSdk(ctx, sdk.Rules)
		diags.Append(d...)
		model.Rules = packed
	} else {
		model.Rules = basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImport{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyImport", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyImport ---
func unpackLogicalRoutersVrfInnerBgpPolicyImportListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyImport, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImport")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyImport
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyImport, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImport{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyImportToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImport", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyImport ---
func packLogicalRoutersVrfInnerBgpPolicyImportListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyImport) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyImport")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyImport

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyImport
		obj, d := packLogicalRoutersVrfInnerBgpPolicyImportFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyImport{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyImport", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImport{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyImportRulesInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInner
	var d diag.Diagnostics
	// Handling Objects
	if !model.Action.IsNull() && !model.Action.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Action")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionToSdk(ctx, model.Action)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Action"})
		}
		if unpacked != nil {
			sdk.Action = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Objects
	if !model.Match.IsNull() && !model.Match.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Match")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchToSdk(ctx, model.Match)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Match"})
		}
		if unpacked != nil {
			sdk.Match = unpacked
		}
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Lists
	if !model.UsedBy.IsNull() && !model.UsedBy.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field UsedBy")
		diags.Append(model.UsedBy.ElementsAs(ctx, &sdk.UsedBy, false)...)
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyImportRulesInner ---
func packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Action != nil {
		tflog.Debug(ctx, "Packing nested object for field Action")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionFromSdk(ctx, *sdk.Action)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Action"})
		}
		model.Action = packed
	} else {
		model.Action = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Match != nil {
		tflog.Debug(ctx, "Packing nested object for field Match")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatchFromSdk(ctx, *sdk.Match)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Match"})
		}
		model.Match = packed
	} else {
		model.Match = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAdvertiseFiltersInnerMatch{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Lists
	if sdk.UsedBy != nil {
		tflog.Debug(ctx, "Packing list of primitives for field UsedBy")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.UsedBy, d = basetypes.NewListValueFrom(ctx, elemType, sdk.UsedBy)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.UsedBy = basetypes.NewListNull(elemType)
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyImportRulesInner ---
func unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyImportRulesInner ---
func packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner
		obj, d := packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction ---
func unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction
	var d diag.Diagnostics
	// Handling Objects
	if !model.Allow.IsNull() && !model.Allow.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Allow")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllowToSdk(ctx, model.Allow)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Allow"})
		}
		if unpacked != nil {
			sdk.Allow = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.Deny.IsNull() && !model.Deny.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Deny")
		sdk.Deny = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction ---
func packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Allow != nil {
		tflog.Debug(ctx, "Packing nested object for field Allow")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllowFromSdk(ctx, *sdk.Allow)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Allow"})
		}
		model.Allow = packed
	} else {
		model.Allow = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Deny != nil && !reflect.ValueOf(sdk.Deny).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Deny")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Deny, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Deny = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction ---
func unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction ---
func packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction
		obj, d := packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerAction{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow ---
func unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllowToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Dampening.IsNull() && !model.Dampening.IsUnknown() {
		sdk.Dampening = model.Dampening.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Dampening", "value": *sdk.Dampening})
	}

	// Handling Objects
	if !model.Update.IsNull() && !model.Update.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Update")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesToSdk(ctx, model.Update)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Update"})
		}
		if unpacked != nil {
			sdk.Update = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow ---
func packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllowFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Dampening != nil {
		model.Dampening = basetypes.NewStringValue(*sdk.Dampening)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Dampening", "value": *sdk.Dampening})
	} else {
		model.Dampening = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Update != nil {
		tflog.Debug(ctx, "Packing nested object for field Update")
		packed, d := packLogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributesFromSdk(ctx, *sdk.Update)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Update"})
		}
		model.Update = packed
	} else {
		model.Update = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPolicyAggregationAddressInnerAggregateRouteAttributes{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow ---
func unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllowListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllowToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow ---
func packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllowListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow
		obj, d := packLogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllowFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpPolicyImportRulesInnerActionAllow{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpRedistRulesInner ---
func unpackLogicalRoutersVrfInnerBgpRedistRulesInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpRedistRulesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpRedistRulesInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpRedistRulesInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpRedistRulesInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AddressFamilyIdentifier.IsNull() && !model.AddressFamilyIdentifier.IsUnknown() {
		sdk.AddressFamilyIdentifier = model.AddressFamilyIdentifier.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AddressFamilyIdentifier", "value": *sdk.AddressFamilyIdentifier})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.RouteTable.IsNull() && !model.RouteTable.IsUnknown() {
		sdk.RouteTable = model.RouteTable.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouteTable", "value": *sdk.RouteTable})
	}

	// Handling Primitives
	if !model.SetAsPathLimit.IsNull() && !model.SetAsPathLimit.IsUnknown() {
		val := float32(model.SetAsPathLimit.ValueFloat64())
		sdk.SetAsPathLimit = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SetAsPathLimit", "value": *sdk.SetAsPathLimit})
	}

	// Handling Lists
	if !model.SetCommunity.IsNull() && !model.SetCommunity.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field SetCommunity")
		diags.Append(model.SetCommunity.ElementsAs(ctx, &sdk.SetCommunity, false)...)
	}

	// Handling Lists
	if !model.SetExtendedCommunity.IsNull() && !model.SetExtendedCommunity.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field SetExtendedCommunity")
		diags.Append(model.SetExtendedCommunity.ElementsAs(ctx, &sdk.SetExtendedCommunity, false)...)
	}

	// Handling Primitives
	if !model.SetLocalPreference.IsNull() && !model.SetLocalPreference.IsUnknown() {
		val := float32(model.SetLocalPreference.ValueFloat64())
		sdk.SetLocalPreference = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SetLocalPreference", "value": *sdk.SetLocalPreference})
	}

	// Handling Primitives
	if !model.SetMed.IsNull() && !model.SetMed.IsUnknown() {
		val := float32(model.SetMed.ValueFloat64())
		sdk.SetMed = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SetMed", "value": *sdk.SetMed})
	}

	// Handling Primitives
	if !model.SetOrigin.IsNull() && !model.SetOrigin.IsUnknown() {
		sdk.SetOrigin = model.SetOrigin.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SetOrigin", "value": *sdk.SetOrigin})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpRedistRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpRedistRulesInner ---
func packLogicalRoutersVrfInnerBgpRedistRulesInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpRedistRulesInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpRedistRulesInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpRedistRulesInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AddressFamilyIdentifier != nil {
		model.AddressFamilyIdentifier = basetypes.NewStringValue(*sdk.AddressFamilyIdentifier)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AddressFamilyIdentifier", "value": *sdk.AddressFamilyIdentifier})
	} else {
		model.AddressFamilyIdentifier = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouteTable != nil {
		model.RouteTable = basetypes.NewStringValue(*sdk.RouteTable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouteTable", "value": *sdk.RouteTable})
	} else {
		model.RouteTable = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SetAsPathLimit != nil {
		model.SetAsPathLimit = basetypes.NewFloat64Value(float64(*sdk.SetAsPathLimit))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SetAsPathLimit", "value": *sdk.SetAsPathLimit})
	} else {
		model.SetAsPathLimit = basetypes.NewFloat64Null()
	}
	// Handling Lists
	if sdk.SetCommunity != nil {
		tflog.Debug(ctx, "Packing list of primitives for field SetCommunity")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.SetCommunity, d = basetypes.NewListValueFrom(ctx, elemType, sdk.SetCommunity)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.SetCommunity = basetypes.NewListNull(elemType)
	}
	// Handling Lists
	if sdk.SetExtendedCommunity != nil {
		tflog.Debug(ctx, "Packing list of primitives for field SetExtendedCommunity")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.SetExtendedCommunity, d = basetypes.NewListValueFrom(ctx, elemType, sdk.SetExtendedCommunity)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.SetExtendedCommunity = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SetLocalPreference != nil {
		model.SetLocalPreference = basetypes.NewFloat64Value(float64(*sdk.SetLocalPreference))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SetLocalPreference", "value": *sdk.SetLocalPreference})
	} else {
		model.SetLocalPreference = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SetMed != nil {
		model.SetMed = basetypes.NewFloat64Value(float64(*sdk.SetMed))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SetMed", "value": *sdk.SetMed})
	} else {
		model.SetMed = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SetOrigin != nil {
		model.SetOrigin = basetypes.NewStringValue(*sdk.SetOrigin)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SetOrigin", "value": *sdk.SetOrigin})
	} else {
		model.SetOrigin = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistRulesInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpRedistRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpRedistRulesInner ---
func unpackLogicalRoutersVrfInnerBgpRedistRulesInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpRedistRulesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpRedistRulesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpRedistRulesInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpRedistRulesInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistRulesInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpRedistRulesInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpRedistRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpRedistRulesInner ---
func packLogicalRoutersVrfInnerBgpRedistRulesInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpRedistRulesInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpRedistRulesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpRedistRulesInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpRedistRulesInner
		obj, d := packLogicalRoutersVrfInnerBgpRedistRulesInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpRedistRulesInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpRedistRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistRulesInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpRedistributionProfile ---
func unpackLogicalRoutersVrfInnerBgpRedistributionProfileToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpRedistributionProfile, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfile", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpRedistributionProfile
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpRedistributionProfile
	var d diag.Diagnostics
	// Handling Objects
	if !model.Ipv4.IsNull() && !model.Ipv4.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv4")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpRedistributionProfileIpv4ToSdk(ctx, model.Ipv4)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv4"})
		}
		if unpacked != nil {
			sdk.Ipv4 = unpacked
		}
	}

	// Handling Objects
	if !model.Ipv6.IsNull() && !model.Ipv6.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv6")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpRedistributionProfileIpv4ToSdk(ctx, model.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv6"})
		}
		if unpacked != nil {
			sdk.Ipv6 = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfile", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpRedistributionProfile ---
func packLogicalRoutersVrfInnerBgpRedistributionProfileFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpRedistributionProfile) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfile", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpRedistributionProfile
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv4 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv4")
		packed, d := packLogicalRoutersVrfInnerBgpRedistributionProfileIpv4FromSdk(ctx, *sdk.Ipv4)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv4"})
		}
		model.Ipv4 = packed
	} else {
		model.Ipv4 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv6 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv6")
		packed, d := packLogicalRoutersVrfInnerBgpRedistributionProfileIpv4FromSdk(ctx, *sdk.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv6"})
		}
		model.Ipv6 = packed
	} else {
		model.Ipv6 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistributionProfile{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfile", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpRedistributionProfile ---
func unpackLogicalRoutersVrfInnerBgpRedistributionProfileListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpRedistributionProfile, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfile")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpRedistributionProfile
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpRedistributionProfile, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistributionProfile{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpRedistributionProfileToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfile", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpRedistributionProfile ---
func packLogicalRoutersVrfInnerBgpRedistributionProfileListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpRedistributionProfile) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfile")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpRedistributionProfile

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpRedistributionProfile
		obj, d := packLogicalRoutersVrfInnerBgpRedistributionProfileFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpRedistributionProfile{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfile", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistributionProfile{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerBgpRedistributionProfileIpv4 ---
func unpackLogicalRoutersVrfInnerBgpRedistributionProfileIpv4ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Unicast.IsNull() && !model.Unicast.IsUnknown() {
		sdk.Unicast = model.Unicast.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Unicast", "value": *sdk.Unicast})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerBgpRedistributionProfileIpv4 ---
func packLogicalRoutersVrfInnerBgpRedistributionProfileIpv4FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Unicast != nil {
		model.Unicast = basetypes.NewStringValue(*sdk.Unicast)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Unicast", "value": *sdk.Unicast})
	} else {
		model.Unicast = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerBgpRedistributionProfileIpv4 ---
func unpackLogicalRoutersVrfInnerBgpRedistributionProfileIpv4ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerBgpRedistributionProfileIpv4ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerBgpRedistributionProfileIpv4 ---
func packLogicalRoutersVrfInnerBgpRedistributionProfileIpv4ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4
		obj, d := packLogicalRoutersVrfInnerBgpRedistributionProfileIpv4FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerBgpRedistributionProfileIpv4{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerEcmp ---
func unpackLogicalRoutersVrfInnerEcmpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerEcmp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerEcmp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerEcmp
	var d diag.Diagnostics
	// Handling Objects
	if !model.Algorithm.IsNull() && !model.Algorithm.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Algorithm")
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpAlgorithmToSdk(ctx, model.Algorithm)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Algorithm"})
		}
		if unpacked != nil {
			sdk.Algorithm = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.MaxPath.IsNull() && !model.MaxPath.IsUnknown() {
		val := float32(model.MaxPath.ValueFloat64())
		sdk.MaxPath = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxPath", "value": *sdk.MaxPath})
	}

	// Handling Primitives
	if !model.StrictSourcePath.IsNull() && !model.StrictSourcePath.IsUnknown() {
		sdk.StrictSourcePath = model.StrictSourcePath.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "StrictSourcePath", "value": *sdk.StrictSourcePath})
	}

	// Handling Primitives
	if !model.SymmetricReturn.IsNull() && !model.SymmetricReturn.IsUnknown() {
		sdk.SymmetricReturn = model.SymmetricReturn.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SymmetricReturn", "value": *sdk.SymmetricReturn})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerEcmp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerEcmp ---
func packLogicalRoutersVrfInnerEcmpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerEcmp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerEcmp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmp
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Algorithm != nil {
		tflog.Debug(ctx, "Packing nested object for field Algorithm")
		packed, d := packLogicalRoutersVrfInnerEcmpAlgorithmFromSdk(ctx, *sdk.Algorithm)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Algorithm"})
		}
		model.Algorithm = packed
	} else {
		model.Algorithm = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerEcmpAlgorithm{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxPath != nil {
		model.MaxPath = basetypes.NewFloat64Value(float64(*sdk.MaxPath))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxPath", "value": *sdk.MaxPath})
	} else {
		model.MaxPath = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.StrictSourcePath != nil {
		model.StrictSourcePath = basetypes.NewBoolValue(*sdk.StrictSourcePath)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "StrictSourcePath", "value": *sdk.StrictSourcePath})
	} else {
		model.StrictSourcePath = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SymmetricReturn != nil {
		model.SymmetricReturn = basetypes.NewBoolValue(*sdk.SymmetricReturn)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SymmetricReturn", "value": *sdk.SymmetricReturn})
	} else {
		model.SymmetricReturn = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerEcmp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerEcmp ---
func unpackLogicalRoutersVrfInnerEcmpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerEcmp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerEcmp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerEcmp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerEcmp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerEcmp ---
func packLogicalRoutersVrfInnerEcmpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerEcmp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerEcmp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerEcmp
		obj, d := packLogicalRoutersVrfInnerEcmpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerEcmp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerEcmp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerEcmp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerEcmpAlgorithm ---
func unpackLogicalRoutersVrfInnerEcmpAlgorithmToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerEcmpAlgorithm, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithm", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmpAlgorithm
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerEcmpAlgorithm
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.BalancedRoundRobin.IsNull() && !model.BalancedRoundRobin.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field BalancedRoundRobin")
		sdk.BalancedRoundRobin = make(map[string]interface{})
	}

	// Handling Objects
	if !model.IpHash.IsNull() && !model.IpHash.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field IpHash")
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpAlgorithmIpHashToSdk(ctx, model.IpHash)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "IpHash"})
		}
		if unpacked != nil {
			sdk.IpHash = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.IpModulo.IsNull() && !model.IpModulo.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field IpModulo")
		sdk.IpModulo = make(map[string]interface{})
	}

	// Handling Objects
	if !model.WeightedRoundRobin.IsNull() && !model.WeightedRoundRobin.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field WeightedRoundRobin")
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinToSdk(ctx, model.WeightedRoundRobin)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "WeightedRoundRobin"})
		}
		if unpacked != nil {
			sdk.WeightedRoundRobin = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithm", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerEcmpAlgorithm ---
func packLogicalRoutersVrfInnerEcmpAlgorithmFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerEcmpAlgorithm) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithm", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmpAlgorithm
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.BalancedRoundRobin != nil && !reflect.ValueOf(sdk.BalancedRoundRobin).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field BalancedRoundRobin")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.BalancedRoundRobin, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.BalancedRoundRobin = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.IpHash != nil {
		tflog.Debug(ctx, "Packing nested object for field IpHash")
		packed, d := packLogicalRoutersVrfInnerEcmpAlgorithmIpHashFromSdk(ctx, *sdk.IpHash)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "IpHash"})
		}
		model.IpHash = packed
	} else {
		model.IpHash = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.IpModulo != nil && !reflect.ValueOf(sdk.IpModulo).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field IpModulo")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.IpModulo, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.IpModulo = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.WeightedRoundRobin != nil {
		tflog.Debug(ctx, "Packing nested object for field WeightedRoundRobin")
		packed, d := packLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinFromSdk(ctx, *sdk.WeightedRoundRobin)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "WeightedRoundRobin"})
		}
		model.WeightedRoundRobin = packed
	} else {
		model.WeightedRoundRobin = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithm{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithm", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerEcmpAlgorithm ---
func unpackLogicalRoutersVrfInnerEcmpAlgorithmListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerEcmpAlgorithm, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithm")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmpAlgorithm
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerEcmpAlgorithm, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithm{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpAlgorithmToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithm", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerEcmpAlgorithm ---
func packLogicalRoutersVrfInnerEcmpAlgorithmListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerEcmpAlgorithm) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithm")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmpAlgorithm

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerEcmpAlgorithm
		obj, d := packLogicalRoutersVrfInnerEcmpAlgorithmFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerEcmpAlgorithm{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithm", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithm{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerEcmpAlgorithmIpHash ---
func unpackLogicalRoutersVrfInnerEcmpAlgorithmIpHashToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerEcmpAlgorithmIpHash, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerEcmpAlgorithmIpHash
	var d diag.Diagnostics
	// Handling Primitives
	if !model.HashSeed.IsNull() && !model.HashSeed.IsUnknown() {
		val := float32(model.HashSeed.ValueFloat64())
		sdk.HashSeed = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "HashSeed", "value": *sdk.HashSeed})
	}

	// Handling Primitives
	if !model.SrcOnly.IsNull() && !model.SrcOnly.IsUnknown() {
		sdk.SrcOnly = model.SrcOnly.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SrcOnly", "value": *sdk.SrcOnly})
	}

	// Handling Primitives
	if !model.UsePort.IsNull() && !model.UsePort.IsUnknown() {
		sdk.UsePort = model.UsePort.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "UsePort", "value": *sdk.UsePort})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerEcmpAlgorithmIpHash ---
func packLogicalRoutersVrfInnerEcmpAlgorithmIpHashFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerEcmpAlgorithmIpHash) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.HashSeed != nil {
		model.HashSeed = basetypes.NewFloat64Value(float64(*sdk.HashSeed))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "HashSeed", "value": *sdk.HashSeed})
	} else {
		model.HashSeed = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SrcOnly != nil {
		model.SrcOnly = basetypes.NewBoolValue(*sdk.SrcOnly)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SrcOnly", "value": *sdk.SrcOnly})
	} else {
		model.SrcOnly = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.UsePort != nil {
		model.UsePort = basetypes.NewBoolValue(*sdk.UsePort)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "UsePort", "value": *sdk.UsePort})
	} else {
		model.UsePort = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerEcmpAlgorithmIpHash ---
func unpackLogicalRoutersVrfInnerEcmpAlgorithmIpHashListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerEcmpAlgorithmIpHash, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerEcmpAlgorithmIpHash, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpAlgorithmIpHashToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerEcmpAlgorithmIpHash ---
func packLogicalRoutersVrfInnerEcmpAlgorithmIpHashListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerEcmpAlgorithmIpHash) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash
		obj, d := packLogicalRoutersVrfInnerEcmpAlgorithmIpHashFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin ---
func unpackLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin
	var d diag.Diagnostics
	// Handling Lists
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Interface")
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInnerListToSdk(ctx, model.Interface)
		diags.Append(d...)
		sdk.Interface = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin ---
func packLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Interface != nil {
		tflog.Debug(ctx, "Packing list of objects for field Interface")
		packed, d := packLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInnerListFromSdk(ctx, sdk.Interface)
		diags.Append(d...)
		model.Interface = packed
	} else {
		model.Interface = basetypes.NewListNull(models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin ---
func unpackLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin ---
func packLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin
		obj, d := packLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobin{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner ---
func unpackLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Weight.IsNull() && !model.Weight.IsUnknown() {
		val := float32(model.Weight.ValueFloat64())
		sdk.Weight = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Weight", "value": *sdk.Weight})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner ---
func packLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Weight != nil {
		model.Weight = basetypes.NewFloat64Value(float64(*sdk.Weight))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Weight", "value": *sdk.Weight})
	} else {
		model.Weight = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner ---
func unpackLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner ---
func packLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner
		obj, d := packLogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerEcmpAlgorithmWeightedRoundRobinInterfaceInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticast ---
func unpackLogicalRoutersVrfInnerMulticastToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticast, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticast", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticast
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticast
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.EnableV6.IsNull() && !model.EnableV6.IsUnknown() {
		sdk.EnableV6 = model.EnableV6.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "EnableV6", "value": *sdk.EnableV6})
	}

	// Handling Objects
	if !model.Igmp.IsNull() && !model.Igmp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Igmp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastIgmpToSdk(ctx, model.Igmp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Igmp"})
		}
		if unpacked != nil {
			sdk.Igmp = unpacked
		}
	}

	// Handling Lists
	if !model.InterfaceGroup.IsNull() && !model.InterfaceGroup.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field InterfaceGroup")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerListToSdk(ctx, model.InterfaceGroup)
		diags.Append(d...)
		sdk.InterfaceGroup = unpacked
	}

	// Handling Primitives
	if !model.Mode.IsNull() && !model.Mode.IsUnknown() {
		sdk.Mode = model.Mode.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Mode", "value": *sdk.Mode})
	}

	// Handling Objects
	if !model.Msdp.IsNull() && !model.Msdp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Msdp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastMsdpToSdk(ctx, model.Msdp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Msdp"})
		}
		if unpacked != nil {
			sdk.Msdp = unpacked
		}
	}

	// Handling Objects
	if !model.Pim.IsNull() && !model.Pim.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Pim")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimToSdk(ctx, model.Pim)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Pim"})
		}
		if unpacked != nil {
			sdk.Pim = unpacked
		}
	}

	// Handling Primitives
	if !model.RouteAgeoutTime.IsNull() && !model.RouteAgeoutTime.IsUnknown() {
		val := float32(model.RouteAgeoutTime.ValueFloat64())
		sdk.RouteAgeoutTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouteAgeoutTime", "value": *sdk.RouteAgeoutTime})
	}

	// Handling Objects
	if !model.Rp.IsNull() && !model.Rp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Rp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpToSdk(ctx, model.Rp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Rp"})
		}
		if unpacked != nil {
			sdk.Rp = unpacked
		}
	}

	// Handling Lists
	if !model.SptThreshold.IsNull() && !model.SptThreshold.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field SptThreshold")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimSptThresholdInnerListToSdk(ctx, model.SptThreshold)
		diags.Append(d...)
		sdk.SptThreshold = unpacked
	}

	// Handling Lists
	if !model.SsmAddressSpace.IsNull() && !model.SsmAddressSpace.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field SsmAddressSpace")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerListToSdk(ctx, model.SsmAddressSpace)
		diags.Append(d...)
		sdk.SsmAddressSpace = unpacked
	}

	// Handling Lists
	if !model.StaticRoute.IsNull() && !model.StaticRoute.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field StaticRoute")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastStaticRouteInnerListToSdk(ctx, model.StaticRoute)
		diags.Append(d...)
		sdk.StaticRoute = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticast", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticast ---
func packLogicalRoutersVrfInnerMulticastFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticast) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticast", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticast
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.EnableV6 != nil {
		model.EnableV6 = basetypes.NewBoolValue(*sdk.EnableV6)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "EnableV6", "value": *sdk.EnableV6})
	} else {
		model.EnableV6 = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Igmp != nil {
		tflog.Debug(ctx, "Packing nested object for field Igmp")
		packed, d := packLogicalRoutersVrfInnerMulticastIgmpFromSdk(ctx, *sdk.Igmp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Igmp"})
		}
		model.Igmp = packed
	} else {
		model.Igmp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastIgmp{}.AttrTypes())
	}
	// Handling Lists
	if sdk.InterfaceGroup != nil {
		tflog.Debug(ctx, "Packing list of objects for field InterfaceGroup")
		packed, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerListFromSdk(ctx, sdk.InterfaceGroup)
		diags.Append(d...)
		model.InterfaceGroup = packed
	} else {
		model.InterfaceGroup = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Mode != nil {
		model.Mode = basetypes.NewStringValue(*sdk.Mode)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Mode", "value": *sdk.Mode})
	} else {
		model.Mode = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Msdp != nil {
		tflog.Debug(ctx, "Packing nested object for field Msdp")
		packed, d := packLogicalRoutersVrfInnerMulticastMsdpFromSdk(ctx, *sdk.Msdp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Msdp"})
		}
		model.Msdp = packed
	} else {
		model.Msdp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastMsdp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Pim != nil {
		tflog.Debug(ctx, "Packing nested object for field Pim")
		packed, d := packLogicalRoutersVrfInnerMulticastPimFromSdk(ctx, *sdk.Pim)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Pim"})
		}
		model.Pim = packed
	} else {
		model.Pim = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastPim{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouteAgeoutTime != nil {
		model.RouteAgeoutTime = basetypes.NewFloat64Value(float64(*sdk.RouteAgeoutTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouteAgeoutTime", "value": *sdk.RouteAgeoutTime})
	} else {
		model.RouteAgeoutTime = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Rp != nil {
		tflog.Debug(ctx, "Packing nested object for field Rp")
		packed, d := packLogicalRoutersVrfInnerMulticastRpFromSdk(ctx, *sdk.Rp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Rp"})
		}
		model.Rp = packed
	} else {
		model.Rp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastRp{}.AttrTypes())
	}
	// Handling Lists
	if sdk.SptThreshold != nil {
		tflog.Debug(ctx, "Packing list of objects for field SptThreshold")
		packed, d := packLogicalRoutersVrfInnerMulticastPimSptThresholdInnerListFromSdk(ctx, sdk.SptThreshold)
		diags.Append(d...)
		model.SptThreshold = packed
	} else {
		model.SptThreshold = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner{}.AttrType())
	}
	// Handling Lists
	if sdk.SsmAddressSpace != nil {
		tflog.Debug(ctx, "Packing list of objects for field SsmAddressSpace")
		packed, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerListFromSdk(ctx, sdk.SsmAddressSpace)
		diags.Append(d...)
		model.SsmAddressSpace = packed
	} else {
		model.SsmAddressSpace = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner{}.AttrType())
	}
	// Handling Lists
	if sdk.StaticRoute != nil {
		tflog.Debug(ctx, "Packing list of objects for field StaticRoute")
		packed, d := packLogicalRoutersVrfInnerMulticastStaticRouteInnerListFromSdk(ctx, sdk.StaticRoute)
		diags.Append(d...)
		model.StaticRoute = packed
	} else {
		model.StaticRoute = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastStaticRouteInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticast{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticast", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticast ---
func unpackLogicalRoutersVrfInnerMulticastListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticast, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticast")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticast
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticast, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticast{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticast", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticast ---
func packLogicalRoutersVrfInnerMulticastListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticast) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticast")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticast

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticast
		obj, d := packLogicalRoutersVrfInnerMulticastFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticast{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticast", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticast{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastIgmp ---
func unpackLogicalRoutersVrfInnerMulticastIgmpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastIgmp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastIgmp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastIgmp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastIgmp
	var d diag.Diagnostics
	// Handling Objects
	if !model.Dynamic.IsNull() && !model.Dynamic.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Dynamic")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastIgmpDynamicToSdk(ctx, model.Dynamic)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Dynamic"})
		}
		if unpacked != nil {
			sdk.Dynamic = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Lists
	if !model.Static.IsNull() && !model.Static.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Static")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastIgmpStaticInnerListToSdk(ctx, model.Static)
		diags.Append(d...)
		sdk.Static = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastIgmp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastIgmp ---
func packLogicalRoutersVrfInnerMulticastIgmpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastIgmp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastIgmp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastIgmp
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Dynamic != nil {
		tflog.Debug(ctx, "Packing nested object for field Dynamic")
		packed, d := packLogicalRoutersVrfInnerMulticastIgmpDynamicFromSdk(ctx, *sdk.Dynamic)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Dynamic"})
		}
		model.Dynamic = packed
	} else {
		model.Dynamic = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastIgmpDynamic{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.Static != nil {
		tflog.Debug(ctx, "Packing list of objects for field Static")
		packed, d := packLogicalRoutersVrfInnerMulticastIgmpStaticInnerListFromSdk(ctx, sdk.Static)
		diags.Append(d...)
		model.Static = packed
	} else {
		model.Static = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastIgmpStaticInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastIgmp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastIgmp ---
func unpackLogicalRoutersVrfInnerMulticastIgmpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastIgmp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastIgmp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastIgmp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastIgmp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastIgmpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastIgmp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastIgmp ---
func packLogicalRoutersVrfInnerMulticastIgmpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastIgmp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastIgmp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastIgmp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastIgmp
		obj, d := packLogicalRoutersVrfInnerMulticastIgmpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastIgmp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastIgmp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastIgmpDynamic ---
func unpackLogicalRoutersVrfInnerMulticastIgmpDynamicToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastIgmpDynamic, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamic", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastIgmpDynamic
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastIgmpDynamic
	var d diag.Diagnostics
	// Handling Lists
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Interface")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInnerListToSdk(ctx, model.Interface)
		diags.Append(d...)
		sdk.Interface = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamic", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastIgmpDynamic ---
func packLogicalRoutersVrfInnerMulticastIgmpDynamicFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastIgmpDynamic) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamic", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastIgmpDynamic
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Interface != nil {
		tflog.Debug(ctx, "Packing list of objects for field Interface")
		packed, d := packLogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInnerListFromSdk(ctx, sdk.Interface)
		diags.Append(d...)
		model.Interface = packed
	} else {
		model.Interface = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpDynamic{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamic", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastIgmpDynamic ---
func unpackLogicalRoutersVrfInnerMulticastIgmpDynamicListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastIgmpDynamic, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamic")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastIgmpDynamic
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastIgmpDynamic, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpDynamic{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastIgmpDynamicToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamic", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastIgmpDynamic ---
func packLogicalRoutersVrfInnerMulticastIgmpDynamicListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastIgmpDynamic) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamic")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastIgmpDynamic

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastIgmpDynamic
		obj, d := packLogicalRoutersVrfInnerMulticastIgmpDynamicFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastIgmpDynamic{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamic", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpDynamic{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner ---
func unpackLogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.GroupFilter.IsNull() && !model.GroupFilter.IsUnknown() {
		sdk.GroupFilter = model.GroupFilter.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupFilter", "value": *sdk.GroupFilter})
	}

	// Handling Primitives
	if !model.MaxGroups.IsNull() && !model.MaxGroups.IsUnknown() {
		sdk.MaxGroups = model.MaxGroups.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxGroups", "value": *sdk.MaxGroups})
	}

	// Handling Primitives
	if !model.MaxSources.IsNull() && !model.MaxSources.IsUnknown() {
		sdk.MaxSources = model.MaxSources.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxSources", "value": *sdk.MaxSources})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.QueryProfile.IsNull() && !model.QueryProfile.IsUnknown() {
		sdk.QueryProfile = model.QueryProfile.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "QueryProfile", "value": *sdk.QueryProfile})
	}

	// Handling Primitives
	if !model.Robustness.IsNull() && !model.Robustness.IsUnknown() {
		sdk.Robustness = model.Robustness.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Robustness", "value": *sdk.Robustness})
	}

	// Handling Primitives
	if !model.RouterAlertPolicing.IsNull() && !model.RouterAlertPolicing.IsUnknown() {
		sdk.RouterAlertPolicing = model.RouterAlertPolicing.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouterAlertPolicing", "value": *sdk.RouterAlertPolicing})
	}

	// Handling Primitives
	if !model.Version.IsNull() && !model.Version.IsUnknown() {
		sdk.Version = model.Version.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Version", "value": *sdk.Version})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner ---
func packLogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupFilter != nil {
		model.GroupFilter = basetypes.NewStringValue(*sdk.GroupFilter)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupFilter", "value": *sdk.GroupFilter})
	} else {
		model.GroupFilter = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxGroups != nil {
		model.MaxGroups = basetypes.NewStringValue(*sdk.MaxGroups)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxGroups", "value": *sdk.MaxGroups})
	} else {
		model.MaxGroups = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxSources != nil {
		model.MaxSources = basetypes.NewStringValue(*sdk.MaxSources)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxSources", "value": *sdk.MaxSources})
	} else {
		model.MaxSources = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.QueryProfile != nil {
		model.QueryProfile = basetypes.NewStringValue(*sdk.QueryProfile)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "QueryProfile", "value": *sdk.QueryProfile})
	} else {
		model.QueryProfile = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Robustness != nil {
		model.Robustness = basetypes.NewStringValue(*sdk.Robustness)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Robustness", "value": *sdk.Robustness})
	} else {
		model.Robustness = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouterAlertPolicing != nil {
		model.RouterAlertPolicing = basetypes.NewBoolValue(*sdk.RouterAlertPolicing)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouterAlertPolicing", "value": *sdk.RouterAlertPolicing})
	} else {
		model.RouterAlertPolicing = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Version != nil {
		model.Version = basetypes.NewStringValue(*sdk.Version)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Version", "value": *sdk.Version})
	} else {
		model.Version = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner ---
func unpackLogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner ---
func packLogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner
		obj, d := packLogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpDynamicInterfaceInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastIgmpStaticInner ---
func unpackLogicalRoutersVrfInnerMulticastIgmpStaticInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastIgmpStaticInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpStaticInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastIgmpStaticInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastIgmpStaticInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.GroupAddress.IsNull() && !model.GroupAddress.IsUnknown() {
		sdk.GroupAddress = model.GroupAddress.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupAddress", "value": *sdk.GroupAddress})
	}

	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.SourceAddress.IsNull() && !model.SourceAddress.IsUnknown() {
		sdk.SourceAddress = model.SourceAddress.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SourceAddress", "value": *sdk.SourceAddress})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpStaticInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastIgmpStaticInner ---
func packLogicalRoutersVrfInnerMulticastIgmpStaticInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastIgmpStaticInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastIgmpStaticInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastIgmpStaticInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupAddress != nil {
		model.GroupAddress = basetypes.NewStringValue(*sdk.GroupAddress)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupAddress", "value": *sdk.GroupAddress})
	} else {
		model.GroupAddress = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.SourceAddress != nil {
		model.SourceAddress = basetypes.NewStringValue(*sdk.SourceAddress)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SourceAddress", "value": *sdk.SourceAddress})
	} else {
		model.SourceAddress = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpStaticInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastIgmpStaticInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastIgmpStaticInner ---
func unpackLogicalRoutersVrfInnerMulticastIgmpStaticInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastIgmpStaticInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpStaticInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastIgmpStaticInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastIgmpStaticInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpStaticInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastIgmpStaticInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastIgmpStaticInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastIgmpStaticInner ---
func packLogicalRoutersVrfInnerMulticastIgmpStaticInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastIgmpStaticInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastIgmpStaticInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastIgmpStaticInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastIgmpStaticInner
		obj, d := packLogicalRoutersVrfInnerMulticastIgmpStaticInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastIgmpStaticInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastIgmpStaticInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastIgmpStaticInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInner ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Description.IsNull() && !model.Description.IsUnknown() {
		sdk.Description = model.Description.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Description", "value": *sdk.Description})
	}

	// Handling Objects
	if !model.GroupPermission.IsNull() && !model.GroupPermission.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GroupPermission")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionToSdk(ctx, model.GroupPermission)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GroupPermission"})
		}
		if unpacked != nil {
			sdk.GroupPermission = unpacked
		}
	}

	// Handling Objects
	if !model.Igmp.IsNull() && !model.Igmp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Igmp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmpToSdk(ctx, model.Igmp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Igmp"})
		}
		if unpacked != nil {
			sdk.Igmp = unpacked
		}
	}

	// Handling Lists
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Interface")
		diags.Append(model.Interface.ElementsAs(ctx, &sdk.Interface, false)...)
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Objects
	if !model.Pim.IsNull() && !model.Pim.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Pim")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerPimToSdk(ctx, model.Pim)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Pim"})
		}
		if unpacked != nil {
			sdk.Pim = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInner ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Description != nil {
		model.Description = basetypes.NewStringValue(*sdk.Description)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Description", "value": *sdk.Description})
	} else {
		model.Description = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GroupPermission != nil {
		tflog.Debug(ctx, "Packing nested object for field GroupPermission")
		packed, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionFromSdk(ctx, *sdk.GroupPermission)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GroupPermission"})
		}
		model.GroupPermission = packed
	} else {
		model.GroupPermission = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Igmp != nil {
		tflog.Debug(ctx, "Packing nested object for field Igmp")
		packed, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmpFromSdk(ctx, *sdk.Igmp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Igmp"})
		}
		model.Igmp = packed
	} else {
		model.Igmp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp{}.AttrTypes())
	}
	// Handling Lists
	if sdk.Interface != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Interface")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Interface, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Interface)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Interface = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Pim != nil {
		tflog.Debug(ctx, "Packing nested object for field Pim")
		packed, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerPimFromSdk(ctx, *sdk.Pim)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Pim"})
		}
		model.Pim = packed
	} else {
		model.Pim = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInner ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInner ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner
		obj, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission
	var d diag.Diagnostics
	// Handling Lists
	if !model.AnySourceMulticast.IsNull() && !model.AnySourceMulticast.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AnySourceMulticast")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerListToSdk(ctx, model.AnySourceMulticast)
		diags.Append(d...)
		sdk.AnySourceMulticast = unpacked
	}

	// Handling Lists
	if !model.SourceSpecificMulticast.IsNull() && !model.SourceSpecificMulticast.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field SourceSpecificMulticast")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInnerListToSdk(ctx, model.SourceSpecificMulticast)
		diags.Append(d...)
		sdk.SourceSpecificMulticast = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AnySourceMulticast != nil {
		tflog.Debug(ctx, "Packing list of objects for field AnySourceMulticast")
		packed, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerListFromSdk(ctx, sdk.AnySourceMulticast)
		diags.Append(d...)
		model.AnySourceMulticast = packed
	} else {
		model.AnySourceMulticast = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner{}.AttrType())
	}
	// Handling Lists
	if sdk.SourceSpecificMulticast != nil {
		tflog.Debug(ctx, "Packing list of objects for field SourceSpecificMulticast")
		packed, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInnerListFromSdk(ctx, sdk.SourceSpecificMulticast)
		diags.Append(d...)
		model.SourceSpecificMulticast = packed
	} else {
		model.SourceSpecificMulticast = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission
		obj, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermission{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.GroupAddress.IsNull() && !model.GroupAddress.IsUnknown() {
		sdk.GroupAddress = model.GroupAddress.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupAddress", "value": *sdk.GroupAddress})
	}

	// Handling Primitives
	if !model.Included.IsNull() && !model.Included.IsUnknown() {
		sdk.Included = model.Included.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Included", "value": *sdk.Included})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupAddress != nil {
		model.GroupAddress = basetypes.NewStringValue(*sdk.GroupAddress)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupAddress", "value": *sdk.GroupAddress})
	} else {
		model.GroupAddress = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Included != nil {
		model.Included = basetypes.NewBoolValue(*sdk.Included)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Included", "value": *sdk.Included})
	} else {
		model.Included = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner
		obj, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionAnySourceMulticastInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.GroupAddress.IsNull() && !model.GroupAddress.IsUnknown() {
		sdk.GroupAddress = model.GroupAddress.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupAddress", "value": *sdk.GroupAddress})
	}

	// Handling Primitives
	if !model.Included.IsNull() && !model.Included.IsUnknown() {
		sdk.Included = model.Included.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Included", "value": *sdk.Included})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.SourceAddress.IsNull() && !model.SourceAddress.IsUnknown() {
		sdk.SourceAddress = model.SourceAddress.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SourceAddress", "value": *sdk.SourceAddress})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupAddress != nil {
		model.GroupAddress = basetypes.NewStringValue(*sdk.GroupAddress)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupAddress", "value": *sdk.GroupAddress})
	} else {
		model.GroupAddress = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Included != nil {
		model.Included = basetypes.NewBoolValue(*sdk.Included)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Included", "value": *sdk.Included})
	} else {
		model.Included = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.SourceAddress != nil {
		model.SourceAddress = basetypes.NewStringValue(*sdk.SourceAddress)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SourceAddress", "value": *sdk.SourceAddress})
	} else {
		model.SourceAddress = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner
		obj, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerGroupPermissionSourceSpecificMulticastInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.ImmediateLeave.IsNull() && !model.ImmediateLeave.IsUnknown() {
		sdk.ImmediateLeave = model.ImmediateLeave.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ImmediateLeave", "value": *sdk.ImmediateLeave})
	}

	// Handling Primitives
	if !model.LastMemberQueryInterval.IsNull() && !model.LastMemberQueryInterval.IsUnknown() {
		val := float32(model.LastMemberQueryInterval.ValueFloat64())
		sdk.LastMemberQueryInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "LastMemberQueryInterval", "value": *sdk.LastMemberQueryInterval})
	}

	// Handling Primitives
	if !model.MaxGroups.IsNull() && !model.MaxGroups.IsUnknown() {
		sdk.MaxGroups = model.MaxGroups.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxGroups", "value": *sdk.MaxGroups})
	}

	// Handling Primitives
	if !model.MaxQueryResponseTime.IsNull() && !model.MaxQueryResponseTime.IsUnknown() {
		val := float32(model.MaxQueryResponseTime.ValueFloat64())
		sdk.MaxQueryResponseTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxQueryResponseTime", "value": *sdk.MaxQueryResponseTime})
	}

	// Handling Primitives
	if !model.MaxSources.IsNull() && !model.MaxSources.IsUnknown() {
		sdk.MaxSources = model.MaxSources.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxSources", "value": *sdk.MaxSources})
	}

	// Handling Primitives
	if !model.Mode.IsNull() && !model.Mode.IsUnknown() {
		sdk.Mode = model.Mode.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Mode", "value": *sdk.Mode})
	}

	// Handling Primitives
	if !model.QueryInterval.IsNull() && !model.QueryInterval.IsUnknown() {
		val := float32(model.QueryInterval.ValueFloat64())
		sdk.QueryInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "QueryInterval", "value": *sdk.QueryInterval})
	}

	// Handling Primitives
	if !model.Robustness.IsNull() && !model.Robustness.IsUnknown() {
		sdk.Robustness = model.Robustness.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Robustness", "value": *sdk.Robustness})
	}

	// Handling Primitives
	if !model.RouterAlertPolicing.IsNull() && !model.RouterAlertPolicing.IsUnknown() {
		sdk.RouterAlertPolicing = model.RouterAlertPolicing.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouterAlertPolicing", "value": *sdk.RouterAlertPolicing})
	}

	// Handling Primitives
	if !model.Version.IsNull() && !model.Version.IsUnknown() {
		sdk.Version = model.Version.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Version", "value": *sdk.Version})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ImmediateLeave != nil {
		model.ImmediateLeave = basetypes.NewBoolValue(*sdk.ImmediateLeave)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ImmediateLeave", "value": *sdk.ImmediateLeave})
	} else {
		model.ImmediateLeave = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.LastMemberQueryInterval != nil {
		model.LastMemberQueryInterval = basetypes.NewFloat64Value(float64(*sdk.LastMemberQueryInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "LastMemberQueryInterval", "value": *sdk.LastMemberQueryInterval})
	} else {
		model.LastMemberQueryInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxGroups != nil {
		model.MaxGroups = basetypes.NewStringValue(*sdk.MaxGroups)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxGroups", "value": *sdk.MaxGroups})
	} else {
		model.MaxGroups = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxQueryResponseTime != nil {
		model.MaxQueryResponseTime = basetypes.NewFloat64Value(float64(*sdk.MaxQueryResponseTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxQueryResponseTime", "value": *sdk.MaxQueryResponseTime})
	} else {
		model.MaxQueryResponseTime = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxSources != nil {
		model.MaxSources = basetypes.NewStringValue(*sdk.MaxSources)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxSources", "value": *sdk.MaxSources})
	} else {
		model.MaxSources = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Mode != nil {
		model.Mode = basetypes.NewStringValue(*sdk.Mode)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Mode", "value": *sdk.Mode})
	} else {
		model.Mode = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.QueryInterval != nil {
		model.QueryInterval = basetypes.NewFloat64Value(float64(*sdk.QueryInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "QueryInterval", "value": *sdk.QueryInterval})
	} else {
		model.QueryInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Robustness != nil {
		model.Robustness = basetypes.NewStringValue(*sdk.Robustness)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Robustness", "value": *sdk.Robustness})
	} else {
		model.Robustness = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouterAlertPolicing != nil {
		model.RouterAlertPolicing = basetypes.NewBoolValue(*sdk.RouterAlertPolicing)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouterAlertPolicing", "value": *sdk.RouterAlertPolicing})
	} else {
		model.RouterAlertPolicing = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Version != nil {
		model.Version = basetypes.NewStringValue(*sdk.Version)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Version", "value": *sdk.Version})
	} else {
		model.Version = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp
		obj, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerIgmp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerPimToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim
	var d diag.Diagnostics
	// Handling Lists
	if !model.AllowedNeighbors.IsNull() && !model.AllowedNeighbors.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AllowedNeighbors")
		unpacked, d := unpackEthernetInterfacesLayer3IpInnerListToSdk(ctx, model.AllowedNeighbors)
		diags.Append(d...)
		sdk.AllowedNeighbors = unpacked
	}

	// Handling Primitives
	if !model.AssertInterval.IsNull() && !model.AssertInterval.IsUnknown() {
		val := float32(model.AssertInterval.ValueFloat64())
		sdk.AssertInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AssertInterval", "value": *sdk.AssertInterval})
	}

	// Handling Primitives
	if !model.BsrBorder.IsNull() && !model.BsrBorder.IsUnknown() {
		sdk.BsrBorder = model.BsrBorder.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "BsrBorder", "value": *sdk.BsrBorder})
	}

	// Handling Primitives
	if !model.DrPriority.IsNull() && !model.DrPriority.IsUnknown() {
		val := float32(model.DrPriority.ValueFloat64())
		sdk.DrPriority = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DrPriority", "value": *sdk.DrPriority})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.HelloInterval.IsNull() && !model.HelloInterval.IsUnknown() {
		val := float32(model.HelloInterval.ValueFloat64())
		sdk.HelloInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "HelloInterval", "value": *sdk.HelloInterval})
	}

	// Handling Primitives
	if !model.JoinPruneInterval.IsNull() && !model.JoinPruneInterval.IsUnknown() {
		val := float32(model.JoinPruneInterval.ValueFloat64())
		sdk.JoinPruneInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "JoinPruneInterval", "value": *sdk.JoinPruneInterval})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerPimFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AllowedNeighbors != nil {
		tflog.Debug(ctx, "Packing list of objects for field AllowedNeighbors")
		packed, d := packEthernetInterfacesLayer3IpInnerListFromSdk(ctx, sdk.AllowedNeighbors)
		diags.Append(d...)
		model.AllowedNeighbors = packed
	} else {
		model.AllowedNeighbors = basetypes.NewListNull(models.EthernetInterfacesLayer3IpInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AssertInterval != nil {
		model.AssertInterval = basetypes.NewFloat64Value(float64(*sdk.AssertInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AssertInterval", "value": *sdk.AssertInterval})
	} else {
		model.AssertInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.BsrBorder != nil {
		model.BsrBorder = basetypes.NewBoolValue(*sdk.BsrBorder)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "BsrBorder", "value": *sdk.BsrBorder})
	} else {
		model.BsrBorder = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.DrPriority != nil {
		model.DrPriority = basetypes.NewFloat64Value(float64(*sdk.DrPriority))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DrPriority", "value": *sdk.DrPriority})
	} else {
		model.DrPriority = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.HelloInterval != nil {
		model.HelloInterval = basetypes.NewFloat64Value(float64(*sdk.HelloInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "HelloInterval", "value": *sdk.HelloInterval})
	} else {
		model.HelloInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.JoinPruneInterval != nil {
		model.JoinPruneInterval = basetypes.NewFloat64Value(float64(*sdk.JoinPruneInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "JoinPruneInterval", "value": *sdk.JoinPruneInterval})
	} else {
		model.JoinPruneInterval = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim ---
func unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerPimListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastInterfaceGroupInnerPimToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim ---
func packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerPimListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim
		obj, d := packLogicalRoutersVrfInnerMulticastInterfaceGroupInnerPimFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastInterfaceGroupInnerPim{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastMsdp ---
func unpackLogicalRoutersVrfInnerMulticastMsdpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastMsdp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastMsdp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastMsdp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastMsdp
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.GlobalAuthentication.IsNull() && !model.GlobalAuthentication.IsUnknown() {
		sdk.GlobalAuthentication = model.GlobalAuthentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GlobalAuthentication", "value": *sdk.GlobalAuthentication})
	}

	// Handling Primitives
	if !model.GlobalTimer.IsNull() && !model.GlobalTimer.IsUnknown() {
		sdk.GlobalTimer = model.GlobalTimer.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GlobalTimer", "value": *sdk.GlobalTimer})
	}

	// Handling Objects
	if !model.OriginatorId.IsNull() && !model.OriginatorId.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field OriginatorId")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressToSdk(ctx, model.OriginatorId)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "OriginatorId"})
		}
		if unpacked != nil {
			sdk.OriginatorId = unpacked
		}
	}

	// Handling Lists
	if !model.Peer.IsNull() && !model.Peer.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Peer")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastMsdpPeerInnerListToSdk(ctx, model.Peer)
		diags.Append(d...)
		sdk.Peer = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastMsdp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastMsdp ---
func packLogicalRoutersVrfInnerMulticastMsdpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastMsdp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastMsdp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastMsdp
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GlobalAuthentication != nil {
		model.GlobalAuthentication = basetypes.NewStringValue(*sdk.GlobalAuthentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GlobalAuthentication", "value": *sdk.GlobalAuthentication})
	} else {
		model.GlobalAuthentication = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GlobalTimer != nil {
		model.GlobalTimer = basetypes.NewStringValue(*sdk.GlobalTimer)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GlobalTimer", "value": *sdk.GlobalTimer})
	} else {
		model.GlobalTimer = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.OriginatorId != nil {
		tflog.Debug(ctx, "Packing nested object for field OriginatorId")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressFromSdk(ctx, *sdk.OriginatorId)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "OriginatorId"})
		}
		model.OriginatorId = packed
	} else {
		model.OriginatorId = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress{}.AttrTypes())
	}
	// Handling Lists
	if sdk.Peer != nil {
		tflog.Debug(ctx, "Packing list of objects for field Peer")
		packed, d := packLogicalRoutersVrfInnerMulticastMsdpPeerInnerListFromSdk(ctx, sdk.Peer)
		diags.Append(d...)
		model.Peer = packed
	} else {
		model.Peer = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastMsdpPeerInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastMsdp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastMsdp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastMsdp ---
func unpackLogicalRoutersVrfInnerMulticastMsdpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastMsdp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastMsdp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastMsdp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastMsdp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastMsdp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastMsdpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastMsdp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastMsdp ---
func packLogicalRoutersVrfInnerMulticastMsdpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastMsdp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastMsdp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastMsdp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastMsdp
		obj, d := packLogicalRoutersVrfInnerMulticastMsdpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastMsdp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastMsdp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastMsdp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastMsdpPeerInner ---
func unpackLogicalRoutersVrfInnerMulticastMsdpPeerInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastMsdpPeerInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastMsdpPeerInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastMsdpPeerInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastMsdpPeerInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.InboundSaFilter.IsNull() && !model.InboundSaFilter.IsUnknown() {
		sdk.InboundSaFilter = model.InboundSaFilter.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "InboundSaFilter", "value": *sdk.InboundSaFilter})
	}

	// Handling Objects
	if !model.LocalAddress.IsNull() && !model.LocalAddress.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field LocalAddress")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressToSdk(ctx, model.LocalAddress)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "LocalAddress"})
		}
		if unpacked != nil {
			sdk.LocalAddress = unpacked
		}
	}

	// Handling Primitives
	if !model.MaxSa.IsNull() && !model.MaxSa.IsUnknown() {
		val := float32(model.MaxSa.ValueFloat64())
		sdk.MaxSa = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxSa", "value": *sdk.MaxSa})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.OutboundSaFilter.IsNull() && !model.OutboundSaFilter.IsUnknown() {
		sdk.OutboundSaFilter = model.OutboundSaFilter.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OutboundSaFilter", "value": *sdk.OutboundSaFilter})
	}

	// Handling Objects
	if !model.PeerAddress.IsNull() && !model.PeerAddress.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field PeerAddress")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressToSdk(ctx, model.PeerAddress)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "PeerAddress"})
		}
		if unpacked != nil {
			sdk.PeerAddress = unpacked
		}
	}

	// Handling Primitives
	if !model.PeerAs.IsNull() && !model.PeerAs.IsUnknown() {
		sdk.PeerAs = model.PeerAs.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "PeerAs", "value": *sdk.PeerAs})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastMsdpPeerInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastMsdpPeerInner ---
func packLogicalRoutersVrfInnerMulticastMsdpPeerInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastMsdpPeerInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastMsdpPeerInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastMsdpPeerInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.InboundSaFilter != nil {
		model.InboundSaFilter = basetypes.NewStringValue(*sdk.InboundSaFilter)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "InboundSaFilter", "value": *sdk.InboundSaFilter})
	} else {
		model.InboundSaFilter = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.LocalAddress != nil {
		tflog.Debug(ctx, "Packing nested object for field LocalAddress")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddressFromSdk(ctx, *sdk.LocalAddress)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "LocalAddress"})
		}
		model.LocalAddress = packed
	} else {
		model.LocalAddress = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerLocalAddress{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxSa != nil {
		model.MaxSa = basetypes.NewFloat64Value(float64(*sdk.MaxSa))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxSa", "value": *sdk.MaxSa})
	} else {
		model.MaxSa = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.OutboundSaFilter != nil {
		model.OutboundSaFilter = basetypes.NewStringValue(*sdk.OutboundSaFilter)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OutboundSaFilter", "value": *sdk.OutboundSaFilter})
	} else {
		model.OutboundSaFilter = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.PeerAddress != nil {
		tflog.Debug(ctx, "Packing nested object for field PeerAddress")
		packed, d := packLogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddressFromSdk(ctx, *sdk.PeerAddress)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "PeerAddress"})
		}
		model.PeerAddress = packed
	} else {
		model.PeerAddress = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInnerPeerAddress{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.PeerAs != nil {
		model.PeerAs = basetypes.NewStringValue(*sdk.PeerAs)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "PeerAs", "value": *sdk.PeerAs})
	} else {
		model.PeerAs = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastMsdpPeerInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastMsdpPeerInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastMsdpPeerInner ---
func unpackLogicalRoutersVrfInnerMulticastMsdpPeerInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastMsdpPeerInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastMsdpPeerInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastMsdpPeerInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastMsdpPeerInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastMsdpPeerInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastMsdpPeerInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastMsdpPeerInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastMsdpPeerInner ---
func packLogicalRoutersVrfInnerMulticastMsdpPeerInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastMsdpPeerInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastMsdpPeerInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastMsdpPeerInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastMsdpPeerInner
		obj, d := packLogicalRoutersVrfInnerMulticastMsdpPeerInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastMsdpPeerInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastMsdpPeerInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastMsdpPeerInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPim ---
func unpackLogicalRoutersVrfInnerMulticastPimToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPim, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPim", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPim
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPim
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.GroupPermission.IsNull() && !model.GroupPermission.IsUnknown() {
		sdk.GroupPermission = model.GroupPermission.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupPermission", "value": *sdk.GroupPermission})
	}

	// Handling Primitives
	if !model.IfTimerGlobal.IsNull() && !model.IfTimerGlobal.IsUnknown() {
		sdk.IfTimerGlobal = model.IfTimerGlobal.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "IfTimerGlobal", "value": *sdk.IfTimerGlobal})
	}

	// Handling Lists
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Interface")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimInterfaceInnerListToSdk(ctx, model.Interface)
		diags.Append(d...)
		sdk.Interface = unpacked
	}

	// Handling Primitives
	if !model.RouteAgeoutTime.IsNull() && !model.RouteAgeoutTime.IsUnknown() {
		val := float32(model.RouteAgeoutTime.ValueFloat64())
		sdk.RouteAgeoutTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouteAgeoutTime", "value": *sdk.RouteAgeoutTime})
	}

	// Handling Objects
	if !model.Rp.IsNull() && !model.Rp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Rp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpToSdk(ctx, model.Rp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Rp"})
		}
		if unpacked != nil {
			sdk.Rp = unpacked
		}
	}

	// Handling Primitives
	if !model.RpfLookupMode.IsNull() && !model.RpfLookupMode.IsUnknown() {
		sdk.RpfLookupMode = model.RpfLookupMode.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RpfLookupMode", "value": *sdk.RpfLookupMode})
	}

	// Handling Lists
	if !model.SptThreshold.IsNull() && !model.SptThreshold.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field SptThreshold")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimSptThresholdInnerListToSdk(ctx, model.SptThreshold)
		diags.Append(d...)
		sdk.SptThreshold = unpacked
	}

	// Handling Objects
	if !model.SsmAddressSpace.IsNull() && !model.SsmAddressSpace.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field SsmAddressSpace")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimSsmAddressSpaceToSdk(ctx, model.SsmAddressSpace)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "SsmAddressSpace"})
		}
		if unpacked != nil {
			sdk.SsmAddressSpace = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPim", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPim ---
func packLogicalRoutersVrfInnerMulticastPimFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPim) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPim", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPim
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupPermission != nil {
		model.GroupPermission = basetypes.NewStringValue(*sdk.GroupPermission)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupPermission", "value": *sdk.GroupPermission})
	} else {
		model.GroupPermission = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.IfTimerGlobal != nil {
		model.IfTimerGlobal = basetypes.NewStringValue(*sdk.IfTimerGlobal)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "IfTimerGlobal", "value": *sdk.IfTimerGlobal})
	} else {
		model.IfTimerGlobal = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Interface != nil {
		tflog.Debug(ctx, "Packing list of objects for field Interface")
		packed, d := packLogicalRoutersVrfInnerMulticastPimInterfaceInnerListFromSdk(ctx, sdk.Interface)
		diags.Append(d...)
		model.Interface = packed
	} else {
		model.Interface = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimInterfaceInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouteAgeoutTime != nil {
		model.RouteAgeoutTime = basetypes.NewFloat64Value(float64(*sdk.RouteAgeoutTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouteAgeoutTime", "value": *sdk.RouteAgeoutTime})
	} else {
		model.RouteAgeoutTime = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Rp != nil {
		tflog.Debug(ctx, "Packing nested object for field Rp")
		packed, d := packLogicalRoutersVrfInnerMulticastPimRpFromSdk(ctx, *sdk.Rp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Rp"})
		}
		model.Rp = packed
	} else {
		model.Rp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastPimRp{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RpfLookupMode != nil {
		model.RpfLookupMode = basetypes.NewStringValue(*sdk.RpfLookupMode)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RpfLookupMode", "value": *sdk.RpfLookupMode})
	} else {
		model.RpfLookupMode = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.SptThreshold != nil {
		tflog.Debug(ctx, "Packing list of objects for field SptThreshold")
		packed, d := packLogicalRoutersVrfInnerMulticastPimSptThresholdInnerListFromSdk(ctx, sdk.SptThreshold)
		diags.Append(d...)
		model.SptThreshold = packed
	} else {
		model.SptThreshold = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.SsmAddressSpace != nil {
		tflog.Debug(ctx, "Packing nested object for field SsmAddressSpace")
		packed, d := packLogicalRoutersVrfInnerMulticastPimSsmAddressSpaceFromSdk(ctx, *sdk.SsmAddressSpace)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "SsmAddressSpace"})
		}
		model.SsmAddressSpace = packed
	} else {
		model.SsmAddressSpace = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPim{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPim", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPim ---
func unpackLogicalRoutersVrfInnerMulticastPimListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPim, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPim")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPim
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPim, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPim{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPim", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPim ---
func packLogicalRoutersVrfInnerMulticastPimListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPim) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPim")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPim

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPim
		obj, d := packLogicalRoutersVrfInnerMulticastPimFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPim{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPim", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPim{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPimInterfaceInner ---
func unpackLogicalRoutersVrfInnerMulticastPimInterfaceInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPimInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPimInterfaceInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimInterfaceInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPimInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Description.IsNull() && !model.Description.IsUnknown() {
		sdk.Description = model.Description.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Description", "value": *sdk.Description})
	}

	// Handling Primitives
	if !model.DrPriority.IsNull() && !model.DrPriority.IsUnknown() {
		val := float32(model.DrPriority.ValueFloat64())
		sdk.DrPriority = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DrPriority", "value": *sdk.DrPriority})
	}

	// Handling Primitives
	if !model.IfTimer.IsNull() && !model.IfTimer.IsUnknown() {
		sdk.IfTimer = model.IfTimer.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "IfTimer", "value": *sdk.IfTimer})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.NeighborFilter.IsNull() && !model.NeighborFilter.IsUnknown() {
		sdk.NeighborFilter = model.NeighborFilter.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NeighborFilter", "value": *sdk.NeighborFilter})
	}

	// Handling Primitives
	if !model.SendBsm.IsNull() && !model.SendBsm.IsUnknown() {
		sdk.SendBsm = model.SendBsm.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SendBsm", "value": *sdk.SendBsm})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPimInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPimInterfaceInner ---
func packLogicalRoutersVrfInnerMulticastPimInterfaceInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPimInterfaceInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPimInterfaceInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Description != nil {
		model.Description = basetypes.NewStringValue(*sdk.Description)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Description", "value": *sdk.Description})
	} else {
		model.Description = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.DrPriority != nil {
		model.DrPriority = basetypes.NewFloat64Value(float64(*sdk.DrPriority))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DrPriority", "value": *sdk.DrPriority})
	} else {
		model.DrPriority = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.IfTimer != nil {
		model.IfTimer = basetypes.NewStringValue(*sdk.IfTimer)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "IfTimer", "value": *sdk.IfTimer})
	} else {
		model.IfTimer = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.NeighborFilter != nil {
		model.NeighborFilter = basetypes.NewStringValue(*sdk.NeighborFilter)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NeighborFilter", "value": *sdk.NeighborFilter})
	} else {
		model.NeighborFilter = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SendBsm != nil {
		model.SendBsm = basetypes.NewBoolValue(*sdk.SendBsm)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SendBsm", "value": *sdk.SendBsm})
	} else {
		model.SendBsm = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimInterfaceInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPimInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPimInterfaceInner ---
func unpackLogicalRoutersVrfInnerMulticastPimInterfaceInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPimInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPimInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimInterfaceInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPimInterfaceInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimInterfaceInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimInterfaceInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPimInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPimInterfaceInner ---
func packLogicalRoutersVrfInnerMulticastPimInterfaceInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPimInterfaceInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPimInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimInterfaceInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPimInterfaceInner
		obj, d := packLogicalRoutersVrfInnerMulticastPimInterfaceInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimInterfaceInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPimInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimInterfaceInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPimRp ---
func unpackLogicalRoutersVrfInnerMulticastPimRpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPimRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPimRp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPimRp
	var d diag.Diagnostics
	// Handling Lists
	if !model.ExternalRp.IsNull() && !model.ExternalRp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field ExternalRp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpExternalRpInnerListToSdk(ctx, model.ExternalRp)
		diags.Append(d...)
		sdk.ExternalRp = unpacked
	}

	// Handling Objects
	if !model.LocalRp.IsNull() && !model.LocalRp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field LocalRp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpToSdk(ctx, model.LocalRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "LocalRp"})
		}
		if unpacked != nil {
			sdk.LocalRp = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPimRp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPimRp ---
func packLogicalRoutersVrfInnerMulticastPimRpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPimRp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPimRp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRp
	var d diag.Diagnostics
	// Handling Lists
	if sdk.ExternalRp != nil {
		tflog.Debug(ctx, "Packing list of objects for field ExternalRp")
		packed, d := packLogicalRoutersVrfInnerMulticastPimRpExternalRpInnerListFromSdk(ctx, sdk.ExternalRp)
		diags.Append(d...)
		model.ExternalRp = packed
	} else {
		model.ExternalRp = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.LocalRp != nil {
		tflog.Debug(ctx, "Packing nested object for field LocalRp")
		packed, d := packLogicalRoutersVrfInnerMulticastPimRpLocalRpFromSdk(ctx, *sdk.LocalRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "LocalRp"})
		}
		model.LocalRp = packed
	} else {
		model.LocalRp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastPimRpLocalRp{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPimRp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPimRp ---
func unpackLogicalRoutersVrfInnerMulticastPimRpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPimRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPimRp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPimRp ---
func packLogicalRoutersVrfInnerMulticastPimRpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPimRp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPimRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPimRp
		obj, d := packLogicalRoutersVrfInnerMulticastPimRpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimRp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPimRp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPimRpExternalRpInner ---
func unpackLogicalRoutersVrfInnerMulticastPimRpExternalRpInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.GroupList.IsNull() && !model.GroupList.IsUnknown() {
		sdk.GroupList = model.GroupList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupList", "value": *sdk.GroupList})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Primitives
	if !model.Override.IsNull() && !model.Override.IsUnknown() {
		sdk.Override = model.Override.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Override", "value": *sdk.Override})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPimRpExternalRpInner ---
func packLogicalRoutersVrfInnerMulticastPimRpExternalRpInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupList != nil {
		model.GroupList = basetypes.NewStringValue(*sdk.GroupList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupList", "value": *sdk.GroupList})
	} else {
		model.GroupList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Override != nil {
		model.Override = basetypes.NewBoolValue(*sdk.Override)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Override", "value": *sdk.Override})
	} else {
		model.Override = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPimRpExternalRpInner ---
func unpackLogicalRoutersVrfInnerMulticastPimRpExternalRpInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpExternalRpInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPimRpExternalRpInner ---
func packLogicalRoutersVrfInnerMulticastPimRpExternalRpInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner
		obj, d := packLogicalRoutersVrfInnerMulticastPimRpExternalRpInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpExternalRpInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPimRpLocalRp ---
func unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRp
	var d diag.Diagnostics
	// Handling Objects
	if !model.CandidateRp.IsNull() && !model.CandidateRp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field CandidateRp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRpToSdk(ctx, model.CandidateRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "CandidateRp"})
		}
		if unpacked != nil {
			sdk.CandidateRp = unpacked
		}
	}

	// Handling Objects
	if !model.StaticRp.IsNull() && !model.StaticRp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field StaticRp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRpToSdk(ctx, model.StaticRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "StaticRp"})
		}
		if unpacked != nil {
			sdk.StaticRp = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPimRpLocalRp ---
func packLogicalRoutersVrfInnerMulticastPimRpLocalRpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRp
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.CandidateRp != nil {
		tflog.Debug(ctx, "Packing nested object for field CandidateRp")
		packed, d := packLogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRpFromSdk(ctx, *sdk.CandidateRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "CandidateRp"})
		}
		model.CandidateRp = packed
	} else {
		model.CandidateRp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.StaticRp != nil {
		tflog.Debug(ctx, "Packing nested object for field StaticRp")
		packed, d := packLogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRpFromSdk(ctx, *sdk.StaticRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "StaticRp"})
		}
		model.StaticRp = packed
	} else {
		model.StaticRp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPimRpLocalRp ---
func unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRpLocalRp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPimRpLocalRp ---
func packLogicalRoutersVrfInnerMulticastPimRpLocalRpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRpLocalRp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRp
		obj, d := packLogicalRoutersVrfInnerMulticastPimRpLocalRpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimRpLocalRp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp ---
func unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Address.IsNull() && !model.Address.IsUnknown() {
		sdk.Address = model.Address.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Address", "value": *sdk.Address})
	}

	// Handling Primitives
	if !model.AdvertisementInterval.IsNull() && !model.AdvertisementInterval.IsUnknown() {
		val := float32(model.AdvertisementInterval.ValueFloat64())
		sdk.AdvertisementInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AdvertisementInterval", "value": *sdk.AdvertisementInterval})
	}

	// Handling Primitives
	if !model.GroupList.IsNull() && !model.GroupList.IsUnknown() {
		sdk.GroupList = model.GroupList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupList", "value": *sdk.GroupList})
	}

	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Priority.IsNull() && !model.Priority.IsUnknown() {
		val := float32(model.Priority.ValueFloat64())
		sdk.Priority = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp ---
func packLogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Address != nil {
		model.Address = basetypes.NewStringValue(*sdk.Address)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Address", "value": *sdk.Address})
	} else {
		model.Address = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AdvertisementInterval != nil {
		model.AdvertisementInterval = basetypes.NewFloat64Value(float64(*sdk.AdvertisementInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AdvertisementInterval", "value": *sdk.AdvertisementInterval})
	} else {
		model.AdvertisementInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupList != nil {
		model.GroupList = basetypes.NewStringValue(*sdk.GroupList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupList", "value": *sdk.GroupList})
	} else {
		model.GroupList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Priority != nil {
		model.Priority = basetypes.NewFloat64Value(float64(*sdk.Priority))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	} else {
		model.Priority = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp ---
func unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp ---
func packLogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp
		obj, d := packLogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRpCandidateRp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp ---
func unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Address.IsNull() && !model.Address.IsUnknown() {
		sdk.Address = model.Address.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Address", "value": *sdk.Address})
	}

	// Handling Primitives
	if !model.GroupList.IsNull() && !model.GroupList.IsUnknown() {
		sdk.GroupList = model.GroupList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupList", "value": *sdk.GroupList})
	}

	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Override.IsNull() && !model.Override.IsUnknown() {
		sdk.Override = model.Override.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Override", "value": *sdk.Override})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp ---
func packLogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Address != nil {
		model.Address = basetypes.NewStringValue(*sdk.Address)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Address", "value": *sdk.Address})
	} else {
		model.Address = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupList != nil {
		model.GroupList = basetypes.NewStringValue(*sdk.GroupList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupList", "value": *sdk.GroupList})
	} else {
		model.GroupList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Override != nil {
		model.Override = basetypes.NewBoolValue(*sdk.Override)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Override", "value": *sdk.Override})
	} else {
		model.Override = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp ---
func unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp ---
func packLogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp
		obj, d := packLogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimRpLocalRpStaticRp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPimSptThresholdInner ---
func unpackLogicalRoutersVrfInnerMulticastPimSptThresholdInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPimSptThresholdInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPimSptThresholdInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Threshold.IsNull() && !model.Threshold.IsUnknown() {
		sdk.Threshold = model.Threshold.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Threshold", "value": *sdk.Threshold})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPimSptThresholdInner ---
func packLogicalRoutersVrfInnerMulticastPimSptThresholdInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPimSptThresholdInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Threshold != nil {
		model.Threshold = basetypes.NewStringValue(*sdk.Threshold)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Threshold", "value": *sdk.Threshold})
	} else {
		model.Threshold = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPimSptThresholdInner ---
func unpackLogicalRoutersVrfInnerMulticastPimSptThresholdInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPimSptThresholdInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPimSptThresholdInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimSptThresholdInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPimSptThresholdInner ---
func packLogicalRoutersVrfInnerMulticastPimSptThresholdInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPimSptThresholdInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner
		obj, d := packLogicalRoutersVrfInnerMulticastPimSptThresholdInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimSptThresholdInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastPimSsmAddressSpace ---
func unpackLogicalRoutersVrfInnerMulticastPimSsmAddressSpaceToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace
	var d diag.Diagnostics
	// Handling Primitives
	if !model.GroupList.IsNull() && !model.GroupList.IsUnknown() {
		sdk.GroupList = model.GroupList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GroupList", "value": *sdk.GroupList})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastPimSsmAddressSpace ---
func packLogicalRoutersVrfInnerMulticastPimSsmAddressSpaceFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.GroupList != nil {
		model.GroupList = basetypes.NewStringValue(*sdk.GroupList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GroupList", "value": *sdk.GroupList})
	} else {
		model.GroupList = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastPimSsmAddressSpace ---
func unpackLogicalRoutersVrfInnerMulticastPimSsmAddressSpaceListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastPimSsmAddressSpaceToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastPimSsmAddressSpace ---
func packLogicalRoutersVrfInnerMulticastPimSsmAddressSpaceListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace
		obj, d := packLogicalRoutersVrfInnerMulticastPimSsmAddressSpaceFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastPimSsmAddressSpace{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastRp ---
func unpackLogicalRoutersVrfInnerMulticastRpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastRp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastRp
	var d diag.Diagnostics
	// Handling Lists
	if !model.ExternalRp.IsNull() && !model.ExternalRp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field ExternalRp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpExternalRpInnerListToSdk(ctx, model.ExternalRp)
		diags.Append(d...)
		sdk.ExternalRp = unpacked
	}

	// Handling Objects
	if !model.LocalRp.IsNull() && !model.LocalRp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field LocalRp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpLocalRpToSdk(ctx, model.LocalRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "LocalRp"})
		}
		if unpacked != nil {
			sdk.LocalRp = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastRp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastRp ---
func packLogicalRoutersVrfInnerMulticastRpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastRp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastRp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRp
	var d diag.Diagnostics
	// Handling Lists
	if sdk.ExternalRp != nil {
		tflog.Debug(ctx, "Packing list of objects for field ExternalRp")
		packed, d := packLogicalRoutersVrfInnerMulticastRpExternalRpInnerListFromSdk(ctx, sdk.ExternalRp)
		diags.Append(d...)
		model.ExternalRp = packed
	} else {
		model.ExternalRp = basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastRpExternalRpInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.LocalRp != nil {
		tflog.Debug(ctx, "Packing nested object for field LocalRp")
		packed, d := packLogicalRoutersVrfInnerMulticastRpLocalRpFromSdk(ctx, *sdk.LocalRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "LocalRp"})
		}
		model.LocalRp = packed
	} else {
		model.LocalRp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastRpLocalRp{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastRp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastRp ---
func unpackLogicalRoutersVrfInnerMulticastRpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastRp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastRp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastRp ---
func packLogicalRoutersVrfInnerMulticastRpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastRp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastRp
		obj, d := packLogicalRoutersVrfInnerMulticastRpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastRp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastRp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastRpExternalRpInner ---
func unpackLogicalRoutersVrfInnerMulticastRpExternalRpInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastRpExternalRpInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastRpExternalRpInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRpExternalRpInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastRpExternalRpInner
	var d diag.Diagnostics
	// Handling Lists
	if !model.GroupAddresses.IsNull() && !model.GroupAddresses.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field GroupAddresses")
		diags.Append(model.GroupAddresses.ElementsAs(ctx, &sdk.GroupAddresses, false)...)
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Override.IsNull() && !model.Override.IsUnknown() {
		sdk.Override = model.Override.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Override", "value": *sdk.Override})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastRpExternalRpInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastRpExternalRpInner ---
func packLogicalRoutersVrfInnerMulticastRpExternalRpInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastRpExternalRpInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastRpExternalRpInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRpExternalRpInner
	var d diag.Diagnostics
	// Handling Lists
	if sdk.GroupAddresses != nil {
		tflog.Debug(ctx, "Packing list of primitives for field GroupAddresses")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.GroupAddresses, d = basetypes.NewListValueFrom(ctx, elemType, sdk.GroupAddresses)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.GroupAddresses = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Override != nil {
		model.Override = basetypes.NewBoolValue(*sdk.Override)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Override", "value": *sdk.Override})
	} else {
		model.Override = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpExternalRpInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastRpExternalRpInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastRpExternalRpInner ---
func unpackLogicalRoutersVrfInnerMulticastRpExternalRpInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastRpExternalRpInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastRpExternalRpInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRpExternalRpInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastRpExternalRpInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpExternalRpInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpExternalRpInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastRpExternalRpInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastRpExternalRpInner ---
func packLogicalRoutersVrfInnerMulticastRpExternalRpInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastRpExternalRpInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastRpExternalRpInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRpExternalRpInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastRpExternalRpInner
		obj, d := packLogicalRoutersVrfInnerMulticastRpExternalRpInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastRpExternalRpInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastRpExternalRpInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpExternalRpInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastRpLocalRp ---
func unpackLogicalRoutersVrfInnerMulticastRpLocalRpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastRpLocalRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRpLocalRp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastRpLocalRp
	var d diag.Diagnostics
	// Handling Objects
	if !model.CandidateRp.IsNull() && !model.CandidateRp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field CandidateRp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpLocalRpCandidateRpToSdk(ctx, model.CandidateRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "CandidateRp"})
		}
		if unpacked != nil {
			sdk.CandidateRp = unpacked
		}
	}

	// Handling Objects
	if !model.StaticRp.IsNull() && !model.StaticRp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field StaticRp")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpLocalRpStaticRpToSdk(ctx, model.StaticRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "StaticRp"})
		}
		if unpacked != nil {
			sdk.StaticRp = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastRpLocalRp ---
func packLogicalRoutersVrfInnerMulticastRpLocalRpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastRpLocalRp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRpLocalRp
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.CandidateRp != nil {
		tflog.Debug(ctx, "Packing nested object for field CandidateRp")
		packed, d := packLogicalRoutersVrfInnerMulticastRpLocalRpCandidateRpFromSdk(ctx, *sdk.CandidateRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "CandidateRp"})
		}
		model.CandidateRp = packed
	} else {
		model.CandidateRp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.StaticRp != nil {
		tflog.Debug(ctx, "Packing nested object for field StaticRp")
		packed, d := packLogicalRoutersVrfInnerMulticastRpLocalRpStaticRpFromSdk(ctx, *sdk.StaticRp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "StaticRp"})
		}
		model.StaticRp = packed
	} else {
		model.StaticRp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastRpLocalRp ---
func unpackLogicalRoutersVrfInnerMulticastRpLocalRpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastRpLocalRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRpLocalRp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastRpLocalRp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpLocalRpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastRpLocalRp ---
func packLogicalRoutersVrfInnerMulticastRpLocalRpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastRpLocalRp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRpLocalRp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastRpLocalRp
		obj, d := packLogicalRoutersVrfInnerMulticastRpLocalRpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastRpLocalRp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp ---
func unpackLogicalRoutersVrfInnerMulticastRpLocalRpCandidateRpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Address.IsNull() && !model.Address.IsUnknown() {
		sdk.Address = model.Address.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Address", "value": *sdk.Address})
	}

	// Handling Primitives
	if !model.AdvertisementInterval.IsNull() && !model.AdvertisementInterval.IsUnknown() {
		val := float32(model.AdvertisementInterval.ValueFloat64())
		sdk.AdvertisementInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AdvertisementInterval", "value": *sdk.AdvertisementInterval})
	}

	// Handling Lists
	if !model.GroupAddresses.IsNull() && !model.GroupAddresses.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field GroupAddresses")
		diags.Append(model.GroupAddresses.ElementsAs(ctx, &sdk.GroupAddresses, false)...)
	}

	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Priority.IsNull() && !model.Priority.IsUnknown() {
		val := float32(model.Priority.ValueFloat64())
		sdk.Priority = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp ---
func packLogicalRoutersVrfInnerMulticastRpLocalRpCandidateRpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Address != nil {
		model.Address = basetypes.NewStringValue(*sdk.Address)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Address", "value": *sdk.Address})
	} else {
		model.Address = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AdvertisementInterval != nil {
		model.AdvertisementInterval = basetypes.NewFloat64Value(float64(*sdk.AdvertisementInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AdvertisementInterval", "value": *sdk.AdvertisementInterval})
	} else {
		model.AdvertisementInterval = basetypes.NewFloat64Null()
	}
	// Handling Lists
	if sdk.GroupAddresses != nil {
		tflog.Debug(ctx, "Packing list of primitives for field GroupAddresses")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.GroupAddresses, d = basetypes.NewListValueFrom(ctx, elemType, sdk.GroupAddresses)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.GroupAddresses = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Priority != nil {
		model.Priority = basetypes.NewFloat64Value(float64(*sdk.Priority))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	} else {
		model.Priority = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp ---
func unpackLogicalRoutersVrfInnerMulticastRpLocalRpCandidateRpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpLocalRpCandidateRpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp ---
func packLogicalRoutersVrfInnerMulticastRpLocalRpCandidateRpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp
		obj, d := packLogicalRoutersVrfInnerMulticastRpLocalRpCandidateRpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRpCandidateRp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp ---
func unpackLogicalRoutersVrfInnerMulticastRpLocalRpStaticRpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Address.IsNull() && !model.Address.IsUnknown() {
		sdk.Address = model.Address.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Address", "value": *sdk.Address})
	}

	// Handling Lists
	if !model.GroupAddresses.IsNull() && !model.GroupAddresses.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field GroupAddresses")
		diags.Append(model.GroupAddresses.ElementsAs(ctx, &sdk.GroupAddresses, false)...)
	}

	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Override.IsNull() && !model.Override.IsUnknown() {
		sdk.Override = model.Override.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Override", "value": *sdk.Override})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp ---
func packLogicalRoutersVrfInnerMulticastRpLocalRpStaticRpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Address != nil {
		model.Address = basetypes.NewStringValue(*sdk.Address)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Address", "value": *sdk.Address})
	} else {
		model.Address = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.GroupAddresses != nil {
		tflog.Debug(ctx, "Packing list of primitives for field GroupAddresses")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.GroupAddresses, d = basetypes.NewListValueFrom(ctx, elemType, sdk.GroupAddresses)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.GroupAddresses = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Override != nil {
		model.Override = basetypes.NewBoolValue(*sdk.Override)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Override", "value": *sdk.Override})
	} else {
		model.Override = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp ---
func unpackLogicalRoutersVrfInnerMulticastRpLocalRpStaticRpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastRpLocalRpStaticRpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp ---
func packLogicalRoutersVrfInnerMulticastRpLocalRpStaticRpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp
		obj, d := packLogicalRoutersVrfInnerMulticastRpLocalRpStaticRpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastRpLocalRpStaticRp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastStaticRouteInner ---
func unpackLogicalRoutersVrfInnerMulticastStaticRouteInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastStaticRouteInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastStaticRouteInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastStaticRouteInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Destination.IsNull() && !model.Destination.IsUnknown() {
		sdk.Destination = model.Destination.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Destination", "value": *sdk.Destination})
	}

	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Objects
	if !model.Nexthop.IsNull() && !model.Nexthop.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Nexthop")
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastStaticRouteInnerNexthopToSdk(ctx, model.Nexthop)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Nexthop"})
		}
		if unpacked != nil {
			sdk.Nexthop = unpacked
		}
	}

	// Handling Primitives
	if !model.Preference.IsNull() && !model.Preference.IsUnknown() {
		val := float32(model.Preference.ValueFloat64())
		sdk.Preference = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Preference", "value": *sdk.Preference})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastStaticRouteInner ---
func packLogicalRoutersVrfInnerMulticastStaticRouteInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastStaticRouteInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastStaticRouteInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Destination != nil {
		model.Destination = basetypes.NewStringValue(*sdk.Destination)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Destination", "value": *sdk.Destination})
	} else {
		model.Destination = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Nexthop != nil {
		tflog.Debug(ctx, "Packing nested object for field Nexthop")
		packed, d := packLogicalRoutersVrfInnerMulticastStaticRouteInnerNexthopFromSdk(ctx, *sdk.Nexthop)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Nexthop"})
		}
		model.Nexthop = packed
	} else {
		model.Nexthop = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Preference != nil {
		model.Preference = basetypes.NewFloat64Value(float64(*sdk.Preference))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Preference", "value": *sdk.Preference})
	} else {
		model.Preference = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastStaticRouteInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastStaticRouteInner ---
func unpackLogicalRoutersVrfInnerMulticastStaticRouteInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastStaticRouteInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastStaticRouteInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastStaticRouteInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastStaticRouteInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastStaticRouteInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastStaticRouteInner ---
func packLogicalRoutersVrfInnerMulticastStaticRouteInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastStaticRouteInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastStaticRouteInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastStaticRouteInner
		obj, d := packLogicalRoutersVrfInnerMulticastStaticRouteInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastStaticRouteInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastStaticRouteInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop ---
func unpackLogicalRoutersVrfInnerMulticastStaticRouteInnerNexthopToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop
	var d diag.Diagnostics
	// Handling Primitives
	if !model.IpAddress.IsNull() && !model.IpAddress.IsUnknown() {
		sdk.IpAddress = model.IpAddress.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "IpAddress", "value": *sdk.IpAddress})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop ---
func packLogicalRoutersVrfInnerMulticastStaticRouteInnerNexthopFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.IpAddress != nil {
		model.IpAddress = basetypes.NewStringValue(*sdk.IpAddress)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "IpAddress", "value": *sdk.IpAddress})
	} else {
		model.IpAddress = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop ---
func unpackLogicalRoutersVrfInnerMulticastStaticRouteInnerNexthopListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerMulticastStaticRouteInnerNexthopToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop ---
func packLogicalRoutersVrfInnerMulticastStaticRouteInnerNexthopListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop
		obj, d := packLogicalRoutersVrfInnerMulticastStaticRouteInnerNexthopFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspf ---
func unpackLogicalRoutersVrfInnerOspfToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspf, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspf", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspf
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspf
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AllowRedistDefaultRoute.IsNull() && !model.AllowRedistDefaultRoute.IsUnknown() {
		sdk.AllowRedistDefaultRoute = model.AllowRedistDefaultRoute.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AllowRedistDefaultRoute", "value": *sdk.AllowRedistDefaultRoute})
	}

	// Handling Lists
	if !model.Area.IsNull() && !model.Area.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Area")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerListToSdk(ctx, model.Area)
		diags.Append(d...)
		sdk.Area = unpacked
	}

	// Handling Lists
	if !model.AuthProfile.IsNull() && !model.AuthProfile.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AuthProfile")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAuthProfileInnerListToSdk(ctx, model.AuthProfile)
		diags.Append(d...)
		sdk.AuthProfile = unpacked
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Lists
	if !model.ExportRules.IsNull() && !model.ExportRules.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field ExportRules")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfExportRulesInnerListToSdk(ctx, model.ExportRules)
		diags.Append(d...)
		sdk.ExportRules = unpacked
	}

	// Handling Objects
	if !model.FloodPrevention.IsNull() && !model.FloodPrevention.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field FloodPrevention")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfFloodPreventionToSdk(ctx, model.FloodPrevention)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "FloodPrevention"})
		}
		if unpacked != nil {
			sdk.FloodPrevention = unpacked
		}
	}

	// Handling Objects
	if !model.GlobalBfd.IsNull() && !model.GlobalBfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GlobalBfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.GlobalBfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GlobalBfd"})
		}
		if unpacked != nil {
			sdk.GlobalBfd = unpacked
		}
	}

	// Handling Primitives
	if !model.GlobalIfTimer.IsNull() && !model.GlobalIfTimer.IsUnknown() {
		sdk.GlobalIfTimer = model.GlobalIfTimer.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GlobalIfTimer", "value": *sdk.GlobalIfTimer})
	}

	// Handling Objects
	if !model.GracefulRestart.IsNull() && !model.GracefulRestart.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GracefulRestart")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfGracefulRestartToSdk(ctx, model.GracefulRestart)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GracefulRestart"})
		}
		if unpacked != nil {
			sdk.GracefulRestart = unpacked
		}
	}

	// Handling Primitives
	if !model.RedistributionProfile.IsNull() && !model.RedistributionProfile.IsUnknown() {
		sdk.RedistributionProfile = model.RedistributionProfile.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RedistributionProfile", "value": *sdk.RedistributionProfile})
	}

	// Handling Primitives
	if !model.RejectDefaultRoute.IsNull() && !model.RejectDefaultRoute.IsUnknown() {
		sdk.RejectDefaultRoute = model.RejectDefaultRoute.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RejectDefaultRoute", "value": *sdk.RejectDefaultRoute})
	}

	// Handling Primitives
	if !model.Rfc1583.IsNull() && !model.Rfc1583.IsUnknown() {
		sdk.Rfc1583 = model.Rfc1583.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Rfc1583", "value": *sdk.Rfc1583})
	}

	// Handling Primitives
	if !model.RouterId.IsNull() && !model.RouterId.IsUnknown() {
		sdk.RouterId = model.RouterId.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouterId", "value": *sdk.RouterId})
	}

	// Handling Primitives
	if !model.SpfTimer.IsNull() && !model.SpfTimer.IsUnknown() {
		sdk.SpfTimer = model.SpfTimer.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SpfTimer", "value": *sdk.SpfTimer})
	}

	// Handling Objects
	if !model.VrTimers.IsNull() && !model.VrTimers.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field VrTimers")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfVrTimersToSdk(ctx, model.VrTimers)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "VrTimers"})
		}
		if unpacked != nil {
			sdk.VrTimers = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspf", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspf ---
func packLogicalRoutersVrfInnerOspfFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspf) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspf", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspf
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AllowRedistDefaultRoute != nil {
		model.AllowRedistDefaultRoute = basetypes.NewBoolValue(*sdk.AllowRedistDefaultRoute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AllowRedistDefaultRoute", "value": *sdk.AllowRedistDefaultRoute})
	} else {
		model.AllowRedistDefaultRoute = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.Area != nil {
		tflog.Debug(ctx, "Packing list of objects for field Area")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerListFromSdk(ctx, sdk.Area)
		diags.Append(d...)
		model.Area = packed
	} else {
		model.Area = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInner{}.AttrType())
	}
	// Handling Lists
	if sdk.AuthProfile != nil {
		tflog.Debug(ctx, "Packing list of objects for field AuthProfile")
		packed, d := packLogicalRoutersVrfInnerOspfAuthProfileInnerListFromSdk(ctx, sdk.AuthProfile)
		diags.Append(d...)
		model.AuthProfile = packed
	} else {
		model.AuthProfile = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAuthProfileInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.ExportRules != nil {
		tflog.Debug(ctx, "Packing list of objects for field ExportRules")
		packed, d := packLogicalRoutersVrfInnerOspfExportRulesInnerListFromSdk(ctx, sdk.ExportRules)
		diags.Append(d...)
		model.ExportRules = packed
	} else {
		model.ExportRules = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfExportRulesInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.FloodPrevention != nil {
		tflog.Debug(ctx, "Packing nested object for field FloodPrevention")
		packed, d := packLogicalRoutersVrfInnerOspfFloodPreventionFromSdk(ctx, *sdk.FloodPrevention)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "FloodPrevention"})
		}
		model.FloodPrevention = packed
	} else {
		model.FloodPrevention = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfFloodPrevention{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GlobalBfd != nil {
		tflog.Debug(ctx, "Packing nested object for field GlobalBfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.GlobalBfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GlobalBfd"})
		}
		model.GlobalBfd = packed
	} else {
		model.GlobalBfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GlobalIfTimer != nil {
		model.GlobalIfTimer = basetypes.NewStringValue(*sdk.GlobalIfTimer)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GlobalIfTimer", "value": *sdk.GlobalIfTimer})
	} else {
		model.GlobalIfTimer = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GracefulRestart != nil {
		tflog.Debug(ctx, "Packing nested object for field GracefulRestart")
		packed, d := packLogicalRoutersVrfInnerOspfGracefulRestartFromSdk(ctx, *sdk.GracefulRestart)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GracefulRestart"})
		}
		model.GracefulRestart = packed
	} else {
		model.GracefulRestart = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfGracefulRestart{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RedistributionProfile != nil {
		model.RedistributionProfile = basetypes.NewStringValue(*sdk.RedistributionProfile)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RedistributionProfile", "value": *sdk.RedistributionProfile})
	} else {
		model.RedistributionProfile = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RejectDefaultRoute != nil {
		model.RejectDefaultRoute = basetypes.NewBoolValue(*sdk.RejectDefaultRoute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RejectDefaultRoute", "value": *sdk.RejectDefaultRoute})
	} else {
		model.RejectDefaultRoute = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Rfc1583 != nil {
		model.Rfc1583 = basetypes.NewBoolValue(*sdk.Rfc1583)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Rfc1583", "value": *sdk.Rfc1583})
	} else {
		model.Rfc1583 = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouterId != nil {
		model.RouterId = basetypes.NewStringValue(*sdk.RouterId)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouterId", "value": *sdk.RouterId})
	} else {
		model.RouterId = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SpfTimer != nil {
		model.SpfTimer = basetypes.NewStringValue(*sdk.SpfTimer)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SpfTimer", "value": *sdk.SpfTimer})
	} else {
		model.SpfTimer = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.VrTimers != nil {
		tflog.Debug(ctx, "Packing nested object for field VrTimers")
		packed, d := packLogicalRoutersVrfInnerOspfVrTimersFromSdk(ctx, *sdk.VrTimers)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "VrTimers"})
		}
		model.VrTimers = packed
	} else {
		model.VrTimers = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfVrTimers{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspf{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspf", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspf ---
func unpackLogicalRoutersVrfInnerOspfListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspf, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspf")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspf
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspf, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspf{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspf", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspf ---
func packLogicalRoutersVrfInnerOspfListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspf) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspf")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspf

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspf
		obj, d := packLogicalRoutersVrfInnerOspfFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspf{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspf", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspf{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Lists
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Interface")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerListToSdk(ctx, model.Interface)
		diags.Append(d...)
		sdk.Interface = unpacked
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Lists
	if !model.Range.IsNull() && !model.Range.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Range")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerRangeInnerListToSdk(ctx, model.Range)
		diags.Append(d...)
		sdk.Range = unpacked
	}

	// Handling Objects
	if !model.Type.IsNull() && !model.Type.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Type")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeToSdk(ctx, model.Type)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Type"})
		}
		if unpacked != nil {
			sdk.Type = unpacked
		}
	}

	// Handling Lists
	if !model.VirtualLink.IsNull() && !model.VirtualLink.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field VirtualLink")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerListToSdk(ctx, model.VirtualLink)
		diags.Append(d...)
		sdk.VirtualLink = unpacked
	}

	// Handling Lists
	if !model.VrRange.IsNull() && !model.VrRange.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field VrRange")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerListToSdk(ctx, model.VrRange)
		diags.Append(d...)
		sdk.VrRange = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Interface != nil {
		tflog.Debug(ctx, "Packing list of objects for field Interface")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerListFromSdk(ctx, sdk.Interface)
		diags.Append(d...)
		model.Interface = packed
	} else {
		model.Interface = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Lists
	if sdk.Range != nil {
		tflog.Debug(ctx, "Packing list of objects for field Range")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerRangeInnerListFromSdk(ctx, sdk.Range)
		diags.Append(d...)
		model.Range = packed
	} else {
		model.Range = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Type != nil {
		tflog.Debug(ctx, "Packing nested object for field Type")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeFromSdk(ctx, *sdk.Type)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Type"})
		}
		model.Type = packed
	} else {
		model.Type = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerType{}.AttrTypes())
	}
	// Handling Lists
	if sdk.VirtualLink != nil {
		tflog.Debug(ctx, "Packing list of objects for field VirtualLink")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerListFromSdk(ctx, sdk.VirtualLink)
		diags.Append(d...)
		model.VirtualLink = packed
	} else {
		model.VirtualLink = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner{}.AttrType())
	}
	// Handling Lists
	if sdk.VrRange != nil {
		tflog.Debug(ctx, "Packing list of objects for field VrRange")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerListFromSdk(ctx, sdk.VrRange)
		diags.Append(d...)
		model.VrRange = packed
	} else {
		model.VrRange = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInner
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Objects
	if !model.Bfd.IsNull() && !model.Bfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bfd"})
		}
		if unpacked != nil {
			sdk.Bfd = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Objects
	if !model.LinkType.IsNull() && !model.LinkType.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field LinkType")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeToSdk(ctx, model.LinkType)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "LinkType"})
		}
		if unpacked != nil {
			sdk.LinkType = unpacked
		}
	}

	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	// Handling Primitives
	if !model.MtuIgnore.IsNull() && !model.MtuIgnore.IsUnknown() {
		sdk.MtuIgnore = model.MtuIgnore.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MtuIgnore", "value": *sdk.MtuIgnore})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Passive.IsNull() && !model.Passive.IsUnknown() {
		sdk.Passive = model.Passive.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Passive", "value": *sdk.Passive})
	}

	// Handling Primitives
	if !model.Priority.IsNull() && !model.Priority.IsUnknown() {
		val := float32(model.Priority.ValueFloat64())
		sdk.Priority = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	}

	// Handling Primitives
	if !model.Timing.IsNull() && !model.Timing.IsUnknown() {
		sdk.Timing = model.Timing.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Timing", "value": *sdk.Timing})
	}

	// Handling Objects
	if !model.VrTiming.IsNull() && !model.VrTiming.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field VrTiming")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingToSdk(ctx, model.VrTiming)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "VrTiming"})
		}
		if unpacked != nil {
			sdk.VrTiming = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bfd != nil {
		tflog.Debug(ctx, "Packing nested object for field Bfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bfd"})
		}
		model.Bfd = packed
	} else {
		model.Bfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.LinkType != nil {
		tflog.Debug(ctx, "Packing nested object for field LinkType")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeFromSdk(ctx, *sdk.LinkType)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "LinkType"})
		}
		model.LinkType = packed
	} else {
		model.LinkType = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MtuIgnore != nil {
		model.MtuIgnore = basetypes.NewBoolValue(*sdk.MtuIgnore)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MtuIgnore", "value": *sdk.MtuIgnore})
	} else {
		model.MtuIgnore = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Passive != nil {
		model.Passive = basetypes.NewBoolValue(*sdk.Passive)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Passive", "value": *sdk.Passive})
	} else {
		model.Passive = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Priority != nil {
		model.Priority = basetypes.NewFloat64Value(float64(*sdk.Priority))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	} else {
		model.Priority = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Timing != nil {
		model.Timing = basetypes.NewStringValue(*sdk.Timing)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Timing", "value": *sdk.Timing})
	} else {
		model.Timing = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.VrTiming != nil {
		tflog.Debug(ctx, "Packing nested object for field VrTiming")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingFromSdk(ctx, *sdk.VrTiming)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "VrTiming"})
		}
		model.VrTiming = packed
	} else {
		model.VrTiming = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.Broadcast.IsNull() && !model.Broadcast.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Broadcast")
		sdk.Broadcast = make(map[string]interface{})
	}

	// Handling Objects
	if !model.P2mp.IsNull() && !model.P2mp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field P2mp")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpToSdk(ctx, model.P2mp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "P2mp"})
		}
		if unpacked != nil {
			sdk.P2mp = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.P2p.IsNull() && !model.P2p.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field P2p")
		sdk.P2p = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Broadcast != nil && !reflect.ValueOf(sdk.Broadcast).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Broadcast")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Broadcast, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Broadcast = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.P2mp != nil {
		tflog.Debug(ctx, "Packing nested object for field P2mp")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpFromSdk(ctx, *sdk.P2mp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "P2mp"})
		}
		model.P2mp = packed
	} else {
		model.P2mp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.P2p != nil && !reflect.ValueOf(sdk.P2p).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field P2p")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.P2p, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.P2p = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp
	var d diag.Diagnostics
	// Handling Lists
	if !model.Neighbor.IsNull() && !model.Neighbor.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Neighbor")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInnerListToSdk(ctx, model.Neighbor)
		diags.Append(d...)
		sdk.Neighbor = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Neighbor != nil {
		tflog.Debug(ctx, "Packing list of objects for field Neighbor")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInnerListFromSdk(ctx, sdk.Neighbor)
		diags.Append(d...)
		model.Neighbor = packed
	} else {
		model.Neighbor = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Priority.IsNull() && !model.Priority.IsUnknown() {
		val := float32(model.Priority.ValueFloat64())
		sdk.Priority = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Priority != nil {
		model.Priority = basetypes.NewFloat64Value(float64(*sdk.Priority))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	} else {
		model.Priority = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeP2mpNeighborInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming
	var d diag.Diagnostics
	// Handling Primitives
	if !model.DeadCounts.IsNull() && !model.DeadCounts.IsUnknown() {
		val := float32(model.DeadCounts.ValueFloat64())
		sdk.DeadCounts = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DeadCounts", "value": *sdk.DeadCounts})
	}

	// Handling Primitives
	if !model.GrDelay.IsNull() && !model.GrDelay.IsUnknown() {
		val := float32(model.GrDelay.ValueFloat64())
		sdk.GrDelay = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GrDelay", "value": *sdk.GrDelay})
	}

	// Handling Primitives
	if !model.HelloInterval.IsNull() && !model.HelloInterval.IsUnknown() {
		val := float32(model.HelloInterval.ValueFloat64())
		sdk.HelloInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "HelloInterval", "value": *sdk.HelloInterval})
	}

	// Handling Primitives
	if !model.RetransmitInterval.IsNull() && !model.RetransmitInterval.IsUnknown() {
		val := float32(model.RetransmitInterval.ValueFloat64())
		sdk.RetransmitInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RetransmitInterval", "value": *sdk.RetransmitInterval})
	}

	// Handling Primitives
	if !model.TransitDelay.IsNull() && !model.TransitDelay.IsUnknown() {
		val := float32(model.TransitDelay.ValueFloat64())
		sdk.TransitDelay = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "TransitDelay", "value": *sdk.TransitDelay})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.DeadCounts != nil {
		model.DeadCounts = basetypes.NewFloat64Value(float64(*sdk.DeadCounts))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DeadCounts", "value": *sdk.DeadCounts})
	} else {
		model.DeadCounts = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GrDelay != nil {
		model.GrDelay = basetypes.NewFloat64Value(float64(*sdk.GrDelay))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GrDelay", "value": *sdk.GrDelay})
	} else {
		model.GrDelay = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.HelloInterval != nil {
		model.HelloInterval = basetypes.NewFloat64Value(float64(*sdk.HelloInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "HelloInterval", "value": *sdk.HelloInterval})
	} else {
		model.HelloInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RetransmitInterval != nil {
		model.RetransmitInterval = basetypes.NewFloat64Value(float64(*sdk.RetransmitInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RetransmitInterval", "value": *sdk.RetransmitInterval})
	} else {
		model.RetransmitInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.TransitDelay != nil {
		model.TransitDelay = basetypes.NewFloat64Value(float64(*sdk.TransitDelay))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "TransitDelay", "value": *sdk.TransitDelay})
	} else {
		model.TransitDelay = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming ---
func packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerRangeInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerRangeInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerRangeInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Advertise.IsNull() && !model.Advertise.IsUnknown() {
		sdk.Advertise = model.Advertise.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Advertise", "value": *sdk.Advertise})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Substitute.IsNull() && !model.Substitute.IsUnknown() {
		sdk.Substitute = model.Substitute.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Substitute", "value": *sdk.Substitute})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerRangeInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerRangeInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerRangeInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Advertise != nil {
		model.Advertise = basetypes.NewBoolValue(*sdk.Advertise)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Advertise", "value": *sdk.Advertise})
	} else {
		model.Advertise = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Substitute != nil {
		model.Substitute = basetypes.NewStringValue(*sdk.Substitute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Substitute", "value": *sdk.Substitute})
	} else {
		model.Substitute = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerRangeInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerRangeInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerRangeInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerRangeInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerRangeInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerRangeInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerRangeInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerRangeInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerRangeInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerType ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerType", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerType
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerType
	var d diag.Diagnostics
	// Handling Objects
	if !model.Normal.IsNull() && !model.Normal.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Normal")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalToSdk(ctx, model.Normal)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Normal"})
		}
		if unpacked != nil {
			sdk.Normal = unpacked
		}
	}

	// Handling Objects
	if !model.Nssa.IsNull() && !model.Nssa.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Nssa")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaToSdk(ctx, model.Nssa)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Nssa"})
		}
		if unpacked != nil {
			sdk.Nssa = unpacked
		}
	}

	// Handling Objects
	if !model.Stub.IsNull() && !model.Stub.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Stub")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubToSdk(ctx, model.Stub)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Stub"})
		}
		if unpacked != nil {
			sdk.Stub = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerType ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerType) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerType", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerType
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Normal != nil {
		tflog.Debug(ctx, "Packing nested object for field Normal")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalFromSdk(ctx, *sdk.Normal)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Normal"})
		}
		model.Normal = packed
	} else {
		model.Normal = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Nssa != nil {
		tflog.Debug(ctx, "Packing nested object for field Nssa")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaFromSdk(ctx, *sdk.Nssa)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Nssa"})
		}
		model.Nssa = packed
	} else {
		model.Nssa = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Stub != nil {
		tflog.Debug(ctx, "Packing nested object for field Stub")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeStubFromSdk(ctx, *sdk.Stub)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Stub"})
		}
		model.Stub = packed
	} else {
		model.Stub = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerType{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerType ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerType
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerType, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerType{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerType ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerType) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerType

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerType
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerType{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerType{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNormal ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal
	var d diag.Diagnostics
	// Handling Objects
	if !model.Abr.IsNull() && !model.Abr.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Abr")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrToSdk(ctx, model.Abr)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Abr"})
		}
		if unpacked != nil {
			sdk.Abr = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNormal ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Abr != nil {
		tflog.Debug(ctx, "Packing nested object for field Abr")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrFromSdk(ctx, *sdk.Abr)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Abr"})
		}
		model.Abr = packed
	} else {
		model.Abr = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNormal ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNormal ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr
	var d diag.Diagnostics
	// Handling Primitives
	if !model.ExportList.IsNull() && !model.ExportList.IsUnknown() {
		sdk.ExportList = model.ExportList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ExportList", "value": *sdk.ExportList})
	}

	// Handling Primitives
	if !model.ImportList.IsNull() && !model.ImportList.IsUnknown() {
		sdk.ImportList = model.ImportList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ImportList", "value": *sdk.ImportList})
	}

	// Handling Primitives
	if !model.InboundFilterList.IsNull() && !model.InboundFilterList.IsUnknown() {
		sdk.InboundFilterList = model.InboundFilterList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "InboundFilterList", "value": *sdk.InboundFilterList})
	}

	// Handling Primitives
	if !model.OutboundFilterList.IsNull() && !model.OutboundFilterList.IsUnknown() {
		sdk.OutboundFilterList = model.OutboundFilterList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OutboundFilterList", "value": *sdk.OutboundFilterList})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.ExportList != nil {
		model.ExportList = basetypes.NewStringValue(*sdk.ExportList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ExportList", "value": *sdk.ExportList})
	} else {
		model.ExportList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ImportList != nil {
		model.ImportList = basetypes.NewStringValue(*sdk.ImportList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ImportList", "value": *sdk.ImportList})
	} else {
		model.ImportList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.InboundFilterList != nil {
		model.InboundFilterList = basetypes.NewStringValue(*sdk.InboundFilterList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "InboundFilterList", "value": *sdk.InboundFilterList})
	} else {
		model.InboundFilterList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OutboundFilterList != nil {
		model.OutboundFilterList = basetypes.NewStringValue(*sdk.OutboundFilterList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OutboundFilterList", "value": *sdk.OutboundFilterList})
	} else {
		model.OutboundFilterList = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssa ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa
	var d diag.Diagnostics
	// Handling Objects
	if !model.Abr.IsNull() && !model.Abr.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Abr")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrToSdk(ctx, model.Abr)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Abr"})
		}
		if unpacked != nil {
			sdk.Abr = unpacked
		}
	}

	// Handling Primitives
	if !model.AcceptSummary.IsNull() && !model.AcceptSummary.IsUnknown() {
		sdk.AcceptSummary = model.AcceptSummary.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AcceptSummary", "value": *sdk.AcceptSummary})
	}

	// Handling Objects
	if !model.DefaultInformationOriginate.IsNull() && !model.DefaultInformationOriginate.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field DefaultInformationOriginate")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateToSdk(ctx, model.DefaultInformationOriginate)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "DefaultInformationOriginate"})
		}
		if unpacked != nil {
			sdk.DefaultInformationOriginate = unpacked
		}
	}

	// Handling Objects
	if !model.DefaultRoute.IsNull() && !model.DefaultRoute.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field DefaultRoute")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteToSdk(ctx, model.DefaultRoute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "DefaultRoute"})
		}
		if unpacked != nil {
			sdk.DefaultRoute = unpacked
		}
	}

	// Handling Primitives
	if !model.NoSummary.IsNull() && !model.NoSummary.IsUnknown() {
		sdk.NoSummary = model.NoSummary.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NoSummary", "value": *sdk.NoSummary})
	}

	// Handling Lists
	if !model.NssaExtRange.IsNull() && !model.NssaExtRange.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field NssaExtRange")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerListToSdk(ctx, model.NssaExtRange)
		diags.Append(d...)
		sdk.NssaExtRange = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssa ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Abr != nil {
		tflog.Debug(ctx, "Packing nested object for field Abr")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrFromSdk(ctx, *sdk.Abr)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Abr"})
		}
		model.Abr = packed
	} else {
		model.Abr = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AcceptSummary != nil {
		model.AcceptSummary = basetypes.NewBoolValue(*sdk.AcceptSummary)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AcceptSummary", "value": *sdk.AcceptSummary})
	} else {
		model.AcceptSummary = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.DefaultInformationOriginate != nil {
		tflog.Debug(ctx, "Packing nested object for field DefaultInformationOriginate")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateFromSdk(ctx, *sdk.DefaultInformationOriginate)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "DefaultInformationOriginate"})
		}
		model.DefaultInformationOriginate = packed
	} else {
		model.DefaultInformationOriginate = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.DefaultRoute != nil {
		tflog.Debug(ctx, "Packing nested object for field DefaultRoute")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteFromSdk(ctx, *sdk.DefaultRoute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "DefaultRoute"})
		}
		model.DefaultRoute = packed
	} else {
		model.DefaultRoute = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.NoSummary != nil {
		model.NoSummary = basetypes.NewBoolValue(*sdk.NoSummary)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NoSummary", "value": *sdk.NoSummary})
	} else {
		model.NoSummary = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.NssaExtRange != nil {
		tflog.Debug(ctx, "Packing list of objects for field NssaExtRange")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerListFromSdk(ctx, sdk.NssaExtRange)
		diags.Append(d...)
		model.NssaExtRange = packed
	} else {
		model.NssaExtRange = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssa ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssa ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssa{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr
	var d diag.Diagnostics
	// Handling Primitives
	if !model.ExportList.IsNull() && !model.ExportList.IsUnknown() {
		sdk.ExportList = model.ExportList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ExportList", "value": *sdk.ExportList})
	}

	// Handling Primitives
	if !model.ImportList.IsNull() && !model.ImportList.IsUnknown() {
		sdk.ImportList = model.ImportList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ImportList", "value": *sdk.ImportList})
	}

	// Handling Primitives
	if !model.InboundFilterList.IsNull() && !model.InboundFilterList.IsUnknown() {
		sdk.InboundFilterList = model.InboundFilterList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "InboundFilterList", "value": *sdk.InboundFilterList})
	}

	// Handling Lists
	if !model.NssaExtRange.IsNull() && !model.NssaExtRange.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field NssaExtRange")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInnerListToSdk(ctx, model.NssaExtRange)
		diags.Append(d...)
		sdk.NssaExtRange = unpacked
	}

	// Handling Primitives
	if !model.OutboundFilterList.IsNull() && !model.OutboundFilterList.IsUnknown() {
		sdk.OutboundFilterList = model.OutboundFilterList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OutboundFilterList", "value": *sdk.OutboundFilterList})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.ExportList != nil {
		model.ExportList = basetypes.NewStringValue(*sdk.ExportList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ExportList", "value": *sdk.ExportList})
	} else {
		model.ExportList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ImportList != nil {
		model.ImportList = basetypes.NewStringValue(*sdk.ImportList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ImportList", "value": *sdk.ImportList})
	} else {
		model.ImportList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.InboundFilterList != nil {
		model.InboundFilterList = basetypes.NewStringValue(*sdk.InboundFilterList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "InboundFilterList", "value": *sdk.InboundFilterList})
	} else {
		model.InboundFilterList = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.NssaExtRange != nil {
		tflog.Debug(ctx, "Packing list of objects for field NssaExtRange")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInnerListFromSdk(ctx, sdk.NssaExtRange)
		diags.Append(d...)
		model.NssaExtRange = packed
	} else {
		model.NssaExtRange = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OutboundFilterList != nil {
		model.OutboundFilterList = basetypes.NewStringValue(*sdk.OutboundFilterList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OutboundFilterList", "value": *sdk.OutboundFilterList})
	} else {
		model.OutboundFilterList = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbr{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Advertise.IsNull() && !model.Advertise.IsUnknown() {
		sdk.Advertise = model.Advertise.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Advertise", "value": *sdk.Advertise})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.RouteTag.IsNull() && !model.RouteTag.IsUnknown() {
		val := float32(model.RouteTag.ValueFloat64())
		sdk.RouteTag = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouteTag", "value": *sdk.RouteTag})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Advertise != nil {
		model.Advertise = basetypes.NewBoolValue(*sdk.Advertise)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Advertise", "value": *sdk.Advertise})
	} else {
		model.Advertise = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouteTag != nil {
		model.RouteTag = basetypes.NewFloat64Value(float64(*sdk.RouteTag))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouteTag", "value": *sdk.RouteTag})
	} else {
		model.RouteTag = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	// Handling Primitives
	if !model.MetricType.IsNull() && !model.MetricType.IsUnknown() {
		sdk.MetricType = model.MetricType.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MetricType", "value": *sdk.MetricType})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MetricType != nil {
		model.MetricType = basetypes.NewStringValue(*sdk.MetricType)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MetricType", "value": *sdk.MetricType})
	} else {
		model.MetricType = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute
	var d diag.Diagnostics
	// Handling Objects
	if !model.Advertise.IsNull() && !model.Advertise.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Advertise")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertiseToSdk(ctx, model.Advertise)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Advertise"})
		}
		if unpacked != nil {
			sdk.Advertise = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.Disable.IsNull() && !model.Disable.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Disable")
		sdk.Disable = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Advertise != nil {
		tflog.Debug(ctx, "Packing nested object for field Advertise")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertiseFromSdk(ctx, *sdk.Advertise)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Advertise"})
		}
		model.Advertise = packed
	} else {
		model.Advertise = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Disable != nil && !reflect.ValueOf(sdk.Disable).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Disable")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Disable, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Disable = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertiseToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	// Handling Primitives
	if !model.Type.IsNull() && !model.Type.IsUnknown() {
		sdk.Type = model.Type.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Type", "value": *sdk.Type})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertiseFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Type != nil {
		model.Type = basetypes.NewStringValue(*sdk.Type)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Type", "value": *sdk.Type})
	} else {
		model.Type = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertiseListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertiseToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertiseListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertiseFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteAdvertise{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.Advertise.IsNull() && !model.Advertise.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Advertise")
		sdk.Advertise = make(map[string]interface{})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Typeless Objects
	if !model.Suppress.IsNull() && !model.Suppress.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Suppress")
		sdk.Suppress = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Advertise != nil && !reflect.ValueOf(sdk.Advertise).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Advertise")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Advertise, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Advertise = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Suppress != nil && !reflect.ValueOf(sdk.Suppress).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Suppress")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Suppress, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Suppress = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeStub ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStub, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStub
	var d diag.Diagnostics
	// Handling Objects
	if !model.Abr.IsNull() && !model.Abr.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Abr")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrToSdk(ctx, model.Abr)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Abr"})
		}
		if unpacked != nil {
			sdk.Abr = unpacked
		}
	}

	// Handling Primitives
	if !model.AcceptSummary.IsNull() && !model.AcceptSummary.IsUnknown() {
		sdk.AcceptSummary = model.AcceptSummary.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AcceptSummary", "value": *sdk.AcceptSummary})
	}

	// Handling Objects
	if !model.DefaultRoute.IsNull() && !model.DefaultRoute.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field DefaultRoute")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteToSdk(ctx, model.DefaultRoute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "DefaultRoute"})
		}
		if unpacked != nil {
			sdk.DefaultRoute = unpacked
		}
	}

	// Handling Primitives
	if !model.DefaultRouteMetric.IsNull() && !model.DefaultRouteMetric.IsUnknown() {
		val := float32(model.DefaultRouteMetric.ValueFloat64())
		sdk.DefaultRouteMetric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DefaultRouteMetric", "value": *sdk.DefaultRouteMetric})
	}

	// Handling Primitives
	if !model.NoSummary.IsNull() && !model.NoSummary.IsUnknown() {
		sdk.NoSummary = model.NoSummary.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NoSummary", "value": *sdk.NoSummary})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeStub ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeStubFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStub) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Abr != nil {
		tflog.Debug(ctx, "Packing nested object for field Abr")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbrFromSdk(ctx, *sdk.Abr)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Abr"})
		}
		model.Abr = packed
	} else {
		model.Abr = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormalAbr{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AcceptSummary != nil {
		model.AcceptSummary = basetypes.NewBoolValue(*sdk.AcceptSummary)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AcceptSummary", "value": *sdk.AcceptSummary})
	} else {
		model.AcceptSummary = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.DefaultRoute != nil {
		tflog.Debug(ctx, "Packing nested object for field DefaultRoute")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteFromSdk(ctx, *sdk.DefaultRoute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "DefaultRoute"})
		}
		model.DefaultRoute = packed
	} else {
		model.DefaultRoute = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.DefaultRouteMetric != nil {
		model.DefaultRouteMetric = basetypes.NewFloat64Value(float64(*sdk.DefaultRouteMetric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DefaultRouteMetric", "value": *sdk.DefaultRouteMetric})
	} else {
		model.DefaultRouteMetric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.NoSummary != nil {
		model.NoSummary = basetypes.NewBoolValue(*sdk.NoSummary)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NoSummary", "value": *sdk.NoSummary})
	} else {
		model.NoSummary = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeStub ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStub, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStub, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeStub ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeStubListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStub) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeStubFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute
	var d diag.Diagnostics
	// Handling Objects
	if !model.Advertise.IsNull() && !model.Advertise.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Advertise")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertiseToSdk(ctx, model.Advertise)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Advertise"})
		}
		if unpacked != nil {
			sdk.Advertise = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.Disable.IsNull() && !model.Disable.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Disable")
		sdk.Disable = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Advertise != nil {
		tflog.Debug(ctx, "Packing nested object for field Advertise")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertiseFromSdk(ctx, *sdk.Advertise)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Advertise"})
		}
		model.Advertise = packed
	} else {
		model.Advertise = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Disable != nil && !reflect.ValueOf(sdk.Disable).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Disable")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Disable, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Disable = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRoute{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertiseToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertiseFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertiseListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertiseToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise ---
func packLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertiseListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertiseFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerTypeStubDefaultRouteAdvertise{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Objects
	if !model.Bfd.IsNull() && !model.Bfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bfd"})
		}
		if unpacked != nil {
			sdk.Bfd = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.InstanceId.IsNull() && !model.InstanceId.IsUnknown() {
		val := float32(model.InstanceId.ValueFloat64())
		sdk.InstanceId = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "InstanceId", "value": *sdk.InstanceId})
	}

	// Handling Primitives
	if !model.InterfaceId.IsNull() && !model.InterfaceId.IsUnknown() {
		val := float32(model.InterfaceId.ValueFloat64())
		sdk.InterfaceId = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "InterfaceId", "value": *sdk.InterfaceId})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.NeighborId.IsNull() && !model.NeighborId.IsUnknown() {
		sdk.NeighborId = model.NeighborId.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NeighborId", "value": *sdk.NeighborId})
	}

	// Handling Primitives
	if !model.Passive.IsNull() && !model.Passive.IsUnknown() {
		sdk.Passive = model.Passive.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Passive", "value": *sdk.Passive})
	}

	// Handling Primitives
	if !model.Timing.IsNull() && !model.Timing.IsUnknown() {
		sdk.Timing = model.Timing.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Timing", "value": *sdk.Timing})
	}

	// Handling Primitives
	if !model.TransitAreaId.IsNull() && !model.TransitAreaId.IsUnknown() {
		sdk.TransitAreaId = model.TransitAreaId.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "TransitAreaId", "value": *sdk.TransitAreaId})
	}

	// Handling Objects
	if !model.VrTiming.IsNull() && !model.VrTiming.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field VrTiming")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTimingToSdk(ctx, model.VrTiming)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "VrTiming"})
		}
		if unpacked != nil {
			sdk.VrTiming = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bfd != nil {
		tflog.Debug(ctx, "Packing nested object for field Bfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bfd"})
		}
		model.Bfd = packed
	} else {
		model.Bfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.InstanceId != nil {
		model.InstanceId = basetypes.NewFloat64Value(float64(*sdk.InstanceId))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "InstanceId", "value": *sdk.InstanceId})
	} else {
		model.InstanceId = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.InterfaceId != nil {
		model.InterfaceId = basetypes.NewFloat64Value(float64(*sdk.InterfaceId))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "InterfaceId", "value": *sdk.InterfaceId})
	} else {
		model.InterfaceId = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.NeighborId != nil {
		model.NeighborId = basetypes.NewStringValue(*sdk.NeighborId)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NeighborId", "value": *sdk.NeighborId})
	} else {
		model.NeighborId = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Passive != nil {
		model.Passive = basetypes.NewBoolValue(*sdk.Passive)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Passive", "value": *sdk.Passive})
	} else {
		model.Passive = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Timing != nil {
		model.Timing = basetypes.NewStringValue(*sdk.Timing)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Timing", "value": *sdk.Timing})
	} else {
		model.Timing = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.TransitAreaId != nil {
		model.TransitAreaId = basetypes.NewStringValue(*sdk.TransitAreaId)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "TransitAreaId", "value": *sdk.TransitAreaId})
	} else {
		model.TransitAreaId = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.VrTiming != nil {
		tflog.Debug(ctx, "Packing nested object for field VrTiming")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTimingFromSdk(ctx, *sdk.VrTiming)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "VrTiming"})
		}
		model.VrTiming = packed
	} else {
		model.VrTiming = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner ---
func packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTimingToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming
	var d diag.Diagnostics
	// Handling Primitives
	if !model.DeadCounts.IsNull() && !model.DeadCounts.IsUnknown() {
		val := float32(model.DeadCounts.ValueFloat64())
		sdk.DeadCounts = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DeadCounts", "value": *sdk.DeadCounts})
	}

	// Handling Primitives
	if !model.HelloInterval.IsNull() && !model.HelloInterval.IsUnknown() {
		val := float32(model.HelloInterval.ValueFloat64())
		sdk.HelloInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "HelloInterval", "value": *sdk.HelloInterval})
	}

	// Handling Primitives
	if !model.RetransmitInterval.IsNull() && !model.RetransmitInterval.IsUnknown() {
		val := float32(model.RetransmitInterval.ValueFloat64())
		sdk.RetransmitInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RetransmitInterval", "value": *sdk.RetransmitInterval})
	}

	// Handling Primitives
	if !model.TransitDelay.IsNull() && !model.TransitDelay.IsUnknown() {
		val := float32(model.TransitDelay.ValueFloat64())
		sdk.TransitDelay = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "TransitDelay", "value": *sdk.TransitDelay})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming ---
func packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTimingFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.DeadCounts != nil {
		model.DeadCounts = basetypes.NewFloat64Value(float64(*sdk.DeadCounts))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DeadCounts", "value": *sdk.DeadCounts})
	} else {
		model.DeadCounts = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.HelloInterval != nil {
		model.HelloInterval = basetypes.NewFloat64Value(float64(*sdk.HelloInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "HelloInterval", "value": *sdk.HelloInterval})
	} else {
		model.HelloInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RetransmitInterval != nil {
		model.RetransmitInterval = basetypes.NewFloat64Value(float64(*sdk.RetransmitInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RetransmitInterval", "value": *sdk.RetransmitInterval})
	} else {
		model.RetransmitInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.TransitDelay != nil {
		model.TransitDelay = basetypes.NewFloat64Value(float64(*sdk.TransitDelay))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "TransitDelay", "value": *sdk.TransitDelay})
	} else {
		model.TransitDelay = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming ---
func unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTimingListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTimingToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming ---
func packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTimingListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming
		obj, d := packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTimingFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerVrTiming{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAuthProfileInner ---
func unpackLogicalRoutersVrfInnerOspfAuthProfileInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAuthProfileInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAuthProfileInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAuthProfileInner
	var d diag.Diagnostics
	// Handling Lists
	if !model.Md5.IsNull() && !model.Md5.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Md5")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAuthProfileInnerMd5InnerListToSdk(ctx, model.Md5)
		diags.Append(d...)
		sdk.Md5 = unpacked
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Password.IsNull() && !model.Password.IsUnknown() {
		sdk.Password = model.Password.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Password", "value": *sdk.Password})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAuthProfileInner ---
func packLogicalRoutersVrfInnerOspfAuthProfileInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAuthProfileInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAuthProfileInner
	var d diag.Diagnostics
	// Handling Lists
	if sdk.Md5 != nil {
		tflog.Debug(ctx, "Packing list of objects for field Md5")
		packed, d := packLogicalRoutersVrfInnerOspfAuthProfileInnerMd5InnerListFromSdk(ctx, sdk.Md5)
		diags.Append(d...)
		model.Md5 = packed
	} else {
		model.Md5 = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Password != nil {
		model.Password = basetypes.NewStringValue(*sdk.Password)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Password", "value": *sdk.Password})
	} else {
		model.Password = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAuthProfileInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAuthProfileInner ---
func unpackLogicalRoutersVrfInnerOspfAuthProfileInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAuthProfileInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAuthProfileInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAuthProfileInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAuthProfileInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAuthProfileInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAuthProfileInner ---
func packLogicalRoutersVrfInnerOspfAuthProfileInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAuthProfileInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAuthProfileInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAuthProfileInner
		obj, d := packLogicalRoutersVrfInnerOspfAuthProfileInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAuthProfileInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAuthProfileInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner ---
func unpackLogicalRoutersVrfInnerOspfAuthProfileInnerMd5InnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Key.IsNull() && !model.Key.IsUnknown() {
		sdk.Key = model.Key.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Key", "value": *sdk.Key})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = float32(model.Name.ValueFloat64())
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Preferred.IsNull() && !model.Preferred.IsUnknown() {
		sdk.Preferred = model.Preferred.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Preferred", "value": *sdk.Preferred})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner ---
func packLogicalRoutersVrfInnerOspfAuthProfileInnerMd5InnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Key != nil {
		model.Key = basetypes.NewStringValue(*sdk.Key)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Key", "value": *sdk.Key})
	} else {
		model.Key = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewFloat64Value(float64(sdk.Name))
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Preferred != nil {
		model.Preferred = basetypes.NewBoolValue(*sdk.Preferred)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Preferred", "value": *sdk.Preferred})
	} else {
		model.Preferred = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner ---
func unpackLogicalRoutersVrfInnerOspfAuthProfileInnerMd5InnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAuthProfileInnerMd5InnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner ---
func packLogicalRoutersVrfInnerOspfAuthProfileInnerMd5InnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner
		obj, d := packLogicalRoutersVrfInnerOspfAuthProfileInnerMd5InnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfAuthProfileInnerMd5Inner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfExportRulesInner ---
func unpackLogicalRoutersVrfInnerOspfExportRulesInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfExportRulesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfExportRulesInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfExportRulesInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfExportRulesInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.NewPathType.IsNull() && !model.NewPathType.IsUnknown() {
		sdk.NewPathType = model.NewPathType.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NewPathType", "value": *sdk.NewPathType})
	}

	// Handling Primitives
	if !model.NewTag.IsNull() && !model.NewTag.IsUnknown() {
		sdk.NewTag = model.NewTag.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NewTag", "value": *sdk.NewTag})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfExportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfExportRulesInner ---
func packLogicalRoutersVrfInnerOspfExportRulesInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfExportRulesInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfExportRulesInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfExportRulesInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.NewPathType != nil {
		model.NewPathType = basetypes.NewStringValue(*sdk.NewPathType)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NewPathType", "value": *sdk.NewPathType})
	} else {
		model.NewPathType = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.NewTag != nil {
		model.NewTag = basetypes.NewStringValue(*sdk.NewTag)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NewTag", "value": *sdk.NewTag})
	} else {
		model.NewTag = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfExportRulesInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfExportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfExportRulesInner ---
func unpackLogicalRoutersVrfInnerOspfExportRulesInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfExportRulesInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfExportRulesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfExportRulesInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfExportRulesInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfExportRulesInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfExportRulesInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfExportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfExportRulesInner ---
func packLogicalRoutersVrfInnerOspfExportRulesInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfExportRulesInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfExportRulesInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfExportRulesInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfExportRulesInner
		obj, d := packLogicalRoutersVrfInnerOspfExportRulesInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfExportRulesInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfExportRulesInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfExportRulesInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfFloodPrevention ---
func unpackLogicalRoutersVrfInnerOspfFloodPreventionToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfFloodPrevention, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfFloodPrevention", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfFloodPrevention
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfFloodPrevention
	var d diag.Diagnostics
	// Handling Objects
	if !model.Hello.IsNull() && !model.Hello.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Hello")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfFloodPreventionHelloToSdk(ctx, model.Hello)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Hello"})
		}
		if unpacked != nil {
			sdk.Hello = unpacked
		}
	}

	// Handling Objects
	if !model.Lsa.IsNull() && !model.Lsa.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Lsa")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfFloodPreventionHelloToSdk(ctx, model.Lsa)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Lsa"})
		}
		if unpacked != nil {
			sdk.Lsa = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfFloodPrevention", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfFloodPrevention ---
func packLogicalRoutersVrfInnerOspfFloodPreventionFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfFloodPrevention) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfFloodPrevention", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfFloodPrevention
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Hello != nil {
		tflog.Debug(ctx, "Packing nested object for field Hello")
		packed, d := packLogicalRoutersVrfInnerOspfFloodPreventionHelloFromSdk(ctx, *sdk.Hello)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Hello"})
		}
		model.Hello = packed
	} else {
		model.Hello = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfFloodPreventionHello{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Lsa != nil {
		tflog.Debug(ctx, "Packing nested object for field Lsa")
		packed, d := packLogicalRoutersVrfInnerOspfFloodPreventionHelloFromSdk(ctx, *sdk.Lsa)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Lsa"})
		}
		model.Lsa = packed
	} else {
		model.Lsa = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfFloodPreventionHello{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfFloodPrevention{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfFloodPrevention", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfFloodPrevention ---
func unpackLogicalRoutersVrfInnerOspfFloodPreventionListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfFloodPrevention, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfFloodPrevention")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfFloodPrevention
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfFloodPrevention, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfFloodPrevention{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfFloodPreventionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfFloodPrevention", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfFloodPrevention ---
func packLogicalRoutersVrfInnerOspfFloodPreventionListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfFloodPrevention) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfFloodPrevention")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfFloodPrevention

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfFloodPrevention
		obj, d := packLogicalRoutersVrfInnerOspfFloodPreventionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfFloodPrevention{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfFloodPrevention", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfFloodPrevention{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfFloodPreventionHello ---
func unpackLogicalRoutersVrfInnerOspfFloodPreventionHelloToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfFloodPreventionHello, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfFloodPreventionHello", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfFloodPreventionHello
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfFloodPreventionHello
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.MaxPacket.IsNull() && !model.MaxPacket.IsUnknown() {
		val := float32(model.MaxPacket.ValueFloat64())
		sdk.MaxPacket = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxPacket", "value": *sdk.MaxPacket})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfFloodPreventionHello", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfFloodPreventionHello ---
func packLogicalRoutersVrfInnerOspfFloodPreventionHelloFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfFloodPreventionHello) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfFloodPreventionHello", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfFloodPreventionHello
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxPacket != nil {
		model.MaxPacket = basetypes.NewFloat64Value(float64(*sdk.MaxPacket))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxPacket", "value": *sdk.MaxPacket})
	} else {
		model.MaxPacket = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfFloodPreventionHello{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfFloodPreventionHello", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfFloodPreventionHello ---
func unpackLogicalRoutersVrfInnerOspfFloodPreventionHelloListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfFloodPreventionHello, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfFloodPreventionHello")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfFloodPreventionHello
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfFloodPreventionHello, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfFloodPreventionHello{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfFloodPreventionHelloToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfFloodPreventionHello", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfFloodPreventionHello ---
func packLogicalRoutersVrfInnerOspfFloodPreventionHelloListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfFloodPreventionHello) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfFloodPreventionHello")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfFloodPreventionHello

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfFloodPreventionHello
		obj, d := packLogicalRoutersVrfInnerOspfFloodPreventionHelloFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfFloodPreventionHello{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfFloodPreventionHello", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfFloodPreventionHello{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfGracefulRestart ---
func unpackLogicalRoutersVrfInnerOspfGracefulRestartToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfGracefulRestart, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfGracefulRestart", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfGracefulRestart
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfGracefulRestart
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.GracePeriod.IsNull() && !model.GracePeriod.IsUnknown() {
		val := float32(model.GracePeriod.ValueFloat64())
		sdk.GracePeriod = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GracePeriod", "value": *sdk.GracePeriod})
	}

	// Handling Primitives
	if !model.HelperEnable.IsNull() && !model.HelperEnable.IsUnknown() {
		sdk.HelperEnable = model.HelperEnable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "HelperEnable", "value": *sdk.HelperEnable})
	}

	// Handling Primitives
	if !model.MaxNeighborRestartTime.IsNull() && !model.MaxNeighborRestartTime.IsUnknown() {
		val := float32(model.MaxNeighborRestartTime.ValueFloat64())
		sdk.MaxNeighborRestartTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MaxNeighborRestartTime", "value": *sdk.MaxNeighborRestartTime})
	}

	// Handling Primitives
	if !model.StrictLSAChecking.IsNull() && !model.StrictLSAChecking.IsUnknown() {
		sdk.StrictLSAChecking = model.StrictLSAChecking.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "StrictLSAChecking", "value": *sdk.StrictLSAChecking})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfGracefulRestart", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfGracefulRestart ---
func packLogicalRoutersVrfInnerOspfGracefulRestartFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfGracefulRestart) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfGracefulRestart", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfGracefulRestart
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GracePeriod != nil {
		model.GracePeriod = basetypes.NewFloat64Value(float64(*sdk.GracePeriod))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GracePeriod", "value": *sdk.GracePeriod})
	} else {
		model.GracePeriod = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.HelperEnable != nil {
		model.HelperEnable = basetypes.NewBoolValue(*sdk.HelperEnable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "HelperEnable", "value": *sdk.HelperEnable})
	} else {
		model.HelperEnable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MaxNeighborRestartTime != nil {
		model.MaxNeighborRestartTime = basetypes.NewFloat64Value(float64(*sdk.MaxNeighborRestartTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MaxNeighborRestartTime", "value": *sdk.MaxNeighborRestartTime})
	} else {
		model.MaxNeighborRestartTime = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.StrictLSAChecking != nil {
		model.StrictLSAChecking = basetypes.NewBoolValue(*sdk.StrictLSAChecking)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "StrictLSAChecking", "value": *sdk.StrictLSAChecking})
	} else {
		model.StrictLSAChecking = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfGracefulRestart{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfGracefulRestart", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfGracefulRestart ---
func unpackLogicalRoutersVrfInnerOspfGracefulRestartListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfGracefulRestart, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfGracefulRestart")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfGracefulRestart
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfGracefulRestart, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfGracefulRestart{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfGracefulRestartToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfGracefulRestart", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfGracefulRestart ---
func packLogicalRoutersVrfInnerOspfGracefulRestartListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfGracefulRestart) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfGracefulRestart")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfGracefulRestart

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfGracefulRestart
		obj, d := packLogicalRoutersVrfInnerOspfGracefulRestartFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfGracefulRestart{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfGracefulRestart", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfGracefulRestart{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfVrTimers ---
func unpackLogicalRoutersVrfInnerOspfVrTimersToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfVrTimers, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfVrTimers", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfVrTimers
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfVrTimers
	var d diag.Diagnostics
	// Handling Primitives
	if !model.LsaInterval.IsNull() && !model.LsaInterval.IsUnknown() {
		val := float32(model.LsaInterval.ValueFloat64())
		sdk.LsaInterval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "LsaInterval", "value": *sdk.LsaInterval})
	}

	// Handling Primitives
	if !model.SpfCalculationDelay.IsNull() && !model.SpfCalculationDelay.IsUnknown() {
		val := float32(model.SpfCalculationDelay.ValueFloat64())
		sdk.SpfCalculationDelay = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SpfCalculationDelay", "value": *sdk.SpfCalculationDelay})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfVrTimers", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfVrTimers ---
func packLogicalRoutersVrfInnerOspfVrTimersFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfVrTimers) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfVrTimers", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfVrTimers
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.LsaInterval != nil {
		model.LsaInterval = basetypes.NewFloat64Value(float64(*sdk.LsaInterval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "LsaInterval", "value": *sdk.LsaInterval})
	} else {
		model.LsaInterval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SpfCalculationDelay != nil {
		model.SpfCalculationDelay = basetypes.NewFloat64Value(float64(*sdk.SpfCalculationDelay))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SpfCalculationDelay", "value": *sdk.SpfCalculationDelay})
	} else {
		model.SpfCalculationDelay = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfVrTimers{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfVrTimers", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfVrTimers ---
func unpackLogicalRoutersVrfInnerOspfVrTimersListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfVrTimers, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfVrTimers")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfVrTimers
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfVrTimers, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfVrTimers{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfVrTimersToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfVrTimers", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfVrTimers ---
func packLogicalRoutersVrfInnerOspfVrTimersListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfVrTimers) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfVrTimers")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfVrTimers

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfVrTimers
		obj, d := packLogicalRoutersVrfInnerOspfVrTimersFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfVrTimers{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfVrTimers", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfVrTimers{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3 ---
func unpackLogicalRoutersVrfInnerOspfv3ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AllowRedistDefaultRoute.IsNull() && !model.AllowRedistDefaultRoute.IsUnknown() {
		sdk.AllowRedistDefaultRoute = model.AllowRedistDefaultRoute.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AllowRedistDefaultRoute", "value": *sdk.AllowRedistDefaultRoute})
	}

	// Handling Lists
	if !model.Area.IsNull() && !model.Area.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Area")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerListToSdk(ctx, model.Area)
		diags.Append(d...)
		sdk.Area = unpacked
	}

	// Handling Lists
	if !model.AuthProfile.IsNull() && !model.AuthProfile.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AuthProfile")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerListToSdk(ctx, model.AuthProfile)
		diags.Append(d...)
		sdk.AuthProfile = unpacked
	}

	// Handling Primitives
	if !model.DisableTransitTraffic.IsNull() && !model.DisableTransitTraffic.IsUnknown() {
		sdk.DisableTransitTraffic = model.DisableTransitTraffic.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DisableTransitTraffic", "value": *sdk.DisableTransitTraffic})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Lists
	if !model.ExportRules.IsNull() && !model.ExportRules.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field ExportRules")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfExportRulesInnerListToSdk(ctx, model.ExportRules)
		diags.Append(d...)
		sdk.ExportRules = unpacked
	}

	// Handling Objects
	if !model.GlobalBfd.IsNull() && !model.GlobalBfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GlobalBfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.GlobalBfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GlobalBfd"})
		}
		if unpacked != nil {
			sdk.GlobalBfd = unpacked
		}
	}

	// Handling Primitives
	if !model.GlobalIfTimer.IsNull() && !model.GlobalIfTimer.IsUnknown() {
		sdk.GlobalIfTimer = model.GlobalIfTimer.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GlobalIfTimer", "value": *sdk.GlobalIfTimer})
	}

	// Handling Objects
	if !model.GracefulRestart.IsNull() && !model.GracefulRestart.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GracefulRestart")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfGracefulRestartToSdk(ctx, model.GracefulRestart)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GracefulRestart"})
		}
		if unpacked != nil {
			sdk.GracefulRestart = unpacked
		}
	}

	// Handling Primitives
	if !model.RedistributionProfile.IsNull() && !model.RedistributionProfile.IsUnknown() {
		sdk.RedistributionProfile = model.RedistributionProfile.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RedistributionProfile", "value": *sdk.RedistributionProfile})
	}

	// Handling Primitives
	if !model.RejectDefaultRoute.IsNull() && !model.RejectDefaultRoute.IsUnknown() {
		sdk.RejectDefaultRoute = model.RejectDefaultRoute.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RejectDefaultRoute", "value": *sdk.RejectDefaultRoute})
	}

	// Handling Primitives
	if !model.RouterId.IsNull() && !model.RouterId.IsUnknown() {
		sdk.RouterId = model.RouterId.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouterId", "value": *sdk.RouterId})
	}

	// Handling Primitives
	if !model.SpfTimer.IsNull() && !model.SpfTimer.IsUnknown() {
		sdk.SpfTimer = model.SpfTimer.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SpfTimer", "value": *sdk.SpfTimer})
	}

	// Handling Objects
	if !model.VrTimers.IsNull() && !model.VrTimers.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field VrTimers")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfVrTimersToSdk(ctx, model.VrTimers)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "VrTimers"})
		}
		if unpacked != nil {
			sdk.VrTimers = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3 ---
func packLogicalRoutersVrfInnerOspfv3FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AllowRedistDefaultRoute != nil {
		model.AllowRedistDefaultRoute = basetypes.NewBoolValue(*sdk.AllowRedistDefaultRoute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AllowRedistDefaultRoute", "value": *sdk.AllowRedistDefaultRoute})
	} else {
		model.AllowRedistDefaultRoute = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.Area != nil {
		tflog.Debug(ctx, "Packing list of objects for field Area")
		packed, d := packLogicalRoutersVrfInnerOspfv3AreaInnerListFromSdk(ctx, sdk.Area)
		diags.Append(d...)
		model.Area = packed
	} else {
		model.Area = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInner{}.AttrType())
	}
	// Handling Lists
	if sdk.AuthProfile != nil {
		tflog.Debug(ctx, "Packing list of objects for field AuthProfile")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerListFromSdk(ctx, sdk.AuthProfile)
		diags.Append(d...)
		model.AuthProfile = packed
	} else {
		model.AuthProfile = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.DisableTransitTraffic != nil {
		model.DisableTransitTraffic = basetypes.NewBoolValue(*sdk.DisableTransitTraffic)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DisableTransitTraffic", "value": *sdk.DisableTransitTraffic})
	} else {
		model.DisableTransitTraffic = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.ExportRules != nil {
		tflog.Debug(ctx, "Packing list of objects for field ExportRules")
		packed, d := packLogicalRoutersVrfInnerOspfExportRulesInnerListFromSdk(ctx, sdk.ExportRules)
		diags.Append(d...)
		model.ExportRules = packed
	} else {
		model.ExportRules = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfExportRulesInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GlobalBfd != nil {
		tflog.Debug(ctx, "Packing nested object for field GlobalBfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.GlobalBfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GlobalBfd"})
		}
		model.GlobalBfd = packed
	} else {
		model.GlobalBfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GlobalIfTimer != nil {
		model.GlobalIfTimer = basetypes.NewStringValue(*sdk.GlobalIfTimer)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GlobalIfTimer", "value": *sdk.GlobalIfTimer})
	} else {
		model.GlobalIfTimer = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GracefulRestart != nil {
		tflog.Debug(ctx, "Packing nested object for field GracefulRestart")
		packed, d := packLogicalRoutersVrfInnerOspfGracefulRestartFromSdk(ctx, *sdk.GracefulRestart)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GracefulRestart"})
		}
		model.GracefulRestart = packed
	} else {
		model.GracefulRestart = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfGracefulRestart{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RedistributionProfile != nil {
		model.RedistributionProfile = basetypes.NewStringValue(*sdk.RedistributionProfile)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RedistributionProfile", "value": *sdk.RedistributionProfile})
	} else {
		model.RedistributionProfile = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RejectDefaultRoute != nil {
		model.RejectDefaultRoute = basetypes.NewBoolValue(*sdk.RejectDefaultRoute)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RejectDefaultRoute", "value": *sdk.RejectDefaultRoute})
	} else {
		model.RejectDefaultRoute = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouterId != nil {
		model.RouterId = basetypes.NewStringValue(*sdk.RouterId)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouterId", "value": *sdk.RouterId})
	} else {
		model.RouterId = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.SpfTimer != nil {
		model.SpfTimer = basetypes.NewStringValue(*sdk.SpfTimer)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SpfTimer", "value": *sdk.SpfTimer})
	} else {
		model.SpfTimer = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.VrTimers != nil {
		tflog.Debug(ctx, "Packing nested object for field VrTimers")
		packed, d := packLogicalRoutersVrfInnerOspfVrTimersFromSdk(ctx, *sdk.VrTimers)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "VrTimers"})
		}
		model.VrTimers = packed
	} else {
		model.VrTimers = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfVrTimers{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3 ---
func unpackLogicalRoutersVrfInnerOspfv3ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3 ---
func packLogicalRoutersVrfInnerOspfv3ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3
		obj, d := packLogicalRoutersVrfInnerOspfv3FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AreaInner ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AreaInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Lists
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Interface")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInnerListToSdk(ctx, model.Interface)
		diags.Append(d...)
		sdk.Interface = unpacked
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Lists
	if !model.Range.IsNull() && !model.Range.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Range")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerRangeInnerListToSdk(ctx, model.Range)
		diags.Append(d...)
		sdk.Range = unpacked
	}

	// Handling Objects
	if !model.Type.IsNull() && !model.Type.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Type")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeToSdk(ctx, model.Type)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Type"})
		}
		if unpacked != nil {
			sdk.Type = unpacked
		}
	}

	// Handling Lists
	if !model.VirtualLink.IsNull() && !model.VirtualLink.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field VirtualLink")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerListToSdk(ctx, model.VirtualLink)
		diags.Append(d...)
		sdk.VirtualLink = unpacked
	}

	// Handling Lists
	if !model.VrRange.IsNull() && !model.VrRange.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field VrRange")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerListToSdk(ctx, model.VrRange)
		diags.Append(d...)
		sdk.VrRange = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AreaInner ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Interface != nil {
		tflog.Debug(ctx, "Packing list of objects for field Interface")
		packed, d := packLogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInnerListFromSdk(ctx, sdk.Interface)
		diags.Append(d...)
		model.Interface = packed
	} else {
		model.Interface = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Lists
	if sdk.Range != nil {
		tflog.Debug(ctx, "Packing list of objects for field Range")
		packed, d := packLogicalRoutersVrfInnerOspfv3AreaInnerRangeInnerListFromSdk(ctx, sdk.Range)
		diags.Append(d...)
		model.Range = packed
	} else {
		model.Range = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner{}.AttrType())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Type != nil {
		tflog.Debug(ctx, "Packing nested object for field Type")
		packed, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeFromSdk(ctx, *sdk.Type)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Type"})
		}
		model.Type = packed
	} else {
		model.Type = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerType{}.AttrTypes())
	}
	// Handling Lists
	if sdk.VirtualLink != nil {
		tflog.Debug(ctx, "Packing list of objects for field VirtualLink")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInnerListFromSdk(ctx, sdk.VirtualLink)
		diags.Append(d...)
		model.VirtualLink = packed
	} else {
		model.VirtualLink = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerVirtualLinkInner{}.AttrType())
	}
	// Handling Lists
	if sdk.VrRange != nil {
		tflog.Debug(ctx, "Packing list of objects for field VrRange")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInnerListFromSdk(ctx, sdk.VrRange)
		diags.Append(d...)
		model.VrRange = packed
	} else {
		model.VrRange = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaNssaExtRangeInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AreaInner ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AreaInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AreaInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AreaInner ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AreaInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AreaInner
		obj, d := packLogicalRoutersVrfInnerOspfv3AreaInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Objects
	if !model.Bfd.IsNull() && !model.Bfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bfd"})
		}
		if unpacked != nil {
			sdk.Bfd = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.InstanceId.IsNull() && !model.InstanceId.IsUnknown() {
		val := float32(model.InstanceId.ValueFloat64())
		sdk.InstanceId = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "InstanceId", "value": *sdk.InstanceId})
	}

	// Handling Objects
	if !model.LinkType.IsNull() && !model.LinkType.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field LinkType")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeToSdk(ctx, model.LinkType)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "LinkType"})
		}
		if unpacked != nil {
			sdk.LinkType = unpacked
		}
	}

	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	// Handling Primitives
	if !model.MtuIgnore.IsNull() && !model.MtuIgnore.IsUnknown() {
		sdk.MtuIgnore = model.MtuIgnore.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "MtuIgnore", "value": *sdk.MtuIgnore})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Lists
	if !model.Neighbor.IsNull() && !model.Neighbor.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Neighbor")
		unpacked, d := unpackEthernetInterfacesLayer3IpInnerListToSdk(ctx, model.Neighbor)
		diags.Append(d...)
		sdk.Neighbor = unpacked
	}

	// Handling Primitives
	if !model.Passive.IsNull() && !model.Passive.IsUnknown() {
		sdk.Passive = model.Passive.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Passive", "value": *sdk.Passive})
	}

	// Handling Primitives
	if !model.Priority.IsNull() && !model.Priority.IsUnknown() {
		val := float32(model.Priority.ValueFloat64())
		sdk.Priority = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	}

	// Handling Primitives
	if !model.Timing.IsNull() && !model.Timing.IsUnknown() {
		sdk.Timing = model.Timing.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Timing", "value": *sdk.Timing})
	}

	// Handling Objects
	if !model.VrTiming.IsNull() && !model.VrTiming.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field VrTiming")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingToSdk(ctx, model.VrTiming)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "VrTiming"})
		}
		if unpacked != nil {
			sdk.VrTiming = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bfd != nil {
		tflog.Debug(ctx, "Packing nested object for field Bfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bfd"})
		}
		model.Bfd = packed
	} else {
		model.Bfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.InstanceId != nil {
		model.InstanceId = basetypes.NewFloat64Value(float64(*sdk.InstanceId))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "InstanceId", "value": *sdk.InstanceId})
	} else {
		model.InstanceId = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.LinkType != nil {
		tflog.Debug(ctx, "Packing nested object for field LinkType")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkTypeFromSdk(ctx, *sdk.LinkType)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "LinkType"})
		}
		model.LinkType = packed
	} else {
		model.LinkType = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerLinkType{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.MtuIgnore != nil {
		model.MtuIgnore = basetypes.NewBoolValue(*sdk.MtuIgnore)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "MtuIgnore", "value": *sdk.MtuIgnore})
	} else {
		model.MtuIgnore = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Lists
	if sdk.Neighbor != nil {
		tflog.Debug(ctx, "Packing list of objects for field Neighbor")
		packed, d := packEthernetInterfacesLayer3IpInnerListFromSdk(ctx, sdk.Neighbor)
		diags.Append(d...)
		model.Neighbor = packed
	} else {
		model.Neighbor = basetypes.NewListNull(models.EthernetInterfacesLayer3IpInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Passive != nil {
		model.Passive = basetypes.NewBoolValue(*sdk.Passive)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Passive", "value": *sdk.Passive})
	} else {
		model.Passive = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Priority != nil {
		model.Priority = basetypes.NewFloat64Value(float64(*sdk.Priority))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Priority", "value": *sdk.Priority})
	} else {
		model.Priority = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Timing != nil {
		model.Timing = basetypes.NewStringValue(*sdk.Timing)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Timing", "value": *sdk.Timing})
	} else {
		model.Timing = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.VrTiming != nil {
		tflog.Debug(ctx, "Packing nested object for field VrTiming")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTimingFromSdk(ctx, *sdk.VrTiming)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "VrTiming"})
		}
		model.VrTiming = packed
	} else {
		model.VrTiming = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerInterfaceInnerVrTiming{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner
		obj, d := packLogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerInterfaceInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerRangeInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Advertise.IsNull() && !model.Advertise.IsUnknown() {
		sdk.Advertise = model.Advertise.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Advertise", "value": *sdk.Advertise})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerRangeInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Advertise != nil {
		model.Advertise = basetypes.NewBoolValue(*sdk.Advertise)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Advertise", "value": *sdk.Advertise})
	} else {
		model.Advertise = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerRangeInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerRangeInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerRangeInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner
		obj, d := packLogicalRoutersVrfInnerOspfv3AreaInnerRangeInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerRangeInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerType ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AreaInnerType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerType", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerType
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerType
	var d diag.Diagnostics
	// Handling Objects
	if !model.Normal.IsNull() && !model.Normal.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Normal")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNormalToSdk(ctx, model.Normal)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Normal"})
		}
		if unpacked != nil {
			sdk.Normal = unpacked
		}
	}

	// Handling Objects
	if !model.Nssa.IsNull() && !model.Nssa.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Nssa")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaToSdk(ctx, model.Nssa)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Nssa"})
		}
		if unpacked != nil {
			sdk.Nssa = unpacked
		}
	}

	// Handling Objects
	if !model.Stub.IsNull() && !model.Stub.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Stub")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeStubToSdk(ctx, model.Stub)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Stub"})
		}
		if unpacked != nil {
			sdk.Stub = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AreaInnerType ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerTypeFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerType) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerType", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerType
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Normal != nil {
		tflog.Debug(ctx, "Packing nested object for field Normal")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNormalFromSdk(ctx, *sdk.Normal)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Normal"})
		}
		model.Normal = packed
	} else {
		model.Normal = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNormal{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Nssa != nil {
		tflog.Debug(ctx, "Packing nested object for field Nssa")
		packed, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaFromSdk(ctx, *sdk.Nssa)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Nssa"})
		}
		model.Nssa = packed
	} else {
		model.Nssa = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Stub != nil {
		tflog.Debug(ctx, "Packing nested object for field Stub")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeStubFromSdk(ctx, *sdk.Stub)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Stub"})
		}
		model.Stub = packed
	} else {
		model.Stub = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeStub{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerType{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerType ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerType, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerType
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerType, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerType{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AreaInnerType ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerTypeListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AreaInnerType) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerType")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerType

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AreaInnerType
		obj, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerType{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerType", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerType{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa
	var d diag.Diagnostics
	// Handling Objects
	if !model.Abr.IsNull() && !model.Abr.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Abr")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrToSdk(ctx, model.Abr)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Abr"})
		}
		if unpacked != nil {
			sdk.Abr = unpacked
		}
	}

	// Handling Primitives
	if !model.AcceptSummary.IsNull() && !model.AcceptSummary.IsUnknown() {
		sdk.AcceptSummary = model.AcceptSummary.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AcceptSummary", "value": *sdk.AcceptSummary})
	}

	// Handling Objects
	if !model.DefaultInformationOriginate.IsNull() && !model.DefaultInformationOriginate.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field DefaultInformationOriginate")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateToSdk(ctx, model.DefaultInformationOriginate)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "DefaultInformationOriginate"})
		}
		if unpacked != nil {
			sdk.DefaultInformationOriginate = unpacked
		}
	}

	// Handling Objects
	if !model.DefaultRoute.IsNull() && !model.DefaultRoute.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field DefaultRoute")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteToSdk(ctx, model.DefaultRoute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "DefaultRoute"})
		}
		if unpacked != nil {
			sdk.DefaultRoute = unpacked
		}
	}

	// Handling Primitives
	if !model.NoSummary.IsNull() && !model.NoSummary.IsUnknown() {
		sdk.NoSummary = model.NoSummary.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NoSummary", "value": *sdk.NoSummary})
	}

	// Handling Lists
	if !model.NssaExtRange.IsNull() && !model.NssaExtRange.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field NssaExtRange")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerListToSdk(ctx, model.NssaExtRange)
		diags.Append(d...)
		sdk.NssaExtRange = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Abr != nil {
		tflog.Debug(ctx, "Packing nested object for field Abr")
		packed, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrFromSdk(ctx, *sdk.Abr)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Abr"})
		}
		model.Abr = packed
	} else {
		model.Abr = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.AcceptSummary != nil {
		model.AcceptSummary = basetypes.NewBoolValue(*sdk.AcceptSummary)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AcceptSummary", "value": *sdk.AcceptSummary})
	} else {
		model.AcceptSummary = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.DefaultInformationOriginate != nil {
		tflog.Debug(ctx, "Packing nested object for field DefaultInformationOriginate")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginateFromSdk(ctx, *sdk.DefaultInformationOriginate)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "DefaultInformationOriginate"})
		}
		model.DefaultInformationOriginate = packed
	} else {
		model.DefaultInformationOriginate = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultInformationOriginate{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.DefaultRoute != nil {
		tflog.Debug(ctx, "Packing nested object for field DefaultRoute")
		packed, d := packLogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRouteFromSdk(ctx, *sdk.DefaultRoute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "DefaultRoute"})
		}
		model.DefaultRoute = packed
	} else {
		model.DefaultRoute = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfAreaInnerTypeNssaDefaultRoute{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.NoSummary != nil {
		model.NoSummary = basetypes.NewBoolValue(*sdk.NoSummary)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NoSummary", "value": *sdk.NoSummary})
	} else {
		model.NoSummary = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.NssaExtRange != nil {
		tflog.Debug(ctx, "Packing list of objects for field NssaExtRange")
		packed, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerListFromSdk(ctx, sdk.NssaExtRange)
		diags.Append(d...)
		model.NssaExtRange = packed
	} else {
		model.NssaExtRange = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa
		obj, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssa{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr
	var d diag.Diagnostics
	// Handling Primitives
	if !model.ExportList.IsNull() && !model.ExportList.IsUnknown() {
		sdk.ExportList = model.ExportList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ExportList", "value": *sdk.ExportList})
	}

	// Handling Primitives
	if !model.ImportList.IsNull() && !model.ImportList.IsUnknown() {
		sdk.ImportList = model.ImportList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ImportList", "value": *sdk.ImportList})
	}

	// Handling Primitives
	if !model.InboundFilterList.IsNull() && !model.InboundFilterList.IsUnknown() {
		sdk.InboundFilterList = model.InboundFilterList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "InboundFilterList", "value": *sdk.InboundFilterList})
	}

	// Handling Lists
	if !model.NssaExtRange.IsNull() && !model.NssaExtRange.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field NssaExtRange")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerListToSdk(ctx, model.NssaExtRange)
		diags.Append(d...)
		sdk.NssaExtRange = unpacked
	}

	// Handling Primitives
	if !model.OutboundFilterList.IsNull() && !model.OutboundFilterList.IsUnknown() {
		sdk.OutboundFilterList = model.OutboundFilterList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OutboundFilterList", "value": *sdk.OutboundFilterList})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.ExportList != nil {
		model.ExportList = basetypes.NewStringValue(*sdk.ExportList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ExportList", "value": *sdk.ExportList})
	} else {
		model.ExportList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ImportList != nil {
		model.ImportList = basetypes.NewStringValue(*sdk.ImportList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ImportList", "value": *sdk.ImportList})
	} else {
		model.ImportList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.InboundFilterList != nil {
		model.InboundFilterList = basetypes.NewStringValue(*sdk.InboundFilterList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "InboundFilterList", "value": *sdk.InboundFilterList})
	} else {
		model.InboundFilterList = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.NssaExtRange != nil {
		tflog.Debug(ctx, "Packing list of objects for field NssaExtRange")
		packed, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerListFromSdk(ctx, sdk.NssaExtRange)
		diags.Append(d...)
		model.NssaExtRange = packed
	} else {
		model.NssaExtRange = basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OutboundFilterList != nil {
		model.OutboundFilterList = basetypes.NewStringValue(*sdk.OutboundFilterList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OutboundFilterList", "value": *sdk.OutboundFilterList})
	} else {
		model.OutboundFilterList = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr
		obj, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbr{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.Advertise.IsNull() && !model.Advertise.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Advertise")
		sdk.Advertise = make(map[string]interface{})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.RouteTag.IsNull() && !model.RouteTag.IsUnknown() {
		val := float32(model.RouteTag.ValueFloat64())
		sdk.RouteTag = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouteTag", "value": *sdk.RouteTag})
	}

	// Handling Typeless Objects
	if !model.Suppress.IsNull() && !model.Suppress.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Suppress")
		sdk.Suppress = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Advertise != nil && !reflect.ValueOf(sdk.Advertise).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Advertise")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Advertise, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Advertise = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouteTag != nil {
		model.RouteTag = basetypes.NewFloat64Value(float64(*sdk.RouteTag))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouteTag", "value": *sdk.RouteTag})
	} else {
		model.RouteTag = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Suppress != nil && !reflect.ValueOf(sdk.Suppress).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Suppress")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Suppress, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Suppress = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner ---
func unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner ---
func packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner
		obj, d := packLogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AreaInnerTypeNssaAbrNssaExtRangeInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInner ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInner
	var d diag.Diagnostics
	// Handling Objects
	if !model.Ah.IsNull() && !model.Ah.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ah")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhToSdk(ctx, model.Ah)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ah"})
		}
		if unpacked != nil {
			sdk.Ah = unpacked
		}
	}

	// Handling Objects
	if !model.Esp.IsNull() && !model.Esp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Esp")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspToSdk(ctx, model.Esp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Esp"})
		}
		if unpacked != nil {
			sdk.Esp = unpacked
		}
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Spi.IsNull() && !model.Spi.IsUnknown() {
		sdk.Spi = model.Spi.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Spi", "value": *sdk.Spi})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInner ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInner
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ah != nil {
		tflog.Debug(ctx, "Packing nested object for field Ah")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhFromSdk(ctx, *sdk.Ah)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ah"})
		}
		model.Ah = packed
	} else {
		model.Ah = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Esp != nil {
		tflog.Debug(ctx, "Packing nested object for field Esp")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspFromSdk(ctx, *sdk.Esp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Esp"})
		}
		model.Esp = packed
	} else {
		model.Esp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Spi != nil {
		model.Spi = basetypes.NewStringValue(*sdk.Spi)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Spi", "value": *sdk.Spi})
	} else {
		model.Spi = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInner ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInner ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInner
		obj, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh
	var d diag.Diagnostics
	// Handling Objects
	if !model.Md5.IsNull() && !model.Md5.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Md5")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Md5)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Md5"})
		}
		if unpacked != nil {
			sdk.Md5 = unpacked
		}
	}

	// Handling Objects
	if !model.Sha1.IsNull() && !model.Sha1.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Sha1")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Sha1)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Sha1"})
		}
		if unpacked != nil {
			sdk.Sha1 = unpacked
		}
	}

	// Handling Objects
	if !model.Sha256.IsNull() && !model.Sha256.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Sha256")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Sha256)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Sha256"})
		}
		if unpacked != nil {
			sdk.Sha256 = unpacked
		}
	}

	// Handling Objects
	if !model.Sha384.IsNull() && !model.Sha384.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Sha384")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Sha384)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Sha384"})
		}
		if unpacked != nil {
			sdk.Sha384 = unpacked
		}
	}

	// Handling Objects
	if !model.Sha512.IsNull() && !model.Sha512.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Sha512")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Sha512)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Sha512"})
		}
		if unpacked != nil {
			sdk.Sha512 = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Md5 != nil {
		tflog.Debug(ctx, "Packing nested object for field Md5")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Md5)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Md5"})
		}
		model.Md5 = packed
	} else {
		model.Md5 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Sha1 != nil {
		tflog.Debug(ctx, "Packing nested object for field Sha1")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Sha1)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Sha1"})
		}
		model.Sha1 = packed
	} else {
		model.Sha1 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Sha256 != nil {
		tflog.Debug(ctx, "Packing nested object for field Sha256")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Sha256)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Sha256"})
		}
		model.Sha256 = packed
	} else {
		model.Sha256 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Sha384 != nil {
		tflog.Debug(ctx, "Packing nested object for field Sha384")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Sha384)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Sha384"})
		}
		model.Sha384 = packed
	} else {
		model.Sha384 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Sha512 != nil {
		tflog.Debug(ctx, "Packing nested object for field Sha512")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Sha512)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Sha512"})
		}
		model.Sha512 = packed
	} else {
		model.Sha512 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh
		obj, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAh{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5 ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Key.IsNull() && !model.Key.IsUnknown() {
		sdk.Key = model.Key.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Key", "value": *sdk.Key})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5 ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Key != nil {
		model.Key = basetypes.NewStringValue(*sdk.Key)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Key", "value": *sdk.Key})
	} else {
		model.Key = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5 ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5 ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5
		obj, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp
	var d diag.Diagnostics
	// Handling Objects
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Authentication")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthenticationToSdk(ctx, model.Authentication)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Authentication"})
		}
		if unpacked != nil {
			sdk.Authentication = unpacked
		}
	}

	// Handling Objects
	if !model.Encryption.IsNull() && !model.Encryption.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Encryption")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryptionToSdk(ctx, model.Encryption)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Encryption"})
		}
		if unpacked != nil {
			sdk.Encryption = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Authentication != nil {
		tflog.Debug(ctx, "Packing nested object for field Authentication")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthenticationFromSdk(ctx, *sdk.Authentication)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Authentication"})
		}
		model.Authentication = packed
	} else {
		model.Authentication = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Encryption != nil {
		tflog.Debug(ctx, "Packing nested object for field Encryption")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryptionFromSdk(ctx, *sdk.Encryption)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Encryption"})
		}
		model.Encryption = packed
	} else {
		model.Encryption = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp
		obj, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEsp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthenticationToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication
	var d diag.Diagnostics
	// Handling Objects
	if !model.Md5.IsNull() && !model.Md5.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Md5")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Md5)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Md5"})
		}
		if unpacked != nil {
			sdk.Md5 = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.None.IsNull() && !model.None.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field None")
		sdk.None = make(map[string]interface{})
	}

	// Handling Objects
	if !model.Sha1.IsNull() && !model.Sha1.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Sha1")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Sha1)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Sha1"})
		}
		if unpacked != nil {
			sdk.Sha1 = unpacked
		}
	}

	// Handling Objects
	if !model.Sha256.IsNull() && !model.Sha256.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Sha256")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Sha256)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Sha256"})
		}
		if unpacked != nil {
			sdk.Sha256 = unpacked
		}
	}

	// Handling Objects
	if !model.Sha384.IsNull() && !model.Sha384.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Sha384")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Sha384)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Sha384"})
		}
		if unpacked != nil {
			sdk.Sha384 = unpacked
		}
	}

	// Handling Objects
	if !model.Sha512.IsNull() && !model.Sha512.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Sha512")
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5ToSdk(ctx, model.Sha512)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Sha512"})
		}
		if unpacked != nil {
			sdk.Sha512 = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthenticationFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Md5 != nil {
		tflog.Debug(ctx, "Packing nested object for field Md5")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Md5)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Md5"})
		}
		model.Md5 = packed
	} else {
		model.Md5 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.None != nil && !reflect.ValueOf(sdk.None).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field None")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.None, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.None = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Sha1 != nil {
		tflog.Debug(ctx, "Packing nested object for field Sha1")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Sha1)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Sha1"})
		}
		model.Sha1 = packed
	} else {
		model.Sha1 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Sha256 != nil {
		tflog.Debug(ctx, "Packing nested object for field Sha256")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Sha256)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Sha256"})
		}
		model.Sha256 = packed
	} else {
		model.Sha256 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Sha384 != nil {
		tflog.Debug(ctx, "Packing nested object for field Sha384")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Sha384)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Sha384"})
		}
		model.Sha384 = packed
	} else {
		model.Sha384 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Sha512 != nil {
		tflog.Debug(ctx, "Packing nested object for field Sha512")
		packed, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5FromSdk(ctx, *sdk.Sha512)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Sha512"})
		}
		model.Sha512 = packed
	} else {
		model.Sha512 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerAhMd5{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthenticationListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthenticationToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthenticationListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication
		obj, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthenticationFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspAuthentication{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryptionToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Algorithm.IsNull() && !model.Algorithm.IsUnknown() {
		sdk.Algorithm = model.Algorithm.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Algorithm", "value": *sdk.Algorithm})
	}

	// Handling Primitives
	if !model.Key.IsNull() && !model.Key.IsUnknown() {
		sdk.Key = model.Key.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Key", "value": *sdk.Key})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryptionFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Algorithm != nil {
		model.Algorithm = basetypes.NewStringValue(*sdk.Algorithm)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Algorithm", "value": *sdk.Algorithm})
	} else {
		model.Algorithm = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Key != nil {
		model.Key = basetypes.NewStringValue(*sdk.Key)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Key", "value": *sdk.Key})
	} else {
		model.Key = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption ---
func unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryptionListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryptionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption ---
func packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryptionListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption
		obj, d := packLogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryptionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerOspfv3AuthProfileInnerEspEncryption{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRibFilter ---
func unpackLogicalRoutersVrfInnerRibFilterToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRibFilter, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRibFilter", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRibFilter
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRibFilter
	var d diag.Diagnostics
	// Handling Objects
	if !model.Ipv4.IsNull() && !model.Ipv4.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv4")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4ToSdk(ctx, model.Ipv4)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv4"})
		}
		if unpacked != nil {
			sdk.Ipv4 = unpacked
		}
	}

	// Handling Objects
	if !model.Ipv6.IsNull() && !model.Ipv6.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv6")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv6ToSdk(ctx, model.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv6"})
		}
		if unpacked != nil {
			sdk.Ipv6 = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRibFilter", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRibFilter ---
func packLogicalRoutersVrfInnerRibFilterFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRibFilter) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRibFilter", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRibFilter
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv4 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv4")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv4FromSdk(ctx, *sdk.Ipv4)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv4"})
		}
		model.Ipv4 = packed
	} else {
		model.Ipv4 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv4{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv6 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv6")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv6FromSdk(ctx, *sdk.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv6"})
		}
		model.Ipv6 = packed
	} else {
		model.Ipv6 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv6{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilter{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRibFilter", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRibFilter ---
func unpackLogicalRoutersVrfInnerRibFilterListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRibFilter, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRibFilter")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRibFilter
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRibFilter, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilter{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRibFilter", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRibFilter ---
func packLogicalRoutersVrfInnerRibFilterListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRibFilter) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRibFilter")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRibFilter

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRibFilter
		obj, d := packLogicalRoutersVrfInnerRibFilterFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRibFilter{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRibFilter", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilter{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRibFilterIpv4 ---
func unpackLogicalRoutersVrfInnerRibFilterIpv4ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRibFilterIpv4, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv4", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRibFilterIpv4
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRibFilterIpv4
	var d diag.Diagnostics
	// Handling Objects
	if !model.Bgp.IsNull() && !model.Bgp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bgp")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx, model.Bgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bgp"})
		}
		if unpacked != nil {
			sdk.Bgp = unpacked
		}
	}

	// Handling Objects
	if !model.Ospf.IsNull() && !model.Ospf.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ospf")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx, model.Ospf)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ospf"})
		}
		if unpacked != nil {
			sdk.Ospf = unpacked
		}
	}

	// Handling Objects
	if !model.Rip.IsNull() && !model.Rip.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Rip")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx, model.Rip)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Rip"})
		}
		if unpacked != nil {
			sdk.Rip = unpacked
		}
	}

	// Handling Objects
	if !model.Static.IsNull() && !model.Static.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Static")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx, model.Static)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Static"})
		}
		if unpacked != nil {
			sdk.Static = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRibFilterIpv4 ---
func packLogicalRoutersVrfInnerRibFilterIpv4FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRibFilterIpv4) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRibFilterIpv4", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRibFilterIpv4
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bgp != nil {
		tflog.Debug(ctx, "Packing nested object for field Bgp")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx, *sdk.Bgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bgp"})
		}
		model.Bgp = packed
	} else {
		model.Bgp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ospf != nil {
		tflog.Debug(ctx, "Packing nested object for field Ospf")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx, *sdk.Ospf)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ospf"})
		}
		model.Ospf = packed
	} else {
		model.Ospf = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Rip != nil {
		tflog.Debug(ctx, "Packing nested object for field Rip")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx, *sdk.Rip)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Rip"})
		}
		model.Rip = packed
	} else {
		model.Rip = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Static != nil {
		tflog.Debug(ctx, "Packing nested object for field Static")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx, *sdk.Static)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Static"})
		}
		model.Static = packed
	} else {
		model.Static = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv4{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRibFilterIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRibFilterIpv4 ---
func unpackLogicalRoutersVrfInnerRibFilterIpv4ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRibFilterIpv4, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv4")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRibFilterIpv4
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRibFilterIpv4, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv4{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRibFilterIpv4 ---
func packLogicalRoutersVrfInnerRibFilterIpv4ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRibFilterIpv4) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRibFilterIpv4")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRibFilterIpv4

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRibFilterIpv4
		obj, d := packLogicalRoutersVrfInnerRibFilterIpv4FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRibFilterIpv4{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRibFilterIpv4", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv4{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRibFilterIpv4Bgp ---
func unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRibFilterIpv4Bgp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv4Bgp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRibFilterIpv4Bgp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRibFilterIpv4Bgp
	var d diag.Diagnostics
	// Handling Primitives
	if !model.RouteMap.IsNull() && !model.RouteMap.IsUnknown() {
		sdk.RouteMap = model.RouteMap.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RouteMap", "value": *sdk.RouteMap})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv4Bgp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRibFilterIpv4Bgp ---
func packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRibFilterIpv4Bgp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRibFilterIpv4Bgp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRibFilterIpv4Bgp
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.RouteMap != nil {
		model.RouteMap = basetypes.NewStringValue(*sdk.RouteMap)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RouteMap", "value": *sdk.RouteMap})
	} else {
		model.RouteMap = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRibFilterIpv4Bgp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRibFilterIpv4Bgp ---
func unpackLogicalRoutersVrfInnerRibFilterIpv4BgpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRibFilterIpv4Bgp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv4Bgp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRibFilterIpv4Bgp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRibFilterIpv4Bgp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv4Bgp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRibFilterIpv4Bgp ---
func packLogicalRoutersVrfInnerRibFilterIpv4BgpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRibFilterIpv4Bgp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRibFilterIpv4Bgp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRibFilterIpv4Bgp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRibFilterIpv4Bgp
		obj, d := packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRibFilterIpv4Bgp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRibFilterIpv6 ---
func unpackLogicalRoutersVrfInnerRibFilterIpv6ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRibFilterIpv6, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv6", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRibFilterIpv6
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRibFilterIpv6
	var d diag.Diagnostics
	// Handling Objects
	if !model.Bgp.IsNull() && !model.Bgp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bgp")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx, model.Bgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bgp"})
		}
		if unpacked != nil {
			sdk.Bgp = unpacked
		}
	}

	// Handling Objects
	if !model.Ospfv3.IsNull() && !model.Ospfv3.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ospfv3")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx, model.Ospfv3)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ospfv3"})
		}
		if unpacked != nil {
			sdk.Ospfv3 = unpacked
		}
	}

	// Handling Objects
	if !model.Static.IsNull() && !model.Static.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Static")
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv4BgpToSdk(ctx, model.Static)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Static"})
		}
		if unpacked != nil {
			sdk.Static = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRibFilterIpv6 ---
func packLogicalRoutersVrfInnerRibFilterIpv6FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRibFilterIpv6) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRibFilterIpv6", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRibFilterIpv6
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bgp != nil {
		tflog.Debug(ctx, "Packing nested object for field Bgp")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx, *sdk.Bgp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bgp"})
		}
		model.Bgp = packed
	} else {
		model.Bgp = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ospfv3 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ospfv3")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx, *sdk.Ospfv3)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ospfv3"})
		}
		model.Ospfv3 = packed
	} else {
		model.Ospfv3 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Static != nil {
		tflog.Debug(ctx, "Packing nested object for field Static")
		packed, d := packLogicalRoutersVrfInnerRibFilterIpv4BgpFromSdk(ctx, *sdk.Static)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Static"})
		}
		model.Static = packed
	} else {
		model.Static = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRibFilterIpv4Bgp{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv6{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRibFilterIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRibFilterIpv6 ---
func unpackLogicalRoutersVrfInnerRibFilterIpv6ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRibFilterIpv6, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv6")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRibFilterIpv6
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRibFilterIpv6, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv6{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRibFilterIpv6ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRibFilterIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRibFilterIpv6 ---
func packLogicalRoutersVrfInnerRibFilterIpv6ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRibFilterIpv6) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRibFilterIpv6")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRibFilterIpv6

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRibFilterIpv6
		obj, d := packLogicalRoutersVrfInnerRibFilterIpv6FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRibFilterIpv6{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRibFilterIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRibFilterIpv6{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRip ---
func unpackLogicalRoutersVrfInnerRipToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRip, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRip", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRip
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRip
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AuthProfile.IsNull() && !model.AuthProfile.IsUnknown() {
		sdk.AuthProfile = model.AuthProfile.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AuthProfile", "value": *sdk.AuthProfile})
	}

	// Handling Primitives
	if !model.DefaultInformationOriginate.IsNull() && !model.DefaultInformationOriginate.IsUnknown() {
		sdk.DefaultInformationOriginate = model.DefaultInformationOriginate.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DefaultInformationOriginate", "value": *sdk.DefaultInformationOriginate})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Objects
	if !model.GlobalBfd.IsNull() && !model.GlobalBfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GlobalBfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.GlobalBfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GlobalBfd"})
		}
		if unpacked != nil {
			sdk.GlobalBfd = unpacked
		}
	}

	// Handling Objects
	if !model.GlobalInboundDistributeList.IsNull() && !model.GlobalInboundDistributeList.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GlobalInboundDistributeList")
		unpacked, d := unpackLogicalRoutersVrfInnerRipGlobalInboundDistributeListToSdk(ctx, model.GlobalInboundDistributeList)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GlobalInboundDistributeList"})
		}
		if unpacked != nil {
			sdk.GlobalInboundDistributeList = unpacked
		}
	}

	// Handling Objects
	if !model.GlobalOutboundDistributeList.IsNull() && !model.GlobalOutboundDistributeList.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GlobalOutboundDistributeList")
		unpacked, d := unpackLogicalRoutersVrfInnerRipGlobalInboundDistributeListToSdk(ctx, model.GlobalOutboundDistributeList)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GlobalOutboundDistributeList"})
		}
		if unpacked != nil {
			sdk.GlobalOutboundDistributeList = unpacked
		}
	}

	// Handling Primitives
	if !model.GlobalTimer.IsNull() && !model.GlobalTimer.IsUnknown() {
		sdk.GlobalTimer = model.GlobalTimer.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "GlobalTimer", "value": *sdk.GlobalTimer})
	}

	// Handling Lists
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Interface")
		unpacked, d := unpackLogicalRoutersVrfInnerRipInterfaceInnerListToSdk(ctx, model.Interface)
		diags.Append(d...)
		sdk.Interface = unpacked
	}

	// Handling Primitives
	if !model.RedistributionProfile.IsNull() && !model.RedistributionProfile.IsUnknown() {
		sdk.RedistributionProfile = model.RedistributionProfile.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "RedistributionProfile", "value": *sdk.RedistributionProfile})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRip", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRip ---
func packLogicalRoutersVrfInnerRipFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRip) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRip", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRip
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AuthProfile != nil {
		model.AuthProfile = basetypes.NewStringValue(*sdk.AuthProfile)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AuthProfile", "value": *sdk.AuthProfile})
	} else {
		model.AuthProfile = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.DefaultInformationOriginate != nil {
		model.DefaultInformationOriginate = basetypes.NewBoolValue(*sdk.DefaultInformationOriginate)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DefaultInformationOriginate", "value": *sdk.DefaultInformationOriginate})
	} else {
		model.DefaultInformationOriginate = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GlobalBfd != nil {
		tflog.Debug(ctx, "Packing nested object for field GlobalBfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.GlobalBfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GlobalBfd"})
		}
		model.GlobalBfd = packed
	} else {
		model.GlobalBfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GlobalInboundDistributeList != nil {
		tflog.Debug(ctx, "Packing nested object for field GlobalInboundDistributeList")
		packed, d := packLogicalRoutersVrfInnerRipGlobalInboundDistributeListFromSdk(ctx, *sdk.GlobalInboundDistributeList)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GlobalInboundDistributeList"})
		}
		model.GlobalInboundDistributeList = packed
	} else {
		model.GlobalInboundDistributeList = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GlobalOutboundDistributeList != nil {
		tflog.Debug(ctx, "Packing nested object for field GlobalOutboundDistributeList")
		packed, d := packLogicalRoutersVrfInnerRipGlobalInboundDistributeListFromSdk(ctx, *sdk.GlobalOutboundDistributeList)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GlobalOutboundDistributeList"})
		}
		model.GlobalOutboundDistributeList = packed
	} else {
		model.GlobalOutboundDistributeList = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.GlobalTimer != nil {
		model.GlobalTimer = basetypes.NewStringValue(*sdk.GlobalTimer)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "GlobalTimer", "value": *sdk.GlobalTimer})
	} else {
		model.GlobalTimer = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Interface != nil {
		tflog.Debug(ctx, "Packing list of objects for field Interface")
		packed, d := packLogicalRoutersVrfInnerRipInterfaceInnerListFromSdk(ctx, sdk.Interface)
		diags.Append(d...)
		model.Interface = packed
	} else {
		model.Interface = basetypes.NewListNull(models.LogicalRoutersVrfInnerRipInterfaceInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.RedistributionProfile != nil {
		model.RedistributionProfile = basetypes.NewStringValue(*sdk.RedistributionProfile)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "RedistributionProfile", "value": *sdk.RedistributionProfile})
	} else {
		model.RedistributionProfile = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRip{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRip", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRip ---
func unpackLogicalRoutersVrfInnerRipListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRip, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRip")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRip
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRip, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRip{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRipToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRip", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRip ---
func packLogicalRoutersVrfInnerRipListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRip) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRip")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRip

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRip
		obj, d := packLogicalRoutersVrfInnerRipFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRip{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRip", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRip{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRipGlobalInboundDistributeList ---
func unpackLogicalRoutersVrfInnerRipGlobalInboundDistributeListToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRipGlobalInboundDistributeList, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRipGlobalInboundDistributeList
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AccessList.IsNull() && !model.AccessList.IsUnknown() {
		sdk.AccessList = model.AccessList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AccessList", "value": *sdk.AccessList})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRipGlobalInboundDistributeList ---
func packLogicalRoutersVrfInnerRipGlobalInboundDistributeListFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRipGlobalInboundDistributeList) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AccessList != nil {
		model.AccessList = basetypes.NewStringValue(*sdk.AccessList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AccessList", "value": *sdk.AccessList})
	} else {
		model.AccessList = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRipGlobalInboundDistributeList ---
func unpackLogicalRoutersVrfInnerRipGlobalInboundDistributeListListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRipGlobalInboundDistributeList, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRipGlobalInboundDistributeList, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRipGlobalInboundDistributeListToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRipGlobalInboundDistributeList ---
func packLogicalRoutersVrfInnerRipGlobalInboundDistributeListListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRipGlobalInboundDistributeList) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList
		obj, d := packLogicalRoutersVrfInnerRipGlobalInboundDistributeListFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRipGlobalInboundDistributeList{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRipInterfaceInner ---
func unpackLogicalRoutersVrfInnerRipInterfaceInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRipInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRipInterfaceInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRipInterfaceInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRipInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Authentication.IsNull() && !model.Authentication.IsUnknown() {
		sdk.Authentication = model.Authentication.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	}

	// Handling Objects
	if !model.Bfd.IsNull() && !model.Bfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bfd"})
		}
		if unpacked != nil {
			sdk.Bfd = unpacked
		}
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Objects
	if !model.InterfaceInboundDistributeList.IsNull() && !model.InterfaceInboundDistributeList.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field InterfaceInboundDistributeList")
		unpacked, d := unpackLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListToSdk(ctx, model.InterfaceInboundDistributeList)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "InterfaceInboundDistributeList"})
		}
		if unpacked != nil {
			sdk.InterfaceInboundDistributeList = unpacked
		}
	}

	// Handling Objects
	if !model.InterfaceOutboundDistributeList.IsNull() && !model.InterfaceOutboundDistributeList.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field InterfaceOutboundDistributeList")
		unpacked, d := unpackLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListToSdk(ctx, model.InterfaceOutboundDistributeList)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "InterfaceOutboundDistributeList"})
		}
		if unpacked != nil {
			sdk.InterfaceOutboundDistributeList = unpacked
		}
	}

	// Handling Primitives
	if !model.Mode.IsNull() && !model.Mode.IsUnknown() {
		sdk.Mode = model.Mode.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Mode", "value": *sdk.Mode})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.SplitHorizon.IsNull() && !model.SplitHorizon.IsUnknown() {
		sdk.SplitHorizon = model.SplitHorizon.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "SplitHorizon", "value": *sdk.SplitHorizon})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRipInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRipInterfaceInner ---
func packLogicalRoutersVrfInnerRipInterfaceInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRipInterfaceInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRipInterfaceInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRipInterfaceInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Authentication != nil {
		model.Authentication = basetypes.NewStringValue(*sdk.Authentication)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Authentication", "value": *sdk.Authentication})
	} else {
		model.Authentication = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bfd != nil {
		tflog.Debug(ctx, "Packing nested object for field Bfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bfd"})
		}
		model.Bfd = packed
	} else {
		model.Bfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.InterfaceInboundDistributeList != nil {
		tflog.Debug(ctx, "Packing nested object for field InterfaceInboundDistributeList")
		packed, d := packLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListFromSdk(ctx, *sdk.InterfaceInboundDistributeList)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "InterfaceInboundDistributeList"})
		}
		model.InterfaceInboundDistributeList = packed
	} else {
		model.InterfaceInboundDistributeList = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.InterfaceOutboundDistributeList != nil {
		tflog.Debug(ctx, "Packing nested object for field InterfaceOutboundDistributeList")
		packed, d := packLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListFromSdk(ctx, *sdk.InterfaceOutboundDistributeList)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "InterfaceOutboundDistributeList"})
		}
		model.InterfaceOutboundDistributeList = packed
	} else {
		model.InterfaceOutboundDistributeList = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Mode != nil {
		model.Mode = basetypes.NewStringValue(*sdk.Mode)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Mode", "value": *sdk.Mode})
	} else {
		model.Mode = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.SplitHorizon != nil {
		model.SplitHorizon = basetypes.NewStringValue(*sdk.SplitHorizon)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "SplitHorizon", "value": *sdk.SplitHorizon})
	} else {
		model.SplitHorizon = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRipInterfaceInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRipInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRipInterfaceInner ---
func unpackLogicalRoutersVrfInnerRipInterfaceInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRipInterfaceInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRipInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRipInterfaceInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRipInterfaceInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRipInterfaceInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRipInterfaceInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRipInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRipInterfaceInner ---
func packLogicalRoutersVrfInnerRipInterfaceInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRipInterfaceInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRipInterfaceInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRipInterfaceInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRipInterfaceInner
		obj, d := packLogicalRoutersVrfInnerRipInterfaceInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRipInterfaceInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRipInterfaceInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRipInterfaceInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList ---
func unpackLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AccessList.IsNull() && !model.AccessList.IsUnknown() {
		sdk.AccessList = model.AccessList.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AccessList", "value": *sdk.AccessList})
	}

	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList ---
func packLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AccessList != nil {
		model.AccessList = basetypes.NewStringValue(*sdk.AccessList)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AccessList", "value": *sdk.AccessList})
	} else {
		model.AccessList = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList ---
func unpackLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList ---
func packLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList
		obj, d := packLogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeListFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRipInterfaceInnerInterfaceInboundDistributeList{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTable ---
func unpackLogicalRoutersVrfInnerRoutingTableToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTable, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTable", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTable
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTable
	var d diag.Diagnostics
	// Handling Objects
	if !model.Ip.IsNull() && !model.Ip.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ip")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpToSdk(ctx, model.Ip)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ip"})
		}
		if unpacked != nil {
			sdk.Ip = unpacked
		}
	}

	// Handling Objects
	if !model.Ipv6.IsNull() && !model.Ipv6.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Ipv6")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpv6ToSdk(ctx, model.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Ipv6"})
		}
		if unpacked != nil {
			sdk.Ipv6 = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTable", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTable ---
func packLogicalRoutersVrfInnerRoutingTableFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTable) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTable", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTable
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ip != nil {
		tflog.Debug(ctx, "Packing nested object for field Ip")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpFromSdk(ctx, *sdk.Ip)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ip"})
		}
		model.Ip = packed
	} else {
		model.Ip = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIp{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Ipv6 != nil {
		tflog.Debug(ctx, "Packing nested object for field Ipv6")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpv6FromSdk(ctx, *sdk.Ipv6)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Ipv6"})
		}
		model.Ipv6 = packed
	} else {
		model.Ipv6 = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIpv6{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTable{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTable", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTable ---
func unpackLogicalRoutersVrfInnerRoutingTableListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTable, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTable")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTable
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTable, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTable{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTable", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTable ---
func packLogicalRoutersVrfInnerRoutingTableListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTable) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTable")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTable

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTable
		obj, d := packLogicalRoutersVrfInnerRoutingTableFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTable{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTable", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTable{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIp ---
func unpackLogicalRoutersVrfInnerRoutingTableIpToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIp", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIp
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIp
	var d diag.Diagnostics
	// Handling Lists
	if !model.StaticRoute.IsNull() && !model.StaticRoute.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field StaticRoute")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerListToSdk(ctx, model.StaticRoute)
		diags.Append(d...)
		sdk.StaticRoute = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIp", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIp ---
func packLogicalRoutersVrfInnerRoutingTableIpFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIp) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIp", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIp
	var d diag.Diagnostics
	// Handling Lists
	if sdk.StaticRoute != nil {
		tflog.Debug(ctx, "Packing list of objects for field StaticRoute")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerListFromSdk(ctx, sdk.StaticRoute)
		diags.Append(d...)
		model.StaticRoute = packed
	} else {
		model.StaticRoute = basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIp{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIp", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIp ---
func unpackLogicalRoutersVrfInnerRoutingTableIpListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIp, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIp
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIp, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIp{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIp", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIp ---
func packLogicalRoutersVrfInnerRoutingTableIpListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIp) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIp")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIp

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIp
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIp{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIp", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIp{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AdminDist.IsNull() && !model.AdminDist.IsUnknown() {
		val := float32(model.AdminDist.ValueFloat64())
		sdk.AdminDist = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AdminDist", "value": *sdk.AdminDist})
	}

	// Handling Objects
	if !model.Bfd.IsNull() && !model.Bfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bfd"})
		}
		if unpacked != nil {
			sdk.Bfd = unpacked
		}
	}

	// Handling Primitives
	if !model.Destination.IsNull() && !model.Destination.IsUnknown() {
		sdk.Destination = model.Destination.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Destination", "value": *sdk.Destination})
	}

	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Objects
	if !model.Nexthop.IsNull() && !model.Nexthop.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Nexthop")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopToSdk(ctx, model.Nexthop)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Nexthop"})
		}
		if unpacked != nil {
			sdk.Nexthop = unpacked
		}
	}

	// Handling Objects
	if !model.PathMonitor.IsNull() && !model.PathMonitor.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field PathMonitor")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorToSdk(ctx, model.PathMonitor)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "PathMonitor"})
		}
		if unpacked != nil {
			sdk.PathMonitor = unpacked
		}
	}

	// Handling Objects
	if !model.RouteTable.IsNull() && !model.RouteTable.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field RouteTable")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableToSdk(ctx, model.RouteTable)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "RouteTable"})
		}
		if unpacked != nil {
			sdk.RouteTable = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AdminDist != nil {
		model.AdminDist = basetypes.NewFloat64Value(float64(*sdk.AdminDist))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AdminDist", "value": *sdk.AdminDist})
	} else {
		model.AdminDist = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bfd != nil {
		tflog.Debug(ctx, "Packing nested object for field Bfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bfd"})
		}
		model.Bfd = packed
	} else {
		model.Bfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Destination != nil {
		model.Destination = basetypes.NewStringValue(*sdk.Destination)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Destination", "value": *sdk.Destination})
	} else {
		model.Destination = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Nexthop != nil {
		tflog.Debug(ctx, "Packing nested object for field Nexthop")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopFromSdk(ctx, *sdk.Nexthop)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Nexthop"})
		}
		model.Nexthop = packed
	} else {
		model.Nexthop = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.PathMonitor != nil {
		tflog.Debug(ctx, "Packing nested object for field PathMonitor")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorFromSdk(ctx, *sdk.PathMonitor)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "PathMonitor"})
		}
		model.PathMonitor = packed
	} else {
		model.PathMonitor = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.RouteTable != nil {
		tflog.Debug(ctx, "Packing nested object for field RouteTable")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableFromSdk(ctx, *sdk.RouteTable)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "RouteTable"})
		}
		model.RouteTable = packed
	} else {
		model.RouteTable = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.Discard.IsNull() && !model.Discard.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Discard")
		sdk.Discard = make(map[string]interface{})
	}

	// Handling Primitives
	if !model.Fqdn.IsNull() && !model.Fqdn.IsUnknown() {
		sdk.Fqdn = model.Fqdn.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Fqdn", "value": *sdk.Fqdn})
	}

	// Handling Primitives
	if !model.Ipv6Address.IsNull() && !model.Ipv6Address.IsUnknown() {
		sdk.Ipv6Address = model.Ipv6Address.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ipv6Address", "value": *sdk.Ipv6Address})
	}

	// Handling Primitives
	if !model.NextLr.IsNull() && !model.NextLr.IsUnknown() {
		sdk.NextLr = model.NextLr.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NextLr", "value": *sdk.NextLr})
	}

	// Handling Primitives
	if !model.NextVr.IsNull() && !model.NextVr.IsUnknown() {
		sdk.NextVr = model.NextVr.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "NextVr", "value": *sdk.NextVr})
	}

	// Handling Typeless Objects
	if !model.Receive.IsNull() && !model.Receive.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Receive")
		sdk.Receive = make(map[string]interface{})
	}

	// Handling Primitives
	if !model.Tunnel.IsNull() && !model.Tunnel.IsUnknown() {
		sdk.Tunnel = model.Tunnel.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Tunnel", "value": *sdk.Tunnel})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Discard != nil && !reflect.ValueOf(sdk.Discard).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Discard")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Discard, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Discard = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Fqdn != nil {
		model.Fqdn = basetypes.NewStringValue(*sdk.Fqdn)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Fqdn", "value": *sdk.Fqdn})
	} else {
		model.Fqdn = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ipv6Address != nil {
		model.Ipv6Address = basetypes.NewStringValue(*sdk.Ipv6Address)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ipv6Address", "value": *sdk.Ipv6Address})
	} else {
		model.Ipv6Address = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.NextLr != nil {
		model.NextLr = basetypes.NewStringValue(*sdk.NextLr)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NextLr", "value": *sdk.NextLr})
	} else {
		model.NextLr = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.NextVr != nil {
		model.NextVr = basetypes.NewStringValue(*sdk.NextVr)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "NextVr", "value": *sdk.NextVr})
	} else {
		model.NextVr = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Receive != nil && !reflect.ValueOf(sdk.Receive).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Receive")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Receive, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Receive = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Tunnel != nil {
		model.Tunnel = basetypes.NewStringValue(*sdk.Tunnel)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Tunnel", "value": *sdk.Tunnel})
	} else {
		model.Tunnel = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.FailureCondition.IsNull() && !model.FailureCondition.IsUnknown() {
		sdk.FailureCondition = model.FailureCondition.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "FailureCondition", "value": *sdk.FailureCondition})
	}

	// Handling Primitives
	if !model.HoldTime.IsNull() && !model.HoldTime.IsUnknown() {
		val := float32(model.HoldTime.ValueFloat64())
		sdk.HoldTime = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "HoldTime", "value": *sdk.HoldTime})
	}

	// Handling Lists
	if !model.MonitorDestinations.IsNull() && !model.MonitorDestinations.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field MonitorDestinations")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInnerListToSdk(ctx, model.MonitorDestinations)
		diags.Append(d...)
		sdk.MonitorDestinations = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.FailureCondition != nil {
		model.FailureCondition = basetypes.NewStringValue(*sdk.FailureCondition)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "FailureCondition", "value": *sdk.FailureCondition})
	} else {
		model.FailureCondition = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.HoldTime != nil {
		model.HoldTime = basetypes.NewFloat64Value(float64(*sdk.HoldTime))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "HoldTime", "value": *sdk.HoldTime})
	} else {
		model.HoldTime = basetypes.NewFloat64Null()
	}
	// Handling Lists
	if sdk.MonitorDestinations != nil {
		tflog.Debug(ctx, "Packing list of objects for field MonitorDestinations")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInnerListFromSdk(ctx, sdk.MonitorDestinations)
		diags.Append(d...)
		model.MonitorDestinations = packed
	} else {
		model.MonitorDestinations = basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Count.IsNull() && !model.Count.IsUnknown() {
		val := float32(model.Count.ValueFloat64())
		sdk.Count = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Count", "value": *sdk.Count})
	}

	// Handling Primitives
	if !model.Destination.IsNull() && !model.Destination.IsUnknown() {
		sdk.Destination = model.Destination.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Destination", "value": *sdk.Destination})
	}

	// Handling Primitives
	if !model.DestinationFqdn.IsNull() && !model.DestinationFqdn.IsUnknown() {
		sdk.DestinationFqdn = model.DestinationFqdn.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "DestinationFqdn", "value": *sdk.DestinationFqdn})
	}

	// Handling Primitives
	if !model.Enable.IsNull() && !model.Enable.IsUnknown() {
		sdk.Enable = model.Enable.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	}

	// Handling Primitives
	if !model.Interval.IsNull() && !model.Interval.IsUnknown() {
		val := float32(model.Interval.ValueFloat64())
		sdk.Interval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interval", "value": *sdk.Interval})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.Source.IsNull() && !model.Source.IsUnknown() {
		sdk.Source = model.Source.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Source", "value": *sdk.Source})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Count != nil {
		model.Count = basetypes.NewFloat64Value(float64(*sdk.Count))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Count", "value": *sdk.Count})
	} else {
		model.Count = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Destination != nil {
		model.Destination = basetypes.NewStringValue(*sdk.Destination)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Destination", "value": *sdk.Destination})
	} else {
		model.Destination = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.DestinationFqdn != nil {
		model.DestinationFqdn = basetypes.NewStringValue(*sdk.DestinationFqdn)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "DestinationFqdn", "value": *sdk.DestinationFqdn})
	} else {
		model.DestinationFqdn = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Enable != nil {
		model.Enable = basetypes.NewBoolValue(*sdk.Enable)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Enable", "value": *sdk.Enable})
	} else {
		model.Enable = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interval != nil {
		model.Interval = basetypes.NewFloat64Value(float64(*sdk.Interval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interval", "value": *sdk.Interval})
	} else {
		model.Interval = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.Source != nil {
		model.Source = basetypes.NewStringValue(*sdk.Source)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Source", "value": *sdk.Source})
	} else {
		model.Source = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorMonitorDestinationsInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.Both.IsNull() && !model.Both.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Both")
		sdk.Both = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.Multicast.IsNull() && !model.Multicast.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Multicast")
		sdk.Multicast = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.NoInstall.IsNull() && !model.NoInstall.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field NoInstall")
		sdk.NoInstall = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.Unicast.IsNull() && !model.Unicast.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Unicast")
		sdk.Unicast = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Both != nil && !reflect.ValueOf(sdk.Both).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Both")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Both, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Both = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Multicast != nil && !reflect.ValueOf(sdk.Multicast).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Multicast")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Multicast, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Multicast = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.NoInstall != nil && !reflect.ValueOf(sdk.NoInstall).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field NoInstall")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.NoInstall, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.NoInstall = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Unicast != nil && !reflect.ValueOf(sdk.Unicast).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Unicast")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Unicast, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Unicast = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable ---
func unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable ---
func packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIpv6 ---
func unpackLogicalRoutersVrfInnerRoutingTableIpv6ToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIpv6, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpv6
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIpv6
	var d diag.Diagnostics
	// Handling Lists
	if !model.StaticRoute.IsNull() && !model.StaticRoute.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field StaticRoute")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerListToSdk(ctx, model.StaticRoute)
		diags.Append(d...)
		sdk.StaticRoute = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIpv6 ---
func packLogicalRoutersVrfInnerRoutingTableIpv6FromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIpv6) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpv6
	var d diag.Diagnostics
	// Handling Lists
	if sdk.StaticRoute != nil {
		tflog.Debug(ctx, "Packing list of objects for field StaticRoute")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerListFromSdk(ctx, sdk.StaticRoute)
		diags.Append(d...)
		model.StaticRoute = packed
	} else {
		model.StaticRoute = basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIpv6 ---
func unpackLogicalRoutersVrfInnerRoutingTableIpv6ListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIpv6, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpv6
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIpv6, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpv6ToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIpv6 ---
func packLogicalRoutersVrfInnerRoutingTableIpv6ListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIpv6) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpv6

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIpv6
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpv6FromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpv6{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner ---
func unpackLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.AdminDist.IsNull() && !model.AdminDist.IsUnknown() {
		val := float32(model.AdminDist.ValueFloat64())
		sdk.AdminDist = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "AdminDist", "value": *sdk.AdminDist})
	}

	// Handling Objects
	if !model.Bfd.IsNull() && !model.Bfd.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Bfd")
		unpacked, d := unpackLogicalRoutersVrfInnerBgpGlobalBfdToSdk(ctx, model.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Bfd"})
		}
		if unpacked != nil {
			sdk.Bfd = unpacked
		}
	}

	// Handling Primitives
	if !model.Destination.IsNull() && !model.Destination.IsUnknown() {
		sdk.Destination = model.Destination.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Destination", "value": *sdk.Destination})
	}

	// Handling Primitives
	if !model.Interface.IsNull() && !model.Interface.IsUnknown() {
		sdk.Interface = model.Interface.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	}

	// Handling Primitives
	if !model.Metric.IsNull() && !model.Metric.IsUnknown() {
		val := float32(model.Metric.ValueFloat64())
		sdk.Metric = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Objects
	if !model.Nexthop.IsNull() && !model.Nexthop.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Nexthop")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopToSdk(ctx, model.Nexthop)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Nexthop"})
		}
		if unpacked != nil {
			sdk.Nexthop = unpacked
		}
	}

	// Handling Objects
	if !model.Option.IsNull() && !model.Option.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Option")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOptionToSdk(ctx, model.Option)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Option"})
		}
		if unpacked != nil {
			sdk.Option = unpacked
		}
	}

	// Handling Objects
	if !model.PathMonitor.IsNull() && !model.PathMonitor.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field PathMonitor")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorToSdk(ctx, model.PathMonitor)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "PathMonitor"})
		}
		if unpacked != nil {
			sdk.PathMonitor = unpacked
		}
	}

	// Handling Objects
	if !model.RouteTable.IsNull() && !model.RouteTable.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field RouteTable")
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableToSdk(ctx, model.RouteTable)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "RouteTable"})
		}
		if unpacked != nil {
			sdk.RouteTable = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner ---
func packLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.AdminDist != nil {
		model.AdminDist = basetypes.NewFloat64Value(float64(*sdk.AdminDist))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "AdminDist", "value": *sdk.AdminDist})
	} else {
		model.AdminDist = basetypes.NewFloat64Null()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Bfd != nil {
		tflog.Debug(ctx, "Packing nested object for field Bfd")
		packed, d := packLogicalRoutersVrfInnerBgpGlobalBfdFromSdk(ctx, *sdk.Bfd)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Bfd"})
		}
		model.Bfd = packed
	} else {
		model.Bfd = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerBgpGlobalBfd{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Destination != nil {
		model.Destination = basetypes.NewStringValue(*sdk.Destination)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Destination", "value": *sdk.Destination})
	} else {
		model.Destination = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interface != nil {
		model.Interface = basetypes.NewStringValue(*sdk.Interface)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interface", "value": *sdk.Interface})
	} else {
		model.Interface = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Metric != nil {
		model.Metric = basetypes.NewFloat64Value(float64(*sdk.Metric))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Metric", "value": *sdk.Metric})
	} else {
		model.Metric = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Nexthop != nil {
		tflog.Debug(ctx, "Packing nested object for field Nexthop")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthopFromSdk(ctx, *sdk.Nexthop)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Nexthop"})
		}
		model.Nexthop = packed
	} else {
		model.Nexthop = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerNexthop{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Option != nil {
		tflog.Debug(ctx, "Packing nested object for field Option")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOptionFromSdk(ctx, *sdk.Option)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Option"})
		}
		model.Option = packed
	} else {
		model.Option = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.PathMonitor != nil {
		tflog.Debug(ctx, "Packing nested object for field PathMonitor")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitorFromSdk(ctx, *sdk.PathMonitor)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "PathMonitor"})
		}
		model.PathMonitor = packed
	} else {
		model.PathMonitor = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerPathMonitor{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.RouteTable != nil {
		tflog.Debug(ctx, "Packing nested object for field RouteTable")
		packed, d := packLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableFromSdk(ctx, *sdk.RouteTable)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "RouteTable"})
		}
		model.RouteTable = packed
	} else {
		model.RouteTable = basetypes.NewObjectNull(models.LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner ---
func unpackLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner ---
func packLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInner{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption ---
func unpackLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOptionToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.Passive.IsNull() && !model.Passive.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Passive")
		sdk.Passive = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption ---
func packLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOptionFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Passive != nil && !reflect.ValueOf(sdk.Passive).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Passive")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Passive, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Passive = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption ---
func unpackLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOptionListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOptionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption ---
func packLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOptionListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption
		obj, d := packLogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOptionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerRoutingTableIpv6StaticRouteInnerOption{}.AttrType(), data)
}

// --- Unpacker for LogicalRoutersVrfInnerVrAdminDists ---
func unpackLogicalRoutersVrfInnerVrAdminDistsToSdk(ctx context.Context, obj types.Object) (*network_services.LogicalRoutersVrfInnerVrAdminDists, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.LogicalRoutersVrfInnerVrAdminDists", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerVrAdminDists
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk network_services.LogicalRoutersVrfInnerVrAdminDists
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Ebgp.IsNull() && !model.Ebgp.IsUnknown() {
		val := float32(model.Ebgp.ValueFloat64())
		sdk.Ebgp = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ebgp", "value": *sdk.Ebgp})
	}

	// Handling Primitives
	if !model.Ibgp.IsNull() && !model.Ibgp.IsUnknown() {
		val := float32(model.Ibgp.ValueFloat64())
		sdk.Ibgp = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ibgp", "value": *sdk.Ibgp})
	}

	// Handling Primitives
	if !model.OspfExt.IsNull() && !model.OspfExt.IsUnknown() {
		val := float32(model.OspfExt.ValueFloat64())
		sdk.OspfExt = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OspfExt", "value": *sdk.OspfExt})
	}

	// Handling Primitives
	if !model.OspfInt.IsNull() && !model.OspfInt.IsUnknown() {
		val := float32(model.OspfInt.ValueFloat64())
		sdk.OspfInt = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OspfInt", "value": *sdk.OspfInt})
	}

	// Handling Primitives
	if !model.Ospfv3Ext.IsNull() && !model.Ospfv3Ext.IsUnknown() {
		val := float32(model.Ospfv3Ext.ValueFloat64())
		sdk.Ospfv3Ext = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ospfv3Ext", "value": *sdk.Ospfv3Ext})
	}

	// Handling Primitives
	if !model.Ospfv3Int.IsNull() && !model.Ospfv3Int.IsUnknown() {
		val := float32(model.Ospfv3Int.ValueFloat64())
		sdk.Ospfv3Int = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Ospfv3Int", "value": *sdk.Ospfv3Int})
	}

	// Handling Primitives
	if !model.Rip.IsNull() && !model.Rip.IsUnknown() {
		val := float32(model.Rip.ValueFloat64())
		sdk.Rip = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Rip", "value": *sdk.Rip})
	}

	// Handling Primitives
	if !model.Static.IsNull() && !model.Static.IsUnknown() {
		val := float32(model.Static.ValueFloat64())
		sdk.Static = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Static", "value": *sdk.Static})
	}

	// Handling Primitives
	if !model.StaticIpv6.IsNull() && !model.StaticIpv6.IsUnknown() {
		val := float32(model.StaticIpv6.ValueFloat64())
		sdk.StaticIpv6 = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "StaticIpv6", "value": *sdk.StaticIpv6})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.LogicalRoutersVrfInnerVrAdminDists", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for LogicalRoutersVrfInnerVrAdminDists ---
func packLogicalRoutersVrfInnerVrAdminDistsFromSdk(ctx context.Context, sdk network_services.LogicalRoutersVrfInnerVrAdminDists) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.LogicalRoutersVrfInnerVrAdminDists", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.LogicalRoutersVrfInnerVrAdminDists
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ebgp != nil {
		model.Ebgp = basetypes.NewFloat64Value(float64(*sdk.Ebgp))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ebgp", "value": *sdk.Ebgp})
	} else {
		model.Ebgp = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ibgp != nil {
		model.Ibgp = basetypes.NewFloat64Value(float64(*sdk.Ibgp))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ibgp", "value": *sdk.Ibgp})
	} else {
		model.Ibgp = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OspfExt != nil {
		model.OspfExt = basetypes.NewFloat64Value(float64(*sdk.OspfExt))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OspfExt", "value": *sdk.OspfExt})
	} else {
		model.OspfExt = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OspfInt != nil {
		model.OspfInt = basetypes.NewFloat64Value(float64(*sdk.OspfInt))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OspfInt", "value": *sdk.OspfInt})
	} else {
		model.OspfInt = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ospfv3Ext != nil {
		model.Ospfv3Ext = basetypes.NewFloat64Value(float64(*sdk.Ospfv3Ext))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ospfv3Ext", "value": *sdk.Ospfv3Ext})
	} else {
		model.Ospfv3Ext = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Ospfv3Int != nil {
		model.Ospfv3Int = basetypes.NewFloat64Value(float64(*sdk.Ospfv3Int))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Ospfv3Int", "value": *sdk.Ospfv3Int})
	} else {
		model.Ospfv3Int = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Rip != nil {
		model.Rip = basetypes.NewFloat64Value(float64(*sdk.Rip))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Rip", "value": *sdk.Rip})
	} else {
		model.Rip = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Static != nil {
		model.Static = basetypes.NewFloat64Value(float64(*sdk.Static))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Static", "value": *sdk.Static})
	} else {
		model.Static = basetypes.NewFloat64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.StaticIpv6 != nil {
		model.StaticIpv6 = basetypes.NewFloat64Value(float64(*sdk.StaticIpv6))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "StaticIpv6", "value": *sdk.StaticIpv6})
	} else {
		model.StaticIpv6 = basetypes.NewFloat64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerVrAdminDists{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.LogicalRoutersVrfInnerVrAdminDists", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for LogicalRoutersVrfInnerVrAdminDists ---
func unpackLogicalRoutersVrfInnerVrAdminDistsListToSdk(ctx context.Context, list types.List) ([]network_services.LogicalRoutersVrfInnerVrAdminDists, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.LogicalRoutersVrfInnerVrAdminDists")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerVrAdminDists
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]network_services.LogicalRoutersVrfInnerVrAdminDists, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.LogicalRoutersVrfInnerVrAdminDists{}.AttrTypes(), &item)
		unpacked, d := unpackLogicalRoutersVrfInnerVrAdminDistsToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.LogicalRoutersVrfInnerVrAdminDists", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for LogicalRoutersVrfInnerVrAdminDists ---
func packLogicalRoutersVrfInnerVrAdminDistsListFromSdk(ctx context.Context, sdks []network_services.LogicalRoutersVrfInnerVrAdminDists) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.LogicalRoutersVrfInnerVrAdminDists")
	diags := diag.Diagnostics{}
	var data []models.LogicalRoutersVrfInnerVrAdminDists

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.LogicalRoutersVrfInnerVrAdminDists
		obj, d := packLogicalRoutersVrfInnerVrAdminDistsFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.LogicalRoutersVrfInnerVrAdminDists{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.LogicalRoutersVrfInnerVrAdminDists", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.LogicalRoutersVrfInnerVrAdminDists{}.AttrType(), data)
}
