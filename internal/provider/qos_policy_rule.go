package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	tephihM "github.com/paloaltonetworks/scm-go/netsec/schemas/qos/policy/rules"
	dvnOhnM "github.com/paloaltonetworks/scm-go/netsec/services/qospolicyrules"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &qosPolicyRuleListDataSource{}
	_ datasource.DataSourceWithConfigure = &qosPolicyRuleListDataSource{}
)

func NewQosPolicyRuleListDataSource() datasource.DataSource {
	return &qosPolicyRuleListDataSource{}
}

type qosPolicyRuleListDataSource struct {
	client *scm.Client
}

// qosPolicyRuleListDsModel is the model.
type qosPolicyRuleListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device   types.String `tfsdk:"device"`
	Folder   types.String `tfsdk:"folder"`
	Limit    types.Int64  `tfsdk:"limit"`
	Name     types.String `tfsdk:"name"`
	Offset   types.Int64  `tfsdk:"offset"`
	Position types.String `tfsdk:"position"`
	Snippet  types.String `tfsdk:"snippet"`

	// Output.
	Data []qosPolicyRuleListDsModel_tephihM_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type qosPolicyRuleListDsModel_tephihM_Config struct {
	Action      qosPolicyRuleListDsModel_tephihM_ActionObject   `tfsdk:"action"`
	Description types.String                                    `tfsdk:"description"`
	DscpTos     *qosPolicyRuleListDsModel_tephihM_DscpTosObject `tfsdk:"dscp_tos"`
	Id          types.String                                    `tfsdk:"id"`
	Name        types.String                                    `tfsdk:"name"`
	Schedule    types.String                                    `tfsdk:"schedule"`
}

type qosPolicyRuleListDsModel_tephihM_ActionObject struct {
	Class types.String `tfsdk:"class"`
}

type qosPolicyRuleListDsModel_tephihM_DscpTosObject struct {
	Codepoints []qosPolicyRuleListDsModel_tephihM_CodepointObject `tfsdk:"codepoints"`
}

type qosPolicyRuleListDsModel_tephihM_CodepointObject struct {
	Name types.String                                 `tfsdk:"name"`
	Type *qosPolicyRuleListDsModel_tephihM_TypeObject `tfsdk:"type"`
}

type qosPolicyRuleListDsModel_tephihM_TypeObject struct {
	Af     *qosPolicyRuleListDsModel_tephihM_AfObject     `tfsdk:"af"`
	Cs     *qosPolicyRuleListDsModel_tephihM_CsObject     `tfsdk:"cs"`
	Custom *qosPolicyRuleListDsModel_tephihM_CustomObject `tfsdk:"custom"`
	Ef     types.Bool                                     `tfsdk:"ef"`
	Tos    *qosPolicyRuleListDsModel_tephihM_TosObject    `tfsdk:"tos"`
}

type qosPolicyRuleListDsModel_tephihM_AfObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

type qosPolicyRuleListDsModel_tephihM_CsObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

type qosPolicyRuleListDsModel_tephihM_CustomObject struct {
	Codepoint *qosPolicyRuleListDsModel_tephihM_CodepointObject1 `tfsdk:"codepoint"`
}

type qosPolicyRuleListDsModel_tephihM_CodepointObject1 struct {
	BinaryValue   types.String `tfsdk:"binary_value"`
	CodepointName types.String `tfsdk:"codepoint_name"`
}

type qosPolicyRuleListDsModel_tephihM_TosObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

// Metadata returns the data source type name.
func (d *qosPolicyRuleListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_qos_policy_rule_list"
}

// Schema defines the schema for this listing data source.
func (d *qosPolicyRuleListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "position":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "description":true, "dscp_tos":true, "id":true, "name":true, "schedule":true} forceNew:map[string]bool(nil)
						"action": dsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
								"class": dsschema.StringAttribute{
									Description: "The Class param.",
									Computed:    true,
								},
							},
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"dscp_tos": dsschema.SingleNestedAttribute{
							Description: "The DscpTos param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"codepoints":true} forceNew:map[string]bool(nil)
								"codepoints": dsschema.ListNestedAttribute{
									Description: "The Codepoints param.",
									Computed:    true,
									NestedObject: dsschema.NestedAttributeObject{
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "type":true} forceNew:map[string]bool(nil)
											"name": dsschema.StringAttribute{
												Description: "The Name param.",
												Computed:    true,
											},
											"type": dsschema.SingleNestedAttribute{
												Description: "The Type param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"af":true, "cs":true, "custom":true, "ef":true, "tos":true} forceNew:map[string]bool(nil)
													"af": dsschema.SingleNestedAttribute{
														Description: "The Af param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
															"codepoint": dsschema.StringAttribute{
																Description: "The Codepoint param.",
																Computed:    true,
															},
														},
													},
													"cs": dsschema.SingleNestedAttribute{
														Description: "The Cs param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
															"codepoint": dsschema.StringAttribute{
																Description: "The Codepoint param.",
																Computed:    true,
															},
														},
													},
													"custom": dsschema.SingleNestedAttribute{
														Description: "The Custom param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
															"codepoint": dsschema.SingleNestedAttribute{
																Description: "The Codepoint param.",
																Computed:    true,
																Attributes: map[string]dsschema.Attribute{
																	// inputs:map[string]bool{} outputs:map[string]bool{"binary_value":true, "codepoint_name":true} forceNew:map[string]bool(nil)
																	"binary_value": dsschema.StringAttribute{
																		Description: "The BinaryValue param.",
																		Computed:    true,
																	},
																	"codepoint_name": dsschema.StringAttribute{
																		Description: "The CodepointName param.",
																		Computed:    true,
																	},
																},
															},
														},
													},
													"ef": dsschema.BoolAttribute{
														Description: "The Ef param.",
														Computed:    true,
													},
													"tos": dsschema.SingleNestedAttribute{
														Description: "The Tos param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
															"codepoint": dsschema.StringAttribute{
																Description: "The Codepoint param.",
																Computed:    true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"schedule": dsschema.StringAttribute{
							Description: "The Schedule param.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"position": dsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *qosPolicyRuleListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *qosPolicyRuleListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state qosPolicyRuleListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_qos_policy_rule_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"position":                    state.Position.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := dvnOhnM.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Position = state.Position.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]qosPolicyRuleListDsModel_tephihM_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := qosPolicyRuleListDsModel_tephihM_Config{}

			var1.Action = qosPolicyRuleListDsModel_tephihM_ActionObject{}

			var1.Action.Class = types.StringPointerValue(var0.Action.Class)

			var1.Description = types.StringPointerValue(var0.Description)

			if var0.DscpTos == nil {
				var1.DscpTos = nil
			} else {
				var1.DscpTos = &qosPolicyRuleListDsModel_tephihM_DscpTosObject{}

				if len(var0.DscpTos.Codepoints) == 0 {
					var1.DscpTos.Codepoints = nil
				} else {
					var1.DscpTos.Codepoints = make([]qosPolicyRuleListDsModel_tephihM_CodepointObject, 0, len(var0.DscpTos.Codepoints))
					for _, var2 := range var0.DscpTos.Codepoints {
						var3 := qosPolicyRuleListDsModel_tephihM_CodepointObject{}

						var3.Name = types.StringPointerValue(var2.Name)

						if var2.Type == nil {
							var3.Type = nil
						} else {
							var3.Type = &qosPolicyRuleListDsModel_tephihM_TypeObject{}

							if var2.Type.Af == nil {
								var3.Type.Af = nil
							} else {
								var3.Type.Af = &qosPolicyRuleListDsModel_tephihM_AfObject{}

								var3.Type.Af.Codepoint = types.StringPointerValue(var2.Type.Af.Codepoint)
							}

							if var2.Type.Cs == nil {
								var3.Type.Cs = nil
							} else {
								var3.Type.Cs = &qosPolicyRuleListDsModel_tephihM_CsObject{}

								var3.Type.Cs.Codepoint = types.StringPointerValue(var2.Type.Cs.Codepoint)
							}

							if var2.Type.Custom == nil {
								var3.Type.Custom = nil
							} else {
								var3.Type.Custom = &qosPolicyRuleListDsModel_tephihM_CustomObject{}

								if var2.Type.Custom.Codepoint == nil {
									var3.Type.Custom.Codepoint = nil
								} else {
									var3.Type.Custom.Codepoint = &qosPolicyRuleListDsModel_tephihM_CodepointObject1{}

									var3.Type.Custom.Codepoint.BinaryValue = types.StringPointerValue(var2.Type.Custom.Codepoint.BinaryValue)

									var3.Type.Custom.Codepoint.CodepointName = types.StringPointerValue(var2.Type.Custom.Codepoint.CodepointName)
								}
							}

							if var2.Type.Ef != nil {
								var3.Type.Ef = types.BoolValue(true)
							} else {
								var3.Type.Ef = types.BoolPointerValue(nil)
							}
							//var3.Type.Ef = types.BoolValue(var2.Type.Ef != nil)

							if var2.Type.Tos == nil {
								var3.Type.Tos = nil
							} else {
								var3.Type.Tos = &qosPolicyRuleListDsModel_tephihM_TosObject{}

								var3.Type.Tos.Codepoint = types.StringPointerValue(var2.Type.Tos.Codepoint)
							}
						}
						var1.DscpTos.Codepoints = append(var1.DscpTos.Codepoints, var3)
					}
				}
			}

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.Schedule = types.StringPointerValue(var0.Schedule)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &qosPolicyRuleDataSource{}
	_ datasource.DataSourceWithConfigure = &qosPolicyRuleDataSource{}
)

func NewQosPolicyRuleDataSource() datasource.DataSource {
	return &qosPolicyRuleDataSource{}
}

type qosPolicyRuleDataSource struct {
	client *scm.Client
}

// qosPolicyRuleDsModel is the model.
type qosPolicyRuleDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Folder types.String `tfsdk:"folder"`
	Id     types.String `tfsdk:"id"`

	// Output.
	Action      qosPolicyRuleDsModel_tephihM_ActionObject   `tfsdk:"action"`
	Description types.String                                `tfsdk:"description"`
	DscpTos     *qosPolicyRuleDsModel_tephihM_DscpTosObject `tfsdk:"dscp_tos"`
	// omit input: id
	Name     types.String `tfsdk:"name"`
	Schedule types.String `tfsdk:"schedule"`
}

type qosPolicyRuleDsModel_tephihM_ActionObject struct {
	Class types.String `tfsdk:"class"`
}

type qosPolicyRuleDsModel_tephihM_DscpTosObject struct {
	Codepoints []qosPolicyRuleDsModel_tephihM_CodepointObject `tfsdk:"codepoints"`
}

type qosPolicyRuleDsModel_tephihM_CodepointObject struct {
	Name types.String                             `tfsdk:"name"`
	Type *qosPolicyRuleDsModel_tephihM_TypeObject `tfsdk:"type"`
}

type qosPolicyRuleDsModel_tephihM_TypeObject struct {
	Af     *qosPolicyRuleDsModel_tephihM_AfObject     `tfsdk:"af"`
	Cs     *qosPolicyRuleDsModel_tephihM_CsObject     `tfsdk:"cs"`
	Custom *qosPolicyRuleDsModel_tephihM_CustomObject `tfsdk:"custom"`
	Ef     types.Bool                                 `tfsdk:"ef"`
	Tos    *qosPolicyRuleDsModel_tephihM_TosObject    `tfsdk:"tos"`
}

type qosPolicyRuleDsModel_tephihM_AfObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

type qosPolicyRuleDsModel_tephihM_CsObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

type qosPolicyRuleDsModel_tephihM_CustomObject struct {
	Codepoint *qosPolicyRuleDsModel_tephihM_CodepointObject1 `tfsdk:"codepoint"`
}

type qosPolicyRuleDsModel_tephihM_CodepointObject1 struct {
	BinaryValue   types.String `tfsdk:"binary_value"`
	CodepointName types.String `tfsdk:"codepoint_name"`
}

type qosPolicyRuleDsModel_tephihM_TosObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

// Metadata returns the data source type name.
func (d *qosPolicyRuleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_qos_policy_rule"
}

// Schema defines the schema for this data source.
func (d *qosPolicyRuleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"folder":true, "id":true} outputs:map[string]bool{"action":true, "description":true, "dscp_tos":true, "id":true, "name":true, "schedule":true, "tfid":true} forceNew:map[string]bool{"folder":true, "id":true}
			"action": dsschema.SingleNestedAttribute{
				Description: "The Action param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
					"class": dsschema.StringAttribute{
						Description: "The Class param.",
						Computed:    true,
					},
				},
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"dscp_tos": dsschema.SingleNestedAttribute{
				Description: "The DscpTos param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"codepoints":true} forceNew:map[string]bool(nil)
					"codepoints": dsschema.ListNestedAttribute{
						Description: "The Codepoints param.",
						Computed:    true,
						NestedObject: dsschema.NestedAttributeObject{
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "type":true} forceNew:map[string]bool(nil)
								"name": dsschema.StringAttribute{
									Description: "The Name param.",
									Computed:    true,
								},
								"type": dsschema.SingleNestedAttribute{
									Description: "The Type param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"af":true, "cs":true, "custom":true, "ef":true, "tos":true} forceNew:map[string]bool(nil)
										"af": dsschema.SingleNestedAttribute{
											Description: "The Af param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
												"codepoint": dsschema.StringAttribute{
													Description: "The Codepoint param.",
													Computed:    true,
												},
											},
										},
										"cs": dsschema.SingleNestedAttribute{
											Description: "The Cs param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
												"codepoint": dsschema.StringAttribute{
													Description: "The Codepoint param.",
													Computed:    true,
												},
											},
										},
										"custom": dsschema.SingleNestedAttribute{
											Description: "The Custom param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
												"codepoint": dsschema.SingleNestedAttribute{
													Description: "The Codepoint param.",
													Computed:    true,
													Attributes: map[string]dsschema.Attribute{
														// inputs:map[string]bool{} outputs:map[string]bool{"binary_value":true, "codepoint_name":true} forceNew:map[string]bool(nil)
														"binary_value": dsschema.StringAttribute{
															Description: "The BinaryValue param.",
															Computed:    true,
														},
														"codepoint_name": dsschema.StringAttribute{
															Description: "The CodepointName param.",
															Computed:    true,
														},
													},
												},
											},
										},
										"ef": dsschema.BoolAttribute{
											Description: "The Ef param.",
											Computed:    true,
										},
										"tos": dsschema.SingleNestedAttribute{
											Description: "The Tos param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
												"codepoint": dsschema.StringAttribute{
													Description: "The Codepoint param.",
													Computed:    true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"schedule": dsschema.StringAttribute{
				Description: "The Schedule param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *qosPolicyRuleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *qosPolicyRuleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state qosPolicyRuleDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_qos_policy_rule",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to run the command.
	svc := dvnOhnM.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.ReadInput{}

	input.Id = state.Id.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Action = qosPolicyRuleDsModel_tephihM_ActionObject{}

	state.Action.Class = types.StringPointerValue(ans.Action.Class)

	state.Description = types.StringPointerValue(ans.Description)

	if ans.DscpTos == nil {
		state.DscpTos = nil
	} else {
		state.DscpTos = &qosPolicyRuleDsModel_tephihM_DscpTosObject{}

		if len(ans.DscpTos.Codepoints) == 0 {
			state.DscpTos.Codepoints = nil
		} else {
			state.DscpTos.Codepoints = make([]qosPolicyRuleDsModel_tephihM_CodepointObject, 0, len(ans.DscpTos.Codepoints))
			for _, var0 := range ans.DscpTos.Codepoints {
				var1 := qosPolicyRuleDsModel_tephihM_CodepointObject{}

				var1.Name = types.StringPointerValue(var0.Name)

				if var0.Type == nil {
					var1.Type = nil
				} else {
					var1.Type = &qosPolicyRuleDsModel_tephihM_TypeObject{}

					if var0.Type.Af == nil {
						var1.Type.Af = nil
					} else {
						var1.Type.Af = &qosPolicyRuleDsModel_tephihM_AfObject{}

						var1.Type.Af.Codepoint = types.StringPointerValue(var0.Type.Af.Codepoint)
					}

					if var0.Type.Cs == nil {
						var1.Type.Cs = nil
					} else {
						var1.Type.Cs = &qosPolicyRuleDsModel_tephihM_CsObject{}

						var1.Type.Cs.Codepoint = types.StringPointerValue(var0.Type.Cs.Codepoint)
					}

					if var0.Type.Custom == nil {
						var1.Type.Custom = nil
					} else {
						var1.Type.Custom = &qosPolicyRuleDsModel_tephihM_CustomObject{}

						if var0.Type.Custom.Codepoint == nil {
							var1.Type.Custom.Codepoint = nil
						} else {
							var1.Type.Custom.Codepoint = &qosPolicyRuleDsModel_tephihM_CodepointObject1{}

							var1.Type.Custom.Codepoint.BinaryValue = types.StringPointerValue(var0.Type.Custom.Codepoint.BinaryValue)

							var1.Type.Custom.Codepoint.CodepointName = types.StringPointerValue(var0.Type.Custom.Codepoint.CodepointName)
						}
					}

					if var0.Type.Ef != nil {
						var1.Type.Ef = types.BoolValue(true)
					} else {
						var1.Type.Ef = types.BoolPointerValue(nil)
					}
					//var1.Type.Ef = types.BoolValue(var0.Type.Ef != nil)

					if var0.Type.Tos == nil {
						var1.Type.Tos = nil
					} else {
						var1.Type.Tos = &qosPolicyRuleDsModel_tephihM_TosObject{}

						var1.Type.Tos.Codepoint = types.StringPointerValue(var0.Type.Tos.Codepoint)
					}
				}
				state.DscpTos.Codepoints = append(state.DscpTos.Codepoints, var1)
			}
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Schedule = types.StringPointerValue(ans.Schedule)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &qosPolicyRuleResource{}
	_ resource.ResourceWithConfigure   = &qosPolicyRuleResource{}
	_ resource.ResourceWithImportState = &qosPolicyRuleResource{}
)

func NewQosPolicyRuleResource() resource.Resource {
	return &qosPolicyRuleResource{}
}

type qosPolicyRuleResource struct {
	client *scm.Client
}

// qosPolicyRuleRsModel is the model.
type qosPolicyRuleRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Action      qosPolicyRuleRsModel_tephihM_ActionObject   `tfsdk:"action"`
	Description types.String                                `tfsdk:"description"`
	Device      types.String                                `tfsdk:"device"`
	DscpTos     *qosPolicyRuleRsModel_tephihM_DscpTosObject `tfsdk:"dscp_tos"`
	Folder      types.String                                `tfsdk:"folder"`
	Id          types.String                                `tfsdk:"id"`
	Name        types.String                                `tfsdk:"name"`
	Position    types.String                                `tfsdk:"position"`
	Schedule    types.String                                `tfsdk:"schedule"`
	Snippet     types.String                                `tfsdk:"snippet"`

	// Output.
	// omit input: action
	// omit input: description
	// omit input: dscp_tos
	// omit input: id
	// omit input: name
	// omit input: schedule
}

type qosPolicyRuleRsModel_tephihM_ActionObject struct {
	Class types.String `tfsdk:"class"`
}

type qosPolicyRuleRsModel_tephihM_DscpTosObject struct {
	Codepoints []qosPolicyRuleRsModel_tephihM_CodepointObject `tfsdk:"codepoints"`
}

type qosPolicyRuleRsModel_tephihM_CodepointObject struct {
	Name types.String                             `tfsdk:"name"`
	Type *qosPolicyRuleRsModel_tephihM_TypeObject `tfsdk:"type"`
}

type qosPolicyRuleRsModel_tephihM_TypeObject struct {
	Af     *qosPolicyRuleRsModel_tephihM_AfObject     `tfsdk:"af"`
	Cs     *qosPolicyRuleRsModel_tephihM_CsObject     `tfsdk:"cs"`
	Custom *qosPolicyRuleRsModel_tephihM_CustomObject `tfsdk:"custom"`
	Ef     types.Bool                                 `tfsdk:"ef"`
	Tos    *qosPolicyRuleRsModel_tephihM_TosObject    `tfsdk:"tos"`
}

type qosPolicyRuleRsModel_tephihM_AfObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

type qosPolicyRuleRsModel_tephihM_CsObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

type qosPolicyRuleRsModel_tephihM_CustomObject struct {
	Codepoint *qosPolicyRuleRsModel_tephihM_CodepointObject1 `tfsdk:"codepoint"`
}

type qosPolicyRuleRsModel_tephihM_CodepointObject1 struct {
	BinaryValue   types.String `tfsdk:"binary_value"`
	CodepointName types.String `tfsdk:"codepoint_name"`
}

type qosPolicyRuleRsModel_tephihM_TosObject struct {
	Codepoint types.String `tfsdk:"codepoint"`
}

// Metadata returns the data source type name.
func (r *qosPolicyRuleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_qos_policy_rule"
}

// Schema defines the schema for this data source.
func (r *qosPolicyRuleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"action":true, "description":true, "device":true, "dscp_tos":true, "folder":true, "id":true, "name":true, "position":true, "schedule":true, "snippet":true} outputs:map[string]bool{"action":true, "description":true, "dscp_tos":true, "id":true, "name":true, "schedule":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "position":true, "snippet":true}
			"action": rsschema.SingleNestedAttribute{
				Description: "The Action param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"class":true} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
					"class": rsschema.StringAttribute{
						Description: "The Class param.",
						Optional:    true,
					},
				},
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"dscp_tos": rsschema.SingleNestedAttribute{
				Description: "The DscpTos param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"codepoints":true} outputs:map[string]bool{"codepoints":true} forceNew:map[string]bool(nil)
					"codepoints": rsschema.ListNestedAttribute{
						Description: "The Codepoints param.",
						Optional:    true,
						NestedObject: rsschema.NestedAttributeObject{
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"name":true, "type":true} outputs:map[string]bool{"name":true, "type":true} forceNew:map[string]bool(nil)
								"name": rsschema.StringAttribute{
									Description: "The Name param.",
									Optional:    true,
								},
								"type": rsschema.SingleNestedAttribute{
									Description: "The Type param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"af":true, "cs":true, "custom":true, "ef":true, "tos":true} outputs:map[string]bool{"af":true, "cs":true, "custom":true, "ef":true, "tos":true} forceNew:map[string]bool(nil)
										"af": rsschema.SingleNestedAttribute{
											Description: "The Af param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`",
											Optional:    true,
											Validators: []validator.Object{
												objectvalidator.ExactlyOneOf(
													path.MatchRelative(),
													path.MatchRelative().AtParent().AtName("cs"),
													path.MatchRelative().AtParent().AtName("custom"),
													path.MatchRelative().AtParent().AtName("ef"),
													path.MatchRelative().AtParent().AtName("tos"),
												),
											},
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"codepoint":true} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
												"codepoint": rsschema.StringAttribute{
													Description: "The Codepoint param.",
													Optional:    true,
												},
											},
										},
										"cs": rsschema.SingleNestedAttribute{
											Description: "The Cs param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"codepoint":true} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
												"codepoint": rsschema.StringAttribute{
													Description: "The Codepoint param.",
													Optional:    true,
												},
											},
										},
										"custom": rsschema.SingleNestedAttribute{
											Description: "The Custom param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"codepoint":true} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
												"codepoint": rsschema.SingleNestedAttribute{
													Description: "The Codepoint param.",
													Optional:    true,
													Attributes: map[string]rsschema.Attribute{
														// inputs:map[string]bool{"binary_value":true, "codepoint_name":true} outputs:map[string]bool{"binary_value":true, "codepoint_name":true} forceNew:map[string]bool(nil)
														"binary_value": rsschema.StringAttribute{
															Description: "The BinaryValue param.",
															Optional:    true,
														},
														"codepoint_name": rsschema.StringAttribute{
															Description: "The CodepointName param.",
															Optional:    true,
														},
													},
												},
											},
										},
										"ef": rsschema.BoolAttribute{
											Description: "The Ef param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`",
											Optional:    true,
										},
										"tos": rsschema.SingleNestedAttribute{
											Description: "The Tos param. Ensure that only one of the following is specified: `af`, `cs`, `custom`, `ef`, `tos`",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"codepoint":true} outputs:map[string]bool{"codepoint":true} forceNew:map[string]bool(nil)
												"codepoint": rsschema.StringAttribute{
													Description: "The Codepoint param.",
													Optional:    true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"position": rsschema.StringAttribute{
				Description: "The Position param. String must be one of these: `\"pre\"`, `\"post\"`. Default: `\"pre\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("pre"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("pre", "post"),
				},
			},
			"schedule": rsschema.StringAttribute{
				Description: "The Schedule param.",
				Optional:    true,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *qosPolicyRuleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *qosPolicyRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state qosPolicyRuleRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_qos_policy_rule",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"position":                    state.Position.ValueString(),
	})

	// Prepare to create the config.
	svc := dvnOhnM.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Position = state.Position.ValueString()
	input.Request = &tephihM.Config{}

	input.Request.Action.Class = state.Action.Class.ValueStringPointer()

	input.Request.Description = state.Description.ValueStringPointer()

	if state.DscpTos != nil {
		input.Request.DscpTos = &tephihM.DscpTosObject{}

		if len(state.DscpTos.Codepoints) != 0 {
			input.Request.DscpTos.Codepoints = make([]tephihM.CodepointObject, 0, len(state.DscpTos.Codepoints))
			for _, var0 := range state.DscpTos.Codepoints {
				var var1 tephihM.CodepointObject

				var1.Name = var0.Name.ValueStringPointer()

				if var0.Type != nil {
					var1.Type = &tephihM.TypeObject{}

					if var0.Type.Af != nil {
						var1.Type.Af = &tephihM.AfObject{}

						var1.Type.Af.Codepoint = var0.Type.Af.Codepoint.ValueStringPointer()
					}

					if var0.Type.Cs != nil {
						var1.Type.Cs = &tephihM.CsObject{}

						var1.Type.Cs.Codepoint = var0.Type.Cs.Codepoint.ValueStringPointer()
					}

					if var0.Type.Custom != nil {
						var1.Type.Custom = &tephihM.CustomObject{}

						if var0.Type.Custom.Codepoint != nil {
							var1.Type.Custom.Codepoint = &tephihM.CodepointObject1{}

							var1.Type.Custom.Codepoint.BinaryValue = var0.Type.Custom.Codepoint.BinaryValue.ValueStringPointer()

							var1.Type.Custom.Codepoint.CodepointName = var0.Type.Custom.Codepoint.CodepointName.ValueStringPointer()
						}
					}

					if !var0.Type.Ef.IsNull() && var0.Type.Ef.ValueBool() {
						var1.Type.Ef = map[string]interface{}{}
					}

					if var0.Type.Tos != nil {
						var1.Type.Tos = &tephihM.TosObject{}

						var1.Type.Tos.Codepoint = var0.Type.Tos.Codepoint.ValueStringPointer()
					}
				}
				input.Request.DscpTos.Codepoints = append(input.Request.DscpTos.Codepoints, var1)
			}
		}
	}

	input.Request.Name = state.Name.ValueString()

	input.Request.Schedule = state.Schedule.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Position)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Action = qosPolicyRuleRsModel_tephihM_ActionObject{}

	state.Action.Class = types.StringPointerValue(ans.Action.Class)

	state.Description = types.StringPointerValue(ans.Description)

	if ans.DscpTos == nil {
		state.DscpTos = nil
	} else {
		state.DscpTos = &qosPolicyRuleRsModel_tephihM_DscpTosObject{}

		if len(ans.DscpTos.Codepoints) == 0 {
			state.DscpTos.Codepoints = nil
		} else {
			state.DscpTos.Codepoints = make([]qosPolicyRuleRsModel_tephihM_CodepointObject, 0, len(ans.DscpTos.Codepoints))
			for _, var2 := range ans.DscpTos.Codepoints {
				var3 := qosPolicyRuleRsModel_tephihM_CodepointObject{}

				var3.Name = types.StringPointerValue(var2.Name)

				if var2.Type == nil {
					var3.Type = nil
				} else {
					var3.Type = &qosPolicyRuleRsModel_tephihM_TypeObject{}

					if var2.Type.Af == nil {
						var3.Type.Af = nil
					} else {
						var3.Type.Af = &qosPolicyRuleRsModel_tephihM_AfObject{}

						var3.Type.Af.Codepoint = types.StringPointerValue(var2.Type.Af.Codepoint)
					}

					if var2.Type.Cs == nil {
						var3.Type.Cs = nil
					} else {
						var3.Type.Cs = &qosPolicyRuleRsModel_tephihM_CsObject{}

						var3.Type.Cs.Codepoint = types.StringPointerValue(var2.Type.Cs.Codepoint)
					}

					if var2.Type.Custom == nil {
						var3.Type.Custom = nil
					} else {
						var3.Type.Custom = &qosPolicyRuleRsModel_tephihM_CustomObject{}

						if var2.Type.Custom.Codepoint == nil {
							var3.Type.Custom.Codepoint = nil
						} else {
							var3.Type.Custom.Codepoint = &qosPolicyRuleRsModel_tephihM_CodepointObject1{}

							var3.Type.Custom.Codepoint.BinaryValue = types.StringPointerValue(var2.Type.Custom.Codepoint.BinaryValue)

							var3.Type.Custom.Codepoint.CodepointName = types.StringPointerValue(var2.Type.Custom.Codepoint.CodepointName)
						}
					}

					if var2.Type.Ef != nil {
						var3.Type.Ef = types.BoolValue(true)
					} else {
						var3.Type.Ef = types.BoolPointerValue(nil)
					}
					//var3.Type.Ef = types.BoolValue(var2.Type.Ef != nil)

					if var2.Type.Tos == nil {
						var3.Type.Tos = nil
					} else {
						var3.Type.Tos = &qosPolicyRuleRsModel_tephihM_TosObject{}

						var3.Type.Tos.Codepoint = types.StringPointerValue(var2.Type.Tos.Codepoint)
					}
				}
				state.DscpTos.Codepoints = append(state.DscpTos.Codepoints, var3)
			}
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Schedule = types.StringPointerValue(ans.Schedule)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *qosPolicyRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state qosPolicyRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_qos_policy_rule",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 4, "position": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := dvnOhnM.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.ReadInput{}

	input.Id = tokens[4]

	input.Folder = &tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}

	if tokens[3] == "" {
		state.Position = types.StringNull()
	} else {
		state.Position = types.StringValue(tokens[3])
	}
	state.Tfid = savestate.Tfid

	state.Action = qosPolicyRuleRsModel_tephihM_ActionObject{}

	state.Action.Class = types.StringPointerValue(ans.Action.Class)

	state.Description = types.StringPointerValue(ans.Description)

	if ans.DscpTos == nil {
		state.DscpTos = nil
	} else {
		state.DscpTos = &qosPolicyRuleRsModel_tephihM_DscpTosObject{}

		if len(ans.DscpTos.Codepoints) == 0 {
			state.DscpTos.Codepoints = nil
		} else {
			state.DscpTos.Codepoints = make([]qosPolicyRuleRsModel_tephihM_CodepointObject, 0, len(ans.DscpTos.Codepoints))
			for _, var0 := range ans.DscpTos.Codepoints {
				var1 := qosPolicyRuleRsModel_tephihM_CodepointObject{}

				var1.Name = types.StringPointerValue(var0.Name)

				if var0.Type == nil {
					var1.Type = nil
				} else {
					var1.Type = &qosPolicyRuleRsModel_tephihM_TypeObject{}

					if var0.Type.Af == nil {
						var1.Type.Af = nil
					} else {
						var1.Type.Af = &qosPolicyRuleRsModel_tephihM_AfObject{}

						var1.Type.Af.Codepoint = types.StringPointerValue(var0.Type.Af.Codepoint)
					}

					if var0.Type.Cs == nil {
						var1.Type.Cs = nil
					} else {
						var1.Type.Cs = &qosPolicyRuleRsModel_tephihM_CsObject{}

						var1.Type.Cs.Codepoint = types.StringPointerValue(var0.Type.Cs.Codepoint)
					}

					if var0.Type.Custom == nil {
						var1.Type.Custom = nil
					} else {
						var1.Type.Custom = &qosPolicyRuleRsModel_tephihM_CustomObject{}

						if var0.Type.Custom.Codepoint == nil {
							var1.Type.Custom.Codepoint = nil
						} else {
							var1.Type.Custom.Codepoint = &qosPolicyRuleRsModel_tephihM_CodepointObject1{}

							var1.Type.Custom.Codepoint.BinaryValue = types.StringPointerValue(var0.Type.Custom.Codepoint.BinaryValue)

							var1.Type.Custom.Codepoint.CodepointName = types.StringPointerValue(var0.Type.Custom.Codepoint.CodepointName)
						}
					}

					if var0.Type.Ef != nil {
						var1.Type.Ef = types.BoolValue(true)
					} else {
						var1.Type.Ef = types.BoolPointerValue(nil)
					}
					//var1.Type.Ef = types.BoolValue(var0.Type.Ef != nil)

					if var0.Type.Tos == nil {
						var1.Type.Tos = nil
					} else {
						var1.Type.Tos = &qosPolicyRuleRsModel_tephihM_TosObject{}

						var1.Type.Tos.Codepoint = types.StringPointerValue(var0.Type.Tos.Codepoint)
					}
				}
				state.DscpTos.Codepoints = append(state.DscpTos.Codepoints, var1)
			}
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Schedule = types.StringPointerValue(ans.Schedule)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *qosPolicyRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state qosPolicyRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_qos_policy_rule",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := dvnOhnM.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.UpdateInput{}

	if tokens[4] != "" {
		input.Id = tokens[4]
	}
	input.Request = &tephihM.Config{}

	input.Request.Action.Class = plan.Action.Class.ValueStringPointer()

	input.Request.Description = plan.Description.ValueStringPointer()

	if plan.DscpTos != nil {
		input.Request.DscpTos = &tephihM.DscpTosObject{}

		if len(plan.DscpTos.Codepoints) != 0 {
			input.Request.DscpTos.Codepoints = make([]tephihM.CodepointObject, 0, len(plan.DscpTos.Codepoints))
			for _, var0 := range plan.DscpTos.Codepoints {
				var var1 tephihM.CodepointObject

				var1.Name = var0.Name.ValueStringPointer()

				if var0.Type != nil {
					var1.Type = &tephihM.TypeObject{}

					if var0.Type.Af != nil {
						var1.Type.Af = &tephihM.AfObject{}

						var1.Type.Af.Codepoint = var0.Type.Af.Codepoint.ValueStringPointer()
					}

					if var0.Type.Cs != nil {
						var1.Type.Cs = &tephihM.CsObject{}

						var1.Type.Cs.Codepoint = var0.Type.Cs.Codepoint.ValueStringPointer()
					}

					if var0.Type.Custom != nil {
						var1.Type.Custom = &tephihM.CustomObject{}

						if var0.Type.Custom.Codepoint != nil {
							var1.Type.Custom.Codepoint = &tephihM.CodepointObject1{}

							var1.Type.Custom.Codepoint.BinaryValue = var0.Type.Custom.Codepoint.BinaryValue.ValueStringPointer()

							var1.Type.Custom.Codepoint.CodepointName = var0.Type.Custom.Codepoint.CodepointName.ValueStringPointer()
						}
					}

					if !var0.Type.Ef.IsNull() && var0.Type.Ef.ValueBool() {
						var1.Type.Ef = map[string]interface{}{}
					}

					if var0.Type.Tos != nil {
						var1.Type.Tos = &tephihM.TosObject{}

						var1.Type.Tos.Codepoint = var0.Type.Tos.Codepoint.ValueStringPointer()
					}
				}
				input.Request.DscpTos.Codepoints = append(input.Request.DscpTos.Codepoints, var1)
			}
		}
	}

	input.Request.Name = plan.Name.ValueString()

	input.Request.Schedule = plan.Schedule.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Action = qosPolicyRuleRsModel_tephihM_ActionObject{}

	state.Action.Class = types.StringPointerValue(ans.Action.Class)

	state.Description = types.StringPointerValue(ans.Description)

	if ans.DscpTos == nil {
		state.DscpTos = nil
	} else {
		state.DscpTos = &qosPolicyRuleRsModel_tephihM_DscpTosObject{}

		if len(ans.DscpTos.Codepoints) == 0 {
			state.DscpTos.Codepoints = nil
		} else {
			state.DscpTos.Codepoints = make([]qosPolicyRuleRsModel_tephihM_CodepointObject, 0, len(ans.DscpTos.Codepoints))
			for _, var2 := range ans.DscpTos.Codepoints {
				var3 := qosPolicyRuleRsModel_tephihM_CodepointObject{}

				var3.Name = types.StringPointerValue(var2.Name)

				if var2.Type == nil {
					var3.Type = nil
				} else {
					var3.Type = &qosPolicyRuleRsModel_tephihM_TypeObject{}

					if var2.Type.Af == nil {
						var3.Type.Af = nil
					} else {
						var3.Type.Af = &qosPolicyRuleRsModel_tephihM_AfObject{}

						var3.Type.Af.Codepoint = types.StringPointerValue(var2.Type.Af.Codepoint)
					}

					if var2.Type.Cs == nil {
						var3.Type.Cs = nil
					} else {
						var3.Type.Cs = &qosPolicyRuleRsModel_tephihM_CsObject{}

						var3.Type.Cs.Codepoint = types.StringPointerValue(var2.Type.Cs.Codepoint)
					}

					if var2.Type.Custom == nil {
						var3.Type.Custom = nil
					} else {
						var3.Type.Custom = &qosPolicyRuleRsModel_tephihM_CustomObject{}

						if var2.Type.Custom.Codepoint == nil {
							var3.Type.Custom.Codepoint = nil
						} else {
							var3.Type.Custom.Codepoint = &qosPolicyRuleRsModel_tephihM_CodepointObject1{}

							var3.Type.Custom.Codepoint.BinaryValue = types.StringPointerValue(var2.Type.Custom.Codepoint.BinaryValue)

							var3.Type.Custom.Codepoint.CodepointName = types.StringPointerValue(var2.Type.Custom.Codepoint.CodepointName)
						}
					}

					if var2.Type.Ef != nil {
						var3.Type.Ef = types.BoolValue(true)
					} else {
						var3.Type.Ef = types.BoolPointerValue(nil)
					}
					//var3.Type.Ef = types.BoolValue(var2.Type.Ef != nil)

					if var2.Type.Tos == nil {
						var3.Type.Tos = nil
					} else {
						var3.Type.Tos = &qosPolicyRuleRsModel_tephihM_TosObject{}

						var3.Type.Tos.Codepoint = types.StringPointerValue(var2.Type.Tos.Codepoint)
					}
				}
				state.DscpTos.Codepoints = append(state.DscpTos.Codepoints, var3)
			}
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.Schedule = types.StringPointerValue(ans.Schedule)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *qosPolicyRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 5 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 5 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_qos_policy_rule",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 4, "position": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := dvnOhnM.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := dvnOhnM.DeleteInput{}

	input.Id = tokens[4]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *qosPolicyRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
