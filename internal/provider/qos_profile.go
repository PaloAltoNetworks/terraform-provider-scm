package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	zGfKFAQ "github.com/paloaltonetworks/scm-go/netsec/schemas/qos/profiles"
	cBiswpr "github.com/paloaltonetworks/scm-go/netsec/services/qosprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &qosProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &qosProfileListDataSource{}
)

func NewQosProfileListDataSource() datasource.DataSource {
	return &qosProfileListDataSource{}
}

type qosProfileListDataSource struct {
	client *scm.Client
}

// qosProfileListDsModel is the model.
type qosProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []qosProfileListDsModel_zGfKFAQ_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type qosProfileListDsModel_zGfKFAQ_Config struct {
	AggregateBandwidth *qosProfileListDsModel_zGfKFAQ_AggregateBandwidthObject `tfsdk:"aggregate_bandwidth"`
	ClassBandwidthType *qosProfileListDsModel_zGfKFAQ_ClassBandwidthTypeObject `tfsdk:"class_bandwidth_type"`
	Id                 types.String                                            `tfsdk:"id"`
	Name               types.String                                            `tfsdk:"name"`
}

type qosProfileListDsModel_zGfKFAQ_AggregateBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

type qosProfileListDsModel_zGfKFAQ_ClassBandwidthTypeObject struct {
	Mbps       *qosProfileListDsModel_zGfKFAQ_MbpsObject       `tfsdk:"mbps"`
	Percentage *qosProfileListDsModel_zGfKFAQ_PercentageObject `tfsdk:"percentage"`
}

type qosProfileListDsModel_zGfKFAQ_MbpsObject struct {
	Classes []qosProfileListDsModel_zGfKFAQ_MbpsClassObject `tfsdk:"classes"`
}

type qosProfileListDsModel_zGfKFAQ_MbpsClassObject struct {
	ClassBandwidth *qosProfileListDsModel_zGfKFAQ_MbpsBandwidthObject `tfsdk:"class_bandwidth"`
	Name           types.String                                       `tfsdk:"name"`
	Priority       types.String                                       `tfsdk:"priority"`
}

type qosProfileListDsModel_zGfKFAQ_MbpsBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

type qosProfileListDsModel_zGfKFAQ_PercentageObject struct {
	Classes []qosProfileListDsModel_zGfKFAQ_PercentageClassObject `tfsdk:"classes"`
}

type qosProfileListDsModel_zGfKFAQ_PercentageClassObject struct {
	ClassBandwidth *qosProfileListDsModel_zGfKFAQ_PercentageBandwidthObject `tfsdk:"class_bandwidth"`
	Name           types.String                                             `tfsdk:"name"`
	Priority       types.String                                             `tfsdk:"priority"`
}

type qosProfileListDsModel_zGfKFAQ_PercentageBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

// Metadata returns the data source type name.
func (d *qosProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_qos_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *qosProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"aggregate_bandwidth":true, "class_bandwidth_type":true, "id":true, "name":true} forceNew:map[string]bool(nil)
						"aggregate_bandwidth": dsschema.SingleNestedAttribute{
							Description: "The AggregateBandwidth param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
								"egress_guaranteed": dsschema.Int64Attribute{
									Description: "guaranteed sending bandwidth in mbps. Value must be between 0 and 16000.",
									Computed:    true,
								},
								"egress_max": dsschema.Int64Attribute{
									Description: "max sending bandwidth in mbps. Value must be between 0 and 60000.",
									Computed:    true,
								},
							},
						},
						"class_bandwidth_type": dsschema.SingleNestedAttribute{
							Description: "The ClassBandwidthType param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"mbps":true, "percentage":true} forceNew:map[string]bool(nil)
								"mbps": dsschema.SingleNestedAttribute{
									Description: "The Mbps param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
										"classes": dsschema.ListNestedAttribute{
											Description: "QoS setting for traffic classes.",
											Computed:    true,
											NestedObject: dsschema.NestedAttributeObject{
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"class_bandwidth":true, "name":true, "priority":true} forceNew:map[string]bool(nil)
													"class_bandwidth": dsschema.SingleNestedAttribute{
														Description: "The ClassBandwidth param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
															"egress_guaranteed": dsschema.Int64Attribute{
																Description: "guaranteed sending bandwidth in mbps. Value must be between 0 and 60000.",
																Computed:    true,
															},
															"egress_max": dsschema.Int64Attribute{
																Description: "max sending bandwidth in mbps. Value must be between 0 and 60000.",
																Computed:    true,
															},
														},
													},
													"name": dsschema.StringAttribute{
														Description: "Traffic class. String length must not exceed 31 characters.",
														Computed:    true,
													},
													"priority": dsschema.StringAttribute{
														Description: "traffic class priority. String must be one of these: `\"real-time\"`, `\"high\"`, `\"medium\"`, `\"low\"`. Default: `\"medium\"`.",
														Computed:    true,
													},
												},
											},
										},
									},
								},
								"percentage": dsschema.SingleNestedAttribute{
									Description: "The Percentage param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
										"classes": dsschema.ListNestedAttribute{
											Description: "QoS setting for traffic classes.",
											Computed:    true,
											NestedObject: dsschema.NestedAttributeObject{
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"class_bandwidth":true, "name":true, "priority":true} forceNew:map[string]bool(nil)
													"class_bandwidth": dsschema.SingleNestedAttribute{
														Description: "The ClassBandwidth param.",
														Computed:    true,
														Attributes: map[string]dsschema.Attribute{
															// inputs:map[string]bool{} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
															"egress_guaranteed": dsschema.Int64Attribute{
																Description: "guaranteed sending bandwidth in percentage. Value must be between 0 and 100.",
																Computed:    true,
															},
															"egress_max": dsschema.Int64Attribute{
																Description: "max sending bandwidth in percentage. Value must be between 0 and 100.",
																Computed:    true,
															},
														},
													},
													"name": dsschema.StringAttribute{
														Description: "Traffic class. String length must not exceed 31 characters.",
														Computed:    true,
													},
													"priority": dsschema.StringAttribute{
														Description: "traffic class priority. String must be one of these: `\"real-time\"`, `\"high\"`, `\"medium\"`, `\"low\"`. Default: `\"medium\"`.",
														Computed:    true,
													},
												},
											},
										},
									},
								},
							},
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 31 characters.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *qosProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *qosProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state qosProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_qos_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := cBiswpr.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := cBiswpr.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]qosProfileListDsModel_zGfKFAQ_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := qosProfileListDsModel_zGfKFAQ_Config{}

			if var0.AggregateBandwidth == nil {
				var1.AggregateBandwidth = nil
			} else {
				var1.AggregateBandwidth = &qosProfileListDsModel_zGfKFAQ_AggregateBandwidthObject{}

				var1.AggregateBandwidth.EgressGuaranteed = types.Int64PointerValue(var0.AggregateBandwidth.EgressGuaranteed)

				var1.AggregateBandwidth.EgressMax = types.Int64PointerValue(var0.AggregateBandwidth.EgressMax)
			}

			if var0.ClassBandwidthType == nil {
				var1.ClassBandwidthType = nil
			} else {
				var1.ClassBandwidthType = &qosProfileListDsModel_zGfKFAQ_ClassBandwidthTypeObject{}

				if var0.ClassBandwidthType.Mbps == nil {
					var1.ClassBandwidthType.Mbps = nil
				} else {
					var1.ClassBandwidthType.Mbps = &qosProfileListDsModel_zGfKFAQ_MbpsObject{}

					if len(var0.ClassBandwidthType.Mbps.Classes) == 0 {
						var1.ClassBandwidthType.Mbps.Classes = nil
					} else {
						var1.ClassBandwidthType.Mbps.Classes = make([]qosProfileListDsModel_zGfKFAQ_MbpsClassObject, 0, len(var0.ClassBandwidthType.Mbps.Classes))
						for _, var2 := range var0.ClassBandwidthType.Mbps.Classes {
							var3 := qosProfileListDsModel_zGfKFAQ_MbpsClassObject{}

							if var2.ClassBandwidth == nil {
								var3.ClassBandwidth = nil
							} else {
								var3.ClassBandwidth = &qosProfileListDsModel_zGfKFAQ_MbpsBandwidthObject{}

								var3.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var2.ClassBandwidth.EgressGuaranteed)

								var3.ClassBandwidth.EgressMax = types.Int64PointerValue(var2.ClassBandwidth.EgressMax)
							}

							var3.Name = types.StringPointerValue(var2.Name)

							var3.Priority = types.StringPointerValue(var2.Priority)
							var1.ClassBandwidthType.Mbps.Classes = append(var1.ClassBandwidthType.Mbps.Classes, var3)
						}
					}
				}

				if var0.ClassBandwidthType.Percentage == nil {
					var1.ClassBandwidthType.Percentage = nil
				} else {
					var1.ClassBandwidthType.Percentage = &qosProfileListDsModel_zGfKFAQ_PercentageObject{}

					if len(var0.ClassBandwidthType.Percentage.Classes) == 0 {
						var1.ClassBandwidthType.Percentage.Classes = nil
					} else {
						var1.ClassBandwidthType.Percentage.Classes = make([]qosProfileListDsModel_zGfKFAQ_PercentageClassObject, 0, len(var0.ClassBandwidthType.Percentage.Classes))
						for _, var4 := range var0.ClassBandwidthType.Percentage.Classes {
							var5 := qosProfileListDsModel_zGfKFAQ_PercentageClassObject{}

							if var4.ClassBandwidth == nil {
								var5.ClassBandwidth = nil
							} else {
								var5.ClassBandwidth = &qosProfileListDsModel_zGfKFAQ_PercentageBandwidthObject{}

								var5.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var4.ClassBandwidth.EgressGuaranteed)

								var5.ClassBandwidth.EgressMax = types.Int64PointerValue(var4.ClassBandwidth.EgressMax)
							}

							var5.Name = types.StringPointerValue(var4.Name)

							var5.Priority = types.StringPointerValue(var4.Priority)
							var1.ClassBandwidthType.Percentage.Classes = append(var1.ClassBandwidthType.Percentage.Classes, var5)
						}
					}
				}
			}

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &qosProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &qosProfileDataSource{}
)

func NewQosProfileDataSource() datasource.DataSource {
	return &qosProfileDataSource{}
}

type qosProfileDataSource struct {
	client *scm.Client
}

// qosProfileDsModel is the model.
type qosProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	AggregateBandwidth *qosProfileDsModel_zGfKFAQ_AggregateBandwidthObject `tfsdk:"aggregate_bandwidth"`
	ClassBandwidthType *qosProfileDsModel_zGfKFAQ_ClassBandwidthTypeObject `tfsdk:"class_bandwidth_type"`
	// omit input: id
	Name types.String `tfsdk:"name"`
}

type qosProfileDsModel_zGfKFAQ_AggregateBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

type qosProfileDsModel_zGfKFAQ_ClassBandwidthTypeObject struct {
	Mbps       *qosProfileDsModel_zGfKFAQ_MbpsObject       `tfsdk:"mbps"`
	Percentage *qosProfileDsModel_zGfKFAQ_PercentageObject `tfsdk:"percentage"`
}

type qosProfileDsModel_zGfKFAQ_MbpsObject struct {
	Classes []qosProfileDsModel_zGfKFAQ_MbpsClassObject `tfsdk:"classes"`
}

type qosProfileDsModel_zGfKFAQ_MbpsClassObject struct {
	ClassBandwidth *qosProfileDsModel_zGfKFAQ_MbpsBandwidthObject `tfsdk:"class_bandwidth"`
	Name           types.String                                   `tfsdk:"name"`
	Priority       types.String                                   `tfsdk:"priority"`
}

type qosProfileDsModel_zGfKFAQ_MbpsBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

type qosProfileDsModel_zGfKFAQ_PercentageObject struct {
	Classes []qosProfileDsModel_zGfKFAQ_PercentageClassObject `tfsdk:"classes"`
}

type qosProfileDsModel_zGfKFAQ_PercentageClassObject struct {
	ClassBandwidth *qosProfileDsModel_zGfKFAQ_PercentageBandwidthObject `tfsdk:"class_bandwidth"`
	Name           types.String                                         `tfsdk:"name"`
	Priority       types.String                                         `tfsdk:"priority"`
}

type qosProfileDsModel_zGfKFAQ_PercentageBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

// Metadata returns the data source type name.
func (d *qosProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_qos_profile"
}

// Schema defines the schema for this data source.
func (d *qosProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"aggregate_bandwidth":true, "class_bandwidth_type":true, "id":true, "name":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"aggregate_bandwidth": dsschema.SingleNestedAttribute{
				Description: "The AggregateBandwidth param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
					"egress_guaranteed": dsschema.Int64Attribute{
						Description: "guaranteed sending bandwidth in mbps. Value must be between 0 and 16000.",
						Computed:    true,
					},
					"egress_max": dsschema.Int64Attribute{
						Description: "max sending bandwidth in mbps. Value must be between 0 and 60000.",
						Computed:    true,
					},
				},
			},
			"class_bandwidth_type": dsschema.SingleNestedAttribute{
				Description: "The ClassBandwidthType param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"mbps":true, "percentage":true} forceNew:map[string]bool(nil)
					"mbps": dsschema.SingleNestedAttribute{
						Description: "The Mbps param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
							"classes": dsschema.ListNestedAttribute{
								Description: "QoS setting for traffic classes.",
								Computed:    true,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"class_bandwidth":true, "name":true, "priority":true} forceNew:map[string]bool(nil)
										"class_bandwidth": dsschema.SingleNestedAttribute{
											Description: "The ClassBandwidth param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
												"egress_guaranteed": dsschema.Int64Attribute{
													Description: "guaranteed sending bandwidth in mbps. Value must be between 0 and 60000.",
													Computed:    true,
												},
												"egress_max": dsschema.Int64Attribute{
													Description: "max sending bandwidth in mbps. Value must be between 0 and 60000.",
													Computed:    true,
												},
											},
										},
										"name": dsschema.StringAttribute{
											Description: "Traffic class. String length must not exceed 31 characters.",
											Computed:    true,
										},
										"priority": dsschema.StringAttribute{
											Description: "traffic class priority. String must be one of these: `\"real-time\"`, `\"high\"`, `\"medium\"`, `\"low\"`. Default: `\"medium\"`.",
											Computed:    true,
										},
									},
								},
							},
						},
					},
					"percentage": dsschema.SingleNestedAttribute{
						Description: "The Percentage param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
							"classes": dsschema.ListNestedAttribute{
								Description: "QoS setting for traffic classes.",
								Computed:    true,
								NestedObject: dsschema.NestedAttributeObject{
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"class_bandwidth":true, "name":true, "priority":true} forceNew:map[string]bool(nil)
										"class_bandwidth": dsschema.SingleNestedAttribute{
											Description: "The ClassBandwidth param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
												"egress_guaranteed": dsschema.Int64Attribute{
													Description: "guaranteed sending bandwidth in percentage. Value must be between 0 and 100.",
													Computed:    true,
												},
												"egress_max": dsschema.Int64Attribute{
													Description: "max sending bandwidth in percentage. Value must be between 0 and 100.",
													Computed:    true,
												},
											},
										},
										"name": dsschema.StringAttribute{
											Description: "Traffic class. String length must not exceed 31 characters.",
											Computed:    true,
										},
										"priority": dsschema.StringAttribute{
											Description: "traffic class priority. String must be one of these: `\"real-time\"`, `\"high\"`, `\"medium\"`, `\"low\"`. Default: `\"medium\"`.",
											Computed:    true,
										},
									},
								},
							},
						},
					},
				},
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *qosProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *qosProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state qosProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_qos_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := cBiswpr.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := cBiswpr.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.AggregateBandwidth == nil {
		state.AggregateBandwidth = nil
	} else {
		state.AggregateBandwidth = &qosProfileDsModel_zGfKFAQ_AggregateBandwidthObject{}

		state.AggregateBandwidth.EgressGuaranteed = types.Int64PointerValue(ans.AggregateBandwidth.EgressGuaranteed)

		state.AggregateBandwidth.EgressMax = types.Int64PointerValue(ans.AggregateBandwidth.EgressMax)
	}

	if ans.ClassBandwidthType == nil {
		state.ClassBandwidthType = nil
	} else {
		state.ClassBandwidthType = &qosProfileDsModel_zGfKFAQ_ClassBandwidthTypeObject{}

		if ans.ClassBandwidthType.Mbps == nil {
			state.ClassBandwidthType.Mbps = nil
		} else {
			state.ClassBandwidthType.Mbps = &qosProfileDsModel_zGfKFAQ_MbpsObject{}

			if len(ans.ClassBandwidthType.Mbps.Classes) == 0 {
				state.ClassBandwidthType.Mbps.Classes = nil
			} else {
				state.ClassBandwidthType.Mbps.Classes = make([]qosProfileDsModel_zGfKFAQ_MbpsClassObject, 0, len(ans.ClassBandwidthType.Mbps.Classes))
				for _, var0 := range ans.ClassBandwidthType.Mbps.Classes {
					var1 := qosProfileDsModel_zGfKFAQ_MbpsClassObject{}

					if var0.ClassBandwidth == nil {
						var1.ClassBandwidth = nil
					} else {
						var1.ClassBandwidth = &qosProfileDsModel_zGfKFAQ_MbpsBandwidthObject{}

						var1.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var0.ClassBandwidth.EgressGuaranteed)

						var1.ClassBandwidth.EgressMax = types.Int64PointerValue(var0.ClassBandwidth.EgressMax)
					}

					var1.Name = types.StringPointerValue(var0.Name)

					var1.Priority = types.StringPointerValue(var0.Priority)
					state.ClassBandwidthType.Mbps.Classes = append(state.ClassBandwidthType.Mbps.Classes, var1)
				}
			}
		}

		if ans.ClassBandwidthType.Percentage == nil {
			state.ClassBandwidthType.Percentage = nil
		} else {
			state.ClassBandwidthType.Percentage = &qosProfileDsModel_zGfKFAQ_PercentageObject{}

			if len(ans.ClassBandwidthType.Percentage.Classes) == 0 {
				state.ClassBandwidthType.Percentage.Classes = nil
			} else {
				state.ClassBandwidthType.Percentage.Classes = make([]qosProfileDsModel_zGfKFAQ_PercentageClassObject, 0, len(ans.ClassBandwidthType.Percentage.Classes))
				for _, var2 := range ans.ClassBandwidthType.Percentage.Classes {
					var3 := qosProfileDsModel_zGfKFAQ_PercentageClassObject{}

					if var2.ClassBandwidth == nil {
						var3.ClassBandwidth = nil
					} else {
						var3.ClassBandwidth = &qosProfileDsModel_zGfKFAQ_PercentageBandwidthObject{}

						var3.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var2.ClassBandwidth.EgressGuaranteed)

						var3.ClassBandwidth.EgressMax = types.Int64PointerValue(var2.ClassBandwidth.EgressMax)
					}

					var3.Name = types.StringPointerValue(var2.Name)

					var3.Priority = types.StringPointerValue(var2.Priority)
					state.ClassBandwidthType.Percentage.Classes = append(state.ClassBandwidthType.Percentage.Classes, var3)
				}
			}
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &qosProfileResource{}
	_ resource.ResourceWithConfigure   = &qosProfileResource{}
	_ resource.ResourceWithImportState = &qosProfileResource{}
)

func NewQosProfileResource() resource.Resource {
	return &qosProfileResource{}
}

type qosProfileResource struct {
	client *scm.Client
}

// qosProfileRsModel is the model.
type qosProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	AggregateBandwidth *qosProfileRsModel_zGfKFAQ_AggregateBandwidthObject `tfsdk:"aggregate_bandwidth"`
	ClassBandwidthType *qosProfileRsModel_zGfKFAQ_ClassBandwidthTypeObject `tfsdk:"class_bandwidth_type"`
	Device             types.String                                        `tfsdk:"device"`
	Folder             types.String                                        `tfsdk:"folder"`
	Id                 types.String                                        `tfsdk:"id"`
	Name               types.String                                        `tfsdk:"name"`
	Snippet            types.String                                        `tfsdk:"snippet"`

	// Output.
	// omit input: aggregate_bandwidth
	// omit input: class_bandwidth_type
	// omit input: id
	// omit input: name
}

type qosProfileRsModel_zGfKFAQ_AggregateBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

type qosProfileRsModel_zGfKFAQ_ClassBandwidthTypeObject struct {
	Mbps       *qosProfileRsModel_zGfKFAQ_MbpsObject       `tfsdk:"mbps"`
	Percentage *qosProfileRsModel_zGfKFAQ_PercentageObject `tfsdk:"percentage"`
}

type qosProfileRsModel_zGfKFAQ_MbpsObject struct {
	Classes []qosProfileRsModel_zGfKFAQ_MbpsClassObject `tfsdk:"classes"`
}

type qosProfileRsModel_zGfKFAQ_MbpsClassObject struct {
	ClassBandwidth *qosProfileRsModel_zGfKFAQ_MbpsBandwidthObject `tfsdk:"class_bandwidth"`
	Name           types.String                                   `tfsdk:"name"`
	Priority       types.String                                   `tfsdk:"priority"`
}

type qosProfileRsModel_zGfKFAQ_MbpsBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

type qosProfileRsModel_zGfKFAQ_PercentageObject struct {
	Classes []qosProfileRsModel_zGfKFAQ_PercentageClassObject `tfsdk:"classes"`
}

type qosProfileRsModel_zGfKFAQ_PercentageClassObject struct {
	ClassBandwidth *qosProfileRsModel_zGfKFAQ_PercentageBandwidthObject `tfsdk:"class_bandwidth"`
	Name           types.String                                         `tfsdk:"name"`
	Priority       types.String                                         `tfsdk:"priority"`
}

type qosProfileRsModel_zGfKFAQ_PercentageBandwidthObject struct {
	EgressGuaranteed types.Int64 `tfsdk:"egress_guaranteed"`
	EgressMax        types.Int64 `tfsdk:"egress_max"`
}

// Metadata returns the data source type name.
func (r *qosProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_qos_profile"
}

// Schema defines the schema for this data source.
func (r *qosProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"aggregate_bandwidth":true, "class_bandwidth_type":true, "device":true, "folder":true, "id":true, "name":true, "snippet":true} outputs:map[string]bool{"aggregate_bandwidth":true, "class_bandwidth_type":true, "id":true, "name":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"aggregate_bandwidth": rsschema.SingleNestedAttribute{
				Description: "The AggregateBandwidth param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
					"egress_guaranteed": rsschema.Int64Attribute{
						Description: "guaranteed sending bandwidth in mbps. Value must be between 0 and 16000.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(0, 16000),
						},
					},
					"egress_max": rsschema.Int64Attribute{
						Description: "max sending bandwidth in mbps. Value must be between 0 and 60000.",
						Optional:    true,
						Validators: []validator.Int64{
							int64validator.Between(0, 60000),
						},
					},
				},
			},
			"class_bandwidth_type": rsschema.SingleNestedAttribute{
				Description: "The ClassBandwidthType param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"mbps":true, "percentage":true} outputs:map[string]bool{"mbps":true, "percentage":true} forceNew:map[string]bool(nil)
					"mbps": rsschema.SingleNestedAttribute{
						Description: "The Mbps param. Ensure that only one of the following is specified: `mbps`, `percentage`",
						Optional:    true,
						Validators: []validator.Object{
							objectvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("percentage"),
							),
						},
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"class":true} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
							"classes": rsschema.ListNestedAttribute{
								Description: "QoS setting for traffic classes.",
								Optional:    true,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"class_bandwidth":true, "name":true, "priority":true} outputs:map[string]bool{"class_bandwidth":true, "name":true, "priority":true} forceNew:map[string]bool(nil)
										"class_bandwidth": rsschema.SingleNestedAttribute{
											Description: "The ClassBandwidth param.",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
												"egress_guaranteed": rsschema.Int64Attribute{
													Description: "guaranteed sending bandwidth in mbps. Value must be between 0 and 60000.",
													Optional:    true,
													Validators: []validator.Int64{
														int64validator.Between(0, 60000),
													},
												},
												"egress_max": rsschema.Int64Attribute{
													Description: "max sending bandwidth in mbps. Value must be between 0 and 60000.",
													Optional:    true,
													Validators: []validator.Int64{
														int64validator.Between(0, 60000),
													},
												},
											},
										},
										"name": rsschema.StringAttribute{
											Description: "Traffic class. String length must not exceed 31 characters.",
											Optional:    true,
											Validators: []validator.String{
												stringvalidator.LengthAtMost(31),
											},
										},
										"priority": rsschema.StringAttribute{
											Description: "traffic class priority. String must be one of these: `\"real-time\"`, `\"high\"`, `\"medium\"`, `\"low\"`. Default: `\"medium\"`.",
											Optional:    true,
											Computed:    true,
											Default:     stringdefault.StaticString("medium"),
											Validators: []validator.String{
												stringvalidator.OneOf("real-time", "high", "medium", "low"),
											},
										},
									},
								},
							},
						},
					},
					"percentage": rsschema.SingleNestedAttribute{
						Description: "The Percentage param. Ensure that only one of the following is specified: `mbps`, `percentage`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"class":true} outputs:map[string]bool{"class":true} forceNew:map[string]bool(nil)
							"classes": rsschema.ListNestedAttribute{
								Description: "QoS setting for traffic classes.",
								Optional:    true,
								NestedObject: rsschema.NestedAttributeObject{
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"class_bandwidth":true, "name":true, "priority":true} outputs:map[string]bool{"class_bandwidth":true, "name":true, "priority":true} forceNew:map[string]bool(nil)
										"class_bandwidth": rsschema.SingleNestedAttribute{
											Description: "The ClassBandwidth param.",
											Optional:    true,
											Attributes: map[string]rsschema.Attribute{
												// inputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} outputs:map[string]bool{"egress_guaranteed":true, "egress_max":true} forceNew:map[string]bool(nil)
												"egress_guaranteed": rsschema.Int64Attribute{
													Description: "guaranteed sending bandwidth in percentage. Value must be between 0 and 100.",
													Optional:    true,
													Validators: []validator.Int64{
														int64validator.Between(0, 100),
													},
												},
												"egress_max": rsschema.Int64Attribute{
													Description: "max sending bandwidth in percentage. Value must be between 0 and 100.",
													Optional:    true,
													Validators: []validator.Int64{
														int64validator.Between(0, 100),
													},
												},
											},
										},
										"name": rsschema.StringAttribute{
											Description: "Traffic class. String length must not exceed 31 characters.",
											Optional:    true,
											Validators: []validator.String{
												stringvalidator.LengthAtMost(31),
											},
										},
										"priority": rsschema.StringAttribute{
											Description: "traffic class priority. String must be one of these: `\"real-time\"`, `\"high\"`, `\"medium\"`, `\"low\"`. Default: `\"medium\"`.",
											Optional:    true,
											Computed:    true,
											Default:     stringdefault.StaticString("medium"),
											Validators: []validator.String{
												stringvalidator.OneOf("real-time", "high", "medium", "low"),
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(31),
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *qosProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *qosProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state qosProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_qos_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := cBiswpr.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cBiswpr.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &zGfKFAQ.Config{}

	if state.AggregateBandwidth != nil {
		input.Request.AggregateBandwidth = &zGfKFAQ.AggregateBandwidthObject{}

		input.Request.AggregateBandwidth.EgressGuaranteed = state.AggregateBandwidth.EgressGuaranteed.ValueInt64Pointer()

		input.Request.AggregateBandwidth.EgressMax = state.AggregateBandwidth.EgressMax.ValueInt64Pointer()
	}

	if state.ClassBandwidthType != nil {
		input.Request.ClassBandwidthType = &zGfKFAQ.ClassBandwidthTypeObject{}

		if state.ClassBandwidthType.Mbps != nil {
			input.Request.ClassBandwidthType.Mbps = &zGfKFAQ.MbpsObject{}

			if len(state.ClassBandwidthType.Mbps.Classes) != 0 {
				input.Request.ClassBandwidthType.Mbps.Classes = make([]zGfKFAQ.MbpsClassObject, 0, len(state.ClassBandwidthType.Mbps.Classes))
				for _, var0 := range state.ClassBandwidthType.Mbps.Classes {
					var var1 zGfKFAQ.MbpsClassObject

					if var0.ClassBandwidth != nil {
						var1.ClassBandwidth = &zGfKFAQ.MbpsBandwidthObject{}

						var1.ClassBandwidth.EgressGuaranteed = var0.ClassBandwidth.EgressGuaranteed.ValueInt64Pointer()

						var1.ClassBandwidth.EgressMax = var0.ClassBandwidth.EgressMax.ValueInt64Pointer()
					}

					var1.Name = var0.Name.ValueStringPointer()

					var1.Priority = var0.Priority.ValueStringPointer()
					input.Request.ClassBandwidthType.Mbps.Classes = append(input.Request.ClassBandwidthType.Mbps.Classes, var1)
				}
			}
		}

		if state.ClassBandwidthType.Percentage != nil {
			input.Request.ClassBandwidthType.Percentage = &zGfKFAQ.PercentageObject{}

			if len(state.ClassBandwidthType.Percentage.Classes) != 0 {
				input.Request.ClassBandwidthType.Percentage.Classes = make([]zGfKFAQ.PercentageClassObject, 0, len(state.ClassBandwidthType.Percentage.Classes))
				for _, var2 := range state.ClassBandwidthType.Percentage.Classes {
					var var3 zGfKFAQ.PercentageClassObject

					if var2.ClassBandwidth != nil {
						var3.ClassBandwidth = &zGfKFAQ.PercentageBandwidthObject{}

						var3.ClassBandwidth.EgressGuaranteed = var2.ClassBandwidth.EgressGuaranteed.ValueInt64Pointer()

						var3.ClassBandwidth.EgressMax = var2.ClassBandwidth.EgressMax.ValueInt64Pointer()
					}

					var3.Name = var2.Name.ValueStringPointer()

					var3.Priority = var2.Priority.ValueStringPointer()
					input.Request.ClassBandwidthType.Percentage.Classes = append(input.Request.ClassBandwidthType.Percentage.Classes, var3)
				}
			}
		}
	}

	input.Request.Name = state.Name.ValueString()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.AggregateBandwidth == nil {
		state.AggregateBandwidth = nil
	} else {
		state.AggregateBandwidth = &qosProfileRsModel_zGfKFAQ_AggregateBandwidthObject{}

		state.AggregateBandwidth.EgressGuaranteed = types.Int64PointerValue(ans.AggregateBandwidth.EgressGuaranteed)

		state.AggregateBandwidth.EgressMax = types.Int64PointerValue(ans.AggregateBandwidth.EgressMax)
	}

	if ans.ClassBandwidthType == nil {
		state.ClassBandwidthType = nil
	} else {
		state.ClassBandwidthType = &qosProfileRsModel_zGfKFAQ_ClassBandwidthTypeObject{}

		if ans.ClassBandwidthType.Mbps == nil {
			state.ClassBandwidthType.Mbps = nil
		} else {
			state.ClassBandwidthType.Mbps = &qosProfileRsModel_zGfKFAQ_MbpsObject{}

			if len(ans.ClassBandwidthType.Mbps.Classes) == 0 {
				state.ClassBandwidthType.Mbps.Classes = nil
			} else {
				state.ClassBandwidthType.Mbps.Classes = make([]qosProfileRsModel_zGfKFAQ_MbpsClassObject, 0, len(ans.ClassBandwidthType.Mbps.Classes))
				for _, var4 := range ans.ClassBandwidthType.Mbps.Classes {
					var5 := qosProfileRsModel_zGfKFAQ_MbpsClassObject{}

					if var4.ClassBandwidth == nil {
						var5.ClassBandwidth = nil
					} else {
						var5.ClassBandwidth = &qosProfileRsModel_zGfKFAQ_MbpsBandwidthObject{}

						var5.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var4.ClassBandwidth.EgressGuaranteed)

						var5.ClassBandwidth.EgressMax = types.Int64PointerValue(var4.ClassBandwidth.EgressMax)
					}

					var5.Name = types.StringPointerValue(var4.Name)

					var5.Priority = types.StringPointerValue(var4.Priority)
					state.ClassBandwidthType.Mbps.Classes = append(state.ClassBandwidthType.Mbps.Classes, var5)
				}
			}
		}

		if ans.ClassBandwidthType.Percentage == nil {
			state.ClassBandwidthType.Percentage = nil
		} else {
			state.ClassBandwidthType.Percentage = &qosProfileRsModel_zGfKFAQ_PercentageObject{}

			if len(ans.ClassBandwidthType.Percentage.Classes) == 0 {
				state.ClassBandwidthType.Percentage.Classes = nil
			} else {
				state.ClassBandwidthType.Percentage.Classes = make([]qosProfileRsModel_zGfKFAQ_PercentageClassObject, 0, len(ans.ClassBandwidthType.Percentage.Classes))
				for _, var6 := range ans.ClassBandwidthType.Percentage.Classes {
					var7 := qosProfileRsModel_zGfKFAQ_PercentageClassObject{}

					if var6.ClassBandwidth == nil {
						var7.ClassBandwidth = nil
					} else {
						var7.ClassBandwidth = &qosProfileRsModel_zGfKFAQ_PercentageBandwidthObject{}

						var7.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var6.ClassBandwidth.EgressGuaranteed)

						var7.ClassBandwidth.EgressMax = types.Int64PointerValue(var6.ClassBandwidth.EgressMax)
					}

					var7.Name = types.StringPointerValue(var6.Name)

					var7.Priority = types.StringPointerValue(var6.Priority)
					state.ClassBandwidthType.Percentage.Classes = append(state.ClassBandwidthType.Percentage.Classes, var7)
				}
			}
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *qosProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state qosProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_qos_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := cBiswpr.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cBiswpr.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	if ans.AggregateBandwidth == nil {
		state.AggregateBandwidth = nil
	} else {
		state.AggregateBandwidth = &qosProfileRsModel_zGfKFAQ_AggregateBandwidthObject{}

		state.AggregateBandwidth.EgressGuaranteed = types.Int64PointerValue(ans.AggregateBandwidth.EgressGuaranteed)

		state.AggregateBandwidth.EgressMax = types.Int64PointerValue(ans.AggregateBandwidth.EgressMax)
	}

	if ans.ClassBandwidthType == nil {
		state.ClassBandwidthType = nil
	} else {
		state.ClassBandwidthType = &qosProfileRsModel_zGfKFAQ_ClassBandwidthTypeObject{}

		if ans.ClassBandwidthType.Mbps == nil {
			state.ClassBandwidthType.Mbps = nil
		} else {
			state.ClassBandwidthType.Mbps = &qosProfileRsModel_zGfKFAQ_MbpsObject{}

			if len(ans.ClassBandwidthType.Mbps.Classes) == 0 {
				state.ClassBandwidthType.Mbps.Classes = nil
			} else {
				state.ClassBandwidthType.Mbps.Classes = make([]qosProfileRsModel_zGfKFAQ_MbpsClassObject, 0, len(ans.ClassBandwidthType.Mbps.Classes))
				for _, var0 := range ans.ClassBandwidthType.Mbps.Classes {
					var1 := qosProfileRsModel_zGfKFAQ_MbpsClassObject{}

					if var0.ClassBandwidth == nil {
						var1.ClassBandwidth = nil
					} else {
						var1.ClassBandwidth = &qosProfileRsModel_zGfKFAQ_MbpsBandwidthObject{}

						var1.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var0.ClassBandwidth.EgressGuaranteed)

						var1.ClassBandwidth.EgressMax = types.Int64PointerValue(var0.ClassBandwidth.EgressMax)
					}

					var1.Name = types.StringPointerValue(var0.Name)

					var1.Priority = types.StringPointerValue(var0.Priority)
					state.ClassBandwidthType.Mbps.Classes = append(state.ClassBandwidthType.Mbps.Classes, var1)
				}
			}
		}

		if ans.ClassBandwidthType.Percentage == nil {
			state.ClassBandwidthType.Percentage = nil
		} else {
			state.ClassBandwidthType.Percentage = &qosProfileRsModel_zGfKFAQ_PercentageObject{}

			if len(ans.ClassBandwidthType.Percentage.Classes) == 0 {
				state.ClassBandwidthType.Percentage.Classes = nil
			} else {
				state.ClassBandwidthType.Percentage.Classes = make([]qosProfileRsModel_zGfKFAQ_PercentageClassObject, 0, len(ans.ClassBandwidthType.Percentage.Classes))
				for _, var2 := range ans.ClassBandwidthType.Percentage.Classes {
					var3 := qosProfileRsModel_zGfKFAQ_PercentageClassObject{}

					if var2.ClassBandwidth == nil {
						var3.ClassBandwidth = nil
					} else {
						var3.ClassBandwidth = &qosProfileRsModel_zGfKFAQ_PercentageBandwidthObject{}

						var3.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var2.ClassBandwidth.EgressGuaranteed)

						var3.ClassBandwidth.EgressMax = types.Int64PointerValue(var2.ClassBandwidth.EgressMax)
					}

					var3.Name = types.StringPointerValue(var2.Name)

					var3.Priority = types.StringPointerValue(var2.Priority)
					state.ClassBandwidthType.Percentage.Classes = append(state.ClassBandwidthType.Percentage.Classes, var3)
				}
			}
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *qosProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state qosProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_qos_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := cBiswpr.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cBiswpr.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &zGfKFAQ.Config{}

	if plan.AggregateBandwidth != nil {
		input.Request.AggregateBandwidth = &zGfKFAQ.AggregateBandwidthObject{}

		input.Request.AggregateBandwidth.EgressGuaranteed = plan.AggregateBandwidth.EgressGuaranteed.ValueInt64Pointer()

		input.Request.AggregateBandwidth.EgressMax = plan.AggregateBandwidth.EgressMax.ValueInt64Pointer()
	}

	if plan.ClassBandwidthType != nil {
		input.Request.ClassBandwidthType = &zGfKFAQ.ClassBandwidthTypeObject{}

		if plan.ClassBandwidthType.Mbps != nil {
			input.Request.ClassBandwidthType.Mbps = &zGfKFAQ.MbpsObject{}

			if len(plan.ClassBandwidthType.Mbps.Classes) != 0 {
				input.Request.ClassBandwidthType.Mbps.Classes = make([]zGfKFAQ.MbpsClassObject, 0, len(plan.ClassBandwidthType.Mbps.Classes))
				for _, var0 := range plan.ClassBandwidthType.Mbps.Classes {
					var var1 zGfKFAQ.MbpsClassObject

					if var0.ClassBandwidth != nil {
						var1.ClassBandwidth = &zGfKFAQ.MbpsBandwidthObject{}

						var1.ClassBandwidth.EgressGuaranteed = var0.ClassBandwidth.EgressGuaranteed.ValueInt64Pointer()

						var1.ClassBandwidth.EgressMax = var0.ClassBandwidth.EgressMax.ValueInt64Pointer()
					}

					var1.Name = var0.Name.ValueStringPointer()

					var1.Priority = var0.Priority.ValueStringPointer()
					input.Request.ClassBandwidthType.Mbps.Classes = append(input.Request.ClassBandwidthType.Mbps.Classes, var1)
				}
			}
		}

		if plan.ClassBandwidthType.Percentage != nil {
			input.Request.ClassBandwidthType.Percentage = &zGfKFAQ.PercentageObject{}

			if len(plan.ClassBandwidthType.Percentage.Classes) != 0 {
				input.Request.ClassBandwidthType.Percentage.Classes = make([]zGfKFAQ.PercentageClassObject, 0, len(plan.ClassBandwidthType.Percentage.Classes))
				for _, var2 := range plan.ClassBandwidthType.Percentage.Classes {
					var var3 zGfKFAQ.PercentageClassObject

					if var2.ClassBandwidth != nil {
						var3.ClassBandwidth = &zGfKFAQ.PercentageBandwidthObject{}

						var3.ClassBandwidth.EgressGuaranteed = var2.ClassBandwidth.EgressGuaranteed.ValueInt64Pointer()

						var3.ClassBandwidth.EgressMax = var2.ClassBandwidth.EgressMax.ValueInt64Pointer()
					}

					var3.Name = var2.Name.ValueStringPointer()

					var3.Priority = var2.Priority.ValueStringPointer()
					input.Request.ClassBandwidthType.Percentage.Classes = append(input.Request.ClassBandwidthType.Percentage.Classes, var3)
				}
			}
		}
	}

	input.Request.Name = plan.Name.ValueString()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	if ans.AggregateBandwidth == nil {
		state.AggregateBandwidth = nil
	} else {
		state.AggregateBandwidth = &qosProfileRsModel_zGfKFAQ_AggregateBandwidthObject{}

		state.AggregateBandwidth.EgressGuaranteed = types.Int64PointerValue(ans.AggregateBandwidth.EgressGuaranteed)

		state.AggregateBandwidth.EgressMax = types.Int64PointerValue(ans.AggregateBandwidth.EgressMax)
	}

	if ans.ClassBandwidthType == nil {
		state.ClassBandwidthType = nil
	} else {
		state.ClassBandwidthType = &qosProfileRsModel_zGfKFAQ_ClassBandwidthTypeObject{}

		if ans.ClassBandwidthType.Mbps == nil {
			state.ClassBandwidthType.Mbps = nil
		} else {
			state.ClassBandwidthType.Mbps = &qosProfileRsModel_zGfKFAQ_MbpsObject{}

			if len(ans.ClassBandwidthType.Mbps.Classes) == 0 {
				state.ClassBandwidthType.Mbps.Classes = nil
			} else {
				state.ClassBandwidthType.Mbps.Classes = make([]qosProfileRsModel_zGfKFAQ_MbpsClassObject, 0, len(ans.ClassBandwidthType.Mbps.Classes))
				for _, var4 := range ans.ClassBandwidthType.Mbps.Classes {
					var5 := qosProfileRsModel_zGfKFAQ_MbpsClassObject{}

					if var4.ClassBandwidth == nil {
						var5.ClassBandwidth = nil
					} else {
						var5.ClassBandwidth = &qosProfileRsModel_zGfKFAQ_MbpsBandwidthObject{}

						var5.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var4.ClassBandwidth.EgressGuaranteed)

						var5.ClassBandwidth.EgressMax = types.Int64PointerValue(var4.ClassBandwidth.EgressMax)
					}

					var5.Name = types.StringPointerValue(var4.Name)

					var5.Priority = types.StringPointerValue(var4.Priority)
					state.ClassBandwidthType.Mbps.Classes = append(state.ClassBandwidthType.Mbps.Classes, var5)
				}
			}
		}

		if ans.ClassBandwidthType.Percentage == nil {
			state.ClassBandwidthType.Percentage = nil
		} else {
			state.ClassBandwidthType.Percentage = &qosProfileRsModel_zGfKFAQ_PercentageObject{}

			if len(ans.ClassBandwidthType.Percentage.Classes) == 0 {
				state.ClassBandwidthType.Percentage.Classes = nil
			} else {
				state.ClassBandwidthType.Percentage.Classes = make([]qosProfileRsModel_zGfKFAQ_PercentageClassObject, 0, len(ans.ClassBandwidthType.Percentage.Classes))
				for _, var6 := range ans.ClassBandwidthType.Percentage.Classes {
					var7 := qosProfileRsModel_zGfKFAQ_PercentageClassObject{}

					if var6.ClassBandwidth == nil {
						var7.ClassBandwidth = nil
					} else {
						var7.ClassBandwidth = &qosProfileRsModel_zGfKFAQ_PercentageBandwidthObject{}

						var7.ClassBandwidth.EgressGuaranteed = types.Int64PointerValue(var6.ClassBandwidth.EgressGuaranteed)

						var7.ClassBandwidth.EgressMax = types.Int64PointerValue(var6.ClassBandwidth.EgressMax)
					}

					var7.Name = types.StringPointerValue(var6.Name)

					var7.Priority = types.StringPointerValue(var6.Priority)
					state.ClassBandwidthType.Percentage.Classes = append(state.ClassBandwidthType.Percentage.Classes, var7)
				}
			}
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *qosProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_qos_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := cBiswpr.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cBiswpr.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *qosProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
