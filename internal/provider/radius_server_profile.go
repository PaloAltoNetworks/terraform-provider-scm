package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	xlJKoIe "github.com/paloaltonetworks/scm-go/netsec/schemas/radius/server/profiles"
	cKzmQTd "github.com/paloaltonetworks/scm-go/netsec/services/radiusserverprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &radiusServerProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &radiusServerProfileListDataSource{}
)

func NewRadiusServerProfileListDataSource() datasource.DataSource {
	return &radiusServerProfileListDataSource{}
}

type radiusServerProfileListDataSource struct {
	client *scm.Client
}

// radiusServerProfileListDsModel is the model.
type radiusServerProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []radiusServerProfileListDsModel_xlJKoIe_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type radiusServerProfileListDsModel_xlJKoIe_Config struct {
	Id       types.String                                           `tfsdk:"id"`
	Protocol *radiusServerProfileListDsModel_xlJKoIe_ProtocolObject `tfsdk:"protocol"`
	Retries  types.Int64                                            `tfsdk:"retries"`
	Servers  []radiusServerProfileListDsModel_xlJKoIe_ServerObject  `tfsdk:"servers"`
	Timeout  types.Int64                                            `tfsdk:"timeout"`
}

type radiusServerProfileListDsModel_xlJKoIe_ProtocolObject struct {
	Chap           types.Bool                                                   `tfsdk:"chap"`
	EapTtlsWithPap *radiusServerProfileListDsModel_xlJKoIe_EapTtlsWithPapObject `tfsdk:"eap_ttls_with_pap"`
	Pap            types.Bool                                                   `tfsdk:"pap"`
	PeapMschapV2   *radiusServerProfileListDsModel_xlJKoIe_PeapMschapV2Object   `tfsdk:"peap_mschap_v2"`
	PeapWithGtc    *radiusServerProfileListDsModel_xlJKoIe_PeapWithGtcObject    `tfsdk:"peap_with_gtc"`
}

type radiusServerProfileListDsModel_xlJKoIe_EapTtlsWithPapObject struct {
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileListDsModel_xlJKoIe_PeapMschapV2Object struct {
	AllowPwdChange    types.Bool   `tfsdk:"allow_pwd_change"`
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileListDsModel_xlJKoIe_PeapWithGtcObject struct {
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileListDsModel_xlJKoIe_ServerObject struct {
	IpAddress types.String `tfsdk:"ip_address"`
	Name      types.String `tfsdk:"name"`
	Port      types.Int64  `tfsdk:"port"`
	Secret    types.String `tfsdk:"secret"`
}

// Metadata returns the data source type name.
func (d *radiusServerProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_radius_server_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *radiusServerProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"id":true, "protocol":true, "retries":true, "server":true, "timeout":true} forceNew:map[string]bool(nil)
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"protocol": dsschema.SingleNestedAttribute{
							Description: "The Protocol param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"CHAP":true, "EAP_TTLS_with_PAP":true, "PAP":true, "PEAP_MSCHAPv2":true, "PEAP_with_GTC":true} forceNew:map[string]bool(nil)
								"chap": dsschema.BoolAttribute{
									Description: "The Chap param.",
									Computed:    true,
								},
								"eap_ttls_with_pap": dsschema.SingleNestedAttribute{
									Description: "The EapTtlsWithPap param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
										"anon_outer_id": dsschema.BoolAttribute{
											Description: "The AnonOuterId param.",
											Computed:    true,
										},
										"radius_cert_profile": dsschema.StringAttribute{
											Description: "The RadiusCertProfile param.",
											Computed:    true,
										},
									},
								},
								"pap": dsschema.BoolAttribute{
									Description: "The Pap param.",
									Computed:    true,
								},
								"peap_mschap_v2": dsschema.SingleNestedAttribute{
									Description: "The PeapMschapV2 param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"allow_pwd_change":true, "anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
										"allow_pwd_change": dsschema.BoolAttribute{
											Description: "The AllowPwdChange param.",
											Computed:    true,
										},
										"anon_outer_id": dsschema.BoolAttribute{
											Description: "The AnonOuterId param.",
											Computed:    true,
										},
										"radius_cert_profile": dsschema.StringAttribute{
											Description: "The RadiusCertProfile param.",
											Computed:    true,
										},
									},
								},
								"peap_with_gtc": dsschema.SingleNestedAttribute{
									Description: "The PeapWithGtc param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
										"anon_outer_id": dsschema.BoolAttribute{
											Description: "The AnonOuterId param.",
											Computed:    true,
										},
										"radius_cert_profile": dsschema.StringAttribute{
											Description: "The RadiusCertProfile param.",
											Computed:    true,
										},
									},
								},
							},
						},
						"retries": dsschema.Int64Attribute{
							Description: "The Retries param. Value must be between 1 and 5.",
							Computed:    true,
						},
						"servers": dsschema.ListNestedAttribute{
							Description: "The Servers param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"ip_address":true, "name":true, "port":true, "secret":true} forceNew:map[string]bool(nil)
									"ip_address": dsschema.StringAttribute{
										Description: "The IpAddress param.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"port": dsschema.Int64Attribute{
										Description: "The Port param. Value must be between 1 and 65535.",
										Computed:    true,
									},
									"secret": dsschema.StringAttribute{
										Description: "The Secret param. String length must not exceed 64 characters.",
										Computed:    true,
										Sensitive:   true,
									},
								},
							},
						},
						"timeout": dsschema.Int64Attribute{
							Description: "The Timeout param. Value must be between 1 and 120.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *radiusServerProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *radiusServerProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state radiusServerProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_radius_server_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := cKzmQTd.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]radiusServerProfileListDsModel_xlJKoIe_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := radiusServerProfileListDsModel_xlJKoIe_Config{}

			var1.Id = types.StringPointerValue(var0.Id)

			if var0.Protocol == nil {
				var1.Protocol = nil
			} else {
				var1.Protocol = &radiusServerProfileListDsModel_xlJKoIe_ProtocolObject{}

				if var0.Protocol.Chap != nil {
					var1.Protocol.Chap = types.BoolValue(true)
				} else {
					var1.Protocol.Chap = types.BoolPointerValue(nil)
				}
				//var1.Protocol.Chap = types.BoolValue(var0.Protocol.Chap != nil)

				if var0.Protocol.EapTtlsWithPap == nil {
					var1.Protocol.EapTtlsWithPap = nil
				} else {
					var1.Protocol.EapTtlsWithPap = &radiusServerProfileListDsModel_xlJKoIe_EapTtlsWithPapObject{}

					var1.Protocol.EapTtlsWithPap.AnonOuterId = types.BoolPointerValue(var0.Protocol.EapTtlsWithPap.AnonOuterId)

					var1.Protocol.EapTtlsWithPap.RadiusCertProfile = types.StringPointerValue(var0.Protocol.EapTtlsWithPap.RadiusCertProfile)
				}

				if var0.Protocol.Pap != nil {
					var1.Protocol.Pap = types.BoolValue(true)
				} else {
					var1.Protocol.Pap = types.BoolPointerValue(nil)
				}
				//var1.Protocol.Pap = types.BoolValue(var0.Protocol.Pap != nil)

				if var0.Protocol.PeapMschapV2 == nil {
					var1.Protocol.PeapMschapV2 = nil
				} else {
					var1.Protocol.PeapMschapV2 = &radiusServerProfileListDsModel_xlJKoIe_PeapMschapV2Object{}

					var1.Protocol.PeapMschapV2.AllowPwdChange = types.BoolPointerValue(var0.Protocol.PeapMschapV2.AllowPwdChange)

					var1.Protocol.PeapMschapV2.AnonOuterId = types.BoolPointerValue(var0.Protocol.PeapMschapV2.AnonOuterId)

					var1.Protocol.PeapMschapV2.RadiusCertProfile = types.StringPointerValue(var0.Protocol.PeapMschapV2.RadiusCertProfile)
				}

				if var0.Protocol.PeapWithGtc == nil {
					var1.Protocol.PeapWithGtc = nil
				} else {
					var1.Protocol.PeapWithGtc = &radiusServerProfileListDsModel_xlJKoIe_PeapWithGtcObject{}

					var1.Protocol.PeapWithGtc.AnonOuterId = types.BoolPointerValue(var0.Protocol.PeapWithGtc.AnonOuterId)

					var1.Protocol.PeapWithGtc.RadiusCertProfile = types.StringPointerValue(var0.Protocol.PeapWithGtc.RadiusCertProfile)
				}
			}

			var1.Retries = types.Int64PointerValue(var0.Retries)

			if len(var0.Servers) == 0 {
				var1.Servers = nil
			} else {
				var1.Servers = make([]radiusServerProfileListDsModel_xlJKoIe_ServerObject, 0, len(var0.Servers))
				for _, var2 := range var0.Servers {
					var3 := radiusServerProfileListDsModel_xlJKoIe_ServerObject{}

					var3.IpAddress = types.StringPointerValue(var2.IpAddress)

					var3.Name = types.StringPointerValue(var2.Name)

					var3.Port = types.Int64PointerValue(var2.Port)

					var3.Secret = types.StringPointerValue(var2.Secret)
					var1.Servers = append(var1.Servers, var3)
				}
			}

			var1.Timeout = types.Int64PointerValue(var0.Timeout)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &radiusServerProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &radiusServerProfileDataSource{}
)

func NewRadiusServerProfileDataSource() datasource.DataSource {
	return &radiusServerProfileDataSource{}
}

type radiusServerProfileDataSource struct {
	client *scm.Client
}

// radiusServerProfileDsModel is the model.
type radiusServerProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	// omit input: id
	Protocol *radiusServerProfileDsModel_xlJKoIe_ProtocolObject `tfsdk:"protocol"`
	Retries  types.Int64                                        `tfsdk:"retries"`
	Servers  []radiusServerProfileDsModel_xlJKoIe_ServerObject  `tfsdk:"servers"`
	Timeout  types.Int64                                        `tfsdk:"timeout"`
}

type radiusServerProfileDsModel_xlJKoIe_ProtocolObject struct {
	Chap           types.Bool                                               `tfsdk:"chap"`
	EapTtlsWithPap *radiusServerProfileDsModel_xlJKoIe_EapTtlsWithPapObject `tfsdk:"eap_ttls_with_pap"`
	Pap            types.Bool                                               `tfsdk:"pap"`
	PeapMschapV2   *radiusServerProfileDsModel_xlJKoIe_PeapMschapV2Object   `tfsdk:"peap_mschap_v2"`
	PeapWithGtc    *radiusServerProfileDsModel_xlJKoIe_PeapWithGtcObject    `tfsdk:"peap_with_gtc"`
}

type radiusServerProfileDsModel_xlJKoIe_EapTtlsWithPapObject struct {
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileDsModel_xlJKoIe_PeapMschapV2Object struct {
	AllowPwdChange    types.Bool   `tfsdk:"allow_pwd_change"`
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileDsModel_xlJKoIe_PeapWithGtcObject struct {
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileDsModel_xlJKoIe_ServerObject struct {
	IpAddress types.String `tfsdk:"ip_address"`
	Name      types.String `tfsdk:"name"`
	Port      types.Int64  `tfsdk:"port"`
	Secret    types.String `tfsdk:"secret"`
}

// Metadata returns the data source type name.
func (d *radiusServerProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_radius_server_profile"
}

// Schema defines the schema for this data source.
func (d *radiusServerProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"id":true, "protocol":true, "retries":true, "server":true, "tfid":true, "timeout":true} forceNew:map[string]bool{"id":true}
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"protocol": dsschema.SingleNestedAttribute{
				Description: "The Protocol param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"CHAP":true, "EAP_TTLS_with_PAP":true, "PAP":true, "PEAP_MSCHAPv2":true, "PEAP_with_GTC":true} forceNew:map[string]bool(nil)
					"chap": dsschema.BoolAttribute{
						Description: "The Chap param.",
						Computed:    true,
					},
					"eap_ttls_with_pap": dsschema.SingleNestedAttribute{
						Description: "The EapTtlsWithPap param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
							"anon_outer_id": dsschema.BoolAttribute{
								Description: "The AnonOuterId param.",
								Computed:    true,
							},
							"radius_cert_profile": dsschema.StringAttribute{
								Description: "The RadiusCertProfile param.",
								Computed:    true,
							},
						},
					},
					"pap": dsschema.BoolAttribute{
						Description: "The Pap param.",
						Computed:    true,
					},
					"peap_mschap_v2": dsschema.SingleNestedAttribute{
						Description: "The PeapMschapV2 param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"allow_pwd_change":true, "anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
							"allow_pwd_change": dsschema.BoolAttribute{
								Description: "The AllowPwdChange param.",
								Computed:    true,
							},
							"anon_outer_id": dsschema.BoolAttribute{
								Description: "The AnonOuterId param.",
								Computed:    true,
							},
							"radius_cert_profile": dsschema.StringAttribute{
								Description: "The RadiusCertProfile param.",
								Computed:    true,
							},
						},
					},
					"peap_with_gtc": dsschema.SingleNestedAttribute{
						Description: "The PeapWithGtc param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
							"anon_outer_id": dsschema.BoolAttribute{
								Description: "The AnonOuterId param.",
								Computed:    true,
							},
							"radius_cert_profile": dsschema.StringAttribute{
								Description: "The RadiusCertProfile param.",
								Computed:    true,
							},
						},
					},
				},
			},
			"retries": dsschema.Int64Attribute{
				Description: "The Retries param. Value must be between 1 and 5.",
				Computed:    true,
			},
			"servers": dsschema.ListNestedAttribute{
				Description: "The Servers param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"ip_address":true, "name":true, "port":true, "secret":true} forceNew:map[string]bool(nil)
						"ip_address": dsschema.StringAttribute{
							Description: "The IpAddress param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"port": dsschema.Int64Attribute{
							Description: "The Port param. Value must be between 1 and 65535.",
							Computed:    true,
						},
						"secret": dsschema.StringAttribute{
							Description: "The Secret param. String length must not exceed 64 characters.",
							Computed:    true,
							Sensitive:   true,
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"timeout": dsschema.Int64Attribute{
				Description: "The Timeout param. Value must be between 1 and 120.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *radiusServerProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *radiusServerProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state radiusServerProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_radius_server_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := cKzmQTd.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &radiusServerProfileDsModel_xlJKoIe_ProtocolObject{}

		if ans.Protocol.Chap != nil {
			state.Protocol.Chap = types.BoolValue(true)
		} else {
			state.Protocol.Chap = types.BoolPointerValue(nil)
		}
		//state.Protocol.Chap = types.BoolValue(ans.Protocol.Chap != nil)

		if ans.Protocol.EapTtlsWithPap == nil {
			state.Protocol.EapTtlsWithPap = nil
		} else {
			state.Protocol.EapTtlsWithPap = &radiusServerProfileDsModel_xlJKoIe_EapTtlsWithPapObject{}

			state.Protocol.EapTtlsWithPap.AnonOuterId = types.BoolPointerValue(ans.Protocol.EapTtlsWithPap.AnonOuterId)

			state.Protocol.EapTtlsWithPap.RadiusCertProfile = types.StringPointerValue(ans.Protocol.EapTtlsWithPap.RadiusCertProfile)
		}

		if ans.Protocol.Pap != nil {
			state.Protocol.Pap = types.BoolValue(true)
		} else {
			state.Protocol.Pap = types.BoolPointerValue(nil)
		}
		//state.Protocol.Pap = types.BoolValue(ans.Protocol.Pap != nil)

		if ans.Protocol.PeapMschapV2 == nil {
			state.Protocol.PeapMschapV2 = nil
		} else {
			state.Protocol.PeapMschapV2 = &radiusServerProfileDsModel_xlJKoIe_PeapMschapV2Object{}

			state.Protocol.PeapMschapV2.AllowPwdChange = types.BoolPointerValue(ans.Protocol.PeapMschapV2.AllowPwdChange)

			state.Protocol.PeapMschapV2.AnonOuterId = types.BoolPointerValue(ans.Protocol.PeapMschapV2.AnonOuterId)

			state.Protocol.PeapMschapV2.RadiusCertProfile = types.StringPointerValue(ans.Protocol.PeapMschapV2.RadiusCertProfile)
		}

		if ans.Protocol.PeapWithGtc == nil {
			state.Protocol.PeapWithGtc = nil
		} else {
			state.Protocol.PeapWithGtc = &radiusServerProfileDsModel_xlJKoIe_PeapWithGtcObject{}

			state.Protocol.PeapWithGtc.AnonOuterId = types.BoolPointerValue(ans.Protocol.PeapWithGtc.AnonOuterId)

			state.Protocol.PeapWithGtc.RadiusCertProfile = types.StringPointerValue(ans.Protocol.PeapWithGtc.RadiusCertProfile)
		}
	}

	state.Retries = types.Int64PointerValue(ans.Retries)

	if len(ans.Servers) == 0 {
		state.Servers = nil
	} else {
		state.Servers = make([]radiusServerProfileDsModel_xlJKoIe_ServerObject, 0, len(ans.Servers))
		for _, var0 := range ans.Servers {
			var1 := radiusServerProfileDsModel_xlJKoIe_ServerObject{}

			var1.IpAddress = types.StringPointerValue(var0.IpAddress)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.Port = types.Int64PointerValue(var0.Port)

			var1.Secret = types.StringPointerValue(var0.Secret)
			state.Servers = append(state.Servers, var1)
		}
	}

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource              = &radiusServerProfileResource{}
	_ resource.ResourceWithConfigure = &radiusServerProfileResource{}
)

func NewRadiusServerProfileResource() resource.Resource {
	return &radiusServerProfileResource{}
}

type radiusServerProfileResource struct {
	client *scm.Client
}

// radiusServerProfileRsModel is the model.
type radiusServerProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device   types.String                                       `tfsdk:"device"`
	Folder   types.String                                       `tfsdk:"folder"`
	Id       types.String                                       `tfsdk:"id"`
	Protocol *radiusServerProfileRsModel_xlJKoIe_ProtocolObject `tfsdk:"protocol"`
	Retries  types.Int64                                        `tfsdk:"retries"`
	Servers  []radiusServerProfileRsModel_xlJKoIe_ServerObject  `tfsdk:"servers"`
	Snippet  types.String                                       `tfsdk:"snippet"`
	Timeout  types.Int64                                        `tfsdk:"timeout"`

	// Output.
	EncryptedValues types.Map `tfsdk:"encrypted_values"`
	// omit input: id
	// omit input: protocol
	// omit input: retries
	// omit input: servers
	// omit input: timeout
}

type radiusServerProfileRsModel_xlJKoIe_ProtocolObject struct {
	Chap           types.Bool                                               `tfsdk:"chap"`
	EapTtlsWithPap *radiusServerProfileRsModel_xlJKoIe_EapTtlsWithPapObject `tfsdk:"eap_ttls_with_pap"`
	Pap            types.Bool                                               `tfsdk:"pap"`
	PeapMschapV2   *radiusServerProfileRsModel_xlJKoIe_PeapMschapV2Object   `tfsdk:"peap_mschap_v2"`
	PeapWithGtc    *radiusServerProfileRsModel_xlJKoIe_PeapWithGtcObject    `tfsdk:"peap_with_gtc"`
}

type radiusServerProfileRsModel_xlJKoIe_EapTtlsWithPapObject struct {
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileRsModel_xlJKoIe_PeapMschapV2Object struct {
	AllowPwdChange    types.Bool   `tfsdk:"allow_pwd_change"`
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileRsModel_xlJKoIe_PeapWithGtcObject struct {
	AnonOuterId       types.Bool   `tfsdk:"anon_outer_id"`
	RadiusCertProfile types.String `tfsdk:"radius_cert_profile"`
}

type radiusServerProfileRsModel_xlJKoIe_ServerObject struct {
	IpAddress types.String `tfsdk:"ip_address"`
	Name      types.String `tfsdk:"name"`
	Port      types.Int64  `tfsdk:"port"`
	Secret    types.String `tfsdk:"secret"`
}

// Metadata returns the data source type name.
func (r *radiusServerProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_radius_server_profile"
}

// Schema defines the schema for this data source.
func (r *radiusServerProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "id":true, "protocol":true, "retries":true, "server":true, "snippet":true, "timeout":true} outputs:map[string]bool{"id":true, "protocol":true, "retries":true, "server":true, "tfid":true, "timeout":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"encrypted_values": rsschema.MapAttribute{
				Description: "(Internal use) Encrypted values returned from the API.",
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"protocol": rsschema.SingleNestedAttribute{
				Description: "The Protocol param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"CHAP":true, "EAP_TTLS_with_PAP":true, "PAP":true, "PEAP_MSCHAPv2":true, "PEAP_with_GTC":true} outputs:map[string]bool{"CHAP":true, "EAP_TTLS_with_PAP":true, "PAP":true, "PEAP_MSCHAPv2":true, "PEAP_with_GTC":true} forceNew:map[string]bool(nil)
					"chap": rsschema.BoolAttribute{
						Description: "The Chap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`",
						Optional:    true,
						Validators: []validator.Bool{
							boolvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("EAP_TTLS_with_PAP"),
								path.MatchRelative().AtParent().AtName("PAP"),
								path.MatchRelative().AtParent().AtName("PEAP_MSCHAPv2"),
								path.MatchRelative().AtParent().AtName("PEAP_with_GTC"),
							),
						},
					},
					"eap_ttls_with_pap": rsschema.SingleNestedAttribute{
						Description: "The EapTtlsWithPap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"anon_outer_id":true, "radius_cert_profile":true} outputs:map[string]bool{"anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
							"anon_outer_id": rsschema.BoolAttribute{
								Description: "The AnonOuterId param.",
								Optional:    true,
							},
							"radius_cert_profile": rsschema.StringAttribute{
								Description: "The RadiusCertProfile param.",
								Optional:    true,
							},
						},
					},
					"pap": rsschema.BoolAttribute{
						Description: "The Pap param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`",
						Optional:    true,
					},
					"peap_mschap_v2": rsschema.SingleNestedAttribute{
						Description: "The PeapMschapV2 param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"allow_pwd_change":true, "anon_outer_id":true, "radius_cert_profile":true} outputs:map[string]bool{"allow_pwd_change":true, "anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
							"allow_pwd_change": rsschema.BoolAttribute{
								Description: "The AllowPwdChange param.",
								Optional:    true,
							},
							"anon_outer_id": rsschema.BoolAttribute{
								Description: "The AnonOuterId param.",
								Optional:    true,
							},
							"radius_cert_profile": rsschema.StringAttribute{
								Description: "The RadiusCertProfile param.",
								Optional:    true,
							},
						},
					},
					"peap_with_gtc": rsschema.SingleNestedAttribute{
						Description: "The PeapWithGtc param. Ensure that only one of the following is specified: `CHAP`, `EAP_TTLS_with_PAP`, `PAP`, `PEAP_MSCHAPv2`, `PEAP_with_GTC`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"anon_outer_id":true, "radius_cert_profile":true} outputs:map[string]bool{"anon_outer_id":true, "radius_cert_profile":true} forceNew:map[string]bool(nil)
							"anon_outer_id": rsschema.BoolAttribute{
								Description: "The AnonOuterId param.",
								Optional:    true,
							},
							"radius_cert_profile": rsschema.StringAttribute{
								Description: "The RadiusCertProfile param.",
								Optional:    true,
							},
						},
					},
				},
			},
			"retries": rsschema.Int64Attribute{
				Description: "The Retries param. Value must be between 1 and 5.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(1, 5),
				},
			},
			"servers": rsschema.ListNestedAttribute{
				Description: "The Servers param.",
				Required:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"ip_address":true, "name":true, "port":true, "secret":true} outputs:map[string]bool{"ip_address":true, "name":true, "port":true, "secret":true} forceNew:map[string]bool(nil)
						"ip_address": rsschema.StringAttribute{
							Description: "The IpAddress param.",
							Optional:    true,
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
						"port": rsschema.Int64Attribute{
							Description: "The Port param. Value must be between 1 and 65535.",
							Optional:    true,
							Validators: []validator.Int64{
								int64validator.Between(1, 65535),
							},
						},
						"secret": rsschema.StringAttribute{
							Description: "The Secret param. String length must not exceed 64 characters.",
							Optional:    true,
							Sensitive:   true,
							Validators: []validator.String{
								stringvalidator.LengthAtMost(64),
							},
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"timeout": rsschema.Int64Attribute{
				Description: "The Timeout param. Value must be between 1 and 120.",
				Optional:    true,
				Validators: []validator.Int64{
					int64validator.Between(1, 120),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *radiusServerProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *radiusServerProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state radiusServerProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String)

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_radius_server_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := cKzmQTd.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &xlJKoIe.Config{}

	if state.Protocol != nil {
		input.Request.Protocol = &xlJKoIe.ProtocolObject{}

		if !state.Protocol.Chap.IsNull() && state.Protocol.Chap.ValueBool() {
			input.Request.Protocol.Chap = map[string]interface{}{}
		}

		if state.Protocol.EapTtlsWithPap != nil {
			input.Request.Protocol.EapTtlsWithPap = &xlJKoIe.EapTtlsWithPapObject{}

			input.Request.Protocol.EapTtlsWithPap.AnonOuterId = state.Protocol.EapTtlsWithPap.AnonOuterId.ValueBoolPointer()

			input.Request.Protocol.EapTtlsWithPap.RadiusCertProfile = state.Protocol.EapTtlsWithPap.RadiusCertProfile.ValueStringPointer()
		}

		if !state.Protocol.Pap.IsNull() && state.Protocol.Pap.ValueBool() {
			input.Request.Protocol.Pap = map[string]interface{}{}
		}

		if state.Protocol.PeapMschapV2 != nil {
			input.Request.Protocol.PeapMschapV2 = &xlJKoIe.PeapMschapV2Object{}

			input.Request.Protocol.PeapMschapV2.AllowPwdChange = state.Protocol.PeapMschapV2.AllowPwdChange.ValueBoolPointer()

			input.Request.Protocol.PeapMschapV2.AnonOuterId = state.Protocol.PeapMschapV2.AnonOuterId.ValueBoolPointer()

			input.Request.Protocol.PeapMschapV2.RadiusCertProfile = state.Protocol.PeapMschapV2.RadiusCertProfile.ValueStringPointer()
		}

		if state.Protocol.PeapWithGtc != nil {
			input.Request.Protocol.PeapWithGtc = &xlJKoIe.PeapWithGtcObject{}

			input.Request.Protocol.PeapWithGtc.AnonOuterId = state.Protocol.PeapWithGtc.AnonOuterId.ValueBoolPointer()

			input.Request.Protocol.PeapWithGtc.RadiusCertProfile = state.Protocol.PeapWithGtc.RadiusCertProfile.ValueStringPointer()
		}
	}

	input.Request.Retries = state.Retries.ValueInt64Pointer()

	if len(state.Servers) != 0 {
		input.Request.Servers = make([]xlJKoIe.ServerObject, 0, len(state.Servers))
		for _, var0 := range state.Servers {
			var var1 xlJKoIe.ServerObject

			var1.IpAddress = var0.IpAddress.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()

			var1.Port = var0.Port.ValueInt64Pointer()

			var2 := "with_param_value | plaintext | ip_address | " + var0.IpAddress.ValueString() + " | secret"
			ev[var2] = var0.Secret
			var1.Secret = var0.Secret.ValueStringPointer()
			input.Request.Servers = append(input.Request.Servers, var1)
		}
	}

	input.Request.Timeout = state.Timeout.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &radiusServerProfileRsModel_xlJKoIe_ProtocolObject{}

		if ans.Protocol.Chap != nil {
			state.Protocol.Chap = types.BoolValue(true)
		} else {
			state.Protocol.Chap = types.BoolPointerValue(nil)
		}
		//state.Protocol.Chap = types.BoolValue(ans.Protocol.Chap != nil)

		if ans.Protocol.EapTtlsWithPap == nil {
			state.Protocol.EapTtlsWithPap = nil
		} else {
			state.Protocol.EapTtlsWithPap = &radiusServerProfileRsModel_xlJKoIe_EapTtlsWithPapObject{}

			state.Protocol.EapTtlsWithPap.AnonOuterId = types.BoolPointerValue(ans.Protocol.EapTtlsWithPap.AnonOuterId)

			state.Protocol.EapTtlsWithPap.RadiusCertProfile = types.StringPointerValue(ans.Protocol.EapTtlsWithPap.RadiusCertProfile)
		}

		if ans.Protocol.Pap != nil {
			state.Protocol.Pap = types.BoolValue(true)
		} else {
			state.Protocol.Pap = types.BoolPointerValue(nil)
		}
		//state.Protocol.Pap = types.BoolValue(ans.Protocol.Pap != nil)

		if ans.Protocol.PeapMschapV2 == nil {
			state.Protocol.PeapMschapV2 = nil
		} else {
			state.Protocol.PeapMschapV2 = &radiusServerProfileRsModel_xlJKoIe_PeapMschapV2Object{}

			state.Protocol.PeapMschapV2.AllowPwdChange = types.BoolPointerValue(ans.Protocol.PeapMschapV2.AllowPwdChange)

			state.Protocol.PeapMschapV2.AnonOuterId = types.BoolPointerValue(ans.Protocol.PeapMschapV2.AnonOuterId)

			state.Protocol.PeapMschapV2.RadiusCertProfile = types.StringPointerValue(ans.Protocol.PeapMschapV2.RadiusCertProfile)
		}

		if ans.Protocol.PeapWithGtc == nil {
			state.Protocol.PeapWithGtc = nil
		} else {
			state.Protocol.PeapWithGtc = &radiusServerProfileRsModel_xlJKoIe_PeapWithGtcObject{}

			state.Protocol.PeapWithGtc.AnonOuterId = types.BoolPointerValue(ans.Protocol.PeapWithGtc.AnonOuterId)

			state.Protocol.PeapWithGtc.RadiusCertProfile = types.StringPointerValue(ans.Protocol.PeapWithGtc.RadiusCertProfile)
		}
	}

	state.Retries = types.Int64PointerValue(ans.Retries)

	if len(ans.Servers) == 0 {
		state.Servers = nil
	} else {
		state.Servers = make([]radiusServerProfileRsModel_xlJKoIe_ServerObject, 0, len(ans.Servers))
		for _, var3 := range ans.Servers {
			var4 := radiusServerProfileRsModel_xlJKoIe_ServerObject{}

			var4.IpAddress = types.StringPointerValue(var3.IpAddress)

			var4.Name = types.StringPointerValue(var3.Name)

			var4.Port = types.Int64PointerValue(var3.Port)

			var5 := "with_param_value | encrypted | ip_address | "
			if var3.IpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var5 += *var3.IpAddress
			}
			var5 += " | secret"
			ev[var5] = types.StringPointerValue(var3.Secret)

			var6 := "with_param_value | plaintext | ip_address | "
			if var3.IpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var6 += *var3.IpAddress
			}
			var6 += " | secret"
			var4.Secret = ev[var6]
			state.Servers = append(state.Servers, var4)
		}
	}

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	var7, var8 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var7
	resp.Diagnostics.Append(var8.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *radiusServerProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state radiusServerProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(savestate.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_radius_server_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := cKzmQTd.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &radiusServerProfileRsModel_xlJKoIe_ProtocolObject{}

		if ans.Protocol.Chap != nil {
			state.Protocol.Chap = types.BoolValue(true)
		} else {
			state.Protocol.Chap = types.BoolPointerValue(nil)
		}
		//state.Protocol.Chap = types.BoolValue(ans.Protocol.Chap != nil)

		if ans.Protocol.EapTtlsWithPap == nil {
			state.Protocol.EapTtlsWithPap = nil
		} else {
			state.Protocol.EapTtlsWithPap = &radiusServerProfileRsModel_xlJKoIe_EapTtlsWithPapObject{}

			state.Protocol.EapTtlsWithPap.AnonOuterId = types.BoolPointerValue(ans.Protocol.EapTtlsWithPap.AnonOuterId)

			state.Protocol.EapTtlsWithPap.RadiusCertProfile = types.StringPointerValue(ans.Protocol.EapTtlsWithPap.RadiusCertProfile)
		}

		if ans.Protocol.Pap != nil {
			state.Protocol.Pap = types.BoolValue(true)
		} else {
			state.Protocol.Pap = types.BoolPointerValue(nil)
		}
		//state.Protocol.Pap = types.BoolValue(ans.Protocol.Pap != nil)

		if ans.Protocol.PeapMschapV2 == nil {
			state.Protocol.PeapMschapV2 = nil
		} else {
			state.Protocol.PeapMschapV2 = &radiusServerProfileRsModel_xlJKoIe_PeapMschapV2Object{}

			state.Protocol.PeapMschapV2.AllowPwdChange = types.BoolPointerValue(ans.Protocol.PeapMschapV2.AllowPwdChange)

			state.Protocol.PeapMschapV2.AnonOuterId = types.BoolPointerValue(ans.Protocol.PeapMschapV2.AnonOuterId)

			state.Protocol.PeapMschapV2.RadiusCertProfile = types.StringPointerValue(ans.Protocol.PeapMschapV2.RadiusCertProfile)
		}

		if ans.Protocol.PeapWithGtc == nil {
			state.Protocol.PeapWithGtc = nil
		} else {
			state.Protocol.PeapWithGtc = &radiusServerProfileRsModel_xlJKoIe_PeapWithGtcObject{}

			state.Protocol.PeapWithGtc.AnonOuterId = types.BoolPointerValue(ans.Protocol.PeapWithGtc.AnonOuterId)

			state.Protocol.PeapWithGtc.RadiusCertProfile = types.StringPointerValue(ans.Protocol.PeapWithGtc.RadiusCertProfile)
		}
	}

	state.Retries = types.Int64PointerValue(ans.Retries)

	if len(ans.Servers) == 0 {
		state.Servers = nil
	} else {
		state.Servers = make([]radiusServerProfileRsModel_xlJKoIe_ServerObject, 0, len(ans.Servers))
		for _, var0 := range ans.Servers {
			var1 := radiusServerProfileRsModel_xlJKoIe_ServerObject{}

			var1.IpAddress = types.StringPointerValue(var0.IpAddress)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.Port = types.Int64PointerValue(var0.Port)

			var2 := "with_param_value | encrypted | ip_address | "
			if var0.IpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var2 += *var0.IpAddress
			}
			var2 += " | secret"
			if ev[var2].Equal(types.StringPointerValue(var0.Secret)) {

				var3 := "with_param_value | plaintext | ip_address | "
				if var0.IpAddress != nil {
					// NOTE: this is where the fmt or strconv will need to happen.
					var3 += *var0.IpAddress
				}
				var3 += " | secret"
				var1.Secret = ev[var3]
			} else {
				var1.Secret = types.StringNull()
			}
			state.Servers = append(state.Servers, var1)
		}
	}

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	var4, var5 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var4
	resp.Diagnostics.Append(var5.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *radiusServerProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state radiusServerProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_radius_server_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := cKzmQTd.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &xlJKoIe.Config{}

	if plan.Protocol != nil {
		input.Request.Protocol = &xlJKoIe.ProtocolObject{}

		if !plan.Protocol.Chap.IsNull() && plan.Protocol.Chap.ValueBool() {
			input.Request.Protocol.Chap = map[string]interface{}{}
		}

		if plan.Protocol.EapTtlsWithPap != nil {
			input.Request.Protocol.EapTtlsWithPap = &xlJKoIe.EapTtlsWithPapObject{}

			input.Request.Protocol.EapTtlsWithPap.AnonOuterId = plan.Protocol.EapTtlsWithPap.AnonOuterId.ValueBoolPointer()

			input.Request.Protocol.EapTtlsWithPap.RadiusCertProfile = plan.Protocol.EapTtlsWithPap.RadiusCertProfile.ValueStringPointer()
		}

		if !plan.Protocol.Pap.IsNull() && plan.Protocol.Pap.ValueBool() {
			input.Request.Protocol.Pap = map[string]interface{}{}
		}

		if plan.Protocol.PeapMschapV2 != nil {
			input.Request.Protocol.PeapMschapV2 = &xlJKoIe.PeapMschapV2Object{}

			input.Request.Protocol.PeapMschapV2.AllowPwdChange = plan.Protocol.PeapMschapV2.AllowPwdChange.ValueBoolPointer()

			input.Request.Protocol.PeapMschapV2.AnonOuterId = plan.Protocol.PeapMschapV2.AnonOuterId.ValueBoolPointer()

			input.Request.Protocol.PeapMschapV2.RadiusCertProfile = plan.Protocol.PeapMschapV2.RadiusCertProfile.ValueStringPointer()
		}

		if plan.Protocol.PeapWithGtc != nil {
			input.Request.Protocol.PeapWithGtc = &xlJKoIe.PeapWithGtcObject{}

			input.Request.Protocol.PeapWithGtc.AnonOuterId = plan.Protocol.PeapWithGtc.AnonOuterId.ValueBoolPointer()

			input.Request.Protocol.PeapWithGtc.RadiusCertProfile = plan.Protocol.PeapWithGtc.RadiusCertProfile.ValueStringPointer()
		}
	}

	input.Request.Retries = plan.Retries.ValueInt64Pointer()

	if len(plan.Servers) != 0 {
		input.Request.Servers = make([]xlJKoIe.ServerObject, 0, len(plan.Servers))
		for _, var0 := range plan.Servers {
			var var1 xlJKoIe.ServerObject

			var1.IpAddress = var0.IpAddress.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()

			var1.Port = var0.Port.ValueInt64Pointer()

			var2 := "with_param_value | plaintext | ip_address | " + var0.IpAddress.ValueString() + " | secret"
			ev[var2] = var0.Secret
			var1.Secret = var0.Secret.ValueStringPointer()
			input.Request.Servers = append(input.Request.Servers, var1)
		}
	}

	input.Request.Timeout = plan.Timeout.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Id = types.StringPointerValue(ans.Id)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &radiusServerProfileRsModel_xlJKoIe_ProtocolObject{}

		if ans.Protocol.Chap != nil {
			state.Protocol.Chap = types.BoolValue(true)
		} else {
			state.Protocol.Chap = types.BoolPointerValue(nil)
		}
		//state.Protocol.Chap = types.BoolValue(ans.Protocol.Chap != nil)

		if ans.Protocol.EapTtlsWithPap == nil {
			state.Protocol.EapTtlsWithPap = nil
		} else {
			state.Protocol.EapTtlsWithPap = &radiusServerProfileRsModel_xlJKoIe_EapTtlsWithPapObject{}

			state.Protocol.EapTtlsWithPap.AnonOuterId = types.BoolPointerValue(ans.Protocol.EapTtlsWithPap.AnonOuterId)

			state.Protocol.EapTtlsWithPap.RadiusCertProfile = types.StringPointerValue(ans.Protocol.EapTtlsWithPap.RadiusCertProfile)
		}

		if ans.Protocol.Pap != nil {
			state.Protocol.Pap = types.BoolValue(true)
		} else {
			state.Protocol.Pap = types.BoolPointerValue(nil)
		}
		//state.Protocol.Pap = types.BoolValue(ans.Protocol.Pap != nil)

		if ans.Protocol.PeapMschapV2 == nil {
			state.Protocol.PeapMschapV2 = nil
		} else {
			state.Protocol.PeapMschapV2 = &radiusServerProfileRsModel_xlJKoIe_PeapMschapV2Object{}

			state.Protocol.PeapMschapV2.AllowPwdChange = types.BoolPointerValue(ans.Protocol.PeapMschapV2.AllowPwdChange)

			state.Protocol.PeapMschapV2.AnonOuterId = types.BoolPointerValue(ans.Protocol.PeapMschapV2.AnonOuterId)

			state.Protocol.PeapMschapV2.RadiusCertProfile = types.StringPointerValue(ans.Protocol.PeapMschapV2.RadiusCertProfile)
		}

		if ans.Protocol.PeapWithGtc == nil {
			state.Protocol.PeapWithGtc = nil
		} else {
			state.Protocol.PeapWithGtc = &radiusServerProfileRsModel_xlJKoIe_PeapWithGtcObject{}

			state.Protocol.PeapWithGtc.AnonOuterId = types.BoolPointerValue(ans.Protocol.PeapWithGtc.AnonOuterId)

			state.Protocol.PeapWithGtc.RadiusCertProfile = types.StringPointerValue(ans.Protocol.PeapWithGtc.RadiusCertProfile)
		}
	}

	state.Retries = types.Int64PointerValue(ans.Retries)

	if len(ans.Servers) == 0 {
		state.Servers = nil
	} else {
		state.Servers = make([]radiusServerProfileRsModel_xlJKoIe_ServerObject, 0, len(ans.Servers))
		for _, var3 := range ans.Servers {
			var4 := radiusServerProfileRsModel_xlJKoIe_ServerObject{}

			var4.IpAddress = types.StringPointerValue(var3.IpAddress)

			var4.Name = types.StringPointerValue(var3.Name)

			var4.Port = types.Int64PointerValue(var3.Port)

			var5 := "with_param_value | encrypted | ip_address | "
			if var3.IpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var5 += *var3.IpAddress
			}
			var5 += " | secret"
			ev[var5] = types.StringPointerValue(var3.Secret)

			var6 := "with_param_value | plaintext | ip_address | "
			if var3.IpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var6 += *var3.IpAddress
			}
			var6 += " | secret"
			var4.Secret = ev[var6]
			state.Servers = append(state.Servers, var4)
		}
	}

	state.Timeout = types.Int64PointerValue(ans.Timeout)

	var7, var8 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var7
	resp.Diagnostics.Append(var8.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *radiusServerProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_radius_server_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := cKzmQTd.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cKzmQTd.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}
