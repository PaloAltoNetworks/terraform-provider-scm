package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	uewNibC "github.com/paloaltonetworks/scm-go/netsec/schemas/remote/networks"
	fVAkWHS "github.com/paloaltonetworks/scm-go/netsec/schemas/remote/networks/protocol/bgp"
	vqtUUHF "github.com/paloaltonetworks/scm-go/netsec/services/remotenetworks"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &remoteNetworkListDataSource{}
	_ datasource.DataSourceWithConfigure = &remoteNetworkListDataSource{}
)

func NewRemoteNetworkListDataSource() datasource.DataSource {
	return &remoteNetworkListDataSource{}
}

type remoteNetworkListDataSource struct {
	client *scm.Client
}

// remoteNetworkListDsModel is the model.
type remoteNetworkListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Folder types.String `tfsdk:"folder"`
	Limit  types.Int64  `tfsdk:"limit"`
	Name   types.String `tfsdk:"name"`
	Offset types.Int64  `tfsdk:"offset"`

	// Output.
	Data []remoteNetworkListDsModel_uewNibC_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type remoteNetworkListDsModel_uewNibC_Config struct {
	EcmpLoadBalancing    types.String                                        `tfsdk:"ecmp_load_balancing"`
	EcmpTunnels          []remoteNetworkListDsModel_uewNibC_EcmpTunnelObject `tfsdk:"ecmp_tunnels"`
	Id                   types.String                                        `tfsdk:"id"`
	IpsecTunnel          types.String                                        `tfsdk:"ipsec_tunnel"`
	LicenseType          types.String                                        `tfsdk:"license_type"`
	Name                 types.String                                        `tfsdk:"name"`
	Protocol             *remoteNetworkListDsModel_uewNibC_ProtocolObject    `tfsdk:"protocol"`
	Region               types.String                                        `tfsdk:"region"`
	SecondaryIpsecTunnel types.String                                        `tfsdk:"secondary_ipsec_tunnel"`
	SpnName              types.String                                        `tfsdk:"spn_name"`
	Subnets              types.List                                          `tfsdk:"subnets"`
}

type remoteNetworkListDsModel_uewNibC_EcmpTunnelObject struct {
	IpsecTunnel types.String                                        `tfsdk:"ipsec_tunnel"`
	Name        types.String                                        `tfsdk:"name"`
	Protocol    remoteNetworkListDsModel_uewNibC_EcmpProtocolObject `tfsdk:"protocol"`
}

type remoteNetworkListDsModel_uewNibC_EcmpProtocolObject struct {
	Bgp *remoteNetworkListDsModel_fVAkWHS_Config `tfsdk:"bgp"`
}

type remoteNetworkListDsModel_fVAkWHS_Config struct {
	DoNotExportRoutes         types.Bool   `tfsdk:"do_not_export_routes"`
	Enable                    types.Bool   `tfsdk:"enable"`
	LocalIpAddress            types.String `tfsdk:"local_ip_address"`
	OriginateDefaultRoute     types.Bool   `tfsdk:"originate_default_route"`
	PeerAs                    types.String `tfsdk:"peer_as"`
	PeerIpAddress             types.String `tfsdk:"peer_ip_address"`
	PeeringType               types.String `tfsdk:"peering_type"`
	Secret                    types.String `tfsdk:"secret"`
	SummarizeMobileUserRoutes types.Bool   `tfsdk:"summarize_mobile_user_routes"`
}

type remoteNetworkListDsModel_uewNibC_ProtocolObject struct {
	Bgp     *remoteNetworkListDsModel_fVAkWHS_Config        `tfsdk:"bgp"`
	BgpPeer *remoteNetworkListDsModel_uewNibC_BgpPeerObject `tfsdk:"bgp_peer"`
}

type remoteNetworkListDsModel_uewNibC_BgpPeerObject struct {
	LocalIpAddress types.String `tfsdk:"local_ip_address"`
	PeerIpAddress  types.String `tfsdk:"peer_ip_address"`
	SameAsPrimary  types.Bool   `tfsdk:"same_as_primary"`
	Secret         types.String `tfsdk:"secret"`
}

// Metadata returns the data source type name.
func (d *remoteNetworkListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_remote_network_list"
}

// Schema defines the schema for this listing data source.
func (d *remoteNetworkListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"folder":true, "limit":true, "name":true, "offset":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"folder":true, "limit":true, "name":true, "offset":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"ecmp_load_balancing":true, "ecmp_tunnels":true, "id":true, "ipsec_tunnel":true, "license_type":true, "name":true, "protocol":true, "region":true, "secondary_ipsec_tunnel":true, "spn_name":true, "subnets":true} forceNew:map[string]bool(nil)
						"ecmp_load_balancing": dsschema.StringAttribute{
							Description: "The EcmpLoadBalancing param. String must be one of these: `\"enable\"`, `\"disable\"`. Default: `\"disable\"`.",
							Computed:    true,
						},
						"ecmp_tunnels": dsschema.ListNestedAttribute{
							Description: "ecmp_tunnels is required when ecmp_load_balancing is enable.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"ipsec_tunnel":true, "name":true, "protocol":true} forceNew:map[string]bool(nil)
									"ipsec_tunnel": dsschema.StringAttribute{
										Description: "The IpsecTunnel param.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"protocol": dsschema.SingleNestedAttribute{
										Description: "The Protocol param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"bgp":true} forceNew:map[string]bool(nil)
											"bgp": dsschema.SingleNestedAttribute{
												Description: "The Bgp param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "peering_type":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
													"do_not_export_routes": dsschema.BoolAttribute{
														Description: "The DoNotExportRoutes param.",
														Computed:    true,
													},
													"enable": dsschema.BoolAttribute{
														Description: "to setup bgp protocol, enable need to set as true.",
														Computed:    true,
													},
													"local_ip_address": dsschema.StringAttribute{
														Description: "The LocalIpAddress param.",
														Computed:    true,
													},
													"originate_default_route": dsschema.BoolAttribute{
														Description: "The OriginateDefaultRoute param.",
														Computed:    true,
													},
													"peer_as": dsschema.StringAttribute{
														Description: "The PeerAs param.",
														Computed:    true,
													},
													"peer_ip_address": dsschema.StringAttribute{
														Description: "The PeerIpAddress param.",
														Computed:    true,
													},
													"peering_type": dsschema.StringAttribute{
														Description: "Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `\"exchange-v4-over-v4\"`, `\"exchange-v4-v6-over-v4\"`, `\"exchange-v4-over-v4-v6-over-v6\"`, `\"exchange-v6-over-v6\"`.",
														Computed:    true,
													},
													"secret": dsschema.StringAttribute{
														Description: "The Secret param.",
														Computed:    true,
														Sensitive:   true,
													},
													"summarize_mobile_user_routes": dsschema.BoolAttribute{
														Description: "The SummarizeMobileUserRoutes param.",
														Computed:    true,
													},
												},
											},
										},
									},
								},
							},
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"ipsec_tunnel": dsschema.StringAttribute{
							Description: "ipsec_tunnel is required when ecmp_load_balancing is disable.",
							Computed:    true,
						},
						"license_type": dsschema.StringAttribute{
							Description: "New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `\"FWAAS-AGGREGATE\"`.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"protocol": dsschema.SingleNestedAttribute{
							Description: "setup the protocol when ecmp_load_balancing is disable.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"bgp":true, "bgp_peer":true} forceNew:map[string]bool(nil)
								"bgp": dsschema.SingleNestedAttribute{
									Description: "The Bgp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "peering_type":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
										"do_not_export_routes": dsschema.BoolAttribute{
											Description: "The DoNotExportRoutes param.",
											Computed:    true,
										},
										"enable": dsschema.BoolAttribute{
											Description: "to setup bgp protocol, enable need to set as true.",
											Computed:    true,
										},
										"local_ip_address": dsschema.StringAttribute{
											Description: "The LocalIpAddress param.",
											Computed:    true,
										},
										"originate_default_route": dsschema.BoolAttribute{
											Description: "The OriginateDefaultRoute param.",
											Computed:    true,
										},
										"peer_as": dsschema.StringAttribute{
											Description: "The PeerAs param.",
											Computed:    true,
										},
										"peer_ip_address": dsschema.StringAttribute{
											Description: "The PeerIpAddress param.",
											Computed:    true,
										},
										"peering_type": dsschema.StringAttribute{
											Description: "Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `\"exchange-v4-over-v4\"`, `\"exchange-v4-v6-over-v4\"`, `\"exchange-v4-over-v4-v6-over-v6\"`, `\"exchange-v6-over-v6\"`.",
											Computed:    true,
										},
										"secret": dsschema.StringAttribute{
											Description: "The Secret param.",
											Computed:    true,
											Sensitive:   true,
										},
										"summarize_mobile_user_routes": dsschema.BoolAttribute{
											Description: "The SummarizeMobileUserRoutes param.",
											Computed:    true,
										},
									},
								},
								"bgp_peer": dsschema.SingleNestedAttribute{
									Description: "secondary bgp routing as bgp_peer.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"local_ip_address":true, "peer_ip_address":true, "same_as_primary":true, "secret":true} forceNew:map[string]bool(nil)
										"local_ip_address": dsschema.StringAttribute{
											Description: "The LocalIpAddress param.",
											Computed:    true,
										},
										"peer_ip_address": dsschema.StringAttribute{
											Description: "The PeerIpAddress param.",
											Computed:    true,
										},
										"same_as_primary": dsschema.BoolAttribute{
											Description: "If true, the secondary BGP peer configuration will be the same as the primary BGP peer. Default: `true`.",
											Computed:    true,
										},
										"secret": dsschema.StringAttribute{
											Description: "The Secret param.",
											Computed:    true,
											Sensitive:   true,
										},
									},
								},
							},
						},
						"region": dsschema.StringAttribute{
							Description: "The Region param. String length must exceed 1 characters.",
							Computed:    true,
						},
						"secondary_ipsec_tunnel": dsschema.StringAttribute{
							Description: "specify secondary ipsec_tunnel if needed.",
							Computed:    true,
						},
						"spn_name": dsschema.StringAttribute{
							Description: "spn-name is needed when license_type is FWAAS-AGGREGATE.",
							Computed:    true,
						},
						"subnets": dsschema.ListAttribute{
							Description: "The Subnets param.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Remote Networks\"`) or match this regex: `^[\\s0-9a-zA-Z._-]{1,}$`. Default: `\"Remote Networks\"`.",
				Optional:    true,
				Computed:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *remoteNetworkListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *remoteNetworkListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state remoteNetworkListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_remote_network_list",
		"terraform_provider_function": "Read",
		"folder":                      state.Folder.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
		"name":                        state.Name.ValueString(),
	})

	// Prepare to run the command.
	svc := vqtUUHF.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.ListInput{}

	input.Folder = state.Folder.ValueString()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Name = state.Name.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]remoteNetworkListDsModel_uewNibC_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := remoteNetworkListDsModel_uewNibC_Config{}

			var1.EcmpLoadBalancing = types.StringPointerValue(var0.EcmpLoadBalancing)

			if len(var0.EcmpTunnels) == 0 {
				var1.EcmpTunnels = nil
			} else {
				var1.EcmpTunnels = make([]remoteNetworkListDsModel_uewNibC_EcmpTunnelObject, 0, len(var0.EcmpTunnels))
				for _, var2 := range var0.EcmpTunnels {
					var3 := remoteNetworkListDsModel_uewNibC_EcmpTunnelObject{}

					var3.IpsecTunnel = types.StringValue(var2.IpsecTunnel)

					var3.Name = types.StringValue(var2.Name)

					var3.Protocol = remoteNetworkListDsModel_uewNibC_EcmpProtocolObject{}

					if var2.Protocol.Bgp == nil {
						var3.Protocol.Bgp = nil
					} else {
						var3.Protocol.Bgp = &remoteNetworkListDsModel_fVAkWHS_Config{}

						var3.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(var2.Protocol.Bgp.DoNotExportRoutes)

						var3.Protocol.Bgp.Enable = types.BoolPointerValue(var2.Protocol.Bgp.Enable)

						var3.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(var2.Protocol.Bgp.LocalIpAddress)

						var3.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(var2.Protocol.Bgp.OriginateDefaultRoute)

						var3.Protocol.Bgp.PeerAs = types.StringPointerValue(var2.Protocol.Bgp.PeerAs)

						var3.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(var2.Protocol.Bgp.PeerIpAddress)

						var3.Protocol.Bgp.PeeringType = types.StringPointerValue(var2.Protocol.Bgp.PeeringType)

						var3.Protocol.Bgp.Secret = types.StringPointerValue(var2.Protocol.Bgp.Secret)

						var3.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(var2.Protocol.Bgp.SummarizeMobileUserRoutes)
					}
					var1.EcmpTunnels = append(var1.EcmpTunnels, var3)
				}
			}

			var1.Id = types.StringPointerValue(var0.Id)

			var1.IpsecTunnel = types.StringPointerValue(var0.IpsecTunnel)

			var1.LicenseType = types.StringValue(var0.LicenseType)

			var1.Name = types.StringValue(var0.Name)

			if var0.Protocol == nil {
				var1.Protocol = nil
			} else {
				var1.Protocol = &remoteNetworkListDsModel_uewNibC_ProtocolObject{}

				if var0.Protocol.Bgp == nil {
					var1.Protocol.Bgp = nil
				} else {
					var1.Protocol.Bgp = &remoteNetworkListDsModel_fVAkWHS_Config{}

					var1.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(var0.Protocol.Bgp.DoNotExportRoutes)

					var1.Protocol.Bgp.Enable = types.BoolPointerValue(var0.Protocol.Bgp.Enable)

					var1.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(var0.Protocol.Bgp.LocalIpAddress)

					var1.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(var0.Protocol.Bgp.OriginateDefaultRoute)

					var1.Protocol.Bgp.PeerAs = types.StringPointerValue(var0.Protocol.Bgp.PeerAs)

					var1.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(var0.Protocol.Bgp.PeerIpAddress)

					var1.Protocol.Bgp.PeeringType = types.StringPointerValue(var0.Protocol.Bgp.PeeringType)

					var1.Protocol.Bgp.Secret = types.StringPointerValue(var0.Protocol.Bgp.Secret)

					var1.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(var0.Protocol.Bgp.SummarizeMobileUserRoutes)
				}

				if var0.Protocol.BgpPeer == nil {
					var1.Protocol.BgpPeer = nil
				} else {
					var1.Protocol.BgpPeer = &remoteNetworkListDsModel_uewNibC_BgpPeerObject{}

					var1.Protocol.BgpPeer.LocalIpAddress = types.StringPointerValue(var0.Protocol.BgpPeer.LocalIpAddress)

					var1.Protocol.BgpPeer.PeerIpAddress = types.StringPointerValue(var0.Protocol.BgpPeer.PeerIpAddress)

					var1.Protocol.BgpPeer.SameAsPrimary = types.BoolPointerValue(var0.Protocol.BgpPeer.SameAsPrimary)

					var1.Protocol.BgpPeer.Secret = types.StringPointerValue(var0.Protocol.BgpPeer.Secret)
				}
			}

			var1.Region = types.StringValue(var0.Region)

			var1.SecondaryIpsecTunnel = types.StringPointerValue(var0.SecondaryIpsecTunnel)

			var1.SpnName = types.StringPointerValue(var0.SpnName)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Subnets)
			var1.Subnets = var4
			resp.Diagnostics.Append(var5.Errors()...)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &remoteNetworkDataSource{}
	_ datasource.DataSourceWithConfigure = &remoteNetworkDataSource{}
)

func NewRemoteNetworkDataSource() datasource.DataSource {
	return &remoteNetworkDataSource{}
}

type remoteNetworkDataSource struct {
	client *scm.Client
}

// remoteNetworkDsModel is the model.
type remoteNetworkDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Folder types.String `tfsdk:"folder"`
	Id     types.String `tfsdk:"id"`

	// Output.
	EcmpLoadBalancing types.String                                    `tfsdk:"ecmp_load_balancing"`
	EcmpTunnels       []remoteNetworkDsModel_uewNibC_EcmpTunnelObject `tfsdk:"ecmp_tunnels"`
	// omit input: id
	IpsecTunnel          types.String                                 `tfsdk:"ipsec_tunnel"`
	LicenseType          types.String                                 `tfsdk:"license_type"`
	Name                 types.String                                 `tfsdk:"name"`
	Protocol             *remoteNetworkDsModel_uewNibC_ProtocolObject `tfsdk:"protocol"`
	Region               types.String                                 `tfsdk:"region"`
	SecondaryIpsecTunnel types.String                                 `tfsdk:"secondary_ipsec_tunnel"`
	SpnName              types.String                                 `tfsdk:"spn_name"`
	Subnets              types.List                                   `tfsdk:"subnets"`
}

type remoteNetworkDsModel_uewNibC_EcmpTunnelObject struct {
	IpsecTunnel types.String                                    `tfsdk:"ipsec_tunnel"`
	Name        types.String                                    `tfsdk:"name"`
	Protocol    remoteNetworkDsModel_uewNibC_EcmpProtocolObject `tfsdk:"protocol"`
}

type remoteNetworkDsModel_uewNibC_EcmpProtocolObject struct {
	Bgp *remoteNetworkDsModel_fVAkWHS_Config `tfsdk:"bgp"`
}

type remoteNetworkDsModel_fVAkWHS_Config struct {
	DoNotExportRoutes         types.Bool   `tfsdk:"do_not_export_routes"`
	Enable                    types.Bool   `tfsdk:"enable"`
	LocalIpAddress            types.String `tfsdk:"local_ip_address"`
	OriginateDefaultRoute     types.Bool   `tfsdk:"originate_default_route"`
	PeerAs                    types.String `tfsdk:"peer_as"`
	PeerIpAddress             types.String `tfsdk:"peer_ip_address"`
	PeeringType               types.String `tfsdk:"peering_type"`
	Secret                    types.String `tfsdk:"secret"`
	SummarizeMobileUserRoutes types.Bool   `tfsdk:"summarize_mobile_user_routes"`
}

type remoteNetworkDsModel_uewNibC_ProtocolObject struct {
	Bgp     *remoteNetworkDsModel_fVAkWHS_Config        `tfsdk:"bgp"`
	BgpPeer *remoteNetworkDsModel_uewNibC_BgpPeerObject `tfsdk:"bgp_peer"`
}

type remoteNetworkDsModel_uewNibC_BgpPeerObject struct {
	LocalIpAddress types.String `tfsdk:"local_ip_address"`
	PeerIpAddress  types.String `tfsdk:"peer_ip_address"`
	SameAsPrimary  types.Bool   `tfsdk:"same_as_primary"`
	Secret         types.String `tfsdk:"secret"`
}

// Metadata returns the data source type name.
func (d *remoteNetworkDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_remote_network"
}

// Schema defines the schema for this data source.
func (d *remoteNetworkDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"folder":true, "id":true} outputs:map[string]bool{"ecmp_load_balancing":true, "ecmp_tunnels":true, "id":true, "ipsec_tunnel":true, "license_type":true, "name":true, "protocol":true, "region":true, "secondary_ipsec_tunnel":true, "spn_name":true, "subnets":true, "tfid":true} forceNew:map[string]bool{"folder":true, "id":true}
			"ecmp_load_balancing": dsschema.StringAttribute{
				Description: "The EcmpLoadBalancing param. String must be one of these: `\"enable\"`, `\"disable\"`. Default: `\"disable\"`.",
				Computed:    true,
			},
			"ecmp_tunnels": dsschema.ListNestedAttribute{
				Description: "ecmp_tunnels is required when ecmp_load_balancing is enable.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"ipsec_tunnel":true, "name":true, "protocol":true} forceNew:map[string]bool(nil)
						"ipsec_tunnel": dsschema.StringAttribute{
							Description: "The IpsecTunnel param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"protocol": dsschema.SingleNestedAttribute{
							Description: "The Protocol param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"bgp":true} forceNew:map[string]bool(nil)
								"bgp": dsschema.SingleNestedAttribute{
									Description: "The Bgp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "peering_type":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
										"do_not_export_routes": dsschema.BoolAttribute{
											Description: "The DoNotExportRoutes param.",
											Computed:    true,
										},
										"enable": dsschema.BoolAttribute{
											Description: "to setup bgp protocol, enable need to set as true.",
											Computed:    true,
										},
										"local_ip_address": dsschema.StringAttribute{
											Description: "The LocalIpAddress param.",
											Computed:    true,
										},
										"originate_default_route": dsschema.BoolAttribute{
											Description: "The OriginateDefaultRoute param.",
											Computed:    true,
										},
										"peer_as": dsschema.StringAttribute{
											Description: "The PeerAs param.",
											Computed:    true,
										},
										"peer_ip_address": dsschema.StringAttribute{
											Description: "The PeerIpAddress param.",
											Computed:    true,
										},
										"peering_type": dsschema.StringAttribute{
											Description: "Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `\"exchange-v4-over-v4\"`, `\"exchange-v4-v6-over-v4\"`, `\"exchange-v4-over-v4-v6-over-v6\"`, `\"exchange-v6-over-v6\"`.",
											Computed:    true,
										},
										"secret": dsschema.StringAttribute{
											Description: "The Secret param.",
											Computed:    true,
											Sensitive:   true,
										},
										"summarize_mobile_user_routes": dsschema.BoolAttribute{
											Description: "The SummarizeMobileUserRoutes param.",
											Computed:    true,
										},
									},
								},
							},
						},
					},
				},
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Remote Networks\"`) or match this regex: `^[\\s0-9a-zA-Z._-]{1,}$`. Default: `\"Remote Networks\"`.",
				Optional:    true,
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"ipsec_tunnel": dsschema.StringAttribute{
				Description: "ipsec_tunnel is required when ecmp_load_balancing is disable.",
				Computed:    true,
			},
			"license_type": dsschema.StringAttribute{
				Description: "New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `\"FWAAS-AGGREGATE\"`.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"protocol": dsschema.SingleNestedAttribute{
				Description: "setup the protocol when ecmp_load_balancing is disable.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"bgp":true, "bgp_peer":true} forceNew:map[string]bool(nil)
					"bgp": dsschema.SingleNestedAttribute{
						Description: "The Bgp param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "peering_type":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
							"do_not_export_routes": dsschema.BoolAttribute{
								Description: "The DoNotExportRoutes param.",
								Computed:    true,
							},
							"enable": dsschema.BoolAttribute{
								Description: "to setup bgp protocol, enable need to set as true.",
								Computed:    true,
							},
							"local_ip_address": dsschema.StringAttribute{
								Description: "The LocalIpAddress param.",
								Computed:    true,
							},
							"originate_default_route": dsschema.BoolAttribute{
								Description: "The OriginateDefaultRoute param.",
								Computed:    true,
							},
							"peer_as": dsschema.StringAttribute{
								Description: "The PeerAs param.",
								Computed:    true,
							},
							"peer_ip_address": dsschema.StringAttribute{
								Description: "The PeerIpAddress param.",
								Computed:    true,
							},
							"peering_type": dsschema.StringAttribute{
								Description: "Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `\"exchange-v4-over-v4\"`, `\"exchange-v4-v6-over-v4\"`, `\"exchange-v4-over-v4-v6-over-v6\"`, `\"exchange-v6-over-v6\"`.",
								Computed:    true,
							},
							"secret": dsschema.StringAttribute{
								Description: "The Secret param.",
								Computed:    true,
								Sensitive:   true,
							},
							"summarize_mobile_user_routes": dsschema.BoolAttribute{
								Description: "The SummarizeMobileUserRoutes param.",
								Computed:    true,
							},
						},
					},
					"bgp_peer": dsschema.SingleNestedAttribute{
						Description: "secondary bgp routing as bgp_peer.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"local_ip_address":true, "peer_ip_address":true, "same_as_primary":true, "secret":true} forceNew:map[string]bool(nil)
							"local_ip_address": dsschema.StringAttribute{
								Description: "The LocalIpAddress param.",
								Computed:    true,
							},
							"peer_ip_address": dsschema.StringAttribute{
								Description: "The PeerIpAddress param.",
								Computed:    true,
							},
							"same_as_primary": dsschema.BoolAttribute{
								Description: "If true, the secondary BGP peer configuration will be the same as the primary BGP peer. Default: `true`.",
								Computed:    true,
							},
							"secret": dsschema.StringAttribute{
								Description: "The Secret param.",
								Computed:    true,
								Sensitive:   true,
							},
						},
					},
				},
			},
			"region": dsschema.StringAttribute{
				Description: "The Region param. String length must exceed 1 characters.",
				Computed:    true,
			},
			"secondary_ipsec_tunnel": dsschema.StringAttribute{
				Description: "specify secondary ipsec_tunnel if needed.",
				Computed:    true,
			},
			"spn_name": dsschema.StringAttribute{
				Description: "spn-name is needed when license_type is FWAAS-AGGREGATE.",
				Computed:    true,
			},
			"subnets": dsschema.ListAttribute{
				Description: "The Subnets param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *remoteNetworkDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *remoteNetworkDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state remoteNetworkDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_remote_network",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to run the command.
	svc := vqtUUHF.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.ReadInput{}

	input.Id = state.Id.ValueString()

	input.Folder = state.Folder.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Folder)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.EcmpLoadBalancing = types.StringPointerValue(ans.EcmpLoadBalancing)

	if len(ans.EcmpTunnels) == 0 {
		state.EcmpTunnels = nil
	} else {
		state.EcmpTunnels = make([]remoteNetworkDsModel_uewNibC_EcmpTunnelObject, 0, len(ans.EcmpTunnels))
		for _, var0 := range ans.EcmpTunnels {
			var1 := remoteNetworkDsModel_uewNibC_EcmpTunnelObject{}

			var1.IpsecTunnel = types.StringValue(var0.IpsecTunnel)

			var1.Name = types.StringValue(var0.Name)

			var1.Protocol = remoteNetworkDsModel_uewNibC_EcmpProtocolObject{}

			if var0.Protocol.Bgp == nil {
				var1.Protocol.Bgp = nil
			} else {
				var1.Protocol.Bgp = &remoteNetworkDsModel_fVAkWHS_Config{}

				var1.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(var0.Protocol.Bgp.DoNotExportRoutes)

				var1.Protocol.Bgp.Enable = types.BoolPointerValue(var0.Protocol.Bgp.Enable)

				var1.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(var0.Protocol.Bgp.LocalIpAddress)

				var1.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(var0.Protocol.Bgp.OriginateDefaultRoute)

				var1.Protocol.Bgp.PeerAs = types.StringPointerValue(var0.Protocol.Bgp.PeerAs)

				var1.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(var0.Protocol.Bgp.PeerIpAddress)

				var1.Protocol.Bgp.PeeringType = types.StringPointerValue(var0.Protocol.Bgp.PeeringType)

				var1.Protocol.Bgp.Secret = types.StringPointerValue(var0.Protocol.Bgp.Secret)

				var1.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(var0.Protocol.Bgp.SummarizeMobileUserRoutes)
			}
			state.EcmpTunnels = append(state.EcmpTunnels, var1)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.IpsecTunnel = types.StringPointerValue(ans.IpsecTunnel)

	state.LicenseType = types.StringValue(ans.LicenseType)

	state.Name = types.StringValue(ans.Name)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &remoteNetworkDsModel_uewNibC_ProtocolObject{}

		if ans.Protocol.Bgp == nil {
			state.Protocol.Bgp = nil
		} else {
			state.Protocol.Bgp = &remoteNetworkDsModel_fVAkWHS_Config{}

			state.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(ans.Protocol.Bgp.DoNotExportRoutes)

			state.Protocol.Bgp.Enable = types.BoolPointerValue(ans.Protocol.Bgp.Enable)

			state.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(ans.Protocol.Bgp.LocalIpAddress)

			state.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(ans.Protocol.Bgp.OriginateDefaultRoute)

			state.Protocol.Bgp.PeerAs = types.StringPointerValue(ans.Protocol.Bgp.PeerAs)

			state.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(ans.Protocol.Bgp.PeerIpAddress)

			state.Protocol.Bgp.PeeringType = types.StringPointerValue(ans.Protocol.Bgp.PeeringType)

			state.Protocol.Bgp.Secret = types.StringPointerValue(ans.Protocol.Bgp.Secret)

			state.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(ans.Protocol.Bgp.SummarizeMobileUserRoutes)
		}

		if ans.Protocol.BgpPeer == nil {
			state.Protocol.BgpPeer = nil
		} else {
			state.Protocol.BgpPeer = &remoteNetworkDsModel_uewNibC_BgpPeerObject{}

			state.Protocol.BgpPeer.LocalIpAddress = types.StringPointerValue(ans.Protocol.BgpPeer.LocalIpAddress)

			state.Protocol.BgpPeer.PeerIpAddress = types.StringPointerValue(ans.Protocol.BgpPeer.PeerIpAddress)

			state.Protocol.BgpPeer.SameAsPrimary = types.BoolPointerValue(ans.Protocol.BgpPeer.SameAsPrimary)

			state.Protocol.BgpPeer.Secret = types.StringPointerValue(ans.Protocol.BgpPeer.Secret)
		}
	}

	state.Region = types.StringValue(ans.Region)

	state.SecondaryIpsecTunnel = types.StringPointerValue(ans.SecondaryIpsecTunnel)

	state.SpnName = types.StringPointerValue(ans.SpnName)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Subnets)
	state.Subnets = var2
	resp.Diagnostics.Append(var3.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource              = &remoteNetworkResource{}
	_ resource.ResourceWithConfigure = &remoteNetworkResource{}
)

func NewRemoteNetworkResource() resource.Resource {
	return &remoteNetworkResource{}
}

type remoteNetworkResource struct {
	client *scm.Client
}

// remoteNetworkRsModel is the model.
type remoteNetworkRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	EcmpLoadBalancing    types.String                                    `tfsdk:"ecmp_load_balancing"`
	EcmpTunnels          []remoteNetworkRsModel_uewNibC_EcmpTunnelObject `tfsdk:"ecmp_tunnels"`
	Folder               types.String                                    `tfsdk:"folder"`
	Id                   types.String                                    `tfsdk:"id"`
	IpsecTunnel          types.String                                    `tfsdk:"ipsec_tunnel"`
	LicenseType          types.String                                    `tfsdk:"license_type"`
	Name                 types.String                                    `tfsdk:"name"`
	Protocol             *remoteNetworkRsModel_uewNibC_ProtocolObject    `tfsdk:"protocol"`
	Region               types.String                                    `tfsdk:"region"`
	SecondaryIpsecTunnel types.String                                    `tfsdk:"secondary_ipsec_tunnel"`
	SpnName              types.String                                    `tfsdk:"spn_name"`
	Subnets              types.List                                      `tfsdk:"subnets"`

	// Output.
	EncryptedValues types.Map `tfsdk:"encrypted_values"`
	// omit input: ecmp_load_balancing
	// omit input: ecmp_tunnels
	// omit input: id
	// omit input: ipsec_tunnel
	// omit input: license_type
	// omit input: name
	// omit input: protocol
	// omit input: region
	// omit input: secondary_ipsec_tunnel
	// omit input: spn_name
	// omit input: subnets
}

type remoteNetworkRsModel_uewNibC_EcmpTunnelObject struct {
	IpsecTunnel types.String                                    `tfsdk:"ipsec_tunnel"`
	Name        types.String                                    `tfsdk:"name"`
	Protocol    remoteNetworkRsModel_uewNibC_EcmpProtocolObject `tfsdk:"protocol"`
}

type remoteNetworkRsModel_uewNibC_EcmpProtocolObject struct {
	Bgp *remoteNetworkRsModel_fVAkWHS_Config `tfsdk:"bgp"`
}

type remoteNetworkRsModel_fVAkWHS_Config struct {
	DoNotExportRoutes         types.Bool   `tfsdk:"do_not_export_routes"`
	Enable                    types.Bool   `tfsdk:"enable"`
	LocalIpAddress            types.String `tfsdk:"local_ip_address"`
	OriginateDefaultRoute     types.Bool   `tfsdk:"originate_default_route"`
	PeerAs                    types.String `tfsdk:"peer_as"`
	PeerIpAddress             types.String `tfsdk:"peer_ip_address"`
	PeeringType               types.String `tfsdk:"peering_type"`
	Secret                    types.String `tfsdk:"secret"`
	SummarizeMobileUserRoutes types.Bool   `tfsdk:"summarize_mobile_user_routes"`
}

type remoteNetworkRsModel_uewNibC_ProtocolObject struct {
	Bgp     *remoteNetworkRsModel_fVAkWHS_Config        `tfsdk:"bgp"`
	BgpPeer *remoteNetworkRsModel_uewNibC_BgpPeerObject `tfsdk:"bgp_peer"`
}

type remoteNetworkRsModel_uewNibC_BgpPeerObject struct {
	LocalIpAddress types.String `tfsdk:"local_ip_address"`
	PeerIpAddress  types.String `tfsdk:"peer_ip_address"`
	SameAsPrimary  types.Bool   `tfsdk:"same_as_primary"`
	Secret         types.String `tfsdk:"secret"`
}

// Metadata returns the data source type name.
func (r *remoteNetworkResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_remote_network"
}

// Schema defines the schema for this data source.
func (r *remoteNetworkResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"ecmp_load_balancing":true, "ecmp_tunnels":true, "folder":true, "id":true, "ipsec_tunnel":true, "license_type":true, "name":true, "protocol":true, "region":true, "secondary_ipsec_tunnel":true, "spn_name":true, "subnets":true} outputs:map[string]bool{"ecmp_load_balancing":true, "ecmp_tunnels":true, "id":true, "ipsec_tunnel":true, "license_type":true, "name":true, "protocol":true, "region":true, "secondary_ipsec_tunnel":true, "spn_name":true, "subnets":true, "tfid":true} forceNew:map[string]bool{"folder":true}
			"encrypted_values": rsschema.MapAttribute{
				Description: "(Internal use) Encrypted values returned from the API.",
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},
			"ecmp_load_balancing": rsschema.StringAttribute{
				Description: "The EcmpLoadBalancing param. String must be one of these: `\"enable\"`, `\"disable\"`. Default: `\"disable\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("disable"),
				Validators: []validator.String{
					stringvalidator.OneOf("enable", "disable"),
				},
			},
			"ecmp_tunnels": rsschema.ListNestedAttribute{
				Description: "ecmp_tunnels is required when ecmp_load_balancing is enable.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"ipsec_tunnel":true, "name":true, "protocol":true} outputs:map[string]bool{"ipsec_tunnel":true, "name":true, "protocol":true} forceNew:map[string]bool(nil)
						"ipsec_tunnel": rsschema.StringAttribute{
							Description: "The IpsecTunnel param.",
							Required:    true,
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Required:    true,
						},
						"protocol": rsschema.SingleNestedAttribute{
							Description: "The Protocol param.",
							Required:    true,
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"bgp":true} outputs:map[string]bool{"bgp":true} forceNew:map[string]bool(nil)
								"bgp": rsschema.SingleNestedAttribute{
									Description: "The Bgp param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"do_not_export_routes":true, "enable":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "peering_type":true, "secret":true, "summarize_mobile_user_routes":true} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "peering_type":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
										"do_not_export_routes": rsschema.BoolAttribute{
											Description: "The DoNotExportRoutes param.",
											Optional:    true,
										},
										"enable": rsschema.BoolAttribute{
											Description: "to setup bgp protocol, enable need to set as true.",
											Optional:    true,
										},
										"local_ip_address": rsschema.StringAttribute{
											Description: "The LocalIpAddress param.",
											Optional:    true,
										},
										"originate_default_route": rsschema.BoolAttribute{
											Description: "The OriginateDefaultRoute param.",
											Optional:    true,
										},
										"peer_as": rsschema.StringAttribute{
											Description: "The PeerAs param.",
											Optional:    true,
										},
										"peer_ip_address": rsschema.StringAttribute{
											Description: "The PeerIpAddress param.",
											Optional:    true,
										},
										"peering_type": rsschema.StringAttribute{
											Description: "Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `\"exchange-v4-over-v4\"`, `\"exchange-v4-v6-over-v4\"`, `\"exchange-v4-over-v4-v6-over-v6\"`, `\"exchange-v6-over-v6\"`.",
											Optional:    true,
											Validators: []validator.String{
												stringvalidator.OneOf("exchange-v4-over-v4", "exchange-v4-v6-over-v4", "exchange-v4-over-v4-v6-over-v6", "exchange-v6-over-v6"),
											},
										},
										"secret": rsschema.StringAttribute{
											Description: "The Secret param.",
											Optional:    true,
											Sensitive:   true,
										},
										"summarize_mobile_user_routes": rsschema.BoolAttribute{
											Description: "The SummarizeMobileUserRoutes param.",
											Optional:    true,
										},
									},
								},
							},
						},
					},
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Remote Networks\"`) or match this regex: `^[\\s0-9a-zA-Z._-]{1,}$`. Default: `\"Remote Networks\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("Remote Networks"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[\\s0-9a-zA-Z._-]{1,}$|^Remote Networks$"), ""),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"ipsec_tunnel": rsschema.StringAttribute{
				Description: "ipsec_tunnel is required when ecmp_load_balancing is disable.",
				Optional:    true,
			},
			"license_type": rsschema.StringAttribute{
				Description: "New customer will only be on aggregate bandwidth licensing. String length must exceed 1 characters. Default: `\"FWAAS-AGGREGATE\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("FWAAS-AGGREGATE"),
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"protocol": rsschema.SingleNestedAttribute{
				Description: "setup the protocol when ecmp_load_balancing is disable.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"bgp":true, "bgp_peer":true} outputs:map[string]bool{"bgp":true, "bgp_peer":true} forceNew:map[string]bool(nil)
					"bgp": rsschema.SingleNestedAttribute{
						Description: "The Bgp param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"do_not_export_routes":true, "enable":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "peering_type":true, "secret":true, "summarize_mobile_user_routes":true} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "peering_type":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
							"do_not_export_routes": rsschema.BoolAttribute{
								Description: "The DoNotExportRoutes param.",
								Optional:    true,
							},
							"enable": rsschema.BoolAttribute{
								Description: "to setup bgp protocol, enable need to set as true.",
								Optional:    true,
							},
							"local_ip_address": rsschema.StringAttribute{
								Description: "The LocalIpAddress param.",
								Optional:    true,
							},
							"originate_default_route": rsschema.BoolAttribute{
								Description: "The OriginateDefaultRoute param.",
								Optional:    true,
							},
							"peer_as": rsschema.StringAttribute{
								Description: "The PeerAs param.",
								Optional:    true,
							},
							"peer_ip_address": rsschema.StringAttribute{
								Description: "The PeerIpAddress param.",
								Optional:    true,
							},
							"peering_type": rsschema.StringAttribute{
								Description: "Exchange Routes: exchange-v4-over-v4 stands for Exchange IPv4 routes over IPv4 peering. exchange-v4-v6-over-v4 stands for Exchange both IPv4 and IPv6 routes over IPv4 peering. exchange-v4-over-v4-v6-over-v6 stands for Exchange IPv4 routes over IPv4 peer and IPv6 route over IPv6 peer. exchange-v6-over-v6 stands for Exchange IPv6 routes over IPv6 peering. String must be one of these: `\"exchange-v4-over-v4\"`, `\"exchange-v4-v6-over-v4\"`, `\"exchange-v4-over-v4-v6-over-v6\"`, `\"exchange-v6-over-v6\"`.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.OneOf("exchange-v4-over-v4", "exchange-v4-v6-over-v4", "exchange-v4-over-v4-v6-over-v6", "exchange-v6-over-v6"),
								},
							},
							"secret": rsschema.StringAttribute{
								Description: "The Secret param.",
								Optional:    true,
								Sensitive:   true,
							},
							"summarize_mobile_user_routes": rsschema.BoolAttribute{
								Description: "The SummarizeMobileUserRoutes param.",
								Optional:    true,
							},
						},
					},
					"bgp_peer": rsschema.SingleNestedAttribute{
						Description: "secondary bgp routing as bgp_peer.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"local_ip_address":true, "peer_ip_address":true, "same_as_primary":true, "secret":true} outputs:map[string]bool{"local_ip_address":true, "peer_ip_address":true, "same_as_primary":true, "secret":true} forceNew:map[string]bool(nil)
							"local_ip_address": rsschema.StringAttribute{
								Description: "The LocalIpAddress param.",
								Optional:    true,
							},
							"peer_ip_address": rsschema.StringAttribute{
								Description: "The PeerIpAddress param.",
								Optional:    true,
							},
							"same_as_primary": rsschema.BoolAttribute{
								Description: "If true, the secondary BGP peer configuration will be the same as the primary BGP peer. Default: `true`.",
								Optional:    true,
								Computed:    true,
								Default:     booldefault.StaticBool(true),
							},
							"secret": rsschema.StringAttribute{
								Description: "The Secret param.",
								Optional:    true,
								Sensitive:   true,
							},
						},
					},
				},
			},
			"region": rsschema.StringAttribute{
				Description: "The Region param. String length must exceed 1 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(1),
				},
			},
			"secondary_ipsec_tunnel": rsschema.StringAttribute{
				Description: "specify secondary ipsec_tunnel if needed.",
				Optional:    true,
			},
			"spn_name": rsschema.StringAttribute{
				Description: "spn-name is needed when license_type is FWAAS-AGGREGATE.",
				Optional:    true,
			},
			"subnets": rsschema.ListAttribute{
				Description: "The Subnets param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *remoteNetworkResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *remoteNetworkResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state remoteNetworkRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String)

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_remote_network",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to create the config.
	svc := vqtUUHF.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.CreateInput{}

	input.Folder = state.Folder.ValueString()
	input.Request = &uewNibC.Config{}

	input.Request.EcmpLoadBalancing = state.EcmpLoadBalancing.ValueStringPointer()

	if len(state.EcmpTunnels) != 0 {
		input.Request.EcmpTunnels = make([]uewNibC.EcmpTunnelObject, 0, len(state.EcmpTunnels))
		for _, var0 := range state.EcmpTunnels {
			var var1 uewNibC.EcmpTunnelObject

			var1.IpsecTunnel = var0.IpsecTunnel.ValueString()

			var1.Name = var0.Name.ValueString()

			if var0.Protocol.Bgp != nil {
				var1.Protocol.Bgp = &fVAkWHS.Config{}

				var1.Protocol.Bgp.DoNotExportRoutes = var0.Protocol.Bgp.DoNotExportRoutes.ValueBoolPointer()

				var1.Protocol.Bgp.Enable = var0.Protocol.Bgp.Enable.ValueBoolPointer()

				var1.Protocol.Bgp.LocalIpAddress = var0.Protocol.Bgp.LocalIpAddress.ValueStringPointer()

				var1.Protocol.Bgp.OriginateDefaultRoute = var0.Protocol.Bgp.OriginateDefaultRoute.ValueBoolPointer()

				var1.Protocol.Bgp.PeerAs = var0.Protocol.Bgp.PeerAs.ValueStringPointer()

				var1.Protocol.Bgp.PeerIpAddress = var0.Protocol.Bgp.PeerIpAddress.ValueStringPointer()

				var1.Protocol.Bgp.PeeringType = var0.Protocol.Bgp.PeeringType.ValueStringPointer()

				var2 := "with_param_value | plaintext | local_ip_address | " + var0.Protocol.Bgp.LocalIpAddress.ValueString() + " | secret"
				ev[var2] = var0.Protocol.Bgp.Secret
				var1.Protocol.Bgp.Secret = var0.Protocol.Bgp.Secret.ValueStringPointer()

				var1.Protocol.Bgp.SummarizeMobileUserRoutes = var0.Protocol.Bgp.SummarizeMobileUserRoutes.ValueBoolPointer()
			}
			input.Request.EcmpTunnels = append(input.Request.EcmpTunnels, var1)
		}
	}

	input.Request.IpsecTunnel = state.IpsecTunnel.ValueStringPointer()

	input.Request.LicenseType = state.LicenseType.ValueString()

	input.Request.Name = state.Name.ValueString()

	if state.Protocol != nil {
		input.Request.Protocol = &uewNibC.ProtocolObject{}

		if state.Protocol.Bgp != nil {
			input.Request.Protocol.Bgp = &fVAkWHS.Config{}

			input.Request.Protocol.Bgp.DoNotExportRoutes = state.Protocol.Bgp.DoNotExportRoutes.ValueBoolPointer()

			input.Request.Protocol.Bgp.Enable = state.Protocol.Bgp.Enable.ValueBoolPointer()

			input.Request.Protocol.Bgp.LocalIpAddress = state.Protocol.Bgp.LocalIpAddress.ValueStringPointer()

			input.Request.Protocol.Bgp.OriginateDefaultRoute = state.Protocol.Bgp.OriginateDefaultRoute.ValueBoolPointer()

			input.Request.Protocol.Bgp.PeerAs = state.Protocol.Bgp.PeerAs.ValueStringPointer()

			input.Request.Protocol.Bgp.PeerIpAddress = state.Protocol.Bgp.PeerIpAddress.ValueStringPointer()

			input.Request.Protocol.Bgp.PeeringType = state.Protocol.Bgp.PeeringType.ValueStringPointer()

			var3 := "with_param_value | plaintext | local_ip_address | " + state.Protocol.Bgp.LocalIpAddress.ValueString() + " | secret"
			ev[var3] = state.Protocol.Bgp.Secret
			input.Request.Protocol.Bgp.Secret = state.Protocol.Bgp.Secret.ValueStringPointer()

			input.Request.Protocol.Bgp.SummarizeMobileUserRoutes = state.Protocol.Bgp.SummarizeMobileUserRoutes.ValueBoolPointer()
		}

		if state.Protocol.BgpPeer != nil {
			input.Request.Protocol.BgpPeer = &uewNibC.BgpPeerObject{}

			input.Request.Protocol.BgpPeer.LocalIpAddress = state.Protocol.BgpPeer.LocalIpAddress.ValueStringPointer()

			input.Request.Protocol.BgpPeer.PeerIpAddress = state.Protocol.BgpPeer.PeerIpAddress.ValueStringPointer()

			input.Request.Protocol.BgpPeer.SameAsPrimary = state.Protocol.BgpPeer.SameAsPrimary.ValueBoolPointer()

			input.Request.Protocol.BgpPeer.Secret = state.Protocol.BgpPeer.Secret.ValueStringPointer()
		}
	}

	input.Request.Region = state.Region.ValueString()

	input.Request.SecondaryIpsecTunnel = state.SecondaryIpsecTunnel.ValueStringPointer()

	input.Request.SpnName = state.SpnName.ValueStringPointer()

	resp.Diagnostics.Append(state.Subnets.ElementsAs(ctx, &input.Request.Subnets, false)...)
	//if len(state.Subnets) != 0 {
	//    input.Request.Subnets = make([]string, 0, len(state.Subnets))
	//    for _, var4 := range state.Subnets {
	//        input.Request.Subnets = append(input.Request.Subnets, var4.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.EcmpLoadBalancing = types.StringPointerValue(ans.EcmpLoadBalancing)

	if len(ans.EcmpTunnels) == 0 {
		state.EcmpTunnels = nil
	} else {
		state.EcmpTunnels = make([]remoteNetworkRsModel_uewNibC_EcmpTunnelObject, 0, len(ans.EcmpTunnels))
		for _, var5 := range ans.EcmpTunnels {
			var6 := remoteNetworkRsModel_uewNibC_EcmpTunnelObject{}

			var6.IpsecTunnel = types.StringValue(var5.IpsecTunnel)

			var6.Name = types.StringValue(var5.Name)

			var6.Protocol = remoteNetworkRsModel_uewNibC_EcmpProtocolObject{}

			if var5.Protocol.Bgp == nil {
				var6.Protocol.Bgp = nil
			} else {
				var6.Protocol.Bgp = &remoteNetworkRsModel_fVAkWHS_Config{}

				var6.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(var5.Protocol.Bgp.DoNotExportRoutes)

				var6.Protocol.Bgp.Enable = types.BoolPointerValue(var5.Protocol.Bgp.Enable)

				var6.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(var5.Protocol.Bgp.LocalIpAddress)

				var6.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(var5.Protocol.Bgp.OriginateDefaultRoute)

				var6.Protocol.Bgp.PeerAs = types.StringPointerValue(var5.Protocol.Bgp.PeerAs)

				var6.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(var5.Protocol.Bgp.PeerIpAddress)

				var6.Protocol.Bgp.PeeringType = types.StringPointerValue(var5.Protocol.Bgp.PeeringType)

				var7 := "with_param_value | encrypted | local_ip_address | "
				if var5.Protocol.Bgp.LocalIpAddress != nil {
					// NOTE: this is where the fmt or strconv will need to happen.
					var7 += *var5.Protocol.Bgp.LocalIpAddress
				}
				var7 += " | secret"
				ev[var7] = types.StringPointerValue(var5.Protocol.Bgp.Secret)

				var8 := "with_param_value | plaintext | local_ip_address | "
				if var5.Protocol.Bgp.LocalIpAddress != nil {
					// NOTE: this is where the fmt or strconv will need to happen.
					var8 += *var5.Protocol.Bgp.LocalIpAddress
				}
				var8 += " | secret"
				var6.Protocol.Bgp.Secret = ev[var8]

				var6.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(var5.Protocol.Bgp.SummarizeMobileUserRoutes)
			}
			state.EcmpTunnels = append(state.EcmpTunnels, var6)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.IpsecTunnel = types.StringPointerValue(ans.IpsecTunnel)

	state.LicenseType = types.StringValue(ans.LicenseType)

	state.Name = types.StringValue(ans.Name)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &remoteNetworkRsModel_uewNibC_ProtocolObject{}

		if ans.Protocol.Bgp == nil {
			state.Protocol.Bgp = nil
		} else {
			state.Protocol.Bgp = &remoteNetworkRsModel_fVAkWHS_Config{}

			state.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(ans.Protocol.Bgp.DoNotExportRoutes)

			state.Protocol.Bgp.Enable = types.BoolPointerValue(ans.Protocol.Bgp.Enable)

			state.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(ans.Protocol.Bgp.LocalIpAddress)

			state.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(ans.Protocol.Bgp.OriginateDefaultRoute)

			state.Protocol.Bgp.PeerAs = types.StringPointerValue(ans.Protocol.Bgp.PeerAs)

			state.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(ans.Protocol.Bgp.PeerIpAddress)

			state.Protocol.Bgp.PeeringType = types.StringPointerValue(ans.Protocol.Bgp.PeeringType)

			var9 := "with_param_value | encrypted | local_ip_address | "
			if ans.Protocol.Bgp.LocalIpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var9 += *ans.Protocol.Bgp.LocalIpAddress
			}
			var9 += " | secret"
			ev[var9] = types.StringPointerValue(ans.Protocol.Bgp.Secret)

			var10 := "with_param_value | plaintext | local_ip_address | "
			if ans.Protocol.Bgp.LocalIpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var10 += *ans.Protocol.Bgp.LocalIpAddress
			}
			var10 += " | secret"
			state.Protocol.Bgp.Secret = ev[var10]

			state.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(ans.Protocol.Bgp.SummarizeMobileUserRoutes)
		}

		if ans.Protocol.BgpPeer == nil {
			state.Protocol.BgpPeer = nil
		} else {
			state.Protocol.BgpPeer = &remoteNetworkRsModel_uewNibC_BgpPeerObject{}

			state.Protocol.BgpPeer.LocalIpAddress = types.StringPointerValue(ans.Protocol.BgpPeer.LocalIpAddress)

			state.Protocol.BgpPeer.PeerIpAddress = types.StringPointerValue(ans.Protocol.BgpPeer.PeerIpAddress)

			state.Protocol.BgpPeer.SameAsPrimary = types.BoolPointerValue(ans.Protocol.BgpPeer.SameAsPrimary)

			state.Protocol.BgpPeer.Secret = types.StringPointerValue(ans.Protocol.BgpPeer.Secret)
		}
	}

	state.Region = types.StringValue(ans.Region)

	state.SecondaryIpsecTunnel = types.StringPointerValue(ans.SecondaryIpsecTunnel)

	state.SpnName = types.StringPointerValue(ans.SpnName)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Subnets)
	state.Subnets = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var13
	resp.Diagnostics.Append(var14.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *remoteNetworkResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state remoteNetworkRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(savestate.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_remote_network",
		"locMap":                      map[string]int{"folder": 0, "id": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := vqtUUHF.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.ReadInput{}

	input.Id = tokens[1]

	input.Folder = tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}
	state.Tfid = savestate.Tfid

	state.EcmpLoadBalancing = types.StringPointerValue(ans.EcmpLoadBalancing)

	if len(ans.EcmpTunnels) == 0 {
		state.EcmpTunnels = nil
	} else {
		state.EcmpTunnels = make([]remoteNetworkRsModel_uewNibC_EcmpTunnelObject, 0, len(ans.EcmpTunnels))
		for _, var0 := range ans.EcmpTunnels {
			var1 := remoteNetworkRsModel_uewNibC_EcmpTunnelObject{}

			var1.IpsecTunnel = types.StringValue(var0.IpsecTunnel)

			var1.Name = types.StringValue(var0.Name)

			var1.Protocol = remoteNetworkRsModel_uewNibC_EcmpProtocolObject{}

			if var0.Protocol.Bgp == nil {
				var1.Protocol.Bgp = nil
			} else {
				var1.Protocol.Bgp = &remoteNetworkRsModel_fVAkWHS_Config{}

				var1.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(var0.Protocol.Bgp.DoNotExportRoutes)

				var1.Protocol.Bgp.Enable = types.BoolPointerValue(var0.Protocol.Bgp.Enable)

				var1.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(var0.Protocol.Bgp.LocalIpAddress)

				var1.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(var0.Protocol.Bgp.OriginateDefaultRoute)

				var1.Protocol.Bgp.PeerAs = types.StringPointerValue(var0.Protocol.Bgp.PeerAs)

				var1.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(var0.Protocol.Bgp.PeerIpAddress)

				var1.Protocol.Bgp.PeeringType = types.StringPointerValue(var0.Protocol.Bgp.PeeringType)

				var2 := "with_param_value | encrypted | local_ip_address | "
				if var0.Protocol.Bgp.LocalIpAddress != nil {
					// NOTE: this is where the fmt or strconv will need to happen.
					var2 += *var0.Protocol.Bgp.LocalIpAddress
				}
				var2 += " | secret"
				if ev[var2].Equal(types.StringPointerValue(var0.Protocol.Bgp.Secret)) {

					var3 := "with_param_value | plaintext | local_ip_address | "
					if var0.Protocol.Bgp.LocalIpAddress != nil {
						// NOTE: this is where the fmt or strconv will need to happen.
						var3 += *var0.Protocol.Bgp.LocalIpAddress
					}
					var3 += " | secret"
					var1.Protocol.Bgp.Secret = ev[var3]
				} else {
					var1.Protocol.Bgp.Secret = types.StringNull()
				}

				var1.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(var0.Protocol.Bgp.SummarizeMobileUserRoutes)
			}
			state.EcmpTunnels = append(state.EcmpTunnels, var1)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.IpsecTunnel = types.StringPointerValue(ans.IpsecTunnel)

	state.LicenseType = types.StringValue(ans.LicenseType)

	state.Name = types.StringValue(ans.Name)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &remoteNetworkRsModel_uewNibC_ProtocolObject{}

		if ans.Protocol.Bgp == nil {
			state.Protocol.Bgp = nil
		} else {
			state.Protocol.Bgp = &remoteNetworkRsModel_fVAkWHS_Config{}

			state.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(ans.Protocol.Bgp.DoNotExportRoutes)

			state.Protocol.Bgp.Enable = types.BoolPointerValue(ans.Protocol.Bgp.Enable)

			state.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(ans.Protocol.Bgp.LocalIpAddress)

			state.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(ans.Protocol.Bgp.OriginateDefaultRoute)

			state.Protocol.Bgp.PeerAs = types.StringPointerValue(ans.Protocol.Bgp.PeerAs)

			state.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(ans.Protocol.Bgp.PeerIpAddress)

			state.Protocol.Bgp.PeeringType = types.StringPointerValue(ans.Protocol.Bgp.PeeringType)

			var4 := "with_param_value | encrypted | local_ip_address | "
			if ans.Protocol.Bgp.LocalIpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var4 += *ans.Protocol.Bgp.LocalIpAddress
			}
			var4 += " | secret"
			if ev[var4].Equal(types.StringPointerValue(ans.Protocol.Bgp.Secret)) {

				var5 := "with_param_value | plaintext | local_ip_address | "
				if ans.Protocol.Bgp.LocalIpAddress != nil {
					// NOTE: this is where the fmt or strconv will need to happen.
					var5 += *ans.Protocol.Bgp.LocalIpAddress
				}
				var5 += " | secret"
				state.Protocol.Bgp.Secret = ev[var5]
			} else {
				state.Protocol.Bgp.Secret = types.StringNull()
			}

			state.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(ans.Protocol.Bgp.SummarizeMobileUserRoutes)
		}

		if ans.Protocol.BgpPeer == nil {
			state.Protocol.BgpPeer = nil
		} else {
			state.Protocol.BgpPeer = &remoteNetworkRsModel_uewNibC_BgpPeerObject{}

			state.Protocol.BgpPeer.LocalIpAddress = types.StringPointerValue(ans.Protocol.BgpPeer.LocalIpAddress)

			state.Protocol.BgpPeer.PeerIpAddress = types.StringPointerValue(ans.Protocol.BgpPeer.PeerIpAddress)

			state.Protocol.BgpPeer.SameAsPrimary = types.BoolPointerValue(ans.Protocol.BgpPeer.SameAsPrimary)

			state.Protocol.BgpPeer.Secret = types.StringPointerValue(ans.Protocol.BgpPeer.Secret)
		}
	}

	state.Region = types.StringValue(ans.Region)

	state.SecondaryIpsecTunnel = types.StringPointerValue(ans.SecondaryIpsecTunnel)

	state.SpnName = types.StringPointerValue(ans.SpnName)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Subnets)
	state.Subnets = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var8
	resp.Diagnostics.Append(var9.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *remoteNetworkResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state remoteNetworkRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_remote_network",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := vqtUUHF.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.UpdateInput{}

	if tokens[1] != "" {
		input.Id = tokens[1]
	}
	input.Request = &uewNibC.Config{}

	input.Request.EcmpLoadBalancing = plan.EcmpLoadBalancing.ValueStringPointer()

	if len(plan.EcmpTunnels) != 0 {
		input.Request.EcmpTunnels = make([]uewNibC.EcmpTunnelObject, 0, len(plan.EcmpTunnels))
		for _, var0 := range plan.EcmpTunnels {
			var var1 uewNibC.EcmpTunnelObject

			var1.IpsecTunnel = var0.IpsecTunnel.ValueString()

			var1.Name = var0.Name.ValueString()

			if var0.Protocol.Bgp != nil {
				var1.Protocol.Bgp = &fVAkWHS.Config{}

				var1.Protocol.Bgp.DoNotExportRoutes = var0.Protocol.Bgp.DoNotExportRoutes.ValueBoolPointer()

				var1.Protocol.Bgp.Enable = var0.Protocol.Bgp.Enable.ValueBoolPointer()

				var1.Protocol.Bgp.LocalIpAddress = var0.Protocol.Bgp.LocalIpAddress.ValueStringPointer()

				var1.Protocol.Bgp.OriginateDefaultRoute = var0.Protocol.Bgp.OriginateDefaultRoute.ValueBoolPointer()

				var1.Protocol.Bgp.PeerAs = var0.Protocol.Bgp.PeerAs.ValueStringPointer()

				var1.Protocol.Bgp.PeerIpAddress = var0.Protocol.Bgp.PeerIpAddress.ValueStringPointer()

				var1.Protocol.Bgp.PeeringType = var0.Protocol.Bgp.PeeringType.ValueStringPointer()

				var2 := "with_param_value | plaintext | local_ip_address | " + var0.Protocol.Bgp.LocalIpAddress.ValueString() + " | secret"
				ev[var2] = var0.Protocol.Bgp.Secret
				var1.Protocol.Bgp.Secret = var0.Protocol.Bgp.Secret.ValueStringPointer()

				var1.Protocol.Bgp.SummarizeMobileUserRoutes = var0.Protocol.Bgp.SummarizeMobileUserRoutes.ValueBoolPointer()
			}
			input.Request.EcmpTunnels = append(input.Request.EcmpTunnels, var1)
		}
	}

	input.Request.IpsecTunnel = plan.IpsecTunnel.ValueStringPointer()

	input.Request.LicenseType = plan.LicenseType.ValueString()

	input.Request.Name = plan.Name.ValueString()

	if plan.Protocol != nil {
		input.Request.Protocol = &uewNibC.ProtocolObject{}

		if plan.Protocol.Bgp != nil {
			input.Request.Protocol.Bgp = &fVAkWHS.Config{}

			input.Request.Protocol.Bgp.DoNotExportRoutes = plan.Protocol.Bgp.DoNotExportRoutes.ValueBoolPointer()

			input.Request.Protocol.Bgp.Enable = plan.Protocol.Bgp.Enable.ValueBoolPointer()

			input.Request.Protocol.Bgp.LocalIpAddress = plan.Protocol.Bgp.LocalIpAddress.ValueStringPointer()

			input.Request.Protocol.Bgp.OriginateDefaultRoute = plan.Protocol.Bgp.OriginateDefaultRoute.ValueBoolPointer()

			input.Request.Protocol.Bgp.PeerAs = plan.Protocol.Bgp.PeerAs.ValueStringPointer()

			input.Request.Protocol.Bgp.PeerIpAddress = plan.Protocol.Bgp.PeerIpAddress.ValueStringPointer()

			input.Request.Protocol.Bgp.PeeringType = plan.Protocol.Bgp.PeeringType.ValueStringPointer()

			var3 := "with_param_value | plaintext | local_ip_address | " + plan.Protocol.Bgp.LocalIpAddress.ValueString() + " | secret"
			ev[var3] = plan.Protocol.Bgp.Secret
			input.Request.Protocol.Bgp.Secret = plan.Protocol.Bgp.Secret.ValueStringPointer()

			input.Request.Protocol.Bgp.SummarizeMobileUserRoutes = plan.Protocol.Bgp.SummarizeMobileUserRoutes.ValueBoolPointer()
		}

		if plan.Protocol.BgpPeer != nil {
			input.Request.Protocol.BgpPeer = &uewNibC.BgpPeerObject{}

			input.Request.Protocol.BgpPeer.LocalIpAddress = plan.Protocol.BgpPeer.LocalIpAddress.ValueStringPointer()

			input.Request.Protocol.BgpPeer.PeerIpAddress = plan.Protocol.BgpPeer.PeerIpAddress.ValueStringPointer()

			input.Request.Protocol.BgpPeer.SameAsPrimary = plan.Protocol.BgpPeer.SameAsPrimary.ValueBoolPointer()

			input.Request.Protocol.BgpPeer.Secret = plan.Protocol.BgpPeer.Secret.ValueStringPointer()
		}
	}

	input.Request.Region = plan.Region.ValueString()

	input.Request.SecondaryIpsecTunnel = plan.SecondaryIpsecTunnel.ValueStringPointer()

	input.Request.SpnName = plan.SpnName.ValueStringPointer()

	resp.Diagnostics.Append(plan.Subnets.ElementsAs(ctx, &input.Request.Subnets, false)...)
	//if len(plan.Subnets) != 0 {
	//    input.Request.Subnets = make([]string, 0, len(plan.Subnets))
	//    for _, var4 := range plan.Subnets {
	//        input.Request.Subnets = append(input.Request.Subnets, var4.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.EcmpLoadBalancing = types.StringPointerValue(ans.EcmpLoadBalancing)

	if len(ans.EcmpTunnels) == 0 {
		state.EcmpTunnels = nil
	} else {
		state.EcmpTunnels = make([]remoteNetworkRsModel_uewNibC_EcmpTunnelObject, 0, len(ans.EcmpTunnels))
		for _, var5 := range ans.EcmpTunnels {
			var6 := remoteNetworkRsModel_uewNibC_EcmpTunnelObject{}

			var6.IpsecTunnel = types.StringValue(var5.IpsecTunnel)

			var6.Name = types.StringValue(var5.Name)

			var6.Protocol = remoteNetworkRsModel_uewNibC_EcmpProtocolObject{}

			if var5.Protocol.Bgp == nil {
				var6.Protocol.Bgp = nil
			} else {
				var6.Protocol.Bgp = &remoteNetworkRsModel_fVAkWHS_Config{}

				var6.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(var5.Protocol.Bgp.DoNotExportRoutes)

				var6.Protocol.Bgp.Enable = types.BoolPointerValue(var5.Protocol.Bgp.Enable)

				var6.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(var5.Protocol.Bgp.LocalIpAddress)

				var6.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(var5.Protocol.Bgp.OriginateDefaultRoute)

				var6.Protocol.Bgp.PeerAs = types.StringPointerValue(var5.Protocol.Bgp.PeerAs)

				var6.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(var5.Protocol.Bgp.PeerIpAddress)

				var6.Protocol.Bgp.PeeringType = types.StringPointerValue(var5.Protocol.Bgp.PeeringType)

				var7 := "with_param_value | encrypted | local_ip_address | "
				if var5.Protocol.Bgp.LocalIpAddress != nil {
					// NOTE: this is where the fmt or strconv will need to happen.
					var7 += *var5.Protocol.Bgp.LocalIpAddress
				}
				var7 += " | secret"
				ev[var7] = types.StringPointerValue(var5.Protocol.Bgp.Secret)

				var8 := "with_param_value | plaintext | local_ip_address | "
				if var5.Protocol.Bgp.LocalIpAddress != nil {
					// NOTE: this is where the fmt or strconv will need to happen.
					var8 += *var5.Protocol.Bgp.LocalIpAddress
				}
				var8 += " | secret"
				var6.Protocol.Bgp.Secret = ev[var8]

				var6.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(var5.Protocol.Bgp.SummarizeMobileUserRoutes)
			}
			state.EcmpTunnels = append(state.EcmpTunnels, var6)
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.IpsecTunnel = types.StringPointerValue(ans.IpsecTunnel)

	state.LicenseType = types.StringValue(ans.LicenseType)

	state.Name = types.StringValue(ans.Name)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &remoteNetworkRsModel_uewNibC_ProtocolObject{}

		if ans.Protocol.Bgp == nil {
			state.Protocol.Bgp = nil
		} else {
			state.Protocol.Bgp = &remoteNetworkRsModel_fVAkWHS_Config{}

			state.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(ans.Protocol.Bgp.DoNotExportRoutes)

			state.Protocol.Bgp.Enable = types.BoolPointerValue(ans.Protocol.Bgp.Enable)

			state.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(ans.Protocol.Bgp.LocalIpAddress)

			state.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(ans.Protocol.Bgp.OriginateDefaultRoute)

			state.Protocol.Bgp.PeerAs = types.StringPointerValue(ans.Protocol.Bgp.PeerAs)

			state.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(ans.Protocol.Bgp.PeerIpAddress)

			state.Protocol.Bgp.PeeringType = types.StringPointerValue(ans.Protocol.Bgp.PeeringType)

			var9 := "with_param_value | encrypted | local_ip_address | "
			if ans.Protocol.Bgp.LocalIpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var9 += *ans.Protocol.Bgp.LocalIpAddress
			}
			var9 += " | secret"
			ev[var9] = types.StringPointerValue(ans.Protocol.Bgp.Secret)

			var10 := "with_param_value | plaintext | local_ip_address | "
			if ans.Protocol.Bgp.LocalIpAddress != nil {
				// NOTE: this is where the fmt or strconv will need to happen.
				var10 += *ans.Protocol.Bgp.LocalIpAddress
			}
			var10 += " | secret"
			state.Protocol.Bgp.Secret = ev[var10]

			state.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(ans.Protocol.Bgp.SummarizeMobileUserRoutes)
		}

		if ans.Protocol.BgpPeer == nil {
			state.Protocol.BgpPeer = nil
		} else {
			state.Protocol.BgpPeer = &remoteNetworkRsModel_uewNibC_BgpPeerObject{}

			state.Protocol.BgpPeer.LocalIpAddress = types.StringPointerValue(ans.Protocol.BgpPeer.LocalIpAddress)

			state.Protocol.BgpPeer.PeerIpAddress = types.StringPointerValue(ans.Protocol.BgpPeer.PeerIpAddress)

			state.Protocol.BgpPeer.SameAsPrimary = types.BoolPointerValue(ans.Protocol.BgpPeer.SameAsPrimary)

			state.Protocol.BgpPeer.Secret = types.StringPointerValue(ans.Protocol.BgpPeer.Secret)
		}
	}

	state.Region = types.StringValue(ans.Region)

	state.SecondaryIpsecTunnel = types.StringPointerValue(ans.SecondaryIpsecTunnel)

	state.SpnName = types.StringPointerValue(ans.SpnName)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Subnets)
	state.Subnets = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var13
	resp.Diagnostics.Append(var14.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *remoteNetworkResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_remote_network",
		"locMap":                      map[string]int{"folder": 0, "id": 1},
		"tokens":                      tokens,
	})

	svc := vqtUUHF.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := vqtUUHF.DeleteInput{}

	input.Id = tokens[1]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}
