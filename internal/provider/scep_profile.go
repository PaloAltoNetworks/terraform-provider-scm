package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	nnsRzDg "github.com/paloaltonetworks/scm-go/netsec/schemas/scep/profiles"
	rmBFeLV "github.com/paloaltonetworks/scm-go/netsec/services/scepprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &scepProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &scepProfileListDataSource{}
)

func NewScepProfileListDataSource() datasource.DataSource {
	return &scepProfileListDataSource{}
}

type scepProfileListDataSource struct {
	client *scm.Client
}

// scepProfileListDsModel is the model.
type scepProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []scepProfileListDsModel_nnsRzDg_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type scepProfileListDsModel_nnsRzDg_Config struct {
	Algorithm             *scepProfileListDsModel_nnsRzDg_AlgorithmObject             `tfsdk:"algorithm"`
	CaIdentityName        types.String                                                `tfsdk:"ca_identity_name"`
	CertificateAttributes *scepProfileListDsModel_nnsRzDg_CertificateAttributesObject `tfsdk:"certificate_attributes"`
	Digest                types.String                                                `tfsdk:"digest"`
	Fingerprint           types.String                                                `tfsdk:"fingerprint"`
	Id                    types.String                                                `tfsdk:"id"`
	Name                  types.String                                                `tfsdk:"name"`
	ScepCaCert            types.String                                                `tfsdk:"scep_ca_cert"`
	ScepChallenge         *scepProfileListDsModel_nnsRzDg_ScepChallengeObject         `tfsdk:"scep_challenge"`
	ScepClientCert        types.String                                                `tfsdk:"scep_client_cert"`
	ScepUrl               types.String                                                `tfsdk:"scep_url"`
	Subject               types.String                                                `tfsdk:"subject"`
	UseAsDigitalSignature types.Bool                                                  `tfsdk:"use_as_digital_signature"`
	UseForKeyEncipherment types.Bool                                                  `tfsdk:"use_for_key_encipherment"`
}

type scepProfileListDsModel_nnsRzDg_AlgorithmObject struct {
	Rsa *scepProfileListDsModel_nnsRzDg_RsaObject `tfsdk:"rsa"`
}

type scepProfileListDsModel_nnsRzDg_RsaObject struct {
	RsaNbits types.String `tfsdk:"rsa_nbits"`
}

type scepProfileListDsModel_nnsRzDg_CertificateAttributesObject struct {
	Dnsname                   types.String `tfsdk:"dnsname"`
	Rfc822name                types.String `tfsdk:"rfc822name"`
	UniformResourceIdentifier types.String `tfsdk:"uniform_resource_identifier"`
}

type scepProfileListDsModel_nnsRzDg_ScepChallengeObject struct {
	DynamicChallenge *scepProfileListDsModel_nnsRzDg_DynamicChallengeObject `tfsdk:"dynamic_challenge"`
	Fixed            types.String                                           `tfsdk:"fixed"`
	None             types.String                                           `tfsdk:"none"`
}

type scepProfileListDsModel_nnsRzDg_DynamicChallengeObject struct {
	OtpServerUrl types.String `tfsdk:"otp_server_url"`
	Password     types.String `tfsdk:"password"`
	Username     types.String `tfsdk:"username"`
}

// Metadata returns the data source type name.
func (d *scepProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_scep_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *scepProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"algorithm":true, "ca_identity_name":true, "certificate_attributes":true, "digest":true, "fingerprint":true, "id":true, "name":true, "scep_ca_cert":true, "scep_challenge":true, "scep_client_cert":true, "scep_url":true, "subject":true, "use_as_digital_signature":true, "use_for_key_encipherment":true} forceNew:map[string]bool(nil)
						"algorithm": dsschema.SingleNestedAttribute{
							Description: "The Algorithm param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"rsa":true} forceNew:map[string]bool(nil)
								"rsa": dsschema.SingleNestedAttribute{
									Description: "The Rsa param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"rsa_nbits":true} forceNew:map[string]bool(nil)
										"rsa_nbits": dsschema.StringAttribute{
											Description: "The RsaNbits param.",
											Computed:    true,
										},
									},
								},
							},
						},
						"ca_identity_name": dsschema.StringAttribute{
							Description: "The CaIdentityName param.",
							Computed:    true,
						},
						"certificate_attributes": dsschema.SingleNestedAttribute{
							Description: "The CertificateAttributes param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"dnsname":true, "rfc822name":true, "uniform_resource_identifier":true} forceNew:map[string]bool(nil)
								"dnsname": dsschema.StringAttribute{
									Description: "The Dnsname param.",
									Computed:    true,
								},
								"rfc822name": dsschema.StringAttribute{
									Description: "The Rfc822name param.",
									Computed:    true,
								},
								"uniform_resource_identifier": dsschema.StringAttribute{
									Description: "The UniformResourceIdentifier param.",
									Computed:    true,
								},
							},
						},
						"digest": dsschema.StringAttribute{
							Description: "The Digest param.",
							Computed:    true,
						},
						"fingerprint": dsschema.StringAttribute{
							Description: "The Fingerprint param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
							Computed:    true,
						},
						"scep_ca_cert": dsschema.StringAttribute{
							Description: "The ScepCaCert param.",
							Computed:    true,
						},
						"scep_challenge": dsschema.SingleNestedAttribute{
							Description: "The ScepChallenge param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"dynamic":true, "fixed":true, "none":true} forceNew:map[string]bool(nil)
								"dynamic_challenge": dsschema.SingleNestedAttribute{
									Description: "The DynamicChallenge param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"otp_server_url":true, "password":true, "username":true} forceNew:map[string]bool(nil)
										"otp_server_url": dsschema.StringAttribute{
											Description: "The OtpServerUrl param. String length must not exceed 255 characters.",
											Computed:    true,
										},
										"password": dsschema.StringAttribute{
											Description: "The Password param. String length must not exceed 255 characters.",
											Computed:    true,
											Sensitive:   true,
										},
										"username": dsschema.StringAttribute{
											Description: "The Username param. String length must not exceed 255 characters.",
											Computed:    true,
										},
									},
								},
								"fixed": dsschema.StringAttribute{
									Description: "Challenge to use for SCEP server on mobile clients. String length must not exceed 1024 characters.",
									Computed:    true,
								},
								"none": dsschema.StringAttribute{
									Description: "The None param. String must be one of these: `\"\"`.",
									Computed:    true,
								},
							},
						},
						"scep_client_cert": dsschema.StringAttribute{
							Description: "The ScepClientCert param.",
							Computed:    true,
						},
						"scep_url": dsschema.StringAttribute{
							Description: "The ScepUrl param.",
							Computed:    true,
						},
						"subject": dsschema.StringAttribute{
							Description: "The Subject param.",
							Computed:    true,
						},
						"use_as_digital_signature": dsschema.BoolAttribute{
							Description: "The UseAsDigitalSignature param.",
							Computed:    true,
						},
						"use_for_key_encipherment": dsschema.BoolAttribute{
							Description: "The UseForKeyEncipherment param.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *scepProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *scepProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state scepProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_scep_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := rmBFeLV.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]scepProfileListDsModel_nnsRzDg_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := scepProfileListDsModel_nnsRzDg_Config{}

			if var0.Algorithm == nil {
				var1.Algorithm = nil
			} else {
				var1.Algorithm = &scepProfileListDsModel_nnsRzDg_AlgorithmObject{}

				if var0.Algorithm.Rsa == nil {
					var1.Algorithm.Rsa = nil
				} else {
					var1.Algorithm.Rsa = &scepProfileListDsModel_nnsRzDg_RsaObject{}

					var1.Algorithm.Rsa.RsaNbits = types.StringPointerValue(var0.Algorithm.Rsa.RsaNbits)
				}
			}

			var1.CaIdentityName = types.StringValue(var0.CaIdentityName)

			if var0.CertificateAttributes == nil {
				var1.CertificateAttributes = nil
			} else {
				var1.CertificateAttributes = &scepProfileListDsModel_nnsRzDg_CertificateAttributesObject{}

				var1.CertificateAttributes.Dnsname = types.StringPointerValue(var0.CertificateAttributes.Dnsname)

				var1.CertificateAttributes.Rfc822name = types.StringPointerValue(var0.CertificateAttributes.Rfc822name)

				var1.CertificateAttributes.UniformResourceIdentifier = types.StringPointerValue(var0.CertificateAttributes.UniformResourceIdentifier)
			}

			var1.Digest = types.StringValue(var0.Digest)

			var1.Fingerprint = types.StringPointerValue(var0.Fingerprint)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.ScepCaCert = types.StringPointerValue(var0.ScepCaCert)

			if var0.ScepChallenge == nil {
				var1.ScepChallenge = nil
			} else {
				var1.ScepChallenge = &scepProfileListDsModel_nnsRzDg_ScepChallengeObject{}

				if var0.ScepChallenge.DynamicChallenge == nil {
					var1.ScepChallenge.DynamicChallenge = nil
				} else {
					var1.ScepChallenge.DynamicChallenge = &scepProfileListDsModel_nnsRzDg_DynamicChallengeObject{}

					var1.ScepChallenge.DynamicChallenge.OtpServerUrl = types.StringPointerValue(var0.ScepChallenge.DynamicChallenge.OtpServerUrl)

					var1.ScepChallenge.DynamicChallenge.Password = types.StringPointerValue(var0.ScepChallenge.DynamicChallenge.Password)

					var1.ScepChallenge.DynamicChallenge.Username = types.StringPointerValue(var0.ScepChallenge.DynamicChallenge.Username)
				}

				var1.ScepChallenge.Fixed = types.StringPointerValue(var0.ScepChallenge.Fixed)

				var1.ScepChallenge.None = types.StringPointerValue(var0.ScepChallenge.None)
			}

			var1.ScepClientCert = types.StringPointerValue(var0.ScepClientCert)

			var1.ScepUrl = types.StringValue(var0.ScepUrl)

			var1.Subject = types.StringPointerValue(var0.Subject)

			var1.UseAsDigitalSignature = types.BoolPointerValue(var0.UseAsDigitalSignature)

			var1.UseForKeyEncipherment = types.BoolPointerValue(var0.UseForKeyEncipherment)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &scepProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &scepProfileDataSource{}
)

func NewScepProfileDataSource() datasource.DataSource {
	return &scepProfileDataSource{}
}

type scepProfileDataSource struct {
	client *scm.Client
}

// scepProfileDsModel is the model.
type scepProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Algorithm             *scepProfileDsModel_nnsRzDg_AlgorithmObject             `tfsdk:"algorithm"`
	CaIdentityName        types.String                                            `tfsdk:"ca_identity_name"`
	CertificateAttributes *scepProfileDsModel_nnsRzDg_CertificateAttributesObject `tfsdk:"certificate_attributes"`
	Digest                types.String                                            `tfsdk:"digest"`
	Fingerprint           types.String                                            `tfsdk:"fingerprint"`
	// omit input: id
	Name                  types.String                                    `tfsdk:"name"`
	ScepCaCert            types.String                                    `tfsdk:"scep_ca_cert"`
	ScepChallenge         *scepProfileDsModel_nnsRzDg_ScepChallengeObject `tfsdk:"scep_challenge"`
	ScepClientCert        types.String                                    `tfsdk:"scep_client_cert"`
	ScepUrl               types.String                                    `tfsdk:"scep_url"`
	Subject               types.String                                    `tfsdk:"subject"`
	UseAsDigitalSignature types.Bool                                      `tfsdk:"use_as_digital_signature"`
	UseForKeyEncipherment types.Bool                                      `tfsdk:"use_for_key_encipherment"`
}

type scepProfileDsModel_nnsRzDg_AlgorithmObject struct {
	Rsa *scepProfileDsModel_nnsRzDg_RsaObject `tfsdk:"rsa"`
}

type scepProfileDsModel_nnsRzDg_RsaObject struct {
	RsaNbits types.String `tfsdk:"rsa_nbits"`
}

type scepProfileDsModel_nnsRzDg_CertificateAttributesObject struct {
	Dnsname                   types.String `tfsdk:"dnsname"`
	Rfc822name                types.String `tfsdk:"rfc822name"`
	UniformResourceIdentifier types.String `tfsdk:"uniform_resource_identifier"`
}

type scepProfileDsModel_nnsRzDg_ScepChallengeObject struct {
	DynamicChallenge *scepProfileDsModel_nnsRzDg_DynamicChallengeObject `tfsdk:"dynamic_challenge"`
	Fixed            types.String                                       `tfsdk:"fixed"`
	None             types.String                                       `tfsdk:"none"`
}

type scepProfileDsModel_nnsRzDg_DynamicChallengeObject struct {
	OtpServerUrl types.String `tfsdk:"otp_server_url"`
	Password     types.String `tfsdk:"password"`
	Username     types.String `tfsdk:"username"`
}

// Metadata returns the data source type name.
func (d *scepProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_scep_profile"
}

// Schema defines the schema for this data source.
func (d *scepProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"algorithm":true, "ca_identity_name":true, "certificate_attributes":true, "digest":true, "fingerprint":true, "id":true, "name":true, "scep_ca_cert":true, "scep_challenge":true, "scep_client_cert":true, "scep_url":true, "subject":true, "tfid":true, "use_as_digital_signature":true, "use_for_key_encipherment":true} forceNew:map[string]bool{"id":true}
			"algorithm": dsschema.SingleNestedAttribute{
				Description: "The Algorithm param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"rsa":true} forceNew:map[string]bool(nil)
					"rsa": dsschema.SingleNestedAttribute{
						Description: "The Rsa param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"rsa_nbits":true} forceNew:map[string]bool(nil)
							"rsa_nbits": dsschema.StringAttribute{
								Description: "The RsaNbits param.",
								Computed:    true,
							},
						},
					},
				},
			},
			"ca_identity_name": dsschema.StringAttribute{
				Description: "The CaIdentityName param.",
				Computed:    true,
			},
			"certificate_attributes": dsschema.SingleNestedAttribute{
				Description: "The CertificateAttributes param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"dnsname":true, "rfc822name":true, "uniform_resource_identifier":true} forceNew:map[string]bool(nil)
					"dnsname": dsschema.StringAttribute{
						Description: "The Dnsname param.",
						Computed:    true,
					},
					"rfc822name": dsschema.StringAttribute{
						Description: "The Rfc822name param.",
						Computed:    true,
					},
					"uniform_resource_identifier": dsschema.StringAttribute{
						Description: "The UniformResourceIdentifier param.",
						Computed:    true,
					},
				},
			},
			"digest": dsschema.StringAttribute{
				Description: "The Digest param.",
				Computed:    true,
			},
			"fingerprint": dsschema.StringAttribute{
				Description: "The Fingerprint param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Computed:    true,
			},
			"scep_ca_cert": dsschema.StringAttribute{
				Description: "The ScepCaCert param.",
				Computed:    true,
			},
			"scep_challenge": dsschema.SingleNestedAttribute{
				Description: "The ScepChallenge param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"dynamic":true, "fixed":true, "none":true} forceNew:map[string]bool(nil)
					"dynamic_challenge": dsschema.SingleNestedAttribute{
						Description: "The DynamicChallenge param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"otp_server_url":true, "password":true, "username":true} forceNew:map[string]bool(nil)
							"otp_server_url": dsschema.StringAttribute{
								Description: "The OtpServerUrl param. String length must not exceed 255 characters.",
								Computed:    true,
							},
							"password": dsschema.StringAttribute{
								Description: "The Password param. String length must not exceed 255 characters.",
								Computed:    true,
								Sensitive:   true,
							},
							"username": dsschema.StringAttribute{
								Description: "The Username param. String length must not exceed 255 characters.",
								Computed:    true,
							},
						},
					},
					"fixed": dsschema.StringAttribute{
						Description: "Challenge to use for SCEP server on mobile clients. String length must not exceed 1024 characters.",
						Computed:    true,
					},
					"none": dsschema.StringAttribute{
						Description: "The None param. String must be one of these: `\"\"`.",
						Computed:    true,
					},
				},
			},
			"scep_client_cert": dsschema.StringAttribute{
				Description: "The ScepClientCert param.",
				Computed:    true,
			},
			"scep_url": dsschema.StringAttribute{
				Description: "The ScepUrl param.",
				Computed:    true,
			},
			"subject": dsschema.StringAttribute{
				Description: "The Subject param.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"use_as_digital_signature": dsschema.BoolAttribute{
				Description: "The UseAsDigitalSignature param.",
				Computed:    true,
			},
			"use_for_key_encipherment": dsschema.BoolAttribute{
				Description: "The UseForKeyEncipherment param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *scepProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *scepProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state scepProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_scep_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := rmBFeLV.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.Algorithm == nil {
		state.Algorithm = nil
	} else {
		state.Algorithm = &scepProfileDsModel_nnsRzDg_AlgorithmObject{}

		if ans.Algorithm.Rsa == nil {
			state.Algorithm.Rsa = nil
		} else {
			state.Algorithm.Rsa = &scepProfileDsModel_nnsRzDg_RsaObject{}

			state.Algorithm.Rsa.RsaNbits = types.StringPointerValue(ans.Algorithm.Rsa.RsaNbits)
		}
	}

	state.CaIdentityName = types.StringValue(ans.CaIdentityName)

	if ans.CertificateAttributes == nil {
		state.CertificateAttributes = nil
	} else {
		state.CertificateAttributes = &scepProfileDsModel_nnsRzDg_CertificateAttributesObject{}

		state.CertificateAttributes.Dnsname = types.StringPointerValue(ans.CertificateAttributes.Dnsname)

		state.CertificateAttributes.Rfc822name = types.StringPointerValue(ans.CertificateAttributes.Rfc822name)

		state.CertificateAttributes.UniformResourceIdentifier = types.StringPointerValue(ans.CertificateAttributes.UniformResourceIdentifier)
	}

	state.Digest = types.StringValue(ans.Digest)

	state.Fingerprint = types.StringPointerValue(ans.Fingerprint)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ScepCaCert = types.StringPointerValue(ans.ScepCaCert)

	if ans.ScepChallenge == nil {
		state.ScepChallenge = nil
	} else {
		state.ScepChallenge = &scepProfileDsModel_nnsRzDg_ScepChallengeObject{}

		if ans.ScepChallenge.DynamicChallenge == nil {
			state.ScepChallenge.DynamicChallenge = nil
		} else {
			state.ScepChallenge.DynamicChallenge = &scepProfileDsModel_nnsRzDg_DynamicChallengeObject{}

			state.ScepChallenge.DynamicChallenge.OtpServerUrl = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.OtpServerUrl)

			state.ScepChallenge.DynamicChallenge.Password = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.Password)

			state.ScepChallenge.DynamicChallenge.Username = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.Username)
		}

		state.ScepChallenge.Fixed = types.StringPointerValue(ans.ScepChallenge.Fixed)

		state.ScepChallenge.None = types.StringPointerValue(ans.ScepChallenge.None)
	}

	state.ScepClientCert = types.StringPointerValue(ans.ScepClientCert)

	state.ScepUrl = types.StringValue(ans.ScepUrl)

	state.Subject = types.StringPointerValue(ans.Subject)

	state.UseAsDigitalSignature = types.BoolPointerValue(ans.UseAsDigitalSignature)

	state.UseForKeyEncipherment = types.BoolPointerValue(ans.UseForKeyEncipherment)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource              = &scepProfileResource{}
	_ resource.ResourceWithConfigure = &scepProfileResource{}
)

func NewScepProfileResource() resource.Resource {
	return &scepProfileResource{}
}

type scepProfileResource struct {
	client *scm.Client
}

// scepProfileRsModel is the model.
type scepProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Algorithm             *scepProfileRsModel_nnsRzDg_AlgorithmObject             `tfsdk:"algorithm"`
	CaIdentityName        types.String                                            `tfsdk:"ca_identity_name"`
	CertificateAttributes *scepProfileRsModel_nnsRzDg_CertificateAttributesObject `tfsdk:"certificate_attributes"`
	Device                types.String                                            `tfsdk:"device"`
	Digest                types.String                                            `tfsdk:"digest"`
	Fingerprint           types.String                                            `tfsdk:"fingerprint"`
	Folder                types.String                                            `tfsdk:"folder"`
	Id                    types.String                                            `tfsdk:"id"`
	Name                  types.String                                            `tfsdk:"name"`
	ScepCaCert            types.String                                            `tfsdk:"scep_ca_cert"`
	ScepChallenge         *scepProfileRsModel_nnsRzDg_ScepChallengeObject         `tfsdk:"scep_challenge"`
	ScepClientCert        types.String                                            `tfsdk:"scep_client_cert"`
	ScepUrl               types.String                                            `tfsdk:"scep_url"`
	Snippet               types.String                                            `tfsdk:"snippet"`
	Subject               types.String                                            `tfsdk:"subject"`
	UseAsDigitalSignature types.Bool                                              `tfsdk:"use_as_digital_signature"`
	UseForKeyEncipherment types.Bool                                              `tfsdk:"use_for_key_encipherment"`

	// Output.
	EncryptedValues types.Map `tfsdk:"encrypted_values"`
	// omit input: algorithm
	// omit input: ca_identity_name
	// omit input: certificate_attributes
	// omit input: digest
	// omit input: fingerprint
	// omit input: id
	// omit input: name
	// omit input: scep_ca_cert
	// omit input: scep_challenge
	// omit input: scep_client_cert
	// omit input: scep_url
	// omit input: subject
	// omit input: use_as_digital_signature
	// omit input: use_for_key_encipherment
}

type scepProfileRsModel_nnsRzDg_AlgorithmObject struct {
	Rsa *scepProfileRsModel_nnsRzDg_RsaObject `tfsdk:"rsa"`
}

type scepProfileRsModel_nnsRzDg_RsaObject struct {
	RsaNbits types.String `tfsdk:"rsa_nbits"`
}

type scepProfileRsModel_nnsRzDg_CertificateAttributesObject struct {
	Dnsname                   types.String `tfsdk:"dnsname"`
	Rfc822name                types.String `tfsdk:"rfc822name"`
	UniformResourceIdentifier types.String `tfsdk:"uniform_resource_identifier"`
}

type scepProfileRsModel_nnsRzDg_ScepChallengeObject struct {
	DynamicChallenge *scepProfileRsModel_nnsRzDg_DynamicChallengeObject `tfsdk:"dynamic_challenge"`
	Fixed            types.String                                       `tfsdk:"fixed"`
	None             types.String                                       `tfsdk:"none"`
}

type scepProfileRsModel_nnsRzDg_DynamicChallengeObject struct {
	OtpServerUrl types.String `tfsdk:"otp_server_url"`
	Password     types.String `tfsdk:"password"`
	Username     types.String `tfsdk:"username"`
}

// Metadata returns the data source type name.
func (r *scepProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_scep_profile"
}

// Schema defines the schema for this data source.
func (r *scepProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"algorithm":true, "ca_identity_name":true, "certificate_attributes":true, "device":true, "digest":true, "fingerprint":true, "folder":true, "id":true, "name":true, "scep_ca_cert":true, "scep_challenge":true, "scep_client_cert":true, "scep_url":true, "snippet":true, "subject":true, "use_as_digital_signature":true, "use_for_key_encipherment":true} outputs:map[string]bool{"algorithm":true, "ca_identity_name":true, "certificate_attributes":true, "digest":true, "fingerprint":true, "id":true, "name":true, "scep_ca_cert":true, "scep_challenge":true, "scep_client_cert":true, "scep_url":true, "subject":true, "tfid":true, "use_as_digital_signature":true, "use_for_key_encipherment":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"encrypted_values": rsschema.MapAttribute{
				Description: "(Internal use) Encrypted values returned from the API.",
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},
			"algorithm": rsschema.SingleNestedAttribute{
				Description: "The Algorithm param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"rsa":true} outputs:map[string]bool{"rsa":true} forceNew:map[string]bool(nil)
					"rsa": rsschema.SingleNestedAttribute{
						Description: "The Rsa param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"rsa_nbits":true} outputs:map[string]bool{"rsa_nbits":true} forceNew:map[string]bool(nil)
							"rsa_nbits": rsschema.StringAttribute{
								Description: "The RsaNbits param.",
								Optional:    true,
							},
						},
					},
				},
			},
			"ca_identity_name": rsschema.StringAttribute{
				Description: "The CaIdentityName param.",
				Required:    true,
			},
			"certificate_attributes": rsschema.SingleNestedAttribute{
				Description: "The CertificateAttributes param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"dnsname":true, "rfc822name":true, "uniform_resource_identifier":true} outputs:map[string]bool{"dnsname":true, "rfc822name":true, "uniform_resource_identifier":true} forceNew:map[string]bool(nil)
					"dnsname": rsschema.StringAttribute{
						Description: "The Dnsname param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("rfc822name"),
								path.MatchRelative().AtParent().AtName("uniform_resource_identifier"),
							),
						},
					},
					"rfc822name": rsschema.StringAttribute{
						Description: "The Rfc822name param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`",
						Optional:    true,
					},
					"uniform_resource_identifier": rsschema.StringAttribute{
						Description: "The UniformResourceIdentifier param. Ensure that only one of the following is specified: `dnsname`, `rfc822name`, `uniform_resource_identifier`",
						Optional:    true,
					},
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"digest": rsschema.StringAttribute{
				Description: "The Digest param.",
				Required:    true,
			},
			"fingerprint": rsschema.StringAttribute{
				Description: "The Fingerprint param.",
				Optional:    true,
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(31),
				},
			},
			"scep_ca_cert": rsschema.StringAttribute{
				Description: "The ScepCaCert param.",
				Optional:    true,
			},
			"scep_challenge": rsschema.SingleNestedAttribute{
				Description: "The ScepChallenge param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"dynamic":true, "fixed":true, "none":true} outputs:map[string]bool{"dynamic":true, "fixed":true, "none":true} forceNew:map[string]bool(nil)
					"dynamic_challenge": rsschema.SingleNestedAttribute{
						Description: "The DynamicChallenge param. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`",
						Optional:    true,
						Validators: []validator.Object{
							objectvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("fixed"),
								path.MatchRelative().AtParent().AtName("none"),
							),
						},
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"otp_server_url":true, "password":true, "username":true} outputs:map[string]bool{"otp_server_url":true, "password":true, "username":true} forceNew:map[string]bool(nil)
							"otp_server_url": rsschema.StringAttribute{
								Description: "The OtpServerUrl param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"password": rsschema.StringAttribute{
								Description: "The Password param. String length must not exceed 255 characters.",
								Optional:    true,
								Sensitive:   true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
							"username": rsschema.StringAttribute{
								Description: "The Username param. String length must not exceed 255 characters.",
								Optional:    true,
								Validators: []validator.String{
									stringvalidator.LengthAtMost(255),
								},
							},
						},
					},
					"fixed": rsschema.StringAttribute{
						Description: "Challenge to use for SCEP server on mobile clients. String length must not exceed 1024 characters. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.LengthAtMost(1024),
						},
					},
					"none": rsschema.StringAttribute{
						Description: "The None param. String must be one of these: `\"\"`. Ensure that only one of the following is specified: `dynamic`, `fixed`, `none`",
						Optional:    true,
						Validators: []validator.String{
							stringvalidator.OneOf(""),
						},
					},
				},
			},
			"scep_client_cert": rsschema.StringAttribute{
				Description: "The ScepClientCert param.",
				Optional:    true,
			},
			"scep_url": rsschema.StringAttribute{
				Description: "The ScepUrl param.",
				Required:    true,
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"subject": rsschema.StringAttribute{
				Description: "The Subject param.",
				Optional:    true,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"use_as_digital_signature": rsschema.BoolAttribute{
				Description: "The UseAsDigitalSignature param.",
				Optional:    true,
			},
			"use_for_key_encipherment": rsschema.BoolAttribute{
				Description: "The UseForKeyEncipherment param.",
				Optional:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *scepProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *scepProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state scepProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String)

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_scep_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := rmBFeLV.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &nnsRzDg.Config{}

	if state.Algorithm != nil {
		input.Request.Algorithm = &nnsRzDg.AlgorithmObject{}

		if state.Algorithm.Rsa != nil {
			input.Request.Algorithm.Rsa = &nnsRzDg.RsaObject{}

			input.Request.Algorithm.Rsa.RsaNbits = state.Algorithm.Rsa.RsaNbits.ValueStringPointer()
		}
	}

	input.Request.CaIdentityName = state.CaIdentityName.ValueString()

	if state.CertificateAttributes != nil {
		input.Request.CertificateAttributes = &nnsRzDg.CertificateAttributesObject{}

		input.Request.CertificateAttributes.Dnsname = state.CertificateAttributes.Dnsname.ValueStringPointer()

		input.Request.CertificateAttributes.Rfc822name = state.CertificateAttributes.Rfc822name.ValueStringPointer()

		input.Request.CertificateAttributes.UniformResourceIdentifier = state.CertificateAttributes.UniformResourceIdentifier.ValueStringPointer()
	}

	input.Request.Digest = state.Digest.ValueString()

	input.Request.Fingerprint = state.Fingerprint.ValueStringPointer()

	input.Request.Name = state.Name.ValueString()

	input.Request.ScepCaCert = state.ScepCaCert.ValueStringPointer()

	if state.ScepChallenge != nil {
		input.Request.ScepChallenge = &nnsRzDg.ScepChallengeObject{}

		if state.ScepChallenge.DynamicChallenge != nil {
			input.Request.ScepChallenge.DynamicChallenge = &nnsRzDg.DynamicChallengeObject{}

			input.Request.ScepChallenge.DynamicChallenge.OtpServerUrl = state.ScepChallenge.DynamicChallenge.OtpServerUrl.ValueStringPointer()

			var0 := "with_parent_name | plaintext | scep_challenge | password"
			ev[var0] = state.ScepChallenge.DynamicChallenge.Password
			input.Request.ScepChallenge.DynamicChallenge.Password = state.ScepChallenge.DynamicChallenge.Password.ValueStringPointer()

			input.Request.ScepChallenge.DynamicChallenge.Username = state.ScepChallenge.DynamicChallenge.Username.ValueStringPointer()
		}

		input.Request.ScepChallenge.Fixed = state.ScepChallenge.Fixed.ValueStringPointer()

		input.Request.ScepChallenge.None = state.ScepChallenge.None.ValueStringPointer()
	}

	input.Request.ScepClientCert = state.ScepClientCert.ValueStringPointer()

	input.Request.ScepUrl = state.ScepUrl.ValueString()

	input.Request.Subject = state.Subject.ValueStringPointer()

	input.Request.UseAsDigitalSignature = state.UseAsDigitalSignature.ValueBoolPointer()

	input.Request.UseForKeyEncipherment = state.UseForKeyEncipherment.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.Algorithm == nil {
		state.Algorithm = nil
	} else {
		state.Algorithm = &scepProfileRsModel_nnsRzDg_AlgorithmObject{}

		if ans.Algorithm.Rsa == nil {
			state.Algorithm.Rsa = nil
		} else {
			state.Algorithm.Rsa = &scepProfileRsModel_nnsRzDg_RsaObject{}

			state.Algorithm.Rsa.RsaNbits = types.StringPointerValue(ans.Algorithm.Rsa.RsaNbits)
		}
	}

	state.CaIdentityName = types.StringValue(ans.CaIdentityName)

	if ans.CertificateAttributes == nil {
		state.CertificateAttributes = nil
	} else {
		state.CertificateAttributes = &scepProfileRsModel_nnsRzDg_CertificateAttributesObject{}

		state.CertificateAttributes.Dnsname = types.StringPointerValue(ans.CertificateAttributes.Dnsname)

		state.CertificateAttributes.Rfc822name = types.StringPointerValue(ans.CertificateAttributes.Rfc822name)

		state.CertificateAttributes.UniformResourceIdentifier = types.StringPointerValue(ans.CertificateAttributes.UniformResourceIdentifier)
	}

	state.Digest = types.StringValue(ans.Digest)

	state.Fingerprint = types.StringPointerValue(ans.Fingerprint)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ScepCaCert = types.StringPointerValue(ans.ScepCaCert)

	if ans.ScepChallenge == nil {
		state.ScepChallenge = nil
	} else {
		state.ScepChallenge = &scepProfileRsModel_nnsRzDg_ScepChallengeObject{}

		if ans.ScepChallenge.DynamicChallenge == nil {
			state.ScepChallenge.DynamicChallenge = nil
		} else {
			state.ScepChallenge.DynamicChallenge = &scepProfileRsModel_nnsRzDg_DynamicChallengeObject{}

			state.ScepChallenge.DynamicChallenge.OtpServerUrl = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.OtpServerUrl)

			var1 := "with_parent_name | encrypted | scep_challenge | password"
			ev[var1] = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.Password)

			var2 := "with_parent_name | plaintext | scep_challenge | password"
			state.ScepChallenge.DynamicChallenge.Password = ev[var2]

			state.ScepChallenge.DynamicChallenge.Username = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.Username)
		}

		state.ScepChallenge.Fixed = types.StringPointerValue(ans.ScepChallenge.Fixed)

		state.ScepChallenge.None = types.StringPointerValue(ans.ScepChallenge.None)
	}

	state.ScepClientCert = types.StringPointerValue(ans.ScepClientCert)

	state.ScepUrl = types.StringValue(ans.ScepUrl)

	state.Subject = types.StringPointerValue(ans.Subject)

	state.UseAsDigitalSignature = types.BoolPointerValue(ans.UseAsDigitalSignature)

	state.UseForKeyEncipherment = types.BoolPointerValue(ans.UseForKeyEncipherment)

	var3, var4 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var3
	resp.Diagnostics.Append(var4.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *scepProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state scepProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(savestate.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_scep_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := rmBFeLV.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	if ans.Algorithm == nil {
		state.Algorithm = nil
	} else {
		state.Algorithm = &scepProfileRsModel_nnsRzDg_AlgorithmObject{}

		if ans.Algorithm.Rsa == nil {
			state.Algorithm.Rsa = nil
		} else {
			state.Algorithm.Rsa = &scepProfileRsModel_nnsRzDg_RsaObject{}

			state.Algorithm.Rsa.RsaNbits = types.StringPointerValue(ans.Algorithm.Rsa.RsaNbits)
		}
	}

	state.CaIdentityName = types.StringValue(ans.CaIdentityName)

	if ans.CertificateAttributes == nil {
		state.CertificateAttributes = nil
	} else {
		state.CertificateAttributes = &scepProfileRsModel_nnsRzDg_CertificateAttributesObject{}

		state.CertificateAttributes.Dnsname = types.StringPointerValue(ans.CertificateAttributes.Dnsname)

		state.CertificateAttributes.Rfc822name = types.StringPointerValue(ans.CertificateAttributes.Rfc822name)

		state.CertificateAttributes.UniformResourceIdentifier = types.StringPointerValue(ans.CertificateAttributes.UniformResourceIdentifier)
	}

	state.Digest = types.StringValue(ans.Digest)

	state.Fingerprint = types.StringPointerValue(ans.Fingerprint)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ScepCaCert = types.StringPointerValue(ans.ScepCaCert)

	if ans.ScepChallenge == nil {
		state.ScepChallenge = nil
	} else {
		state.ScepChallenge = &scepProfileRsModel_nnsRzDg_ScepChallengeObject{}

		if ans.ScepChallenge.DynamicChallenge == nil {
			state.ScepChallenge.DynamicChallenge = nil
		} else {
			state.ScepChallenge.DynamicChallenge = &scepProfileRsModel_nnsRzDg_DynamicChallengeObject{}

			state.ScepChallenge.DynamicChallenge.OtpServerUrl = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.OtpServerUrl)

			var0 := "with_parent_name | encrypted | scep_challenge | password"
			if ev[var0].Equal(types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.Password)) {

				var1 := "with_parent_name | plaintext | scep_challenge | password"
				state.ScepChallenge.DynamicChallenge.Password = ev[var1]
			} else {
				state.ScepChallenge.DynamicChallenge.Password = types.StringNull()
			}

			state.ScepChallenge.DynamicChallenge.Username = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.Username)
		}

		state.ScepChallenge.Fixed = types.StringPointerValue(ans.ScepChallenge.Fixed)

		state.ScepChallenge.None = types.StringPointerValue(ans.ScepChallenge.None)
	}

	state.ScepClientCert = types.StringPointerValue(ans.ScepClientCert)

	state.ScepUrl = types.StringValue(ans.ScepUrl)

	state.Subject = types.StringPointerValue(ans.Subject)

	state.UseAsDigitalSignature = types.BoolPointerValue(ans.UseAsDigitalSignature)

	state.UseForKeyEncipherment = types.BoolPointerValue(ans.UseForKeyEncipherment)

	var2, var3 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var2
	resp.Diagnostics.Append(var3.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *scepProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state scepProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_scep_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := rmBFeLV.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &nnsRzDg.Config{}

	if plan.Algorithm != nil {
		input.Request.Algorithm = &nnsRzDg.AlgorithmObject{}

		if plan.Algorithm.Rsa != nil {
			input.Request.Algorithm.Rsa = &nnsRzDg.RsaObject{}

			input.Request.Algorithm.Rsa.RsaNbits = plan.Algorithm.Rsa.RsaNbits.ValueStringPointer()
		}
	}

	input.Request.CaIdentityName = plan.CaIdentityName.ValueString()

	if plan.CertificateAttributes != nil {
		input.Request.CertificateAttributes = &nnsRzDg.CertificateAttributesObject{}

		input.Request.CertificateAttributes.Dnsname = plan.CertificateAttributes.Dnsname.ValueStringPointer()

		input.Request.CertificateAttributes.Rfc822name = plan.CertificateAttributes.Rfc822name.ValueStringPointer()

		input.Request.CertificateAttributes.UniformResourceIdentifier = plan.CertificateAttributes.UniformResourceIdentifier.ValueStringPointer()
	}

	input.Request.Digest = plan.Digest.ValueString()

	input.Request.Fingerprint = plan.Fingerprint.ValueStringPointer()

	input.Request.Name = plan.Name.ValueString()

	input.Request.ScepCaCert = plan.ScepCaCert.ValueStringPointer()

	if plan.ScepChallenge != nil {
		input.Request.ScepChallenge = &nnsRzDg.ScepChallengeObject{}

		if plan.ScepChallenge.DynamicChallenge != nil {
			input.Request.ScepChallenge.DynamicChallenge = &nnsRzDg.DynamicChallengeObject{}

			input.Request.ScepChallenge.DynamicChallenge.OtpServerUrl = plan.ScepChallenge.DynamicChallenge.OtpServerUrl.ValueStringPointer()

			var0 := "with_parent_name | plaintext | scep_challenge | password"
			ev[var0] = plan.ScepChallenge.DynamicChallenge.Password
			input.Request.ScepChallenge.DynamicChallenge.Password = plan.ScepChallenge.DynamicChallenge.Password.ValueStringPointer()

			input.Request.ScepChallenge.DynamicChallenge.Username = plan.ScepChallenge.DynamicChallenge.Username.ValueStringPointer()
		}

		input.Request.ScepChallenge.Fixed = plan.ScepChallenge.Fixed.ValueStringPointer()

		input.Request.ScepChallenge.None = plan.ScepChallenge.None.ValueStringPointer()
	}

	input.Request.ScepClientCert = plan.ScepClientCert.ValueStringPointer()

	input.Request.ScepUrl = plan.ScepUrl.ValueString()

	input.Request.Subject = plan.Subject.ValueStringPointer()

	input.Request.UseAsDigitalSignature = plan.UseAsDigitalSignature.ValueBoolPointer()

	input.Request.UseForKeyEncipherment = plan.UseForKeyEncipherment.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	if ans.Algorithm == nil {
		state.Algorithm = nil
	} else {
		state.Algorithm = &scepProfileRsModel_nnsRzDg_AlgorithmObject{}

		if ans.Algorithm.Rsa == nil {
			state.Algorithm.Rsa = nil
		} else {
			state.Algorithm.Rsa = &scepProfileRsModel_nnsRzDg_RsaObject{}

			state.Algorithm.Rsa.RsaNbits = types.StringPointerValue(ans.Algorithm.Rsa.RsaNbits)
		}
	}

	state.CaIdentityName = types.StringValue(ans.CaIdentityName)

	if ans.CertificateAttributes == nil {
		state.CertificateAttributes = nil
	} else {
		state.CertificateAttributes = &scepProfileRsModel_nnsRzDg_CertificateAttributesObject{}

		state.CertificateAttributes.Dnsname = types.StringPointerValue(ans.CertificateAttributes.Dnsname)

		state.CertificateAttributes.Rfc822name = types.StringPointerValue(ans.CertificateAttributes.Rfc822name)

		state.CertificateAttributes.UniformResourceIdentifier = types.StringPointerValue(ans.CertificateAttributes.UniformResourceIdentifier)
	}

	state.Digest = types.StringValue(ans.Digest)

	state.Fingerprint = types.StringPointerValue(ans.Fingerprint)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ScepCaCert = types.StringPointerValue(ans.ScepCaCert)

	if ans.ScepChallenge == nil {
		state.ScepChallenge = nil
	} else {
		state.ScepChallenge = &scepProfileRsModel_nnsRzDg_ScepChallengeObject{}

		if ans.ScepChallenge.DynamicChallenge == nil {
			state.ScepChallenge.DynamicChallenge = nil
		} else {
			state.ScepChallenge.DynamicChallenge = &scepProfileRsModel_nnsRzDg_DynamicChallengeObject{}

			state.ScepChallenge.DynamicChallenge.OtpServerUrl = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.OtpServerUrl)

			var1 := "with_parent_name | encrypted | scep_challenge | password"
			ev[var1] = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.Password)

			var2 := "with_parent_name | plaintext | scep_challenge | password"
			state.ScepChallenge.DynamicChallenge.Password = ev[var2]

			state.ScepChallenge.DynamicChallenge.Username = types.StringPointerValue(ans.ScepChallenge.DynamicChallenge.Username)
		}

		state.ScepChallenge.Fixed = types.StringPointerValue(ans.ScepChallenge.Fixed)

		state.ScepChallenge.None = types.StringPointerValue(ans.ScepChallenge.None)
	}

	state.ScepClientCert = types.StringPointerValue(ans.ScepClientCert)

	state.ScepUrl = types.StringValue(ans.ScepUrl)

	state.Subject = types.StringPointerValue(ans.Subject)

	state.UseAsDigitalSignature = types.BoolPointerValue(ans.UseAsDigitalSignature)

	state.UseForKeyEncipherment = types.BoolPointerValue(ans.UseForKeyEncipherment)

	var3, var4 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var3
	resp.Diagnostics.Append(var4.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *scepProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_scep_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := rmBFeLV.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := rmBFeLV.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}
