package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	mCcgFKg "github.com/paloaltonetworks/scm-go/netsec/schemas/schedules"
	oYXHuUA "github.com/paloaltonetworks/scm-go/netsec/services/schedules"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &scheduleListDataSource{}
	_ datasource.DataSourceWithConfigure = &scheduleListDataSource{}
)

func NewScheduleListDataSource() datasource.DataSource {
	return &scheduleListDataSource{}
}

type scheduleListDataSource struct {
	client *scm.Client
}

// scheduleListDsModel is the model.
type scheduleListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []scheduleListDsModel_mCcgFKg_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type scheduleListDsModel_mCcgFKg_Config struct {
	Id           types.String                                   `tfsdk:"id"`
	Name         types.String                                   `tfsdk:"name"`
	ScheduleType scheduleListDsModel_mCcgFKg_ScheduleTypeObject `tfsdk:"schedule_type"`
}

type scheduleListDsModel_mCcgFKg_ScheduleTypeObject struct {
	NonRecurringList types.List                                   `tfsdk:"non_recurring_list"`
	Recurring        *scheduleListDsModel_mCcgFKg_RecurringObject `tfsdk:"recurring"`
}

type scheduleListDsModel_mCcgFKg_RecurringObject struct {
	DailyList types.List                                `tfsdk:"daily_list"`
	Weekly    *scheduleListDsModel_mCcgFKg_WeeklyObject `tfsdk:"weekly"`
}

type scheduleListDsModel_mCcgFKg_WeeklyObject struct {
	FridayList    types.List `tfsdk:"friday_list"`
	MondayList    types.List `tfsdk:"monday_list"`
	SaturdayList  types.List `tfsdk:"saturday_list"`
	SundayList    types.List `tfsdk:"sunday_list"`
	ThursdayList  types.List `tfsdk:"thursday_list"`
	TuesdayList   types.List `tfsdk:"tuesday_list"`
	WednesdayList types.List `tfsdk:"wednesday_list"`
}

// Metadata returns the data source type name.
func (d *scheduleListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schedule_list"
}

// Schema defines the schema for this listing data source.
func (d *scheduleListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"id":true, "name":true, "schedule_type":true} forceNew:map[string]bool(nil)
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
							Computed:    true,
						},
						"schedule_type": dsschema.SingleNestedAttribute{
							Description: "The ScheduleType param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"non_recurring":true, "recurring":true} forceNew:map[string]bool(nil)
								"non_recurring_list": dsschema.ListAttribute{
									Description: "The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])`.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"recurring": dsschema.SingleNestedAttribute{
									Description: "The Recurring param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "weekly":true} forceNew:map[string]bool(nil)
										"daily_list": dsschema.ListAttribute{
											Description: "The DailyList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
											Computed:    true,
											ElementType: types.StringType,
										},
										"weekly": dsschema.SingleNestedAttribute{
											Description: "The Weekly param.",
											Computed:    true,
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"friday":true, "monday":true, "saturday":true, "sunday":true, "thursday":true, "tuesday":true, "wednesday":true} forceNew:map[string]bool(nil)
												"friday_list": dsschema.ListAttribute{
													Description: "The FridayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
													Computed:    true,
													ElementType: types.StringType,
												},
												"monday_list": dsschema.ListAttribute{
													Description: "The MondayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
													Computed:    true,
													ElementType: types.StringType,
												},
												"saturday_list": dsschema.ListAttribute{
													Description: "The SaturdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
													Computed:    true,
													ElementType: types.StringType,
												},
												"sunday_list": dsschema.ListAttribute{
													Description: "The SundayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
													Computed:    true,
													ElementType: types.StringType,
												},
												"thursday_list": dsschema.ListAttribute{
													Description: "The ThursdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
													Computed:    true,
													ElementType: types.StringType,
												},
												"tuesday_list": dsschema.ListAttribute{
													Description: "The TuesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
													Computed:    true,
													ElementType: types.StringType,
												},
												"wednesday_list": dsschema.ListAttribute{
													Description: "The WednesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
													Computed:    true,
													ElementType: types.StringType,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *scheduleListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *scheduleListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state scheduleListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_schedule_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := oYXHuUA.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := oYXHuUA.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]scheduleListDsModel_mCcgFKg_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := scheduleListDsModel_mCcgFKg_Config{}

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.ScheduleType = scheduleListDsModel_mCcgFKg_ScheduleTypeObject{}

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.NonRecurringList)
			var1.ScheduleType.NonRecurringList = var2
			resp.Diagnostics.Append(var3.Errors()...)

			if var0.ScheduleType.Recurring == nil {
				var1.ScheduleType.Recurring = nil
			} else {
				var1.ScheduleType.Recurring = &scheduleListDsModel_mCcgFKg_RecurringObject{}

				var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.Recurring.DailyList)
				var1.ScheduleType.Recurring.DailyList = var4
				resp.Diagnostics.Append(var5.Errors()...)

				if var0.ScheduleType.Recurring.Weekly == nil {
					var1.ScheduleType.Recurring.Weekly = nil
				} else {
					var1.ScheduleType.Recurring.Weekly = &scheduleListDsModel_mCcgFKg_WeeklyObject{}

					var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.Recurring.Weekly.FridayList)
					var1.ScheduleType.Recurring.Weekly.FridayList = var6
					resp.Diagnostics.Append(var7.Errors()...)

					var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.Recurring.Weekly.MondayList)
					var1.ScheduleType.Recurring.Weekly.MondayList = var8
					resp.Diagnostics.Append(var9.Errors()...)

					var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.Recurring.Weekly.SaturdayList)
					var1.ScheduleType.Recurring.Weekly.SaturdayList = var10
					resp.Diagnostics.Append(var11.Errors()...)

					var12, var13 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.Recurring.Weekly.SundayList)
					var1.ScheduleType.Recurring.Weekly.SundayList = var12
					resp.Diagnostics.Append(var13.Errors()...)

					var14, var15 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.Recurring.Weekly.ThursdayList)
					var1.ScheduleType.Recurring.Weekly.ThursdayList = var14
					resp.Diagnostics.Append(var15.Errors()...)

					var16, var17 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.Recurring.Weekly.TuesdayList)
					var1.ScheduleType.Recurring.Weekly.TuesdayList = var16
					resp.Diagnostics.Append(var17.Errors()...)

					var18, var19 := types.ListValueFrom(ctx, types.StringType, var0.ScheduleType.Recurring.Weekly.WednesdayList)
					var1.ScheduleType.Recurring.Weekly.WednesdayList = var18
					resp.Diagnostics.Append(var19.Errors()...)
				}
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &scheduleDataSource{}
	_ datasource.DataSourceWithConfigure = &scheduleDataSource{}
)

func NewScheduleDataSource() datasource.DataSource {
	return &scheduleDataSource{}
}

type scheduleDataSource struct {
	client *scm.Client
}

// scheduleDsModel is the model.
type scheduleDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	// omit input: id
	Name         types.String                               `tfsdk:"name"`
	ScheduleType scheduleDsModel_mCcgFKg_ScheduleTypeObject `tfsdk:"schedule_type"`
}

type scheduleDsModel_mCcgFKg_ScheduleTypeObject struct {
	NonRecurringList types.List                               `tfsdk:"non_recurring_list"`
	Recurring        *scheduleDsModel_mCcgFKg_RecurringObject `tfsdk:"recurring"`
}

type scheduleDsModel_mCcgFKg_RecurringObject struct {
	DailyList types.List                            `tfsdk:"daily_list"`
	Weekly    *scheduleDsModel_mCcgFKg_WeeklyObject `tfsdk:"weekly"`
}

type scheduleDsModel_mCcgFKg_WeeklyObject struct {
	FridayList    types.List `tfsdk:"friday_list"`
	MondayList    types.List `tfsdk:"monday_list"`
	SaturdayList  types.List `tfsdk:"saturday_list"`
	SundayList    types.List `tfsdk:"sunday_list"`
	ThursdayList  types.List `tfsdk:"thursday_list"`
	TuesdayList   types.List `tfsdk:"tuesday_list"`
	WednesdayList types.List `tfsdk:"wednesday_list"`
}

// Metadata returns the data source type name.
func (d *scheduleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schedule"
}

// Schema defines the schema for this data source.
func (d *scheduleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"id":true, "name":true, "schedule_type":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Computed:    true,
			},
			"schedule_type": dsschema.SingleNestedAttribute{
				Description: "The ScheduleType param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"non_recurring":true, "recurring":true} forceNew:map[string]bool(nil)
					"non_recurring_list": dsschema.ListAttribute{
						Description: "The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])`.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"recurring": dsschema.SingleNestedAttribute{
						Description: "The Recurring param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"daily":true, "weekly":true} forceNew:map[string]bool(nil)
							"daily_list": dsschema.ListAttribute{
								Description: "The DailyList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
								Computed:    true,
								ElementType: types.StringType,
							},
							"weekly": dsschema.SingleNestedAttribute{
								Description: "The Weekly param.",
								Computed:    true,
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"friday":true, "monday":true, "saturday":true, "sunday":true, "thursday":true, "tuesday":true, "wednesday":true} forceNew:map[string]bool(nil)
									"friday_list": dsschema.ListAttribute{
										Description: "The FridayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"monday_list": dsschema.ListAttribute{
										Description: "The MondayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"saturday_list": dsschema.ListAttribute{
										Description: "The SaturdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"sunday_list": dsschema.ListAttribute{
										Description: "The SundayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"thursday_list": dsschema.ListAttribute{
										Description: "The ThursdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"tuesday_list": dsschema.ListAttribute{
										Description: "The TuesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"wednesday_list": dsschema.ListAttribute{
										Description: "The WednesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Computed:    true,
										ElementType: types.StringType,
									},
								},
							},
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *scheduleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *scheduleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state scheduleDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_schedule",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := oYXHuUA.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := oYXHuUA.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ScheduleType = scheduleDsModel_mCcgFKg_ScheduleTypeObject{}

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.NonRecurringList)
	state.ScheduleType.NonRecurringList = var0
	resp.Diagnostics.Append(var1.Errors()...)

	if ans.ScheduleType.Recurring == nil {
		state.ScheduleType.Recurring = nil
	} else {
		state.ScheduleType.Recurring = &scheduleDsModel_mCcgFKg_RecurringObject{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.DailyList)
		state.ScheduleType.Recurring.DailyList = var2
		resp.Diagnostics.Append(var3.Errors()...)

		if ans.ScheduleType.Recurring.Weekly == nil {
			state.ScheduleType.Recurring.Weekly = nil
		} else {
			state.ScheduleType.Recurring.Weekly = &scheduleDsModel_mCcgFKg_WeeklyObject{}

			var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.FridayList)
			state.ScheduleType.Recurring.Weekly.FridayList = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.MondayList)
			state.ScheduleType.Recurring.Weekly.MondayList = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.SaturdayList)
			state.ScheduleType.Recurring.Weekly.SaturdayList = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.SundayList)
			state.ScheduleType.Recurring.Weekly.SundayList = var10
			resp.Diagnostics.Append(var11.Errors()...)

			var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.ThursdayList)
			state.ScheduleType.Recurring.Weekly.ThursdayList = var12
			resp.Diagnostics.Append(var13.Errors()...)

			var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.TuesdayList)
			state.ScheduleType.Recurring.Weekly.TuesdayList = var14
			resp.Diagnostics.Append(var15.Errors()...)

			var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.WednesdayList)
			state.ScheduleType.Recurring.Weekly.WednesdayList = var16
			resp.Diagnostics.Append(var17.Errors()...)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &scheduleResource{}
	_ resource.ResourceWithConfigure   = &scheduleResource{}
	_ resource.ResourceWithImportState = &scheduleResource{}
)

func NewScheduleResource() resource.Resource {
	return &scheduleResource{}
}

type scheduleResource struct {
	client *scm.Client
}

// scheduleRsModel is the model.
type scheduleRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device       types.String                               `tfsdk:"device"`
	Folder       types.String                               `tfsdk:"folder"`
	Id           types.String                               `tfsdk:"id"`
	Name         types.String                               `tfsdk:"name"`
	ScheduleType scheduleRsModel_mCcgFKg_ScheduleTypeObject `tfsdk:"schedule_type"`
	Snippet      types.String                               `tfsdk:"snippet"`

	// Output.
	// omit input: id
	// omit input: name
	// omit input: schedule_type
}

type scheduleRsModel_mCcgFKg_ScheduleTypeObject struct {
	NonRecurringList types.List                               `tfsdk:"non_recurring_list"`
	Recurring        *scheduleRsModel_mCcgFKg_RecurringObject `tfsdk:"recurring"`
}

type scheduleRsModel_mCcgFKg_RecurringObject struct {
	DailyList types.List                            `tfsdk:"daily_list"`
	Weekly    *scheduleRsModel_mCcgFKg_WeeklyObject `tfsdk:"weekly"`
}

type scheduleRsModel_mCcgFKg_WeeklyObject struct {
	FridayList    types.List `tfsdk:"friday_list"`
	MondayList    types.List `tfsdk:"monday_list"`
	SaturdayList  types.List `tfsdk:"saturday_list"`
	SundayList    types.List `tfsdk:"sunday_list"`
	ThursdayList  types.List `tfsdk:"thursday_list"`
	TuesdayList   types.List `tfsdk:"tuesday_list"`
	WednesdayList types.List `tfsdk:"wednesday_list"`
}

// Metadata returns the data source type name.
func (r *scheduleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_schedule"
}

// Schema defines the schema for this data source.
func (r *scheduleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "id":true, "name":true, "schedule_type":true, "snippet":true} outputs:map[string]bool{"id":true, "name":true, "schedule_type":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string [ 0-9a-zA-Z._-]. String length must not exceed 31 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(31),
				},
			},
			"schedule_type": rsschema.SingleNestedAttribute{
				Description: "The ScheduleType param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"non_recurring":true, "recurring":true} outputs:map[string]bool{"non_recurring":true, "recurring":true} forceNew:map[string]bool(nil)
					"non_recurring_list": rsschema.ListAttribute{
						Description: "The NonRecurringList param. Individual elements in this list are subject to additional validation. String length must be between 33 and 33 characters. String validation regex: `[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `non_recurring`, `recurring`",
						Optional:    true,
						ElementType: types.StringType,
						Validators: []validator.List{
							listvalidator.ValueStringsAre(
								stringvalidator.LengthBetween(33, 33),
								stringvalidator.RegexMatches(regexp.MustCompile("[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])-[0-9][0-9][0-9][0-9]\\/([0][1-9]|[1][0-2])\\/([0-2][0-9]|[3][0-1])@([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
							),
							listvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("recurring"),
							),
						},
					},
					"recurring": rsschema.SingleNestedAttribute{
						Description: "The Recurring param. Ensure that only one of the following is specified: `non_recurring`, `recurring`",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"daily":true, "weekly":true} outputs:map[string]bool{"daily":true, "weekly":true} forceNew:map[string]bool(nil)
							"daily_list": rsschema.ListAttribute{
								Description: "The DailyList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`. Ensure that only one of the following is specified: `daily`, `weekly`",
								Optional:    true,
								ElementType: types.StringType,
								Validators: []validator.List{
									listvalidator.ValueStringsAre(
										stringvalidator.LengthBetween(11, 11),
										stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
									),
									listvalidator.ExactlyOneOf(
										path.MatchRelative(),
										path.MatchRelative().AtParent().AtName("weekly"),
									),
								},
							},
							"weekly": rsschema.SingleNestedAttribute{
								Description: "The Weekly param. Ensure that only one of the following is specified: `daily`, `weekly`",
								Optional:    true,
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"friday":true, "monday":true, "saturday":true, "sunday":true, "thursday":true, "tuesday":true, "wednesday":true} outputs:map[string]bool{"friday":true, "monday":true, "saturday":true, "sunday":true, "thursday":true, "tuesday":true, "wednesday":true} forceNew:map[string]bool(nil)
									"friday_list": rsschema.ListAttribute{
										Description: "The FridayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Optional:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(
												stringvalidator.LengthBetween(11, 11),
												stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
											),
										},
									},
									"monday_list": rsschema.ListAttribute{
										Description: "The MondayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Optional:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(
												stringvalidator.LengthBetween(11, 11),
												stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
											),
										},
									},
									"saturday_list": rsschema.ListAttribute{
										Description: "The SaturdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Optional:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(
												stringvalidator.LengthBetween(11, 11),
												stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
											),
										},
									},
									"sunday_list": rsschema.ListAttribute{
										Description: "The SundayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Optional:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(
												stringvalidator.LengthBetween(11, 11),
												stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
											),
										},
									},
									"thursday_list": rsschema.ListAttribute{
										Description: "The ThursdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Optional:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(
												stringvalidator.LengthBetween(11, 11),
												stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
											),
										},
									},
									"tuesday_list": rsschema.ListAttribute{
										Description: "The TuesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Optional:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(
												stringvalidator.LengthBetween(11, 11),
												stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
											),
										},
									},
									"wednesday_list": rsschema.ListAttribute{
										Description: "The WednesdayList param. Individual elements in this list are subject to additional validation. String length must be between 11 and 11 characters. String validation regex: `([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])`.",
										Optional:    true,
										ElementType: types.StringType,
										Validators: []validator.List{
											listvalidator.ValueStringsAre(
												stringvalidator.LengthBetween(11, 11),
												stringvalidator.RegexMatches(regexp.MustCompile("([01][0-9]|[2][0-3]):([0-5][0-9])-([01][0-9]|[2][0-3]):([0-5][0-9])"), ""),
											),
										},
									},
								},
							},
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *scheduleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *scheduleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state scheduleRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_schedule",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := oYXHuUA.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := oYXHuUA.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &mCcgFKg.Config{}

	input.Request.Name = state.Name.ValueString()

	resp.Diagnostics.Append(state.ScheduleType.NonRecurringList.ElementsAs(ctx, &input.Request.ScheduleType.NonRecurringList, false)...)
	//if len(state.ScheduleType.NonRecurringList) != 0 {
	//    input.Request.ScheduleType.NonRecurringList = make([]string, 0, len(state.ScheduleType.NonRecurringList))
	//    for _, var0 := range state.ScheduleType.NonRecurringList {
	//        input.Request.ScheduleType.NonRecurringList = append(input.Request.ScheduleType.NonRecurringList, var0.ValueString())
	//    }
	//}

	if state.ScheduleType.Recurring != nil {
		input.Request.ScheduleType.Recurring = &mCcgFKg.RecurringObject{}

		resp.Diagnostics.Append(state.ScheduleType.Recurring.DailyList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.DailyList, false)...)
		//if len(state.ScheduleType.Recurring.DailyList) != 0 {
		//    input.Request.ScheduleType.Recurring.DailyList = make([]string, 0, len(state.ScheduleType.Recurring.DailyList))
		//    for _, var1 := range state.ScheduleType.Recurring.DailyList {
		//        input.Request.ScheduleType.Recurring.DailyList = append(input.Request.ScheduleType.Recurring.DailyList, var1.ValueString())
		//    }
		//}

		if state.ScheduleType.Recurring.Weekly != nil {
			input.Request.ScheduleType.Recurring.Weekly = &mCcgFKg.WeeklyObject{}

			resp.Diagnostics.Append(state.ScheduleType.Recurring.Weekly.FridayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.FridayList, false)...)
			//if len(state.ScheduleType.Recurring.Weekly.FridayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.FridayList = make([]string, 0, len(state.ScheduleType.Recurring.Weekly.FridayList))
			//    for _, var2 := range state.ScheduleType.Recurring.Weekly.FridayList {
			//        input.Request.ScheduleType.Recurring.Weekly.FridayList = append(input.Request.ScheduleType.Recurring.Weekly.FridayList, var2.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(state.ScheduleType.Recurring.Weekly.MondayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.MondayList, false)...)
			//if len(state.ScheduleType.Recurring.Weekly.MondayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.MondayList = make([]string, 0, len(state.ScheduleType.Recurring.Weekly.MondayList))
			//    for _, var3 := range state.ScheduleType.Recurring.Weekly.MondayList {
			//        input.Request.ScheduleType.Recurring.Weekly.MondayList = append(input.Request.ScheduleType.Recurring.Weekly.MondayList, var3.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(state.ScheduleType.Recurring.Weekly.SaturdayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.SaturdayList, false)...)
			//if len(state.ScheduleType.Recurring.Weekly.SaturdayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.SaturdayList = make([]string, 0, len(state.ScheduleType.Recurring.Weekly.SaturdayList))
			//    for _, var4 := range state.ScheduleType.Recurring.Weekly.SaturdayList {
			//        input.Request.ScheduleType.Recurring.Weekly.SaturdayList = append(input.Request.ScheduleType.Recurring.Weekly.SaturdayList, var4.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(state.ScheduleType.Recurring.Weekly.SundayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.SundayList, false)...)
			//if len(state.ScheduleType.Recurring.Weekly.SundayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.SundayList = make([]string, 0, len(state.ScheduleType.Recurring.Weekly.SundayList))
			//    for _, var5 := range state.ScheduleType.Recurring.Weekly.SundayList {
			//        input.Request.ScheduleType.Recurring.Weekly.SundayList = append(input.Request.ScheduleType.Recurring.Weekly.SundayList, var5.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(state.ScheduleType.Recurring.Weekly.ThursdayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.ThursdayList, false)...)
			//if len(state.ScheduleType.Recurring.Weekly.ThursdayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.ThursdayList = make([]string, 0, len(state.ScheduleType.Recurring.Weekly.ThursdayList))
			//    for _, var6 := range state.ScheduleType.Recurring.Weekly.ThursdayList {
			//        input.Request.ScheduleType.Recurring.Weekly.ThursdayList = append(input.Request.ScheduleType.Recurring.Weekly.ThursdayList, var6.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(state.ScheduleType.Recurring.Weekly.TuesdayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.TuesdayList, false)...)
			//if len(state.ScheduleType.Recurring.Weekly.TuesdayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.TuesdayList = make([]string, 0, len(state.ScheduleType.Recurring.Weekly.TuesdayList))
			//    for _, var7 := range state.ScheduleType.Recurring.Weekly.TuesdayList {
			//        input.Request.ScheduleType.Recurring.Weekly.TuesdayList = append(input.Request.ScheduleType.Recurring.Weekly.TuesdayList, var7.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(state.ScheduleType.Recurring.Weekly.WednesdayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.WednesdayList, false)...)
			//if len(state.ScheduleType.Recurring.Weekly.WednesdayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.WednesdayList = make([]string, 0, len(state.ScheduleType.Recurring.Weekly.WednesdayList))
			//    for _, var8 := range state.ScheduleType.Recurring.Weekly.WednesdayList {
			//        input.Request.ScheduleType.Recurring.Weekly.WednesdayList = append(input.Request.ScheduleType.Recurring.Weekly.WednesdayList, var8.ValueString())
			//    }
			//}
		}
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ScheduleType = scheduleRsModel_mCcgFKg_ScheduleTypeObject{}

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.NonRecurringList)
	state.ScheduleType.NonRecurringList = var9
	resp.Diagnostics.Append(var10.Errors()...)

	if ans.ScheduleType.Recurring == nil {
		state.ScheduleType.Recurring = nil
	} else {
		state.ScheduleType.Recurring = &scheduleRsModel_mCcgFKg_RecurringObject{}

		var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.DailyList)
		state.ScheduleType.Recurring.DailyList = var11
		resp.Diagnostics.Append(var12.Errors()...)

		if ans.ScheduleType.Recurring.Weekly == nil {
			state.ScheduleType.Recurring.Weekly = nil
		} else {
			state.ScheduleType.Recurring.Weekly = &scheduleRsModel_mCcgFKg_WeeklyObject{}

			var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.FridayList)
			state.ScheduleType.Recurring.Weekly.FridayList = var13
			resp.Diagnostics.Append(var14.Errors()...)

			var15, var16 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.MondayList)
			state.ScheduleType.Recurring.Weekly.MondayList = var15
			resp.Diagnostics.Append(var16.Errors()...)

			var17, var18 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.SaturdayList)
			state.ScheduleType.Recurring.Weekly.SaturdayList = var17
			resp.Diagnostics.Append(var18.Errors()...)

			var19, var20 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.SundayList)
			state.ScheduleType.Recurring.Weekly.SundayList = var19
			resp.Diagnostics.Append(var20.Errors()...)

			var21, var22 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.ThursdayList)
			state.ScheduleType.Recurring.Weekly.ThursdayList = var21
			resp.Diagnostics.Append(var22.Errors()...)

			var23, var24 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.TuesdayList)
			state.ScheduleType.Recurring.Weekly.TuesdayList = var23
			resp.Diagnostics.Append(var24.Errors()...)

			var25, var26 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.WednesdayList)
			state.ScheduleType.Recurring.Weekly.WednesdayList = var25
			resp.Diagnostics.Append(var26.Errors()...)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *scheduleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state scheduleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_schedule",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := oYXHuUA.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := oYXHuUA.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ScheduleType = scheduleRsModel_mCcgFKg_ScheduleTypeObject{}

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.NonRecurringList)
	state.ScheduleType.NonRecurringList = var0
	resp.Diagnostics.Append(var1.Errors()...)

	if ans.ScheduleType.Recurring == nil {
		state.ScheduleType.Recurring = nil
	} else {
		state.ScheduleType.Recurring = &scheduleRsModel_mCcgFKg_RecurringObject{}

		var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.DailyList)
		state.ScheduleType.Recurring.DailyList = var2
		resp.Diagnostics.Append(var3.Errors()...)

		if ans.ScheduleType.Recurring.Weekly == nil {
			state.ScheduleType.Recurring.Weekly = nil
		} else {
			state.ScheduleType.Recurring.Weekly = &scheduleRsModel_mCcgFKg_WeeklyObject{}

			var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.FridayList)
			state.ScheduleType.Recurring.Weekly.FridayList = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.MondayList)
			state.ScheduleType.Recurring.Weekly.MondayList = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.SaturdayList)
			state.ScheduleType.Recurring.Weekly.SaturdayList = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.SundayList)
			state.ScheduleType.Recurring.Weekly.SundayList = var10
			resp.Diagnostics.Append(var11.Errors()...)

			var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.ThursdayList)
			state.ScheduleType.Recurring.Weekly.ThursdayList = var12
			resp.Diagnostics.Append(var13.Errors()...)

			var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.TuesdayList)
			state.ScheduleType.Recurring.Weekly.TuesdayList = var14
			resp.Diagnostics.Append(var15.Errors()...)

			var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.WednesdayList)
			state.ScheduleType.Recurring.Weekly.WednesdayList = var16
			resp.Diagnostics.Append(var17.Errors()...)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *scheduleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state scheduleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_schedule",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := oYXHuUA.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := oYXHuUA.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &mCcgFKg.Config{}

	input.Request.Name = plan.Name.ValueString()

	resp.Diagnostics.Append(plan.ScheduleType.NonRecurringList.ElementsAs(ctx, &input.Request.ScheduleType.NonRecurringList, false)...)
	//if len(plan.ScheduleType.NonRecurringList) != 0 {
	//    input.Request.ScheduleType.NonRecurringList = make([]string, 0, len(plan.ScheduleType.NonRecurringList))
	//    for _, var0 := range plan.ScheduleType.NonRecurringList {
	//        input.Request.ScheduleType.NonRecurringList = append(input.Request.ScheduleType.NonRecurringList, var0.ValueString())
	//    }
	//}

	if plan.ScheduleType.Recurring != nil {
		input.Request.ScheduleType.Recurring = &mCcgFKg.RecurringObject{}

		resp.Diagnostics.Append(plan.ScheduleType.Recurring.DailyList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.DailyList, false)...)
		//if len(plan.ScheduleType.Recurring.DailyList) != 0 {
		//    input.Request.ScheduleType.Recurring.DailyList = make([]string, 0, len(plan.ScheduleType.Recurring.DailyList))
		//    for _, var1 := range plan.ScheduleType.Recurring.DailyList {
		//        input.Request.ScheduleType.Recurring.DailyList = append(input.Request.ScheduleType.Recurring.DailyList, var1.ValueString())
		//    }
		//}

		if plan.ScheduleType.Recurring.Weekly != nil {
			input.Request.ScheduleType.Recurring.Weekly = &mCcgFKg.WeeklyObject{}

			resp.Diagnostics.Append(plan.ScheduleType.Recurring.Weekly.FridayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.FridayList, false)...)
			//if len(plan.ScheduleType.Recurring.Weekly.FridayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.FridayList = make([]string, 0, len(plan.ScheduleType.Recurring.Weekly.FridayList))
			//    for _, var2 := range plan.ScheduleType.Recurring.Weekly.FridayList {
			//        input.Request.ScheduleType.Recurring.Weekly.FridayList = append(input.Request.ScheduleType.Recurring.Weekly.FridayList, var2.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(plan.ScheduleType.Recurring.Weekly.MondayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.MondayList, false)...)
			//if len(plan.ScheduleType.Recurring.Weekly.MondayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.MondayList = make([]string, 0, len(plan.ScheduleType.Recurring.Weekly.MondayList))
			//    for _, var3 := range plan.ScheduleType.Recurring.Weekly.MondayList {
			//        input.Request.ScheduleType.Recurring.Weekly.MondayList = append(input.Request.ScheduleType.Recurring.Weekly.MondayList, var3.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(plan.ScheduleType.Recurring.Weekly.SaturdayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.SaturdayList, false)...)
			//if len(plan.ScheduleType.Recurring.Weekly.SaturdayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.SaturdayList = make([]string, 0, len(plan.ScheduleType.Recurring.Weekly.SaturdayList))
			//    for _, var4 := range plan.ScheduleType.Recurring.Weekly.SaturdayList {
			//        input.Request.ScheduleType.Recurring.Weekly.SaturdayList = append(input.Request.ScheduleType.Recurring.Weekly.SaturdayList, var4.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(plan.ScheduleType.Recurring.Weekly.SundayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.SundayList, false)...)
			//if len(plan.ScheduleType.Recurring.Weekly.SundayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.SundayList = make([]string, 0, len(plan.ScheduleType.Recurring.Weekly.SundayList))
			//    for _, var5 := range plan.ScheduleType.Recurring.Weekly.SundayList {
			//        input.Request.ScheduleType.Recurring.Weekly.SundayList = append(input.Request.ScheduleType.Recurring.Weekly.SundayList, var5.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(plan.ScheduleType.Recurring.Weekly.ThursdayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.ThursdayList, false)...)
			//if len(plan.ScheduleType.Recurring.Weekly.ThursdayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.ThursdayList = make([]string, 0, len(plan.ScheduleType.Recurring.Weekly.ThursdayList))
			//    for _, var6 := range plan.ScheduleType.Recurring.Weekly.ThursdayList {
			//        input.Request.ScheduleType.Recurring.Weekly.ThursdayList = append(input.Request.ScheduleType.Recurring.Weekly.ThursdayList, var6.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(plan.ScheduleType.Recurring.Weekly.TuesdayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.TuesdayList, false)...)
			//if len(plan.ScheduleType.Recurring.Weekly.TuesdayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.TuesdayList = make([]string, 0, len(plan.ScheduleType.Recurring.Weekly.TuesdayList))
			//    for _, var7 := range plan.ScheduleType.Recurring.Weekly.TuesdayList {
			//        input.Request.ScheduleType.Recurring.Weekly.TuesdayList = append(input.Request.ScheduleType.Recurring.Weekly.TuesdayList, var7.ValueString())
			//    }
			//}

			resp.Diagnostics.Append(plan.ScheduleType.Recurring.Weekly.WednesdayList.ElementsAs(ctx, &input.Request.ScheduleType.Recurring.Weekly.WednesdayList, false)...)
			//if len(plan.ScheduleType.Recurring.Weekly.WednesdayList) != 0 {
			//    input.Request.ScheduleType.Recurring.Weekly.WednesdayList = make([]string, 0, len(plan.ScheduleType.Recurring.Weekly.WednesdayList))
			//    for _, var8 := range plan.ScheduleType.Recurring.Weekly.WednesdayList {
			//        input.Request.ScheduleType.Recurring.Weekly.WednesdayList = append(input.Request.ScheduleType.Recurring.Weekly.WednesdayList, var8.ValueString())
			//    }
			//}
		}
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ScheduleType = scheduleRsModel_mCcgFKg_ScheduleTypeObject{}

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.NonRecurringList)
	state.ScheduleType.NonRecurringList = var9
	resp.Diagnostics.Append(var10.Errors()...)

	if ans.ScheduleType.Recurring == nil {
		state.ScheduleType.Recurring = nil
	} else {
		state.ScheduleType.Recurring = &scheduleRsModel_mCcgFKg_RecurringObject{}

		var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.DailyList)
		state.ScheduleType.Recurring.DailyList = var11
		resp.Diagnostics.Append(var12.Errors()...)

		if ans.ScheduleType.Recurring.Weekly == nil {
			state.ScheduleType.Recurring.Weekly = nil
		} else {
			state.ScheduleType.Recurring.Weekly = &scheduleRsModel_mCcgFKg_WeeklyObject{}

			var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.FridayList)
			state.ScheduleType.Recurring.Weekly.FridayList = var13
			resp.Diagnostics.Append(var14.Errors()...)

			var15, var16 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.MondayList)
			state.ScheduleType.Recurring.Weekly.MondayList = var15
			resp.Diagnostics.Append(var16.Errors()...)

			var17, var18 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.SaturdayList)
			state.ScheduleType.Recurring.Weekly.SaturdayList = var17
			resp.Diagnostics.Append(var18.Errors()...)

			var19, var20 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.SundayList)
			state.ScheduleType.Recurring.Weekly.SundayList = var19
			resp.Diagnostics.Append(var20.Errors()...)

			var21, var22 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.ThursdayList)
			state.ScheduleType.Recurring.Weekly.ThursdayList = var21
			resp.Diagnostics.Append(var22.Errors()...)

			var23, var24 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.TuesdayList)
			state.ScheduleType.Recurring.Weekly.TuesdayList = var23
			resp.Diagnostics.Append(var24.Errors()...)

			var25, var26 := types.ListValueFrom(ctx, types.StringType, ans.ScheduleType.Recurring.Weekly.WednesdayList)
			state.ScheduleType.Recurring.Weekly.WednesdayList = var25
			resp.Diagnostics.Append(var26.Errors()...)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *scheduleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_schedule",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := oYXHuUA.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := oYXHuUA.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *scheduleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
