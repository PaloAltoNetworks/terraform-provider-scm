package provider

import (
	"context"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/paloaltonetworks/scm-go/generated/security_services"
	models "github.com/paloaltonetworks/terraform-provider-scm/internal/models/security_services"
)

// --- Unpacker for VulnerabilityProtectionSignatures ---
func unpackVulnerabilityProtectionSignaturesToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignatures, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignatures
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignatures
	var d diag.Diagnostics
	// Handling Objects
	if !model.AffectedHost.IsNull() && !model.AffectedHost.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AffectedHost")
		unpacked, d := unpackVulnerabilityProtectionSignaturesAffectedHostToSdk(ctx, model.AffectedHost)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AffectedHost"})
		}
		if unpacked != nil {
			sdk.AffectedHost = unpacked
		}
	}

	// Handling Lists
	if !model.Bugtraq.IsNull() && !model.Bugtraq.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Bugtraq")
		diags.Append(model.Bugtraq.ElementsAs(ctx, &sdk.Bugtraq, false)...)
	}

	// Handling Primitives
	if !model.Comment.IsNull() && !model.Comment.IsUnknown() {
		sdk.Comment = model.Comment.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Comment", "value": *sdk.Comment})
	}

	// Handling Lists
	if !model.Cve.IsNull() && !model.Cve.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Cve")
		diags.Append(model.Cve.ElementsAs(ctx, &sdk.Cve, false)...)
	}

	// Handling Objects
	if !model.DefaultAction.IsNull() && !model.DefaultAction.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field DefaultAction")
		unpacked, d := unpackVulnerabilityProtectionSignaturesDefaultActionToSdk(ctx, model.DefaultAction)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "DefaultAction"})
		}
		if unpacked != nil {
			sdk.DefaultAction = unpacked
		}
	}

	// Handling Primitives
	if !model.Device.IsNull() && !model.Device.IsUnknown() {
		sdk.Device = model.Device.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Device", "value": *sdk.Device})
	}

	// Handling Primitives
	if !model.Direction.IsNull() && !model.Direction.IsUnknown() {
		sdk.Direction = model.Direction.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Direction", "value": *sdk.Direction})
	}

	// Handling Primitives
	if !model.Folder.IsNull() && !model.Folder.IsUnknown() {
		sdk.Folder = model.Folder.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Folder", "value": *sdk.Folder})
	}

	// Handling Primitives
	if !model.Id.IsNull() && !model.Id.IsUnknown() {
		sdk.Id = model.Id.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Id", "value": *sdk.Id})
	}

	// Handling Lists
	if !model.Reference.IsNull() && !model.Reference.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Reference")
		diags.Append(model.Reference.ElementsAs(ctx, &sdk.Reference, false)...)
	}

	// Handling Primitives
	if !model.Severity.IsNull() && !model.Severity.IsUnknown() {
		sdk.Severity = model.Severity.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Severity", "value": *sdk.Severity})
	}

	// Handling Objects
	if !model.Signature.IsNull() && !model.Signature.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Signature")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureToSdk(ctx, model.Signature)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Signature"})
		}
		if unpacked != nil {
			sdk.Signature = unpacked
		}
	}

	// Handling Primitives
	if !model.Snippet.IsNull() && !model.Snippet.IsUnknown() {
		sdk.Snippet = model.Snippet.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Snippet", "value": *sdk.Snippet})
	}

	// Handling Primitives
	if !model.ThreatId.IsNull() && !model.ThreatId.IsUnknown() {
		sdk.ThreatId = int32(model.ThreatId.ValueInt64())
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "ThreatId", "value": sdk.ThreatId})
	}

	// Handling Primitives
	if !model.Threatname.IsNull() && !model.Threatname.IsUnknown() {
		sdk.Threatname = model.Threatname.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Threatname", "value": sdk.Threatname})
	}

	// Handling Lists
	if !model.Vendor.IsNull() && !model.Vendor.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Vendor")
		diags.Append(model.Vendor.ElementsAs(ctx, &sdk.Vendor, false)...)
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignatures ---
func packVulnerabilityProtectionSignaturesFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignatures) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignatures
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AffectedHost != nil {
		tflog.Debug(ctx, "Packing nested object for field AffectedHost")
		packed, d := packVulnerabilityProtectionSignaturesAffectedHostFromSdk(ctx, *sdk.AffectedHost)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AffectedHost"})
		}
		model.AffectedHost = packed
	} else {
		model.AffectedHost = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrTypes())
	}
	// Handling Lists
	if sdk.Bugtraq != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Bugtraq")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Bugtraq, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Bugtraq)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Bugtraq = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Comment != nil {
		model.Comment = basetypes.NewStringValue(*sdk.Comment)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Comment", "value": *sdk.Comment})
	} else {
		model.Comment = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Cve != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Cve")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Cve, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Cve)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Cve = basetypes.NewListNull(elemType)
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.DefaultAction != nil {
		tflog.Debug(ctx, "Packing nested object for field DefaultAction")
		packed, d := packVulnerabilityProtectionSignaturesDefaultActionFromSdk(ctx, *sdk.DefaultAction)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "DefaultAction"})
		}
		model.DefaultAction = packed
	} else {
		model.DefaultAction = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Device != nil {
		model.Device = basetypes.NewStringValue(*sdk.Device)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Device", "value": *sdk.Device})
	} else {
		model.Device = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Direction != nil {
		model.Direction = basetypes.NewStringValue(*sdk.Direction)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Direction", "value": *sdk.Direction})
	} else {
		model.Direction = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Folder != nil {
		model.Folder = basetypes.NewStringValue(*sdk.Folder)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Folder", "value": *sdk.Folder})
	} else {
		model.Folder = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Id != nil {
		model.Id = basetypes.NewStringValue(*sdk.Id)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Id", "value": *sdk.Id})
	} else {
		model.Id = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Reference != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Reference")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Reference, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Reference)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Reference = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Severity != nil {
		model.Severity = basetypes.NewStringValue(*sdk.Severity)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Severity", "value": *sdk.Severity})
	} else {
		model.Severity = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Signature != nil {
		tflog.Debug(ctx, "Packing nested object for field Signature")
		packed, d := packVulnerabilityProtectionSignaturesSignatureFromSdk(ctx, *sdk.Signature)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Signature"})
		}
		model.Signature = packed
	} else {
		model.Signature = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesSignature{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Snippet != nil {
		model.Snippet = basetypes.NewStringValue(*sdk.Snippet)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Snippet", "value": *sdk.Snippet})
	} else {
		model.Snippet = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.ThreatId = basetypes.NewInt64Value(int64(sdk.ThreatId))
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "ThreatId", "value": sdk.ThreatId})
	// Handling Primitives
	// Standard primitive packing
	model.Threatname = basetypes.NewStringValue(sdk.Threatname)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Threatname", "value": sdk.Threatname})
	// Handling Lists
	if sdk.Vendor != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Vendor")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Vendor, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Vendor)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Vendor = basetypes.NewListNull(elemType)
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignatures{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignatures ---
func unpackVulnerabilityProtectionSignaturesListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignatures, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignatures")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignatures
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignatures, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignatures{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignatures ---
func packVulnerabilityProtectionSignaturesListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignatures) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignatures")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignatures

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignatures
		obj, d := packVulnerabilityProtectionSignaturesFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignatures{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignatures{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesAffectedHost ---
func unpackVulnerabilityProtectionSignaturesAffectedHostToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesAffectedHost, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesAffectedHost
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesAffectedHost
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Client.IsNull() && !model.Client.IsUnknown() {
		sdk.Client = model.Client.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Client", "value": *sdk.Client})
	}

	// Handling Primitives
	if !model.Server.IsNull() && !model.Server.IsUnknown() {
		sdk.Server = model.Server.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Server", "value": *sdk.Server})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesAffectedHost ---
func packVulnerabilityProtectionSignaturesAffectedHostFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesAffectedHost) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesAffectedHost
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Client != nil {
		model.Client = basetypes.NewBoolValue(*sdk.Client)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Client", "value": *sdk.Client})
	} else {
		model.Client = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Server != nil {
		model.Server = basetypes.NewBoolValue(*sdk.Server)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Server", "value": *sdk.Server})
	} else {
		model.Server = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesAffectedHost ---
func unpackVulnerabilityProtectionSignaturesAffectedHostListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesAffectedHost, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesAffectedHost")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesAffectedHost
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesAffectedHost, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesAffectedHostToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesAffectedHost ---
func packVulnerabilityProtectionSignaturesAffectedHostListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesAffectedHost) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesAffectedHost")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesAffectedHost

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesAffectedHost
		obj, d := packVulnerabilityProtectionSignaturesAffectedHostFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesDefaultAction ---
func unpackVulnerabilityProtectionSignaturesDefaultActionToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesDefaultAction, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesDefaultAction
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesDefaultAction
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.Alert.IsNull() && !model.Alert.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Alert")
		sdk.Alert = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.Allow.IsNull() && !model.Allow.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Allow")
		sdk.Allow = make(map[string]interface{})
	}

	// Handling Objects
	if !model.BlockIp.IsNull() && !model.BlockIp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field BlockIp")
		unpacked, d := unpackVulnerabilityProtectionProfilesRulesInnerActionBlockIpToSdk(ctx, model.BlockIp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "BlockIp"})
		}
		if unpacked != nil {
			sdk.BlockIp = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.Drop.IsNull() && !model.Drop.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Drop")
		sdk.Drop = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.ResetBoth.IsNull() && !model.ResetBoth.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field ResetBoth")
		sdk.ResetBoth = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.ResetClient.IsNull() && !model.ResetClient.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field ResetClient")
		sdk.ResetClient = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.ResetServer.IsNull() && !model.ResetServer.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field ResetServer")
		sdk.ResetServer = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesDefaultAction ---
func packVulnerabilityProtectionSignaturesDefaultActionFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesDefaultAction) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesDefaultAction
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Alert != nil && !reflect.ValueOf(sdk.Alert).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Alert")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Alert, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Alert = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Allow != nil && !reflect.ValueOf(sdk.Allow).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Allow")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Allow, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Allow = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.BlockIp != nil {
		tflog.Debug(ctx, "Packing nested object for field BlockIp")
		packed, d := packVulnerabilityProtectionProfilesRulesInnerActionBlockIpFromSdk(ctx, *sdk.BlockIp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "BlockIp"})
		}
		model.BlockIp = packed
	} else {
		model.BlockIp = basetypes.NewObjectNull(models.VulnerabilityProtectionProfilesRulesInnerActionBlockIp{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Drop != nil && !reflect.ValueOf(sdk.Drop).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Drop")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Drop, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Drop = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.ResetBoth != nil && !reflect.ValueOf(sdk.ResetBoth).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field ResetBoth")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.ResetBoth, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.ResetBoth = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.ResetClient != nil && !reflect.ValueOf(sdk.ResetClient).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field ResetClient")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.ResetClient, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.ResetClient = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.ResetServer != nil && !reflect.ValueOf(sdk.ResetServer).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field ResetServer")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.ResetServer, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.ResetServer = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesDefaultAction ---
func unpackVulnerabilityProtectionSignaturesDefaultActionListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesDefaultAction, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesDefaultAction")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesDefaultAction
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesDefaultAction, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesDefaultActionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesDefaultAction ---
func packVulnerabilityProtectionSignaturesDefaultActionListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesDefaultAction) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesDefaultAction")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesDefaultAction

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesDefaultAction
		obj, d := packVulnerabilityProtectionSignaturesDefaultActionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignature ---
func unpackVulnerabilityProtectionSignaturesSignatureToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignature, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignature
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignature
	var d diag.Diagnostics
	// Handling Objects
	if !model.Combination.IsNull() && !model.Combination.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Combination")
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationToSdk(ctx, model.Combination)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Combination"})
		}
		if unpacked != nil {
			sdk.Combination = unpacked
		}
	}

	// Handling Lists
	if !model.Standard.IsNull() && !model.Standard.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Standard")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerListToSdk(ctx, model.Standard)
		diags.Append(d...)
		sdk.Standard = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignature ---
func packVulnerabilityProtectionSignaturesSignatureFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignature) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignature
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Combination != nil {
		tflog.Debug(ctx, "Packing nested object for field Combination")
		packed, d := packAntiSpywareSignaturesSignatureCombinationFromSdk(ctx, *sdk.Combination)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Combination"})
		}
		model.Combination = packed
	} else {
		model.Combination = basetypes.NewObjectNull(models.AntiSpywareSignaturesSignatureCombination{}.AttrTypes())
	}
	// Handling Lists
	if sdk.Standard != nil {
		tflog.Debug(ctx, "Packing list of objects for field Standard")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerListFromSdk(ctx, sdk.Standard)
		diags.Append(d...)
		model.Standard = packed
	} else {
		model.Standard = basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignature{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignature ---
func unpackVulnerabilityProtectionSignaturesSignatureListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignature, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignature")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignature
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignature, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignature{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignature ---
func packVulnerabilityProtectionSignaturesSignatureListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignature) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignature")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignature

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignature
		obj, d := packVulnerabilityProtectionSignaturesSignatureFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignature{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignature{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureCombination ---
func unpackAntiSpywareSignaturesSignatureCombinationToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureCombination, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureCombination", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombination
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureCombination
	var d diag.Diagnostics
	// Handling Lists
	if !model.AndCondition.IsNull() && !model.AndCondition.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AndCondition")
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationAndConditionInnerListToSdk(ctx, model.AndCondition)
		diags.Append(d...)
		sdk.AndCondition = unpacked
	}

	// Handling Primitives
	if !model.OrderFree.IsNull() && !model.OrderFree.IsUnknown() {
		sdk.OrderFree = model.OrderFree.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OrderFree", "value": *sdk.OrderFree})
	}

	// Handling Objects
	if !model.TimeAttribute.IsNull() && !model.TimeAttribute.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field TimeAttribute")
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationTimeAttributeToSdk(ctx, model.TimeAttribute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "TimeAttribute"})
		}
		if unpacked != nil {
			sdk.TimeAttribute = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureCombination", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureCombination ---
func packAntiSpywareSignaturesSignatureCombinationFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureCombination) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureCombination", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombination
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AndCondition != nil {
		tflog.Debug(ctx, "Packing list of objects for field AndCondition")
		packed, d := packAntiSpywareSignaturesSignatureCombinationAndConditionInnerListFromSdk(ctx, sdk.AndCondition)
		diags.Append(d...)
		model.AndCondition = packed
	} else {
		model.AndCondition = basetypes.NewListNull(models.AntiSpywareSignaturesSignatureCombinationAndConditionInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OrderFree != nil {
		model.OrderFree = basetypes.NewBoolValue(*sdk.OrderFree)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OrderFree", "value": *sdk.OrderFree})
	} else {
		model.OrderFree = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.TimeAttribute != nil {
		tflog.Debug(ctx, "Packing nested object for field TimeAttribute")
		packed, d := packAntiSpywareSignaturesSignatureCombinationTimeAttributeFromSdk(ctx, *sdk.TimeAttribute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "TimeAttribute"})
		}
		model.TimeAttribute = packed
	} else {
		model.TimeAttribute = basetypes.NewObjectNull(models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombination{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureCombination", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureCombination ---
func unpackAntiSpywareSignaturesSignatureCombinationListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureCombination, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureCombination")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombination
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureCombination, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombination{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureCombination", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureCombination ---
func packAntiSpywareSignaturesSignatureCombinationListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureCombination) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureCombination")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombination

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureCombination
		obj, d := packAntiSpywareSignaturesSignatureCombinationFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureCombination{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureCombination", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombination{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureCombinationAndConditionInner ---
func unpackAntiSpywareSignaturesSignatureCombinationAndConditionInnerToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombinationAndConditionInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Lists
	if !model.OrCondition.IsNull() && !model.OrCondition.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field OrCondition")
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInnerListToSdk(ctx, model.OrCondition)
		diags.Append(d...)
		sdk.OrCondition = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureCombinationAndConditionInner ---
func packAntiSpywareSignaturesSignatureCombinationAndConditionInnerFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombinationAndConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.OrCondition != nil {
		tflog.Debug(ctx, "Packing list of objects for field OrCondition")
		packed, d := packAntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInnerListFromSdk(ctx, sdk.OrCondition)
		diags.Append(d...)
		model.OrCondition = packed
	} else {
		model.OrCondition = basetypes.NewListNull(models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationAndConditionInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureCombinationAndConditionInner ---
func unpackAntiSpywareSignaturesSignatureCombinationAndConditionInnerListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombinationAndConditionInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationAndConditionInner{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationAndConditionInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureCombinationAndConditionInner ---
func packAntiSpywareSignaturesSignatureCombinationAndConditionInnerListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombinationAndConditionInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureCombinationAndConditionInner
		obj, d := packAntiSpywareSignaturesSignatureCombinationAndConditionInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureCombinationAndConditionInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationAndConditionInner{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner ---
func unpackAntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInnerToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Primitives
	if !model.ThreatId.IsNull() && !model.ThreatId.IsUnknown() {
		sdk.ThreatId = model.ThreatId.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ThreatId", "value": *sdk.ThreatId})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner ---
func packAntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInnerFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ThreatId != nil {
		model.ThreatId = basetypes.NewStringValue(*sdk.ThreatId)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ThreatId", "value": *sdk.ThreatId})
	} else {
		model.ThreatId = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner ---
func unpackAntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInnerListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner ---
func packAntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInnerListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner
		obj, d := packAntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureCombinationTimeAttribute ---
func unpackAntiSpywareSignaturesSignatureCombinationTimeAttributeToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombinationTimeAttribute
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Interval.IsNull() && !model.Interval.IsUnknown() {
		val := int32(model.Interval.ValueInt64())
		sdk.Interval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interval", "value": *sdk.Interval})
	}

	// Handling Primitives
	if !model.Threshold.IsNull() && !model.Threshold.IsUnknown() {
		val := int32(model.Threshold.ValueInt64())
		sdk.Threshold = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Threshold", "value": *sdk.Threshold})
	}

	// Handling Primitives
	if !model.TrackBy.IsNull() && !model.TrackBy.IsUnknown() {
		sdk.TrackBy = model.TrackBy.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "TrackBy", "value": *sdk.TrackBy})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureCombinationTimeAttribute ---
func packAntiSpywareSignaturesSignatureCombinationTimeAttributeFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombinationTimeAttribute
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interval != nil {
		model.Interval = basetypes.NewInt64Value(int64(*sdk.Interval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interval", "value": *sdk.Interval})
	} else {
		model.Interval = basetypes.NewInt64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Threshold != nil {
		model.Threshold = basetypes.NewInt64Value(int64(*sdk.Threshold))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Threshold", "value": *sdk.Threshold})
	} else {
		model.Threshold = basetypes.NewInt64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.TrackBy != nil {
		model.TrackBy = basetypes.NewStringValue(*sdk.TrackBy)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "TrackBy", "value": *sdk.TrackBy})
	} else {
		model.TrackBy = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureCombinationTimeAttribute ---
func unpackAntiSpywareSignaturesSignatureCombinationTimeAttributeListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombinationTimeAttribute
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationTimeAttributeToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureCombinationTimeAttribute ---
func packAntiSpywareSignaturesSignatureCombinationTimeAttributeListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombinationTimeAttribute

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureCombinationTimeAttribute
		obj, d := packAntiSpywareSignaturesSignatureCombinationTimeAttributeFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureStandardInner ---
func unpackAntiSpywareSignaturesSignatureStandardInnerToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureStandardInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureStandardInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureStandardInner
	var d diag.Diagnostics
	// Handling Lists
	if !model.AndCondition.IsNull() && !model.AndCondition.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AndCondition")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerListToSdk(ctx, model.AndCondition)
		diags.Append(d...)
		sdk.AndCondition = unpacked
	}

	// Handling Primitives
	if !model.Comment.IsNull() && !model.Comment.IsUnknown() {
		sdk.Comment = model.Comment.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Comment", "value": *sdk.Comment})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.OrderFree.IsNull() && !model.OrderFree.IsUnknown() {
		sdk.OrderFree = model.OrderFree.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OrderFree", "value": *sdk.OrderFree})
	}

	// Handling Primitives
	if !model.Scope.IsNull() && !model.Scope.IsUnknown() {
		sdk.Scope = model.Scope.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Scope", "value": *sdk.Scope})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureStandardInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureStandardInner ---
func packAntiSpywareSignaturesSignatureStandardInnerFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureStandardInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureStandardInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInner
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AndCondition != nil {
		tflog.Debug(ctx, "Packing list of objects for field AndCondition")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerListFromSdk(ctx, sdk.AndCondition)
		diags.Append(d...)
		model.AndCondition = packed
	} else {
		model.AndCondition = basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Comment != nil {
		model.Comment = basetypes.NewStringValue(*sdk.Comment)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Comment", "value": *sdk.Comment})
	} else {
		model.Comment = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.OrderFree != nil {
		model.OrderFree = basetypes.NewBoolValue(*sdk.OrderFree)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OrderFree", "value": *sdk.OrderFree})
	} else {
		model.OrderFree = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Scope != nil {
		model.Scope = basetypes.NewStringValue(*sdk.Scope)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Scope", "value": *sdk.Scope})
	} else {
		model.Scope = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureStandardInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureStandardInner ---
func unpackAntiSpywareSignaturesSignatureStandardInnerListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureStandardInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureStandardInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureStandardInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInner{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureStandardInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureStandardInner ---
func packAntiSpywareSignaturesSignatureStandardInnerListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureStandardInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureStandardInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureStandardInner
		obj, d := packAntiSpywareSignaturesSignatureStandardInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureStandardInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInner{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInner ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Lists
	if !model.OrCondition.IsNull() && !model.OrCondition.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field OrCondition")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerListToSdk(ctx, model.OrCondition)
		diags.Append(d...)
		sdk.OrCondition = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInner ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.OrCondition != nil {
		tflog.Debug(ctx, "Packing list of objects for field OrCondition")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerListFromSdk(ctx, sdk.OrCondition)
		diags.Append(d...)
		model.OrCondition = packed
	} else {
		model.OrCondition = basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInner ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInner ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner
		obj, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInner{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Objects
	if !model.Operator.IsNull() && !model.Operator.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Operator")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorToSdk(ctx, model.Operator)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Operator"})
		}
		if unpacked != nil {
			sdk.Operator = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Operator != nil {
		tflog.Debug(ctx, "Packing nested object for field Operator")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorFromSdk(ctx, *sdk.Operator)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Operator"})
		}
		model.Operator = packed
	} else {
		model.Operator = basetypes.NewObjectNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
		obj, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
	var d diag.Diagnostics
	// Handling Objects
	if !model.EqualTo.IsNull() && !model.EqualTo.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field EqualTo")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToToSdk(ctx, model.EqualTo)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "EqualTo"})
		}
		if unpacked != nil {
			sdk.EqualTo = unpacked
		}
	}

	// Handling Objects
	if !model.GreaterThan.IsNull() && !model.GreaterThan.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GreaterThan")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanToSdk(ctx, model.GreaterThan)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GreaterThan"})
		}
		if unpacked != nil {
			sdk.GreaterThan = unpacked
		}
	}

	// Handling Objects
	if !model.LessThan.IsNull() && !model.LessThan.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field LessThan")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanToSdk(ctx, model.LessThan)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "LessThan"})
		}
		if unpacked != nil {
			sdk.LessThan = unpacked
		}
	}

	// Handling Objects
	if !model.PatternMatch.IsNull() && !model.PatternMatch.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field PatternMatch")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchToSdk(ctx, model.PatternMatch)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "PatternMatch"})
		}
		if unpacked != nil {
			sdk.PatternMatch = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.EqualTo != nil {
		tflog.Debug(ctx, "Packing nested object for field EqualTo")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToFromSdk(ctx, *sdk.EqualTo)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "EqualTo"})
		}
		model.EqualTo = packed
	} else {
		model.EqualTo = basetypes.NewObjectNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GreaterThan != nil {
		tflog.Debug(ctx, "Packing nested object for field GreaterThan")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanFromSdk(ctx, *sdk.GreaterThan)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GreaterThan"})
		}
		model.GreaterThan = packed
	} else {
		model.GreaterThan = basetypes.NewObjectNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.LessThan != nil {
		tflog.Debug(ctx, "Packing nested object for field LessThan")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanFromSdk(ctx, *sdk.LessThan)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "LessThan"})
		}
		model.LessThan = packed
	} else {
		model.LessThan = basetypes.NewObjectNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.PatternMatch != nil {
		tflog.Debug(ctx, "Packing nested object for field PatternMatch")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchFromSdk(ctx, *sdk.PatternMatch)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "PatternMatch"})
		}
		model.PatternMatch = packed
	} else {
		model.PatternMatch = basetypes.NewObjectNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
		obj, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Context.IsNull() && !model.Context.IsUnknown() {
		sdk.Context = model.Context.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	}

	// Handling Primitives
	if !model.Negate.IsNull() && !model.Negate.IsUnknown() {
		sdk.Negate = model.Negate.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Negate", "value": *sdk.Negate})
	}

	// Handling Lists
	if !model.Qualifier.IsNull() && !model.Qualifier.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Qualifier")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListToSdk(ctx, model.Qualifier)
		diags.Append(d...)
		sdk.Qualifier = unpacked
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		val := int32(model.Value.ValueInt64())
		sdk.Value = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Context != nil {
		model.Context = basetypes.NewStringValue(*sdk.Context)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	} else {
		model.Context = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Negate != nil {
		model.Negate = basetypes.NewBoolValue(*sdk.Negate)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Negate", "value": *sdk.Negate})
	} else {
		model.Negate = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.Qualifier != nil {
		tflog.Debug(ctx, "Packing list of objects for field Qualifier")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListFromSdk(ctx, sdk.Qualifier)
		diags.Append(d...)
		model.Qualifier = packed
	} else {
		model.Qualifier = basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewInt64Value(int64(*sdk.Value))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewInt64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
		obj, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		sdk.Value = model.Value.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewStringValue(*sdk.Value)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
		obj, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Context.IsNull() && !model.Context.IsUnknown() {
		sdk.Context = model.Context.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	}

	// Handling Lists
	if !model.Qualifier.IsNull() && !model.Qualifier.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Qualifier")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListToSdk(ctx, model.Qualifier)
		diags.Append(d...)
		sdk.Qualifier = unpacked
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		val := int32(model.Value.ValueInt64())
		sdk.Value = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Context != nil {
		model.Context = basetypes.NewStringValue(*sdk.Context)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	} else {
		model.Context = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Qualifier != nil {
		tflog.Debug(ctx, "Packing list of objects for field Qualifier")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListFromSdk(ctx, sdk.Qualifier)
		diags.Append(d...)
		model.Qualifier = packed
	} else {
		model.Qualifier = basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewInt64Value(int64(*sdk.Value))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewInt64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
		obj, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Context.IsNull() && !model.Context.IsUnknown() {
		sdk.Context = model.Context.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	}

	// Handling Primitives
	if !model.Negate.IsNull() && !model.Negate.IsUnknown() {
		sdk.Negate = model.Negate.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Negate", "value": *sdk.Negate})
	}

	// Handling Primitives
	if !model.Pattern.IsNull() && !model.Pattern.IsUnknown() {
		sdk.Pattern = model.Pattern.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Pattern", "value": *sdk.Pattern})
	}

	// Handling Lists
	if !model.Qualifier.IsNull() && !model.Qualifier.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Qualifier")
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListToSdk(ctx, model.Qualifier)
		diags.Append(d...)
		sdk.Qualifier = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Context != nil {
		model.Context = basetypes.NewStringValue(*sdk.Context)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	} else {
		model.Context = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Negate != nil {
		model.Negate = basetypes.NewBoolValue(*sdk.Negate)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Negate", "value": *sdk.Negate})
	} else {
		model.Negate = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Pattern != nil {
		model.Pattern = basetypes.NewStringValue(*sdk.Pattern)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Pattern", "value": *sdk.Pattern})
	} else {
		model.Pattern = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Qualifier != nil {
		tflog.Debug(ctx, "Packing list of objects for field Qualifier")
		packed, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListFromSdk(ctx, sdk.Qualifier)
		diags.Append(d...)
		model.Qualifier = packed
	} else {
		model.Qualifier = basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch ---
func unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch ---
func packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
		obj, d := packAntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrType(), data)
}
