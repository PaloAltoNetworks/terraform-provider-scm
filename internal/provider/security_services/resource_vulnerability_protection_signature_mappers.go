package provider

import (
	"context"
	"reflect"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	"github.com/paloaltonetworks/scm-go/generated/security_services"
	models "github.com/paloaltonetworks/terraform-provider-scm/internal/models/security_services"
)

// --- Unpacker for VulnerabilityProtectionSignatures ---
func unpackVulnerabilityProtectionSignaturesToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignatures, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignatures
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignatures
	var d diag.Diagnostics
	// Handling Objects
	if !model.AffectedHost.IsNull() && !model.AffectedHost.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field AffectedHost")
		unpacked, d := unpackVulnerabilityProtectionSignaturesAffectedHostToSdk(ctx, model.AffectedHost)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "AffectedHost"})
		}
		if unpacked != nil {
			sdk.AffectedHost = unpacked
		}
	}

	// Handling Lists
	if !model.Bugtraq.IsNull() && !model.Bugtraq.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Bugtraq")
		diags.Append(model.Bugtraq.ElementsAs(ctx, &sdk.Bugtraq, false)...)
	}

	// Handling Primitives
	if !model.Comment.IsNull() && !model.Comment.IsUnknown() {
		sdk.Comment = model.Comment.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Comment", "value": *sdk.Comment})
	}

	// Handling Lists
	if !model.Cve.IsNull() && !model.Cve.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Cve")
		diags.Append(model.Cve.ElementsAs(ctx, &sdk.Cve, false)...)
	}

	// Handling Objects
	if !model.DefaultAction.IsNull() && !model.DefaultAction.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field DefaultAction")
		unpacked, d := unpackVulnerabilityProtectionSignaturesDefaultActionToSdk(ctx, model.DefaultAction)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "DefaultAction"})
		}
		if unpacked != nil {
			sdk.DefaultAction = unpacked
		}
	}

	// Handling Primitives
	if !model.Device.IsNull() && !model.Device.IsUnknown() {
		sdk.Device = model.Device.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Device", "value": *sdk.Device})
	}

	// Handling Primitives
	if !model.Direction.IsNull() && !model.Direction.IsUnknown() {
		sdk.Direction = model.Direction.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Direction", "value": *sdk.Direction})
	}

	// Handling Primitives
	if !model.Folder.IsNull() && !model.Folder.IsUnknown() {
		sdk.Folder = model.Folder.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Folder", "value": *sdk.Folder})
	}

	// Handling Primitives
	if !model.Id.IsNull() && !model.Id.IsUnknown() {
		sdk.Id = model.Id.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Id", "value": *sdk.Id})
	}

	// Handling Lists
	if !model.Reference.IsNull() && !model.Reference.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Reference")
		diags.Append(model.Reference.ElementsAs(ctx, &sdk.Reference, false)...)
	}

	// Handling Primitives
	if !model.Severity.IsNull() && !model.Severity.IsUnknown() {
		sdk.Severity = model.Severity.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Severity", "value": *sdk.Severity})
	}

	// Handling Objects
	if !model.Signature.IsNull() && !model.Signature.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Signature")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureToSdk(ctx, model.Signature)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Signature"})
		}
		if unpacked != nil {
			sdk.Signature = unpacked
		}
	}

	// Handling Primitives
	if !model.Snippet.IsNull() && !model.Snippet.IsUnknown() {
		sdk.Snippet = model.Snippet.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Snippet", "value": *sdk.Snippet})
	}

	// Handling Primitives
	if !model.ThreatId.IsNull() && !model.ThreatId.IsUnknown() {
		sdk.ThreatId = int32(model.ThreatId.ValueInt64())
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "ThreatId", "value": sdk.ThreatId})
	}

	// Handling Primitives
	if !model.Threatname.IsNull() && !model.Threatname.IsUnknown() {
		sdk.Threatname = model.Threatname.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Threatname", "value": sdk.Threatname})
	}

	// Handling Lists
	if !model.Vendor.IsNull() && !model.Vendor.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of primitives for field Vendor")
		diags.Append(model.Vendor.ElementsAs(ctx, &sdk.Vendor, false)...)
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignatures ---
func packVulnerabilityProtectionSignaturesFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignatures) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignatures
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.AffectedHost != nil {
		tflog.Debug(ctx, "Packing nested object for field AffectedHost")
		packed, d := packVulnerabilityProtectionSignaturesAffectedHostFromSdk(ctx, *sdk.AffectedHost)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "AffectedHost"})
		}
		model.AffectedHost = packed
	} else {
		model.AffectedHost = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrTypes())
	}
	// Handling Lists
	if sdk.Bugtraq != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Bugtraq")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Bugtraq, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Bugtraq)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Bugtraq = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Comment != nil {
		model.Comment = basetypes.NewStringValue(*sdk.Comment)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Comment", "value": *sdk.Comment})
	} else {
		model.Comment = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Cve != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Cve")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Cve, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Cve)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Cve = basetypes.NewListNull(elemType)
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.DefaultAction != nil {
		tflog.Debug(ctx, "Packing nested object for field DefaultAction")
		packed, d := packVulnerabilityProtectionSignaturesDefaultActionFromSdk(ctx, *sdk.DefaultAction)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "DefaultAction"})
		}
		model.DefaultAction = packed
	} else {
		model.DefaultAction = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Device != nil {
		model.Device = basetypes.NewStringValue(*sdk.Device)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Device", "value": *sdk.Device})
	} else {
		model.Device = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Direction != nil {
		model.Direction = basetypes.NewStringValue(*sdk.Direction)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Direction", "value": *sdk.Direction})
	} else {
		model.Direction = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Folder != nil {
		model.Folder = basetypes.NewStringValue(*sdk.Folder)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Folder", "value": *sdk.Folder})
	} else {
		model.Folder = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Id != nil {
		model.Id = basetypes.NewStringValue(*sdk.Id)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Id", "value": *sdk.Id})
	} else {
		model.Id = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Reference != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Reference")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Reference, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Reference)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Reference = basetypes.NewListNull(elemType)
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Severity != nil {
		model.Severity = basetypes.NewStringValue(*sdk.Severity)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Severity", "value": *sdk.Severity})
	} else {
		model.Severity = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Signature != nil {
		tflog.Debug(ctx, "Packing nested object for field Signature")
		packed, d := packVulnerabilityProtectionSignaturesSignatureFromSdk(ctx, *sdk.Signature)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Signature"})
		}
		model.Signature = packed
	} else {
		model.Signature = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesSignature{}.AttrTypes())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Snippet != nil {
		model.Snippet = basetypes.NewStringValue(*sdk.Snippet)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Snippet", "value": *sdk.Snippet})
	} else {
		model.Snippet = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.ThreatId = basetypes.NewInt64Value(int64(sdk.ThreatId))
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "ThreatId", "value": sdk.ThreatId})
	// Handling Primitives
	// Standard primitive packing
	model.Threatname = basetypes.NewStringValue(sdk.Threatname)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Threatname", "value": sdk.Threatname})
	// Handling Lists
	if sdk.Vendor != nil {
		tflog.Debug(ctx, "Packing list of primitives for field Vendor")
		var d diag.Diagnostics
		// This logic now dynamically determines the element type based on the SDK's Go type.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Vendor, d = basetypes.NewListValueFrom(ctx, elemType, sdk.Vendor)
		diags.Append(d...)
	} else {
		// This logic now creates a correctly typed null list.
		var elemType attr.Type = basetypes.StringType{} // Default to string
		model.Vendor = basetypes.NewListNull(elemType)
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignatures{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignatures ---
func unpackVulnerabilityProtectionSignaturesListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignatures, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignatures")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignatures
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignatures, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignatures{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignatures ---
func packVulnerabilityProtectionSignaturesListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignatures) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignatures")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignatures

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignatures
		obj, d := packVulnerabilityProtectionSignaturesFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignatures{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignatures", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignatures{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesAffectedHost ---
func unpackVulnerabilityProtectionSignaturesAffectedHostToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesAffectedHost, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesAffectedHost
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesAffectedHost
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Client.IsNull() && !model.Client.IsUnknown() {
		sdk.Client = model.Client.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Client", "value": *sdk.Client})
	}

	// Handling Primitives
	if !model.Server.IsNull() && !model.Server.IsUnknown() {
		sdk.Server = model.Server.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Server", "value": *sdk.Server})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesAffectedHost ---
func packVulnerabilityProtectionSignaturesAffectedHostFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesAffectedHost) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesAffectedHost
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Client != nil {
		model.Client = basetypes.NewBoolValue(*sdk.Client)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Client", "value": *sdk.Client})
	} else {
		model.Client = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Server != nil {
		model.Server = basetypes.NewBoolValue(*sdk.Server)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Server", "value": *sdk.Server})
	} else {
		model.Server = basetypes.NewBoolNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesAffectedHost ---
func unpackVulnerabilityProtectionSignaturesAffectedHostListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesAffectedHost, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesAffectedHost")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesAffectedHost
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesAffectedHost, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesAffectedHostToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesAffectedHost ---
func packVulnerabilityProtectionSignaturesAffectedHostListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesAffectedHost) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesAffectedHost")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesAffectedHost

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesAffectedHost
		obj, d := packVulnerabilityProtectionSignaturesAffectedHostFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesAffectedHost", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesAffectedHost{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesDefaultAction ---
func unpackVulnerabilityProtectionSignaturesDefaultActionToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesDefaultAction, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesDefaultAction
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesDefaultAction
	var d diag.Diagnostics
	// Handling Typeless Objects
	if !model.Alert.IsNull() && !model.Alert.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Alert")
		sdk.Alert = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.Allow.IsNull() && !model.Allow.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Allow")
		sdk.Allow = make(map[string]interface{})
	}

	// Handling Objects
	if !model.BlockIp.IsNull() && !model.BlockIp.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field BlockIp")
		unpacked, d := unpackVulnerabilityProtectionProfilesRulesInnerActionBlockIpToSdk(ctx, model.BlockIp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "BlockIp"})
		}
		if unpacked != nil {
			sdk.BlockIp = unpacked
		}
	}

	// Handling Typeless Objects
	if !model.Drop.IsNull() && !model.Drop.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field Drop")
		sdk.Drop = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.ResetBoth.IsNull() && !model.ResetBoth.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field ResetBoth")
		sdk.ResetBoth = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.ResetClient.IsNull() && !model.ResetClient.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field ResetClient")
		sdk.ResetClient = make(map[string]interface{})
	}

	// Handling Typeless Objects
	if !model.ResetServer.IsNull() && !model.ResetServer.IsUnknown() {
		tflog.Debug(ctx, "Unpacking typeless object for field ResetServer")
		sdk.ResetServer = make(map[string]interface{})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesDefaultAction ---
func packVulnerabilityProtectionSignaturesDefaultActionFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesDefaultAction) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesDefaultAction
	var d diag.Diagnostics
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Alert != nil && !reflect.ValueOf(sdk.Alert).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Alert")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Alert, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Alert = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Allow != nil && !reflect.ValueOf(sdk.Allow).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Allow")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Allow, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Allow = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.BlockIp != nil {
		tflog.Debug(ctx, "Packing nested object for field BlockIp")
		packed, d := packVulnerabilityProtectionProfilesRulesInnerActionBlockIpFromSdk(ctx, *sdk.BlockIp)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "BlockIp"})
		}
		model.BlockIp = packed
	} else {
		model.BlockIp = basetypes.NewObjectNull(models.VulnerabilityProtectionProfilesRulesInnerActionBlockIp{}.AttrTypes())
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.Drop != nil && !reflect.ValueOf(sdk.Drop).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field Drop")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.Drop, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.Drop = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.ResetBoth != nil && !reflect.ValueOf(sdk.ResetBoth).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field ResetBoth")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.ResetBoth, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.ResetBoth = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.ResetClient != nil && !reflect.ValueOf(sdk.ResetClient).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field ResetClient")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.ResetClient, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.ResetClient = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	// Handling Objects
	// This is a marker object (e.g. CHAP: {}). We just need to create an empty, non-null object.
	if sdk.ResetServer != nil && !reflect.ValueOf(sdk.ResetServer).IsNil() {
		tflog.Debug(ctx, "Packing typeless object for field ResetServer")
		var d diag.Diagnostics
		// Create an empty object with no attributes, which signifies its presence.
		model.ResetServer, d = basetypes.NewObjectValue(map[string]attr.Type{}, map[string]attr.Value{})
		diags.Append(d...)
	} else {
		// Since this field is part of a oneOf, being nil means it's not selected.
		// We make the object null with an empty attribute map.
		model.ResetServer = basetypes.NewObjectNull(map[string]attr.Type{})
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesDefaultAction ---
func unpackVulnerabilityProtectionSignaturesDefaultActionListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesDefaultAction, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesDefaultAction")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesDefaultAction
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesDefaultAction, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesDefaultActionToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesDefaultAction ---
func packVulnerabilityProtectionSignaturesDefaultActionListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesDefaultAction) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesDefaultAction")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesDefaultAction

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesDefaultAction
		obj, d := packVulnerabilityProtectionSignaturesDefaultActionFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesDefaultAction", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesDefaultAction{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignature ---
func unpackVulnerabilityProtectionSignaturesSignatureToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignature, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignature
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignature
	var d diag.Diagnostics
	// Handling Objects
	if !model.Combination.IsNull() && !model.Combination.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Combination")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureCombinationToSdk(ctx, model.Combination)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Combination"})
		}
		if unpacked != nil {
			sdk.Combination = unpacked
		}
	}

	// Handling Lists
	if !model.Standard.IsNull() && !model.Standard.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Standard")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerListToSdk(ctx, model.Standard)
		diags.Append(d...)
		sdk.Standard = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignature ---
func packVulnerabilityProtectionSignaturesSignatureFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignature) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignature
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Combination != nil {
		tflog.Debug(ctx, "Packing nested object for field Combination")
		packed, d := packVulnerabilityProtectionSignaturesSignatureCombinationFromSdk(ctx, *sdk.Combination)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Combination"})
		}
		model.Combination = packed
	} else {
		model.Combination = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesSignatureCombination{}.AttrTypes())
	}
	// Handling Lists
	if sdk.Standard != nil {
		tflog.Debug(ctx, "Packing list of objects for field Standard")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerListFromSdk(ctx, sdk.Standard)
		diags.Append(d...)
		model.Standard = packed
	} else {
		model.Standard = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignature{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignature ---
func unpackVulnerabilityProtectionSignaturesSignatureListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignature, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignature")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignature
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignature, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignature{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignature ---
func packVulnerabilityProtectionSignaturesSignatureListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignature) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignature")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignature

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignature
		obj, d := packVulnerabilityProtectionSignaturesSignatureFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignature{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignature", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignature{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureCombination ---
func unpackVulnerabilityProtectionSignaturesSignatureCombinationToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureCombination, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombination", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureCombination
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureCombination
	var d diag.Diagnostics
	// Handling Lists
	if !model.AndCondition.IsNull() && !model.AndCondition.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AndCondition")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerListToSdk(ctx, model.AndCondition)
		diags.Append(d...)
		sdk.AndCondition = unpacked
	}

	// Handling Primitives
	if !model.OrderFree.IsNull() && !model.OrderFree.IsUnknown() {
		sdk.OrderFree = model.OrderFree.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OrderFree", "value": *sdk.OrderFree})
	}

	// Handling Objects
	if !model.TimeAttribute.IsNull() && !model.TimeAttribute.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field TimeAttribute")
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationTimeAttributeToSdk(ctx, model.TimeAttribute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "TimeAttribute"})
		}
		if unpacked != nil {
			sdk.TimeAttribute = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombination", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureCombination ---
func packVulnerabilityProtectionSignaturesSignatureCombinationFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureCombination) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureCombination", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureCombination
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AndCondition != nil {
		tflog.Debug(ctx, "Packing list of objects for field AndCondition")
		packed, d := packVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerListFromSdk(ctx, sdk.AndCondition)
		diags.Append(d...)
		model.AndCondition = packed
	} else {
		model.AndCondition = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.OrderFree != nil {
		model.OrderFree = basetypes.NewBoolValue(*sdk.OrderFree)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OrderFree", "value": *sdk.OrderFree})
	} else {
		model.OrderFree = basetypes.NewBoolNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.TimeAttribute != nil {
		tflog.Debug(ctx, "Packing nested object for field TimeAttribute")
		packed, d := packAntiSpywareSignaturesSignatureCombinationTimeAttributeFromSdk(ctx, *sdk.TimeAttribute)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "TimeAttribute"})
		}
		model.TimeAttribute = packed
	} else {
		model.TimeAttribute = basetypes.NewObjectNull(models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombination{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureCombination", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureCombination ---
func unpackVulnerabilityProtectionSignaturesSignatureCombinationListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureCombination, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombination")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureCombination
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureCombination, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombination{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureCombinationToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombination", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureCombination ---
func packVulnerabilityProtectionSignaturesSignatureCombinationListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureCombination) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureCombination")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureCombination

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureCombination
		obj, d := packVulnerabilityProtectionSignaturesSignatureCombinationFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureCombination{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureCombination", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombination{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner ---
func unpackVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Lists
	if !model.OrCondition.IsNull() && !model.OrCondition.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field OrCondition")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInnerListToSdk(ctx, model.OrCondition)
		diags.Append(d...)
		sdk.OrCondition = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner ---
func packVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.OrCondition != nil {
		tflog.Debug(ctx, "Packing list of objects for field OrCondition")
		packed, d := packVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInnerListFromSdk(ctx, sdk.OrCondition)
		diags.Append(d...)
		model.OrCondition = packed
	} else {
		model.OrCondition = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner ---
func unpackVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner ---
func packVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInner{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner ---
func unpackVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Primitives
	if !model.ThreatId.IsNull() && !model.ThreatId.IsUnknown() {
		sdk.ThreatId = model.ThreatId.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "ThreatId", "value": *sdk.ThreatId})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner ---
func packVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.ThreatId != nil {
		model.ThreatId = basetypes.NewStringValue(*sdk.ThreatId)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "ThreatId", "value": *sdk.ThreatId})
	} else {
		model.ThreatId = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner ---
func unpackVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner ---
func packVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureCombinationAndConditionInnerOrConditionInner{}.AttrType(), data)
}

// --- Unpacker for AntiSpywareSignaturesSignatureCombinationTimeAttribute ---
func unpackAntiSpywareSignaturesSignatureCombinationTimeAttributeToSdk(ctx context.Context, obj types.Object) (*security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombinationTimeAttribute
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Interval.IsNull() && !model.Interval.IsUnknown() {
		val := int32(model.Interval.ValueInt64())
		sdk.Interval = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Interval", "value": *sdk.Interval})
	}

	// Handling Primitives
	if !model.Threshold.IsNull() && !model.Threshold.IsUnknown() {
		val := int32(model.Threshold.ValueInt64())
		sdk.Threshold = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Threshold", "value": *sdk.Threshold})
	}

	// Handling Primitives
	if !model.TrackBy.IsNull() && !model.TrackBy.IsUnknown() {
		sdk.TrackBy = model.TrackBy.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "TrackBy", "value": *sdk.TrackBy})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for AntiSpywareSignaturesSignatureCombinationTimeAttribute ---
func packAntiSpywareSignaturesSignatureCombinationTimeAttributeFromSdk(ctx context.Context, sdk security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.AntiSpywareSignaturesSignatureCombinationTimeAttribute
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Interval != nil {
		model.Interval = basetypes.NewInt64Value(int64(*sdk.Interval))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Interval", "value": *sdk.Interval})
	} else {
		model.Interval = basetypes.NewInt64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Threshold != nil {
		model.Threshold = basetypes.NewInt64Value(int64(*sdk.Threshold))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Threshold", "value": *sdk.Threshold})
	} else {
		model.Threshold = basetypes.NewInt64Null()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.TrackBy != nil {
		model.TrackBy = basetypes.NewStringValue(*sdk.TrackBy)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "TrackBy", "value": *sdk.TrackBy})
	} else {
		model.TrackBy = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for AntiSpywareSignaturesSignatureCombinationTimeAttribute ---
func unpackAntiSpywareSignaturesSignatureCombinationTimeAttributeListToSdk(ctx context.Context, list types.List) ([]security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombinationTimeAttribute
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrTypes(), &item)
		unpacked, d := unpackAntiSpywareSignaturesSignatureCombinationTimeAttributeToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for AntiSpywareSignaturesSignatureCombinationTimeAttribute ---
func packAntiSpywareSignaturesSignatureCombinationTimeAttributeListFromSdk(ctx context.Context, sdks []security_services.AntiSpywareSignaturesSignatureCombinationTimeAttribute) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute")
	diags := diag.Diagnostics{}
	var data []models.AntiSpywareSignaturesSignatureCombinationTimeAttribute

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.AntiSpywareSignaturesSignatureCombinationTimeAttribute
		obj, d := packAntiSpywareSignaturesSignatureCombinationTimeAttributeFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.AntiSpywareSignaturesSignatureCombinationTimeAttribute", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.AntiSpywareSignaturesSignatureCombinationTimeAttribute{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInner
	var d diag.Diagnostics
	// Handling Lists
	if !model.AndCondition.IsNull() && !model.AndCondition.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field AndCondition")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerListToSdk(ctx, model.AndCondition)
		diags.Append(d...)
		sdk.AndCondition = unpacked
	}

	// Handling Primitives
	if !model.Comment.IsNull() && !model.Comment.IsUnknown() {
		sdk.Comment = model.Comment.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Comment", "value": *sdk.Comment})
	}

	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueString()
		tflog.Debug(ctx, "Unpacked primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	}

	// Handling Primitives
	if !model.OrderFree.IsNull() && !model.OrderFree.IsUnknown() {
		sdk.OrderFree = model.OrderFree.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "OrderFree", "value": *sdk.OrderFree})
	}

	// Handling Primitives
	if !model.Scope.IsNull() && !model.Scope.IsUnknown() {
		sdk.Scope = model.Scope.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Scope", "value": *sdk.Scope})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInner
	var d diag.Diagnostics
	// Handling Lists
	if sdk.AndCondition != nil {
		tflog.Debug(ctx, "Packing list of objects for field AndCondition")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerListFromSdk(ctx, sdk.AndCondition)
		diags.Append(d...)
		model.AndCondition = packed
	} else {
		model.AndCondition = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Comment != nil {
		model.Comment = basetypes.NewStringValue(*sdk.Comment)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Comment", "value": *sdk.Comment})
	} else {
		model.Comment = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	model.Name = basetypes.NewStringValue(sdk.Name)
	tflog.Debug(ctx, "Packed primitive value", map[string]interface{}{"field": "Name", "value": sdk.Name})
	// Handling Primitives
	// Standard primitive packing
	if sdk.OrderFree != nil {
		model.OrderFree = basetypes.NewBoolValue(*sdk.OrderFree)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "OrderFree", "value": *sdk.OrderFree})
	} else {
		model.OrderFree = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Scope != nil {
		model.Scope = basetypes.NewStringValue(*sdk.Scope)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Scope", "value": *sdk.Scope})
	} else {
		model.Scope = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInner{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Lists
	if !model.OrCondition.IsNull() && !model.OrCondition.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field OrCondition")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerListToSdk(ctx, model.OrCondition)
		diags.Append(d...)
		sdk.OrCondition = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.OrCondition != nil {
		tflog.Debug(ctx, "Packing list of objects for field OrCondition")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerListFromSdk(ctx, sdk.OrCondition)
		diags.Append(d...)
		model.OrCondition = packed
	} else {
		model.OrCondition = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInner{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Objects
	if !model.Operator.IsNull() && !model.Operator.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field Operator")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorToSdk(ctx, model.Operator)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "Operator"})
		}
		if unpacked != nil {
			sdk.Operator = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.Operator != nil {
		tflog.Debug(ctx, "Packing nested object for field Operator")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorFromSdk(ctx, *sdk.Operator)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "Operator"})
		}
		model.Operator = packed
	} else {
		model.Operator = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInner{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
	var d diag.Diagnostics
	// Handling Objects
	if !model.EqualTo.IsNull() && !model.EqualTo.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field EqualTo")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToToSdk(ctx, model.EqualTo)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "EqualTo"})
		}
		if unpacked != nil {
			sdk.EqualTo = unpacked
		}
	}

	// Handling Objects
	if !model.GreaterThan.IsNull() && !model.GreaterThan.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field GreaterThan")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanToSdk(ctx, model.GreaterThan)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "GreaterThan"})
		}
		if unpacked != nil {
			sdk.GreaterThan = unpacked
		}
	}

	// Handling Objects
	if !model.LessThan.IsNull() && !model.LessThan.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field LessThan")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanToSdk(ctx, model.LessThan)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "LessThan"})
		}
		if unpacked != nil {
			sdk.LessThan = unpacked
		}
	}

	// Handling Objects
	if !model.PatternMatch.IsNull() && !model.PatternMatch.IsUnknown() {
		tflog.Debug(ctx, "Unpacking nested object for field PatternMatch")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchToSdk(ctx, model.PatternMatch)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error unpacking nested object", map[string]interface{}{"field": "PatternMatch"})
		}
		if unpacked != nil {
			sdk.PatternMatch = unpacked
		}
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
	var d diag.Diagnostics
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.EqualTo != nil {
		tflog.Debug(ctx, "Packing nested object for field EqualTo")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToFromSdk(ctx, *sdk.EqualTo)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "EqualTo"})
		}
		model.EqualTo = packed
	} else {
		model.EqualTo = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.GreaterThan != nil {
		tflog.Debug(ctx, "Packing nested object for field GreaterThan")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanFromSdk(ctx, *sdk.GreaterThan)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "GreaterThan"})
		}
		model.GreaterThan = packed
	} else {
		model.GreaterThan = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.LessThan != nil {
		tflog.Debug(ctx, "Packing nested object for field LessThan")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanFromSdk(ctx, *sdk.LessThan)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "LessThan"})
		}
		model.LessThan = packed
	} else {
		model.LessThan = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan{}.AttrTypes())
	}
	// Handling Objects
	// This is a regular nested object that has its own packer.
	if sdk.PatternMatch != nil {
		tflog.Debug(ctx, "Packing nested object for field PatternMatch")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchFromSdk(ctx, *sdk.PatternMatch)
		diags.Append(d...)
		if d.HasError() {
			tflog.Error(ctx, "Error packing nested object", map[string]interface{}{"field": "PatternMatch"})
		}
		model.PatternMatch = packed
	} else {
		model.PatternMatch = basetypes.NewObjectNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrTypes())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperator{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Context.IsNull() && !model.Context.IsUnknown() {
		sdk.Context = model.Context.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	}

	// Handling Primitives
	if !model.Negate.IsNull() && !model.Negate.IsUnknown() {
		sdk.Negate = model.Negate.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Negate", "value": *sdk.Negate})
	}

	// Handling Lists
	if !model.Qualifier.IsNull() && !model.Qualifier.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Qualifier")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListToSdk(ctx, model.Qualifier)
		diags.Append(d...)
		sdk.Qualifier = unpacked
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		val := int32(model.Value.ValueInt64())
		sdk.Value = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Context != nil {
		model.Context = basetypes.NewStringValue(*sdk.Context)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	} else {
		model.Context = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Negate != nil {
		model.Negate = basetypes.NewBoolValue(*sdk.Negate)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Negate", "value": *sdk.Negate})
	} else {
		model.Negate = basetypes.NewBoolNull()
	}
	// Handling Lists
	if sdk.Qualifier != nil {
		tflog.Debug(ctx, "Packing list of objects for field Qualifier")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListFromSdk(ctx, sdk.Qualifier)
		diags.Append(d...)
		model.Qualifier = packed
	} else {
		model.Qualifier = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewInt64Value(int64(*sdk.Value))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewInt64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualTo{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		sdk.Value = model.Value.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewStringValue(*sdk.Value)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorEqualToQualifierInner{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Context.IsNull() && !model.Context.IsUnknown() {
		sdk.Context = model.Context.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	}

	// Handling Lists
	if !model.Qualifier.IsNull() && !model.Qualifier.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Qualifier")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInnerListToSdk(ctx, model.Qualifier)
		diags.Append(d...)
		sdk.Qualifier = unpacked
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		val := int32(model.Value.ValueInt64())
		sdk.Value = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Context != nil {
		model.Context = basetypes.NewStringValue(*sdk.Context)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	} else {
		model.Context = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Qualifier != nil {
		tflog.Debug(ctx, "Packing list of objects for field Qualifier")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInnerListFromSdk(ctx, sdk.Qualifier)
		diags.Append(d...)
		model.Qualifier = packed
	} else {
		model.Qualifier = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewInt64Value(int64(*sdk.Value))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewInt64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThan{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		sdk.Value = model.Value.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewStringValue(*sdk.Value)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorGreaterThanQualifierInner{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Context.IsNull() && !model.Context.IsUnknown() {
		sdk.Context = model.Context.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	}

	// Handling Lists
	if !model.Qualifier.IsNull() && !model.Qualifier.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Qualifier")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInnerListToSdk(ctx, model.Qualifier)
		diags.Append(d...)
		sdk.Qualifier = unpacked
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		val := int32(model.Value.ValueInt64())
		sdk.Value = &val
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Context != nil {
		model.Context = basetypes.NewStringValue(*sdk.Context)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	} else {
		model.Context = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Qualifier != nil {
		tflog.Debug(ctx, "Packing list of objects for field Qualifier")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInnerListFromSdk(ctx, sdk.Qualifier)
		diags.Append(d...)
		model.Qualifier = packed
	} else {
		model.Qualifier = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner{}.AttrType())
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewInt64Value(int64(*sdk.Value))
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewInt64Null()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThan{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		sdk.Value = model.Value.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewStringValue(*sdk.Value)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorLessThanQualifierInner{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Context.IsNull() && !model.Context.IsUnknown() {
		sdk.Context = model.Context.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	}

	// Handling Primitives
	if !model.Negate.IsNull() && !model.Negate.IsUnknown() {
		sdk.Negate = model.Negate.ValueBoolPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Negate", "value": *sdk.Negate})
	}

	// Handling Primitives
	if !model.Pattern.IsNull() && !model.Pattern.IsUnknown() {
		sdk.Pattern = model.Pattern.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Pattern", "value": *sdk.Pattern})
	}

	// Handling Lists
	if !model.Qualifier.IsNull() && !model.Qualifier.IsUnknown() {
		tflog.Debug(ctx, "Unpacking list of objects for field Qualifier")
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInnerListToSdk(ctx, model.Qualifier)
		diags.Append(d...)
		sdk.Qualifier = unpacked
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Context != nil {
		model.Context = basetypes.NewStringValue(*sdk.Context)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Context", "value": *sdk.Context})
	} else {
		model.Context = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Negate != nil {
		model.Negate = basetypes.NewBoolValue(*sdk.Negate)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Negate", "value": *sdk.Negate})
	} else {
		model.Negate = basetypes.NewBoolNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Pattern != nil {
		model.Pattern = basetypes.NewStringValue(*sdk.Pattern)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Pattern", "value": *sdk.Pattern})
	} else {
		model.Pattern = basetypes.NewStringNull()
	}
	// Handling Lists
	if sdk.Qualifier != nil {
		tflog.Debug(ctx, "Packing list of objects for field Qualifier")
		packed, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInnerListFromSdk(ctx, sdk.Qualifier)
		diags.Append(d...)
		model.Qualifier = packed
	} else {
		model.Qualifier = basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner{}.AttrType())
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatch{}.AttrType(), data)
}

// --- Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInnerToSdk(ctx context.Context, obj types.Object) (*security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner", map[string]interface{}{"tf_object": obj})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner
	diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting Terraform object to Go model", map[string]interface{}{"diags": diags})
		return nil, diags
	}
	tflog.Debug(ctx, "Successfully converted Terraform object to Go model")

	var sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	if !model.Name.IsNull() && !model.Name.IsUnknown() {
		sdk.Name = model.Name.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	}

	// Handling Primitives
	if !model.Value.IsNull() && !model.Value.IsUnknown() {
		sdk.Value = model.Value.ValueStringPointer()
		tflog.Debug(ctx, "Unpacked primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	}

	diags.Append(d...)

	tflog.Debug(ctx, "Exiting unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return &sdk, diags

}

// --- Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInnerFromSdk(ctx context.Context, sdk security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner) (types.Object, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner", map[string]interface{}{"sdk_struct": sdk})
	diags := diag.Diagnostics{}
	var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner
	var d diag.Diagnostics
	// Handling Primitives
	// Standard primitive packing
	if sdk.Name != nil {
		model.Name = basetypes.NewStringValue(*sdk.Name)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Name", "value": *sdk.Name})
	} else {
		model.Name = basetypes.NewStringNull()
	}
	// Handling Primitives
	// Standard primitive packing
	if sdk.Value != nil {
		model.Value = basetypes.NewStringValue(*sdk.Value)
		tflog.Debug(ctx, "Packed primitive pointer", map[string]interface{}{"field": "Value", "value": *sdk.Value})
	} else {
		model.Value = basetypes.NewStringNull()
	}
	diags.Append(d...)

	obj, d := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner{}.AttrTypes(), &model)
	tflog.Debug(ctx, "Final object to be returned from pack helper", map[string]interface{}{"object": obj})
	diags.Append(d...)
	tflog.Debug(ctx, "Exiting pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return obj, diags

}

// --- List Unpacker for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner ---
func unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInnerListToSdk(ctx context.Context, list types.List) ([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner
	diags.Append(list.ElementsAs(ctx, &data, false)...)
	if diags.HasError() {
		tflog.Error(ctx, "Error converting list elements to Go models", map[string]interface{}{"diags": diags})
		return nil, diags
	}

	ans := make([]security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner, 0, len(data))
	for i, item := range data {
		tflog.Debug(ctx, "Unpacking item from list", map[string]interface{}{"index": i})
		obj, _ := types.ObjectValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner{}.AttrTypes(), &item)
		unpacked, d := unpackVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInnerToSdk(ctx, obj)
		diags.Append(d...)
		if unpacked != nil {
			ans = append(ans, *unpacked)
		}
	}
	tflog.Debug(ctx, "Exiting list unpack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return ans, diags
}

// --- List Packer for VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner ---
func packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInnerListFromSdk(ctx context.Context, sdks []security_services.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner) (types.List, diag.Diagnostics) {
	tflog.Debug(ctx, "Entering list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner")
	diags := diag.Diagnostics{}
	var data []models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner

	for i, sdk := range sdks {
		tflog.Debug(ctx, "Packing item to list", map[string]interface{}{"index": i})
		var model models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner
		obj, d := packVulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInnerFromSdk(ctx, sdk)
		diags.Append(d...)
		if diags.HasError() {
			return basetypes.NewListNull(models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner{}.AttrType()), diags
		}
		diags.Append(obj.As(ctx, &model, basetypes.ObjectAsOptions{})...)
		data = append(data, model)
	}
	tflog.Debug(ctx, "Exiting list pack helper for models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner", map[string]interface{}{"has_errors": diags.HasError()})
	return basetypes.NewListValueFrom(ctx, models.VulnerabilityProtectionSignaturesSignatureStandardInnerAndConditionInnerOrConditionInnerOperatorPatternMatchQualifierInner{}.AttrType(), data)
}
