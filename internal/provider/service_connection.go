package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	wugpput "github.com/paloaltonetworks/scm-go/netsec/schemas/service/connections"
	uIHLJPY "github.com/paloaltonetworks/scm-go/netsec/services/serviceconnections"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &serviceConnectionListDataSource{}
	_ datasource.DataSourceWithConfigure = &serviceConnectionListDataSource{}
)

func NewServiceConnectionListDataSource() datasource.DataSource {
	return &serviceConnectionListDataSource{}
}

type serviceConnectionListDataSource struct {
	client *scm.Client
}

// serviceConnectionListDsModel is the model.
type serviceConnectionListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Folder types.String `tfsdk:"folder"`
	Limit  types.Int64  `tfsdk:"limit"`
	Name   types.String `tfsdk:"name"`
	Offset types.Int64  `tfsdk:"offset"`

	// Output.
	Data []serviceConnectionListDsModel_wugpput_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type serviceConnectionListDsModel_wugpput_Config struct {
	BackupSC             types.String                                         `tfsdk:"backup__s_c"`
	BgpPeer              *serviceConnectionListDsModel_wugpput_BgpPeerObject  `tfsdk:"bgp_peer"`
	Id                   types.String                                         `tfsdk:"id"`
	IpsecTunnel          types.String                                         `tfsdk:"ipsec_tunnel"`
	Name                 types.String                                         `tfsdk:"name"`
	NatPool              types.String                                         `tfsdk:"nat_pool"`
	NoExportCommunity    types.String                                         `tfsdk:"no_export_community"`
	OnboardingType       types.String                                         `tfsdk:"onboarding_type"`
	Protocol             *serviceConnectionListDsModel_wugpput_ProtocolObject `tfsdk:"protocol"`
	Qos                  *serviceConnectionListDsModel_wugpput_QosObject      `tfsdk:"qos"`
	Region               types.String                                         `tfsdk:"region"`
	SecondaryIpsecTunnel types.String                                         `tfsdk:"secondary_ipsec_tunnel"`
	SourceNat            types.Bool                                           `tfsdk:"source_nat"`
	Subnets              types.List                                           `tfsdk:"subnets"`
}

type serviceConnectionListDsModel_wugpput_BgpPeerObject struct {
	LocalIpAddress   types.String `tfsdk:"local_ip_address"`
	LocalIpv6Address types.String `tfsdk:"local_ipv6_address"`
	PeerIpAddress    types.String `tfsdk:"peer_ip_address"`
	PeerIpv6Address  types.String `tfsdk:"peer_ipv6_address"`
	SameAsPrimary    types.Bool   `tfsdk:"same_as_primary"`
	Secret           types.String `tfsdk:"secret"`
}

type serviceConnectionListDsModel_wugpput_ProtocolObject struct {
	Bgp *serviceConnectionListDsModel_wugpput_BgpObject `tfsdk:"bgp"`
}

type serviceConnectionListDsModel_wugpput_BgpObject struct {
	DoNotExportRoutes         types.Bool   `tfsdk:"do_not_export_routes"`
	Enable                    types.Bool   `tfsdk:"enable"`
	FastFailover              types.Bool   `tfsdk:"fast_failover"`
	LocalIpAddress            types.String `tfsdk:"local_ip_address"`
	OriginateDefaultRoute     types.Bool   `tfsdk:"originate_default_route"`
	PeerAs                    types.String `tfsdk:"peer_as"`
	PeerIpAddress             types.String `tfsdk:"peer_ip_address"`
	Secret                    types.String `tfsdk:"secret"`
	SummarizeMobileUserRoutes types.Bool   `tfsdk:"summarize_mobile_user_routes"`
}

type serviceConnectionListDsModel_wugpput_QosObject struct {
	Enable     types.Bool   `tfsdk:"enable"`
	QosProfile types.String `tfsdk:"qos_profile"`
}

// Metadata returns the data source type name.
func (d *serviceConnectionListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_connection_list"
}

// Schema defines the schema for this listing data source.
func (d *serviceConnectionListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"folder":true, "limit":true, "name":true, "offset":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"folder":true, "limit":true, "name":true, "offset":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"backup_SC":true, "bgp_peer":true, "id":true, "ipsec_tunnel":true, "name":true, "nat_pool":true, "no_export_community":true, "onboarding_type":true, "protocol":true, "qos":true, "region":true, "secondary_ipsec_tunnel":true, "source_nat":true, "subnets":true} forceNew:map[string]bool(nil)
						"backup__s_c": dsschema.StringAttribute{
							Description: "The BackupSC param.",
							Computed:    true,
						},
						"bgp_peer": dsschema.SingleNestedAttribute{
							Description: "The BgpPeer param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"local_ip_address":true, "local_ipv6_address":true, "peer_ip_address":true, "peer_ipv6_address":true, "same_as_primary":true, "secret":true} forceNew:map[string]bool(nil)
								"local_ip_address": dsschema.StringAttribute{
									Description: "The LocalIpAddress param.",
									Computed:    true,
								},
								"local_ipv6_address": dsschema.StringAttribute{
									Description: "The LocalIpv6Address param.",
									Computed:    true,
								},
								"peer_ip_address": dsschema.StringAttribute{
									Description: "The PeerIpAddress param.",
									Computed:    true,
								},
								"peer_ipv6_address": dsschema.StringAttribute{
									Description: "The PeerIpv6Address param.",
									Computed:    true,
								},
								"same_as_primary": dsschema.BoolAttribute{
									Description: "The SameAsPrimary param.",
									Computed:    true,
								},
								"secret": dsschema.StringAttribute{
									Description: "The Secret param.",
									Computed:    true,
									Sensitive:   true,
								},
							},
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"ipsec_tunnel": dsschema.StringAttribute{
							Description: "The IpsecTunnel param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"nat_pool": dsschema.StringAttribute{
							Description: "The NatPool param.",
							Computed:    true,
						},
						"no_export_community": dsschema.StringAttribute{
							Description: "The NoExportCommunity param. String must be one of these: `\"Disabled\"`, `\"Enabled-In\"`, `\"Enabled-Out\"`, `\"Enabled-Both\"`.",
							Computed:    true,
						},
						"onboarding_type": dsschema.StringAttribute{
							Description: "The OnboardingType param. String must be one of these: `\"classic\"`. Default: `\"classic\"`.",
							Computed:    true,
						},
						"protocol": dsschema.SingleNestedAttribute{
							Description: "The Protocol param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"bgp":true} forceNew:map[string]bool(nil)
								"bgp": dsschema.SingleNestedAttribute{
									Description: "The Bgp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "fast_failover":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
										"do_not_export_routes": dsschema.BoolAttribute{
											Description: "The DoNotExportRoutes param.",
											Computed:    true,
										},
										"enable": dsschema.BoolAttribute{
											Description: "The Enable param.",
											Computed:    true,
										},
										"fast_failover": dsschema.BoolAttribute{
											Description: "The FastFailover param.",
											Computed:    true,
										},
										"local_ip_address": dsschema.StringAttribute{
											Description: "The LocalIpAddress param.",
											Computed:    true,
										},
										"originate_default_route": dsschema.BoolAttribute{
											Description: "The OriginateDefaultRoute param.",
											Computed:    true,
										},
										"peer_as": dsschema.StringAttribute{
											Description: "The PeerAs param.",
											Computed:    true,
										},
										"peer_ip_address": dsschema.StringAttribute{
											Description: "The PeerIpAddress param.",
											Computed:    true,
										},
										"secret": dsschema.StringAttribute{
											Description: "The Secret param.",
											Computed:    true,
											Sensitive:   true,
										},
										"summarize_mobile_user_routes": dsschema.BoolAttribute{
											Description: "The SummarizeMobileUserRoutes param.",
											Computed:    true,
										},
									},
								},
							},
						},
						"qos": dsschema.SingleNestedAttribute{
							Description: "The Qos param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"enable":true, "qos_profile":true} forceNew:map[string]bool(nil)
								"enable": dsschema.BoolAttribute{
									Description: "The Enable param.",
									Computed:    true,
								},
								"qos_profile": dsschema.StringAttribute{
									Description: "The QosProfile param.",
									Computed:    true,
								},
							},
						},
						"region": dsschema.StringAttribute{
							Description: "The Region param.",
							Computed:    true,
						},
						"secondary_ipsec_tunnel": dsschema.StringAttribute{
							Description: "The SecondaryIpsecTunnel param.",
							Computed:    true,
						},
						"source_nat": dsschema.BoolAttribute{
							Description: "The SourceNat param.",
							Computed:    true,
						},
						"subnets": dsschema.ListAttribute{
							Description: "The Subnets param.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Service Connections\"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `\"Service Connections\"`.",
				Optional:    true,
				Computed:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *serviceConnectionListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *serviceConnectionListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state serviceConnectionListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_service_connection_list",
		"terraform_provider_function": "Read",
		"folder":                      state.Folder.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
		"name":                        state.Name.ValueString(),
	})

	// Prepare to run the command.
	svc := uIHLJPY.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ListInput{}

	input.Folder = state.Folder.ValueString()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Name = state.Name.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]serviceConnectionListDsModel_wugpput_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := serviceConnectionListDsModel_wugpput_Config{}

			var1.BackupSC = types.StringPointerValue(var0.BackupSC)

			if var0.BgpPeer == nil {
				var1.BgpPeer = nil
			} else {
				var1.BgpPeer = &serviceConnectionListDsModel_wugpput_BgpPeerObject{}

				var1.BgpPeer.LocalIpAddress = types.StringPointerValue(var0.BgpPeer.LocalIpAddress)

				var1.BgpPeer.LocalIpv6Address = types.StringPointerValue(var0.BgpPeer.LocalIpv6Address)

				var1.BgpPeer.PeerIpAddress = types.StringPointerValue(var0.BgpPeer.PeerIpAddress)

				var1.BgpPeer.PeerIpv6Address = types.StringPointerValue(var0.BgpPeer.PeerIpv6Address)

				var1.BgpPeer.SameAsPrimary = types.BoolPointerValue(var0.BgpPeer.SameAsPrimary)

				var1.BgpPeer.Secret = types.StringPointerValue(var0.BgpPeer.Secret)
			}

			var1.Id = types.StringPointerValue(var0.Id)

			var1.IpsecTunnel = types.StringValue(var0.IpsecTunnel)

			var1.Name = types.StringValue(var0.Name)

			var1.NatPool = types.StringPointerValue(var0.NatPool)

			var1.NoExportCommunity = types.StringPointerValue(var0.NoExportCommunity)

			var1.OnboardingType = types.StringPointerValue(var0.OnboardingType)

			if var0.Protocol == nil {
				var1.Protocol = nil
			} else {
				var1.Protocol = &serviceConnectionListDsModel_wugpput_ProtocolObject{}

				if var0.Protocol.Bgp == nil {
					var1.Protocol.Bgp = nil
				} else {
					var1.Protocol.Bgp = &serviceConnectionListDsModel_wugpput_BgpObject{}

					var1.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(var0.Protocol.Bgp.DoNotExportRoutes)

					var1.Protocol.Bgp.Enable = types.BoolPointerValue(var0.Protocol.Bgp.Enable)

					var1.Protocol.Bgp.FastFailover = types.BoolPointerValue(var0.Protocol.Bgp.FastFailover)

					var1.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(var0.Protocol.Bgp.LocalIpAddress)

					var1.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(var0.Protocol.Bgp.OriginateDefaultRoute)

					var1.Protocol.Bgp.PeerAs = types.StringPointerValue(var0.Protocol.Bgp.PeerAs)

					var1.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(var0.Protocol.Bgp.PeerIpAddress)

					var1.Protocol.Bgp.Secret = types.StringPointerValue(var0.Protocol.Bgp.Secret)

					var1.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(var0.Protocol.Bgp.SummarizeMobileUserRoutes)
				}
			}

			if var0.Qos == nil {
				var1.Qos = nil
			} else {
				var1.Qos = &serviceConnectionListDsModel_wugpput_QosObject{}

				var1.Qos.Enable = types.BoolPointerValue(var0.Qos.Enable)

				var1.Qos.QosProfile = types.StringPointerValue(var0.Qos.QosProfile)
			}

			var1.Region = types.StringValue(var0.Region)

			var1.SecondaryIpsecTunnel = types.StringPointerValue(var0.SecondaryIpsecTunnel)

			var1.SourceNat = types.BoolPointerValue(var0.SourceNat)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Subnets)
			var1.Subnets = var2
			resp.Diagnostics.Append(var3.Errors()...)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &serviceConnectionDataSource{}
	_ datasource.DataSourceWithConfigure = &serviceConnectionDataSource{}
)

func NewServiceConnectionDataSource() datasource.DataSource {
	return &serviceConnectionDataSource{}
}

type serviceConnectionDataSource struct {
	client *scm.Client
}

// serviceConnectionDsModel is the model.
type serviceConnectionDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Folder types.String `tfsdk:"folder"`
	Id     types.String `tfsdk:"id"`

	// Output.
	BackupSC types.String                                    `tfsdk:"backup__s_c"`
	BgpPeer  *serviceConnectionDsModel_wugpput_BgpPeerObject `tfsdk:"bgp_peer"`
	// omit input: id
	IpsecTunnel          types.String                                     `tfsdk:"ipsec_tunnel"`
	Name                 types.String                                     `tfsdk:"name"`
	NatPool              types.String                                     `tfsdk:"nat_pool"`
	NoExportCommunity    types.String                                     `tfsdk:"no_export_community"`
	OnboardingType       types.String                                     `tfsdk:"onboarding_type"`
	Protocol             *serviceConnectionDsModel_wugpput_ProtocolObject `tfsdk:"protocol"`
	Qos                  *serviceConnectionDsModel_wugpput_QosObject      `tfsdk:"qos"`
	Region               types.String                                     `tfsdk:"region"`
	SecondaryIpsecTunnel types.String                                     `tfsdk:"secondary_ipsec_tunnel"`
	SourceNat            types.Bool                                       `tfsdk:"source_nat"`
	Subnets              types.List                                       `tfsdk:"subnets"`
}

type serviceConnectionDsModel_wugpput_BgpPeerObject struct {
	LocalIpAddress   types.String `tfsdk:"local_ip_address"`
	LocalIpv6Address types.String `tfsdk:"local_ipv6_address"`
	PeerIpAddress    types.String `tfsdk:"peer_ip_address"`
	PeerIpv6Address  types.String `tfsdk:"peer_ipv6_address"`
	SameAsPrimary    types.Bool   `tfsdk:"same_as_primary"`
	Secret           types.String `tfsdk:"secret"`
}

type serviceConnectionDsModel_wugpput_ProtocolObject struct {
	Bgp *serviceConnectionDsModel_wugpput_BgpObject `tfsdk:"bgp"`
}

type serviceConnectionDsModel_wugpput_BgpObject struct {
	DoNotExportRoutes         types.Bool   `tfsdk:"do_not_export_routes"`
	Enable                    types.Bool   `tfsdk:"enable"`
	FastFailover              types.Bool   `tfsdk:"fast_failover"`
	LocalIpAddress            types.String `tfsdk:"local_ip_address"`
	OriginateDefaultRoute     types.Bool   `tfsdk:"originate_default_route"`
	PeerAs                    types.String `tfsdk:"peer_as"`
	PeerIpAddress             types.String `tfsdk:"peer_ip_address"`
	Secret                    types.String `tfsdk:"secret"`
	SummarizeMobileUserRoutes types.Bool   `tfsdk:"summarize_mobile_user_routes"`
}

type serviceConnectionDsModel_wugpput_QosObject struct {
	Enable     types.Bool   `tfsdk:"enable"`
	QosProfile types.String `tfsdk:"qos_profile"`
}

// Metadata returns the data source type name.
func (d *serviceConnectionDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_connection"
}

// Schema defines the schema for this data source.
func (d *serviceConnectionDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"folder":true, "id":true} outputs:map[string]bool{"backup_SC":true, "bgp_peer":true, "id":true, "ipsec_tunnel":true, "name":true, "nat_pool":true, "no_export_community":true, "onboarding_type":true, "protocol":true, "qos":true, "region":true, "secondary_ipsec_tunnel":true, "source_nat":true, "subnets":true, "tfid":true} forceNew:map[string]bool{"folder":true, "id":true}
			"backup__s_c": dsschema.StringAttribute{
				Description: "The BackupSC param.",
				Computed:    true,
			},
			"bgp_peer": dsschema.SingleNestedAttribute{
				Description: "The BgpPeer param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"local_ip_address":true, "local_ipv6_address":true, "peer_ip_address":true, "peer_ipv6_address":true, "same_as_primary":true, "secret":true} forceNew:map[string]bool(nil)
					"local_ip_address": dsschema.StringAttribute{
						Description: "The LocalIpAddress param.",
						Computed:    true,
					},
					"local_ipv6_address": dsschema.StringAttribute{
						Description: "The LocalIpv6Address param.",
						Computed:    true,
					},
					"peer_ip_address": dsschema.StringAttribute{
						Description: "The PeerIpAddress param.",
						Computed:    true,
					},
					"peer_ipv6_address": dsschema.StringAttribute{
						Description: "The PeerIpv6Address param.",
						Computed:    true,
					},
					"same_as_primary": dsschema.BoolAttribute{
						Description: "The SameAsPrimary param.",
						Computed:    true,
					},
					"secret": dsschema.StringAttribute{
						Description: "The Secret param.",
						Computed:    true,
						Sensitive:   true,
					},
				},
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Service Connections\"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `\"Service Connections\"`.",
				Optional:    true,
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"ipsec_tunnel": dsschema.StringAttribute{
				Description: "The IpsecTunnel param.",
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"nat_pool": dsschema.StringAttribute{
				Description: "The NatPool param.",
				Computed:    true,
			},
			"no_export_community": dsschema.StringAttribute{
				Description: "The NoExportCommunity param. String must be one of these: `\"Disabled\"`, `\"Enabled-In\"`, `\"Enabled-Out\"`, `\"Enabled-Both\"`.",
				Computed:    true,
			},
			"onboarding_type": dsschema.StringAttribute{
				Description: "The OnboardingType param. String must be one of these: `\"classic\"`. Default: `\"classic\"`.",
				Computed:    true,
			},
			"protocol": dsschema.SingleNestedAttribute{
				Description: "The Protocol param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"bgp":true} forceNew:map[string]bool(nil)
					"bgp": dsschema.SingleNestedAttribute{
						Description: "The Bgp param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "fast_failover":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
							"do_not_export_routes": dsschema.BoolAttribute{
								Description: "The DoNotExportRoutes param.",
								Computed:    true,
							},
							"enable": dsschema.BoolAttribute{
								Description: "The Enable param.",
								Computed:    true,
							},
							"fast_failover": dsschema.BoolAttribute{
								Description: "The FastFailover param.",
								Computed:    true,
							},
							"local_ip_address": dsschema.StringAttribute{
								Description: "The LocalIpAddress param.",
								Computed:    true,
							},
							"originate_default_route": dsschema.BoolAttribute{
								Description: "The OriginateDefaultRoute param.",
								Computed:    true,
							},
							"peer_as": dsschema.StringAttribute{
								Description: "The PeerAs param.",
								Computed:    true,
							},
							"peer_ip_address": dsschema.StringAttribute{
								Description: "The PeerIpAddress param.",
								Computed:    true,
							},
							"secret": dsschema.StringAttribute{
								Description: "The Secret param.",
								Computed:    true,
								Sensitive:   true,
							},
							"summarize_mobile_user_routes": dsschema.BoolAttribute{
								Description: "The SummarizeMobileUserRoutes param.",
								Computed:    true,
							},
						},
					},
				},
			},
			"qos": dsschema.SingleNestedAttribute{
				Description: "The Qos param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"enable":true, "qos_profile":true} forceNew:map[string]bool(nil)
					"enable": dsschema.BoolAttribute{
						Description: "The Enable param.",
						Computed:    true,
					},
					"qos_profile": dsschema.StringAttribute{
						Description: "The QosProfile param.",
						Computed:    true,
					},
				},
			},
			"region": dsschema.StringAttribute{
				Description: "The Region param.",
				Computed:    true,
			},
			"secondary_ipsec_tunnel": dsschema.StringAttribute{
				Description: "The SecondaryIpsecTunnel param.",
				Computed:    true,
			},
			"source_nat": dsschema.BoolAttribute{
				Description: "The SourceNat param.",
				Computed:    true,
			},
			"subnets": dsschema.ListAttribute{
				Description: "The Subnets param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *serviceConnectionDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *serviceConnectionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state serviceConnectionDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_service_connection",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to run the command.
	svc := uIHLJPY.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ReadInput{}

	input.Id = state.Id.ValueString()

	input.Folder = state.Folder.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Folder)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.BackupSC = types.StringPointerValue(ans.BackupSC)

	if ans.BgpPeer == nil {
		state.BgpPeer = nil
	} else {
		state.BgpPeer = &serviceConnectionDsModel_wugpput_BgpPeerObject{}

		state.BgpPeer.LocalIpAddress = types.StringPointerValue(ans.BgpPeer.LocalIpAddress)

		state.BgpPeer.LocalIpv6Address = types.StringPointerValue(ans.BgpPeer.LocalIpv6Address)

		state.BgpPeer.PeerIpAddress = types.StringPointerValue(ans.BgpPeer.PeerIpAddress)

		state.BgpPeer.PeerIpv6Address = types.StringPointerValue(ans.BgpPeer.PeerIpv6Address)

		state.BgpPeer.SameAsPrimary = types.BoolPointerValue(ans.BgpPeer.SameAsPrimary)

		state.BgpPeer.Secret = types.StringPointerValue(ans.BgpPeer.Secret)
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.IpsecTunnel = types.StringValue(ans.IpsecTunnel)

	state.Name = types.StringValue(ans.Name)

	state.NatPool = types.StringPointerValue(ans.NatPool)

	state.NoExportCommunity = types.StringPointerValue(ans.NoExportCommunity)

	state.OnboardingType = types.StringPointerValue(ans.OnboardingType)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &serviceConnectionDsModel_wugpput_ProtocolObject{}

		if ans.Protocol.Bgp == nil {
			state.Protocol.Bgp = nil
		} else {
			state.Protocol.Bgp = &serviceConnectionDsModel_wugpput_BgpObject{}

			state.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(ans.Protocol.Bgp.DoNotExportRoutes)

			state.Protocol.Bgp.Enable = types.BoolPointerValue(ans.Protocol.Bgp.Enable)

			state.Protocol.Bgp.FastFailover = types.BoolPointerValue(ans.Protocol.Bgp.FastFailover)

			state.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(ans.Protocol.Bgp.LocalIpAddress)

			state.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(ans.Protocol.Bgp.OriginateDefaultRoute)

			state.Protocol.Bgp.PeerAs = types.StringPointerValue(ans.Protocol.Bgp.PeerAs)

			state.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(ans.Protocol.Bgp.PeerIpAddress)

			state.Protocol.Bgp.Secret = types.StringPointerValue(ans.Protocol.Bgp.Secret)

			state.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(ans.Protocol.Bgp.SummarizeMobileUserRoutes)
		}
	}

	if ans.Qos == nil {
		state.Qos = nil
	} else {
		state.Qos = &serviceConnectionDsModel_wugpput_QosObject{}

		state.Qos.Enable = types.BoolPointerValue(ans.Qos.Enable)

		state.Qos.QosProfile = types.StringPointerValue(ans.Qos.QosProfile)
	}

	state.Region = types.StringValue(ans.Region)

	state.SecondaryIpsecTunnel = types.StringPointerValue(ans.SecondaryIpsecTunnel)

	state.SourceNat = types.BoolPointerValue(ans.SourceNat)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Subnets)
	state.Subnets = var0
	resp.Diagnostics.Append(var1.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource              = &serviceConnectionResource{}
	_ resource.ResourceWithConfigure = &serviceConnectionResource{}
)

func NewServiceConnectionResource() resource.Resource {
	return &serviceConnectionResource{}
}

type serviceConnectionResource struct {
	client *scm.Client
}

// serviceConnectionRsModel is the model.
type serviceConnectionRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	BackupSC             types.String                                     `tfsdk:"backup__s_c"`
	BgpPeer              *serviceConnectionRsModel_wugpput_BgpPeerObject  `tfsdk:"bgp_peer"`
	Folder               types.String                                     `tfsdk:"folder"`
	Id                   types.String                                     `tfsdk:"id"`
	IpsecTunnel          types.String                                     `tfsdk:"ipsec_tunnel"`
	Name                 types.String                                     `tfsdk:"name"`
	NatPool              types.String                                     `tfsdk:"nat_pool"`
	NoExportCommunity    types.String                                     `tfsdk:"no_export_community"`
	OnboardingType       types.String                                     `tfsdk:"onboarding_type"`
	Protocol             *serviceConnectionRsModel_wugpput_ProtocolObject `tfsdk:"protocol"`
	Qos                  *serviceConnectionRsModel_wugpput_QosObject      `tfsdk:"qos"`
	Region               types.String                                     `tfsdk:"region"`
	SecondaryIpsecTunnel types.String                                     `tfsdk:"secondary_ipsec_tunnel"`
	SourceNat            types.Bool                                       `tfsdk:"source_nat"`
	Subnets              types.List                                       `tfsdk:"subnets"`

	// Output.
	EncryptedValues types.Map `tfsdk:"encrypted_values"`
	// omit input: backup__s_c
	// omit input: bgp_peer
	// omit input: id
	// omit input: ipsec_tunnel
	// omit input: name
	// omit input: nat_pool
	// omit input: no_export_community
	// omit input: onboarding_type
	// omit input: protocol
	// omit input: qos
	// omit input: region
	// omit input: secondary_ipsec_tunnel
	// omit input: source_nat
	// omit input: subnets
}

type serviceConnectionRsModel_wugpput_BgpPeerObject struct {
	LocalIpAddress   types.String `tfsdk:"local_ip_address"`
	LocalIpv6Address types.String `tfsdk:"local_ipv6_address"`
	PeerIpAddress    types.String `tfsdk:"peer_ip_address"`
	PeerIpv6Address  types.String `tfsdk:"peer_ipv6_address"`
	SameAsPrimary    types.Bool   `tfsdk:"same_as_primary"`
	Secret           types.String `tfsdk:"secret"`
}

type serviceConnectionRsModel_wugpput_ProtocolObject struct {
	Bgp *serviceConnectionRsModel_wugpput_BgpObject `tfsdk:"bgp"`
}

type serviceConnectionRsModel_wugpput_BgpObject struct {
	DoNotExportRoutes         types.Bool   `tfsdk:"do_not_export_routes"`
	Enable                    types.Bool   `tfsdk:"enable"`
	FastFailover              types.Bool   `tfsdk:"fast_failover"`
	LocalIpAddress            types.String `tfsdk:"local_ip_address"`
	OriginateDefaultRoute     types.Bool   `tfsdk:"originate_default_route"`
	PeerAs                    types.String `tfsdk:"peer_as"`
	PeerIpAddress             types.String `tfsdk:"peer_ip_address"`
	Secret                    types.String `tfsdk:"secret"`
	SummarizeMobileUserRoutes types.Bool   `tfsdk:"summarize_mobile_user_routes"`
}

type serviceConnectionRsModel_wugpput_QosObject struct {
	Enable     types.Bool   `tfsdk:"enable"`
	QosProfile types.String `tfsdk:"qos_profile"`
}

// Metadata returns the data source type name.
func (r *serviceConnectionResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_connection"
}

// Schema defines the schema for this data source.
func (r *serviceConnectionResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"backup_SC":true, "bgp_peer":true, "folder":true, "id":true, "ipsec_tunnel":true, "name":true, "nat_pool":true, "no_export_community":true, "onboarding_type":true, "protocol":true, "qos":true, "region":true, "secondary_ipsec_tunnel":true, "source_nat":true, "subnets":true} outputs:map[string]bool{"backup_SC":true, "bgp_peer":true, "id":true, "ipsec_tunnel":true, "name":true, "nat_pool":true, "no_export_community":true, "onboarding_type":true, "protocol":true, "qos":true, "region":true, "secondary_ipsec_tunnel":true, "source_nat":true, "subnets":true, "tfid":true} forceNew:map[string]bool{"folder":true}
			"encrypted_values": rsschema.MapAttribute{
				Description: "(Internal use) Encrypted values returned from the API.",
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},
			"backup__s_c": rsschema.StringAttribute{
				Description: "The BackupSC param.",
				Optional:    true,
			},
			"bgp_peer": rsschema.SingleNestedAttribute{
				Description: "The BgpPeer param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"local_ip_address":true, "local_ipv6_address":true, "peer_ip_address":true, "peer_ipv6_address":true, "same_as_primary":true, "secret":true} outputs:map[string]bool{"local_ip_address":true, "local_ipv6_address":true, "peer_ip_address":true, "peer_ipv6_address":true, "same_as_primary":true, "secret":true} forceNew:map[string]bool(nil)
					"local_ip_address": rsschema.StringAttribute{
						Description: "The LocalIpAddress param.",
						Optional:    true,
					},
					"local_ipv6_address": rsschema.StringAttribute{
						Description: "The LocalIpv6Address param.",
						Optional:    true,
					},
					"peer_ip_address": rsschema.StringAttribute{
						Description: "The PeerIpAddress param.",
						Optional:    true,
					},
					"peer_ipv6_address": rsschema.StringAttribute{
						Description: "The PeerIpv6Address param.",
						Optional:    true,
					},
					"same_as_primary": rsschema.BoolAttribute{
						Description: "The SameAsPrimary param.",
						Optional:    true,
					},
					"secret": rsschema.StringAttribute{
						Description: "The Secret param.",
						Optional:    true,
						Sensitive:   true,
					},
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Service Connections\"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `\"Service Connections\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("Service Connections"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-zA-Z._\\s-]{1,}$|^Service Connections$"), ""),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"ipsec_tunnel": rsschema.StringAttribute{
				Description: "The IpsecTunnel param.",
				Required:    true,
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"nat_pool": rsschema.StringAttribute{
				Description: "The NatPool param.",
				Optional:    true,
			},
			"no_export_community": rsschema.StringAttribute{
				Description: "The NoExportCommunity param. String must be one of these: `\"Disabled\"`, `\"Enabled-In\"`, `\"Enabled-Out\"`, `\"Enabled-Both\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("Disabled", "Enabled-In", "Enabled-Out", "Enabled-Both"),
				},
			},
			"onboarding_type": rsschema.StringAttribute{
				Description: "The OnboardingType param. String must be one of these: `\"classic\"`. Default: `\"classic\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("classic"),
				Validators: []validator.String{
					stringvalidator.OneOf("classic"),
				},
			},
			"protocol": rsschema.SingleNestedAttribute{
				Description: "The Protocol param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"bgp":true} outputs:map[string]bool{"bgp":true} forceNew:map[string]bool(nil)
					"bgp": rsschema.SingleNestedAttribute{
						Description: "The Bgp param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"do_not_export_routes":true, "enable":true, "fast_failover":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "secret":true, "summarize_mobile_user_routes":true} outputs:map[string]bool{"do_not_export_routes":true, "enable":true, "fast_failover":true, "local_ip_address":true, "originate_default_route":true, "peer_as":true, "peer_ip_address":true, "secret":true, "summarize_mobile_user_routes":true} forceNew:map[string]bool(nil)
							"do_not_export_routes": rsschema.BoolAttribute{
								Description: "The DoNotExportRoutes param.",
								Optional:    true,
							},
							"enable": rsschema.BoolAttribute{
								Description: "The Enable param.",
								Optional:    true,
							},
							"fast_failover": rsschema.BoolAttribute{
								Description: "The FastFailover param.",
								Optional:    true,
							},
							"local_ip_address": rsschema.StringAttribute{
								Description: "The LocalIpAddress param.",
								Optional:    true,
							},
							"originate_default_route": rsschema.BoolAttribute{
								Description: "The OriginateDefaultRoute param.",
								Optional:    true,
							},
							"peer_as": rsschema.StringAttribute{
								Description: "The PeerAs param.",
								Optional:    true,
							},
							"peer_ip_address": rsschema.StringAttribute{
								Description: "The PeerIpAddress param.",
								Optional:    true,
							},
							"secret": rsschema.StringAttribute{
								Description: "The Secret param.",
								Optional:    true,
								Sensitive:   true,
							},
							"summarize_mobile_user_routes": rsschema.BoolAttribute{
								Description: "The SummarizeMobileUserRoutes param.",
								Optional:    true,
							},
						},
					},
				},
			},
			"qos": rsschema.SingleNestedAttribute{
				Description: "The Qos param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"enable":true, "qos_profile":true} outputs:map[string]bool{"enable":true, "qos_profile":true} forceNew:map[string]bool(nil)
					"enable": rsschema.BoolAttribute{
						Description: "The Enable param.",
						Optional:    true,
					},
					"qos_profile": rsschema.StringAttribute{
						Description: "The QosProfile param.",
						Optional:    true,
					},
				},
			},
			"region": rsschema.StringAttribute{
				Description: "The Region param.",
				Required:    true,
			},
			"secondary_ipsec_tunnel": rsschema.StringAttribute{
				Description: "The SecondaryIpsecTunnel param.",
				Optional:    true,
			},
			"source_nat": rsschema.BoolAttribute{
				Description: "The SourceNat param.",
				Optional:    true,
			},
			"subnets": rsschema.ListAttribute{
				Description: "The Subnets param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *serviceConnectionResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *serviceConnectionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state serviceConnectionRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String)

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_service_connection",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to create the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.CreateInput{}

	input.Folder = state.Folder.ValueString()
	input.Request = &wugpput.Config{}

	input.Request.BackupSC = state.BackupSC.ValueStringPointer()

	if state.BgpPeer != nil {
		input.Request.BgpPeer = &wugpput.BgpPeerObject{}

		input.Request.BgpPeer.LocalIpAddress = state.BgpPeer.LocalIpAddress.ValueStringPointer()

		input.Request.BgpPeer.LocalIpv6Address = state.BgpPeer.LocalIpv6Address.ValueStringPointer()

		input.Request.BgpPeer.PeerIpAddress = state.BgpPeer.PeerIpAddress.ValueStringPointer()

		input.Request.BgpPeer.PeerIpv6Address = state.BgpPeer.PeerIpv6Address.ValueStringPointer()

		input.Request.BgpPeer.SameAsPrimary = state.BgpPeer.SameAsPrimary.ValueBoolPointer()

		var0 := "with_parent_name | plaintext | bgp_peer | secret"
		ev[var0] = state.BgpPeer.Secret
		input.Request.BgpPeer.Secret = state.BgpPeer.Secret.ValueStringPointer()
	}

	input.Request.IpsecTunnel = state.IpsecTunnel.ValueString()

	input.Request.Name = state.Name.ValueString()

	input.Request.NatPool = state.NatPool.ValueStringPointer()

	input.Request.NoExportCommunity = state.NoExportCommunity.ValueStringPointer()

	input.Request.OnboardingType = state.OnboardingType.ValueStringPointer()

	if state.Protocol != nil {
		input.Request.Protocol = &wugpput.ProtocolObject{}

		if state.Protocol.Bgp != nil {
			input.Request.Protocol.Bgp = &wugpput.BgpObject{}

			input.Request.Protocol.Bgp.DoNotExportRoutes = state.Protocol.Bgp.DoNotExportRoutes.ValueBoolPointer()

			input.Request.Protocol.Bgp.Enable = state.Protocol.Bgp.Enable.ValueBoolPointer()

			input.Request.Protocol.Bgp.FastFailover = state.Protocol.Bgp.FastFailover.ValueBoolPointer()

			input.Request.Protocol.Bgp.LocalIpAddress = state.Protocol.Bgp.LocalIpAddress.ValueStringPointer()

			input.Request.Protocol.Bgp.OriginateDefaultRoute = state.Protocol.Bgp.OriginateDefaultRoute.ValueBoolPointer()

			input.Request.Protocol.Bgp.PeerAs = state.Protocol.Bgp.PeerAs.ValueStringPointer()

			input.Request.Protocol.Bgp.PeerIpAddress = state.Protocol.Bgp.PeerIpAddress.ValueStringPointer()

			var1 := "with_parent_name | plaintext | bgp | secret"
			ev[var1] = state.Protocol.Bgp.Secret
			input.Request.Protocol.Bgp.Secret = state.Protocol.Bgp.Secret.ValueStringPointer()

			input.Request.Protocol.Bgp.SummarizeMobileUserRoutes = state.Protocol.Bgp.SummarizeMobileUserRoutes.ValueBoolPointer()
		}
	}

	if state.Qos != nil {
		input.Request.Qos = &wugpput.QosObject{}

		input.Request.Qos.Enable = state.Qos.Enable.ValueBoolPointer()

		input.Request.Qos.QosProfile = state.Qos.QosProfile.ValueStringPointer()
	}

	input.Request.Region = state.Region.ValueString()

	input.Request.SecondaryIpsecTunnel = state.SecondaryIpsecTunnel.ValueStringPointer()

	input.Request.SourceNat = state.SourceNat.ValueBoolPointer()

	resp.Diagnostics.Append(state.Subnets.ElementsAs(ctx, &input.Request.Subnets, false)...)
	//if len(state.Subnets) != 0 {
	//    input.Request.Subnets = make([]string, 0, len(state.Subnets))
	//    for _, var2 := range state.Subnets {
	//        input.Request.Subnets = append(input.Request.Subnets, var2.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.BackupSC = types.StringPointerValue(ans.BackupSC)

	if ans.BgpPeer == nil {
		state.BgpPeer = nil
	} else {
		state.BgpPeer = &serviceConnectionRsModel_wugpput_BgpPeerObject{}

		state.BgpPeer.LocalIpAddress = types.StringPointerValue(ans.BgpPeer.LocalIpAddress)

		state.BgpPeer.LocalIpv6Address = types.StringPointerValue(ans.BgpPeer.LocalIpv6Address)

		state.BgpPeer.PeerIpAddress = types.StringPointerValue(ans.BgpPeer.PeerIpAddress)

		state.BgpPeer.PeerIpv6Address = types.StringPointerValue(ans.BgpPeer.PeerIpv6Address)

		state.BgpPeer.SameAsPrimary = types.BoolPointerValue(ans.BgpPeer.SameAsPrimary)

		var3 := "with_parent_name | encrypted | bgp_peer | secret"
		ev[var3] = types.StringPointerValue(ans.BgpPeer.Secret)

		var4 := "with_parent_name | plaintext | bgp_peer | secret"
		state.BgpPeer.Secret = ev[var4]
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.IpsecTunnel = types.StringValue(ans.IpsecTunnel)

	state.Name = types.StringValue(ans.Name)

	state.NatPool = types.StringPointerValue(ans.NatPool)

	state.NoExportCommunity = types.StringPointerValue(ans.NoExportCommunity)

	state.OnboardingType = types.StringPointerValue(ans.OnboardingType)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &serviceConnectionRsModel_wugpput_ProtocolObject{}

		if ans.Protocol.Bgp == nil {
			state.Protocol.Bgp = nil
		} else {
			state.Protocol.Bgp = &serviceConnectionRsModel_wugpput_BgpObject{}

			state.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(ans.Protocol.Bgp.DoNotExportRoutes)

			state.Protocol.Bgp.Enable = types.BoolPointerValue(ans.Protocol.Bgp.Enable)

			state.Protocol.Bgp.FastFailover = types.BoolPointerValue(ans.Protocol.Bgp.FastFailover)

			state.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(ans.Protocol.Bgp.LocalIpAddress)

			state.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(ans.Protocol.Bgp.OriginateDefaultRoute)

			state.Protocol.Bgp.PeerAs = types.StringPointerValue(ans.Protocol.Bgp.PeerAs)

			state.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(ans.Protocol.Bgp.PeerIpAddress)

			var5 := "with_parent_name | encrypted | bgp | secret"
			ev[var5] = types.StringPointerValue(ans.Protocol.Bgp.Secret)

			var6 := "with_parent_name | plaintext | bgp | secret"
			state.Protocol.Bgp.Secret = ev[var6]

			state.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(ans.Protocol.Bgp.SummarizeMobileUserRoutes)
		}
	}

	if ans.Qos == nil {
		state.Qos = nil
	} else {
		state.Qos = &serviceConnectionRsModel_wugpput_QosObject{}

		state.Qos.Enable = types.BoolPointerValue(ans.Qos.Enable)

		state.Qos.QosProfile = types.StringPointerValue(ans.Qos.QosProfile)
	}

	state.Region = types.StringValue(ans.Region)

	state.SecondaryIpsecTunnel = types.StringPointerValue(ans.SecondaryIpsecTunnel)

	state.SourceNat = types.BoolPointerValue(ans.SourceNat)

	var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Subnets)
	state.Subnets = var7
	resp.Diagnostics.Append(var8.Errors()...)

	var9, var10 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var9
	resp.Diagnostics.Append(var10.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *serviceConnectionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state serviceConnectionRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(savestate.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_service_connection",
		"locMap":                      map[string]int{"folder": 0, "id": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.ReadInput{}

	input.Id = tokens[1]

	input.Folder = tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}
	state.Tfid = savestate.Tfid

	state.BackupSC = types.StringPointerValue(ans.BackupSC)

	if ans.BgpPeer == nil {
		state.BgpPeer = nil
	} else {
		state.BgpPeer = &serviceConnectionRsModel_wugpput_BgpPeerObject{}

		state.BgpPeer.LocalIpAddress = types.StringPointerValue(ans.BgpPeer.LocalIpAddress)

		state.BgpPeer.LocalIpv6Address = types.StringPointerValue(ans.BgpPeer.LocalIpv6Address)

		state.BgpPeer.PeerIpAddress = types.StringPointerValue(ans.BgpPeer.PeerIpAddress)

		state.BgpPeer.PeerIpv6Address = types.StringPointerValue(ans.BgpPeer.PeerIpv6Address)

		state.BgpPeer.SameAsPrimary = types.BoolPointerValue(ans.BgpPeer.SameAsPrimary)

		var0 := "with_parent_name | encrypted | bgp_peer | secret"
		if ev[var0].Equal(types.StringPointerValue(ans.BgpPeer.Secret)) {

			var1 := "with_parent_name | plaintext | bgp_peer | secret"
			state.BgpPeer.Secret = ev[var1]
		} else {
			state.BgpPeer.Secret = types.StringNull()
		}
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.IpsecTunnel = types.StringValue(ans.IpsecTunnel)

	state.Name = types.StringValue(ans.Name)

	state.NatPool = types.StringPointerValue(ans.NatPool)

	state.NoExportCommunity = types.StringPointerValue(ans.NoExportCommunity)

	state.OnboardingType = types.StringPointerValue(ans.OnboardingType)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &serviceConnectionRsModel_wugpput_ProtocolObject{}

		if ans.Protocol.Bgp == nil {
			state.Protocol.Bgp = nil
		} else {
			state.Protocol.Bgp = &serviceConnectionRsModel_wugpput_BgpObject{}

			state.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(ans.Protocol.Bgp.DoNotExportRoutes)

			state.Protocol.Bgp.Enable = types.BoolPointerValue(ans.Protocol.Bgp.Enable)

			state.Protocol.Bgp.FastFailover = types.BoolPointerValue(ans.Protocol.Bgp.FastFailover)

			state.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(ans.Protocol.Bgp.LocalIpAddress)

			state.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(ans.Protocol.Bgp.OriginateDefaultRoute)

			state.Protocol.Bgp.PeerAs = types.StringPointerValue(ans.Protocol.Bgp.PeerAs)

			state.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(ans.Protocol.Bgp.PeerIpAddress)

			var2 := "with_parent_name | encrypted | bgp | secret"
			if ev[var2].Equal(types.StringPointerValue(ans.Protocol.Bgp.Secret)) {

				var3 := "with_parent_name | plaintext | bgp | secret"
				state.Protocol.Bgp.Secret = ev[var3]
			} else {
				state.Protocol.Bgp.Secret = types.StringNull()
			}

			state.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(ans.Protocol.Bgp.SummarizeMobileUserRoutes)
		}
	}

	if ans.Qos == nil {
		state.Qos = nil
	} else {
		state.Qos = &serviceConnectionRsModel_wugpput_QosObject{}

		state.Qos.Enable = types.BoolPointerValue(ans.Qos.Enable)

		state.Qos.QosProfile = types.StringPointerValue(ans.Qos.QosProfile)
	}

	state.Region = types.StringValue(ans.Region)

	state.SecondaryIpsecTunnel = types.StringPointerValue(ans.SecondaryIpsecTunnel)

	state.SourceNat = types.BoolPointerValue(ans.SourceNat)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Subnets)
	state.Subnets = var4
	resp.Diagnostics.Append(var5.Errors()...)

	var6, var7 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var6
	resp.Diagnostics.Append(var7.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *serviceConnectionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state serviceConnectionRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Map containing encrypted and plain text values for encrypted params.
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false).Errors()...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_service_connection",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.UpdateInput{}

	if tokens[1] != "" {
		input.Id = tokens[1]
	}
	input.Request = &wugpput.Config{}

	input.Request.BackupSC = plan.BackupSC.ValueStringPointer()

	if plan.BgpPeer != nil {
		input.Request.BgpPeer = &wugpput.BgpPeerObject{}

		input.Request.BgpPeer.LocalIpAddress = plan.BgpPeer.LocalIpAddress.ValueStringPointer()

		input.Request.BgpPeer.LocalIpv6Address = plan.BgpPeer.LocalIpv6Address.ValueStringPointer()

		input.Request.BgpPeer.PeerIpAddress = plan.BgpPeer.PeerIpAddress.ValueStringPointer()

		input.Request.BgpPeer.PeerIpv6Address = plan.BgpPeer.PeerIpv6Address.ValueStringPointer()

		input.Request.BgpPeer.SameAsPrimary = plan.BgpPeer.SameAsPrimary.ValueBoolPointer()

		var0 := "with_parent_name | plaintext | bgp_peer | secret"
		ev[var0] = plan.BgpPeer.Secret
		input.Request.BgpPeer.Secret = plan.BgpPeer.Secret.ValueStringPointer()
	}

	input.Request.IpsecTunnel = plan.IpsecTunnel.ValueString()

	input.Request.Name = plan.Name.ValueString()

	input.Request.NatPool = plan.NatPool.ValueStringPointer()

	input.Request.NoExportCommunity = plan.NoExportCommunity.ValueStringPointer()

	input.Request.OnboardingType = plan.OnboardingType.ValueStringPointer()

	if plan.Protocol != nil {
		input.Request.Protocol = &wugpput.ProtocolObject{}

		if plan.Protocol.Bgp != nil {
			input.Request.Protocol.Bgp = &wugpput.BgpObject{}

			input.Request.Protocol.Bgp.DoNotExportRoutes = plan.Protocol.Bgp.DoNotExportRoutes.ValueBoolPointer()

			input.Request.Protocol.Bgp.Enable = plan.Protocol.Bgp.Enable.ValueBoolPointer()

			input.Request.Protocol.Bgp.FastFailover = plan.Protocol.Bgp.FastFailover.ValueBoolPointer()

			input.Request.Protocol.Bgp.LocalIpAddress = plan.Protocol.Bgp.LocalIpAddress.ValueStringPointer()

			input.Request.Protocol.Bgp.OriginateDefaultRoute = plan.Protocol.Bgp.OriginateDefaultRoute.ValueBoolPointer()

			input.Request.Protocol.Bgp.PeerAs = plan.Protocol.Bgp.PeerAs.ValueStringPointer()

			input.Request.Protocol.Bgp.PeerIpAddress = plan.Protocol.Bgp.PeerIpAddress.ValueStringPointer()

			var1 := "with_parent_name | plaintext | bgp | secret"
			ev[var1] = plan.Protocol.Bgp.Secret
			input.Request.Protocol.Bgp.Secret = plan.Protocol.Bgp.Secret.ValueStringPointer()

			input.Request.Protocol.Bgp.SummarizeMobileUserRoutes = plan.Protocol.Bgp.SummarizeMobileUserRoutes.ValueBoolPointer()
		}
	}

	if plan.Qos != nil {
		input.Request.Qos = &wugpput.QosObject{}

		input.Request.Qos.Enable = plan.Qos.Enable.ValueBoolPointer()

		input.Request.Qos.QosProfile = plan.Qos.QosProfile.ValueStringPointer()
	}

	input.Request.Region = plan.Region.ValueString()

	input.Request.SecondaryIpsecTunnel = plan.SecondaryIpsecTunnel.ValueStringPointer()

	input.Request.SourceNat = plan.SourceNat.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Subnets.ElementsAs(ctx, &input.Request.Subnets, false)...)
	//if len(plan.Subnets) != 0 {
	//    input.Request.Subnets = make([]string, 0, len(plan.Subnets))
	//    for _, var2 := range plan.Subnets {
	//        input.Request.Subnets = append(input.Request.Subnets, var2.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.BackupSC = types.StringPointerValue(ans.BackupSC)

	if ans.BgpPeer == nil {
		state.BgpPeer = nil
	} else {
		state.BgpPeer = &serviceConnectionRsModel_wugpput_BgpPeerObject{}

		state.BgpPeer.LocalIpAddress = types.StringPointerValue(ans.BgpPeer.LocalIpAddress)

		state.BgpPeer.LocalIpv6Address = types.StringPointerValue(ans.BgpPeer.LocalIpv6Address)

		state.BgpPeer.PeerIpAddress = types.StringPointerValue(ans.BgpPeer.PeerIpAddress)

		state.BgpPeer.PeerIpv6Address = types.StringPointerValue(ans.BgpPeer.PeerIpv6Address)

		state.BgpPeer.SameAsPrimary = types.BoolPointerValue(ans.BgpPeer.SameAsPrimary)

		var3 := "with_parent_name | encrypted | bgp_peer | secret"
		ev[var3] = types.StringPointerValue(ans.BgpPeer.Secret)

		var4 := "with_parent_name | plaintext | bgp_peer | secret"
		state.BgpPeer.Secret = ev[var4]
	}

	state.Id = types.StringPointerValue(ans.Id)

	state.IpsecTunnel = types.StringValue(ans.IpsecTunnel)

	state.Name = types.StringValue(ans.Name)

	state.NatPool = types.StringPointerValue(ans.NatPool)

	state.NoExportCommunity = types.StringPointerValue(ans.NoExportCommunity)

	state.OnboardingType = types.StringPointerValue(ans.OnboardingType)

	if ans.Protocol == nil {
		state.Protocol = nil
	} else {
		state.Protocol = &serviceConnectionRsModel_wugpput_ProtocolObject{}

		if ans.Protocol.Bgp == nil {
			state.Protocol.Bgp = nil
		} else {
			state.Protocol.Bgp = &serviceConnectionRsModel_wugpput_BgpObject{}

			state.Protocol.Bgp.DoNotExportRoutes = types.BoolPointerValue(ans.Protocol.Bgp.DoNotExportRoutes)

			state.Protocol.Bgp.Enable = types.BoolPointerValue(ans.Protocol.Bgp.Enable)

			state.Protocol.Bgp.FastFailover = types.BoolPointerValue(ans.Protocol.Bgp.FastFailover)

			state.Protocol.Bgp.LocalIpAddress = types.StringPointerValue(ans.Protocol.Bgp.LocalIpAddress)

			state.Protocol.Bgp.OriginateDefaultRoute = types.BoolPointerValue(ans.Protocol.Bgp.OriginateDefaultRoute)

			state.Protocol.Bgp.PeerAs = types.StringPointerValue(ans.Protocol.Bgp.PeerAs)

			state.Protocol.Bgp.PeerIpAddress = types.StringPointerValue(ans.Protocol.Bgp.PeerIpAddress)

			var5 := "with_parent_name | encrypted | bgp | secret"
			ev[var5] = types.StringPointerValue(ans.Protocol.Bgp.Secret)

			var6 := "with_parent_name | plaintext | bgp | secret"
			state.Protocol.Bgp.Secret = ev[var6]

			state.Protocol.Bgp.SummarizeMobileUserRoutes = types.BoolPointerValue(ans.Protocol.Bgp.SummarizeMobileUserRoutes)
		}
	}

	if ans.Qos == nil {
		state.Qos = nil
	} else {
		state.Qos = &serviceConnectionRsModel_wugpput_QosObject{}

		state.Qos.Enable = types.BoolPointerValue(ans.Qos.Enable)

		state.Qos.QosProfile = types.StringPointerValue(ans.Qos.QosProfile)
	}

	state.Region = types.StringValue(ans.Region)

	state.SecondaryIpsecTunnel = types.StringPointerValue(ans.SecondaryIpsecTunnel)

	state.SourceNat = types.BoolPointerValue(ans.SourceNat)

	var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Subnets)
	state.Subnets = var7
	resp.Diagnostics.Append(var8.Errors()...)

	var9, var10 := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = var9
	resp.Diagnostics.Append(var10.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *serviceConnectionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_service_connection",
		"locMap":                      map[string]int{"folder": 0, "id": 1},
		"tokens":                      tokens,
	})

	svc := uIHLJPY.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := uIHLJPY.DeleteInput{}

	input.Id = tokens[1]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}
