package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	sPPuDTU "github.com/paloaltonetworks/scm-go/netsec/schemas/service/connection/groups"
	utDbvHr "github.com/paloaltonetworks/scm-go/netsec/services/serviceconnectiongroups"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &serviceConnectionGroupListDataSource{}
	_ datasource.DataSourceWithConfigure = &serviceConnectionGroupListDataSource{}
)

func NewServiceConnectionGroupListDataSource() datasource.DataSource {
	return &serviceConnectionGroupListDataSource{}
}

type serviceConnectionGroupListDataSource struct {
	client *scm.Client
}

// serviceConnectionGroupListDsModel is the model.
type serviceConnectionGroupListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Folder types.String `tfsdk:"folder"`
	Limit  types.Int64  `tfsdk:"limit"`
	Name   types.String `tfsdk:"name"`
	Offset types.Int64  `tfsdk:"offset"`

	// Output.
	Data []serviceConnectionGroupListDsModel_sPPuDTU_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type serviceConnectionGroupListDsModel_sPPuDTU_Config struct {
	DisableSnat types.Bool   `tfsdk:"disable_snat"`
	Id          types.String `tfsdk:"id"`
	Name        types.String `tfsdk:"name"`
	PbfOnly     types.Bool   `tfsdk:"pbf_only"`
	Targets     types.List   `tfsdk:"targets"`
}

// Metadata returns the data source type name.
func (d *serviceConnectionGroupListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_connection_group_list"
}

// Schema defines the schema for this listing data source.
func (d *serviceConnectionGroupListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"folder":true, "limit":true, "name":true, "offset":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"folder":true, "limit":true, "name":true, "offset":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"disable_snat":true, "id":true, "name":true, "pbf_only":true, "target":true} forceNew:map[string]bool(nil)
						"disable_snat": dsschema.BoolAttribute{
							Description: "The DisableSnat param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"pbf_only": dsschema.BoolAttribute{
							Description: "The PbfOnly param.",
							Computed:    true,
						},
						"targets": dsschema.ListAttribute{
							Description: "The Targets param.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Service Connections\"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `\"Service Connections\"`.",
				Optional:    true,
				Computed:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *serviceConnectionGroupListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *serviceConnectionGroupListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state serviceConnectionGroupListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_service_connection_group_list",
		"terraform_provider_function": "Read",
		"folder":                      state.Folder.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
		"name":                        state.Name.ValueString(),
	})

	// Prepare to run the command.
	svc := utDbvHr.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := utDbvHr.ListInput{}

	input.Folder = state.Folder.ValueString()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Name = state.Name.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]serviceConnectionGroupListDsModel_sPPuDTU_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := serviceConnectionGroupListDsModel_sPPuDTU_Config{}

			var1.DisableSnat = types.BoolPointerValue(var0.DisableSnat)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.PbfOnly = types.BoolPointerValue(var0.PbfOnly)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Targets)
			var1.Targets = var2
			resp.Diagnostics.Append(var3.Errors()...)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &serviceConnectionGroupDataSource{}
	_ datasource.DataSourceWithConfigure = &serviceConnectionGroupDataSource{}
)

func NewServiceConnectionGroupDataSource() datasource.DataSource {
	return &serviceConnectionGroupDataSource{}
}

type serviceConnectionGroupDataSource struct {
	client *scm.Client
}

// serviceConnectionGroupDsModel is the model.
type serviceConnectionGroupDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Folder types.String `tfsdk:"folder"`
	Id     types.String `tfsdk:"id"`

	// Output.
	DisableSnat types.Bool `tfsdk:"disable_snat"`
	// omit input: id
	Name    types.String `tfsdk:"name"`
	PbfOnly types.Bool   `tfsdk:"pbf_only"`
	Targets types.List   `tfsdk:"targets"`
}

// Metadata returns the data source type name.
func (d *serviceConnectionGroupDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_connection_group"
}

// Schema defines the schema for this data source.
func (d *serviceConnectionGroupDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"folder":true, "id":true} outputs:map[string]bool{"disable_snat":true, "id":true, "name":true, "pbf_only":true, "target":true, "tfid":true} forceNew:map[string]bool{"folder":true, "id":true}
			"disable_snat": dsschema.BoolAttribute{
				Description: "The DisableSnat param.",
				Computed:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Service Connections\"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `\"Service Connections\"`.",
				Optional:    true,
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"pbf_only": dsschema.BoolAttribute{
				Description: "The PbfOnly param.",
				Computed:    true,
			},
			"targets": dsschema.ListAttribute{
				Description: "The Targets param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *serviceConnectionGroupDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *serviceConnectionGroupDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state serviceConnectionGroupDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_service_connection_group",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to run the command.
	svc := utDbvHr.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := utDbvHr.ReadInput{}

	input.Id = state.Id.ValueString()

	input.Folder = state.Folder.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Folder)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.DisableSnat = types.BoolPointerValue(ans.DisableSnat)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.PbfOnly = types.BoolPointerValue(ans.PbfOnly)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Targets)
	state.Targets = var0
	resp.Diagnostics.Append(var1.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &serviceConnectionGroupResource{}
	_ resource.ResourceWithConfigure   = &serviceConnectionGroupResource{}
	_ resource.ResourceWithImportState = &serviceConnectionGroupResource{}
)

func NewServiceConnectionGroupResource() resource.Resource {
	return &serviceConnectionGroupResource{}
}

type serviceConnectionGroupResource struct {
	client *scm.Client
}

// serviceConnectionGroupRsModel is the model.
type serviceConnectionGroupRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	DisableSnat types.Bool   `tfsdk:"disable_snat"`
	Folder      types.String `tfsdk:"folder"`
	Id          types.String `tfsdk:"id"`
	Name        types.String `tfsdk:"name"`
	PbfOnly     types.Bool   `tfsdk:"pbf_only"`
	Targets     types.List   `tfsdk:"targets"`

	// Output.
	// omit input: disable_snat
	// omit input: id
	// omit input: name
	// omit input: pbf_only
	// omit input: targets
}

// Metadata returns the data source type name.
func (r *serviceConnectionGroupResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_connection_group"
}

// Schema defines the schema for this data source.
func (r *serviceConnectionGroupResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"disable_snat":true, "folder":true, "id":true, "name":true, "pbf_only":true, "target":true} outputs:map[string]bool{"disable_snat":true, "id":true, "name":true, "pbf_only":true, "target":true, "tfid":true} forceNew:map[string]bool{"folder":true}
			"disable_snat": rsschema.BoolAttribute{
				Description: "The DisableSnat param.",
				Optional:    true,
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Service Connections\"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `\"Service Connections\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("Service Connections"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-zA-Z._\\s-]{1,}$|^Service Connections$"), ""),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"pbf_only": rsschema.BoolAttribute{
				Description: "The PbfOnly param.",
				Optional:    true,
			},
			"targets": rsschema.ListAttribute{
				Description: "The Targets param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *serviceConnectionGroupResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *serviceConnectionGroupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state serviceConnectionGroupRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_service_connection_group",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to create the config.
	svc := utDbvHr.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := utDbvHr.CreateInput{}

	input.Folder = state.Folder.ValueString()
	input.Request = &sPPuDTU.Config{}

	input.Request.DisableSnat = state.DisableSnat.ValueBoolPointer()

	input.Request.Name = state.Name.ValueString()

	input.Request.PbfOnly = state.PbfOnly.ValueBoolPointer()

	resp.Diagnostics.Append(state.Targets.ElementsAs(ctx, &input.Request.Targets, false)...)
	//if len(state.Targets) != 0 {
	//    input.Request.Targets = make([]string, 0, len(state.Targets))
	//    for _, var0 := range state.Targets {
	//        input.Request.Targets = append(input.Request.Targets, var0.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.DisableSnat = types.BoolPointerValue(ans.DisableSnat)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.PbfOnly = types.BoolPointerValue(ans.PbfOnly)

	var1, var2 := types.ListValueFrom(ctx, types.StringType, ans.Targets)
	state.Targets = var1
	resp.Diagnostics.Append(var2.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *serviceConnectionGroupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state serviceConnectionGroupRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_service_connection_group",
		"locMap":                      map[string]int{"folder": 0, "id": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := utDbvHr.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := utDbvHr.ReadInput{}

	input.Id = tokens[1]

	input.Folder = tokens[0]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}
	state.Tfid = savestate.Tfid

	state.DisableSnat = types.BoolPointerValue(ans.DisableSnat)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.PbfOnly = types.BoolPointerValue(ans.PbfOnly)

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Targets)
	state.Targets = var0
	resp.Diagnostics.Append(var1.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *serviceConnectionGroupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state serviceConnectionGroupRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_service_connection_group",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := utDbvHr.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := utDbvHr.UpdateInput{}

	if tokens[1] != "" {
		input.Id = tokens[1]
	}
	input.Request = &sPPuDTU.Config{}

	input.Request.DisableSnat = plan.DisableSnat.ValueBoolPointer()

	input.Request.Name = plan.Name.ValueString()

	input.Request.PbfOnly = plan.PbfOnly.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Targets.ElementsAs(ctx, &input.Request.Targets, false)...)
	//if len(plan.Targets) != 0 {
	//    input.Request.Targets = make([]string, 0, len(plan.Targets))
	//    for _, var0 := range plan.Targets {
	//        input.Request.Targets = append(input.Request.Targets, var0.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.DisableSnat = types.BoolPointerValue(ans.DisableSnat)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.PbfOnly = types.BoolPointerValue(ans.PbfOnly)

	var1, var2 := types.ListValueFrom(ctx, types.StringType, ans.Targets)
	state.Targets = var1
	resp.Diagnostics.Append(var2.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *serviceConnectionGroupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_service_connection_group",
		"locMap":                      map[string]int{"folder": 0, "id": 1},
		"tokens":                      tokens,
	})

	svc := utDbvHr.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := utDbvHr.DeleteInput{}

	input.Id = tokens[1]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *serviceConnectionGroupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
