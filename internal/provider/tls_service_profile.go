package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	eXzfzFj "github.com/paloaltonetworks/scm-go/netsec/schemas/tls/service/profiles"
	aSvnUVk "github.com/paloaltonetworks/scm-go/netsec/services/tlsserviceprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &tlsServiceProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &tlsServiceProfileListDataSource{}
)

func NewTlsServiceProfileListDataSource() datasource.DataSource {
	return &tlsServiceProfileListDataSource{}
}

type tlsServiceProfileListDataSource struct {
	client *scm.Client
}

// tlsServiceProfileListDsModel is the model.
type tlsServiceProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []tlsServiceProfileListDsModel_eXzfzFj_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type tlsServiceProfileListDsModel_eXzfzFj_Config struct {
	Certificate      types.String                                                `tfsdk:"certificate"`
	Id               types.String                                                `tfsdk:"id"`
	Name             types.String                                                `tfsdk:"name"`
	ProtocolSettings tlsServiceProfileListDsModel_eXzfzFj_ProtocolSettingsObject `tfsdk:"protocol_settings"`
}

type tlsServiceProfileListDsModel_eXzfzFj_ProtocolSettingsObject struct {
	AuthAlgoSha1     types.Bool   `tfsdk:"auth_algo_sha1"`
	AuthAlgoSha256   types.Bool   `tfsdk:"auth_algo_sha256"`
	AuthAlgoSha384   types.Bool   `tfsdk:"auth_algo_sha384"`
	EncAlgo3des      types.Bool   `tfsdk:"enc_algo_3des"`
	EncAlgoAes128Cbc types.Bool   `tfsdk:"enc_algo_aes_128_cbc"`
	EncAlgoAes128Gcm types.Bool   `tfsdk:"enc_algo_aes_128_gcm"`
	EncAlgoAes256Cbc types.Bool   `tfsdk:"enc_algo_aes_256_cbc"`
	EncAlgoAes256Gcm types.Bool   `tfsdk:"enc_algo_aes_256_gcm"`
	EncAlgoRc4       types.Bool   `tfsdk:"enc_algo_rc4"`
	KeyxchgAlgoDhe   types.Bool   `tfsdk:"keyxchg_algo_dhe"`
	KeyxchgAlgoEcdhe types.Bool   `tfsdk:"keyxchg_algo_ecdhe"`
	KeyxchgAlgoRsa   types.Bool   `tfsdk:"keyxchg_algo_rsa"`
	MaxVersion       types.String `tfsdk:"max_version"`
	MinVersion       types.String `tfsdk:"min_version"`
}

// Metadata returns the data source type name.
func (d *tlsServiceProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_tls_service_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *tlsServiceProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"certificate":true, "id":true, "name":true, "protocol_settings":true} forceNew:map[string]bool(nil)
						"certificate": dsschema.StringAttribute{
							Description: "SSL certificate file name. String length must not exceed 255 characters.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "SSL TLS Service Profile name, value is muCustomDomainSSLProfile when it is used on mobile-agent infra settings. String length must not exceed 127 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.",
							Computed:    true,
						},
						"protocol_settings": dsschema.SingleNestedAttribute{
							Description: "The ProtocolSettings param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"auth_algo_sha1":true, "auth_algo_sha256":true, "auth_algo_sha384":true, "enc_algo_3des":true, "enc_algo_aes_128_cbc":true, "enc_algo_aes_128_gcm":true, "enc_algo_aes_256_cbc":true, "enc_algo_aes_256_gcm":true, "enc_algo_rc4":true, "keyxchg_algo_dhe":true, "keyxchg_algo_ecdhe":true, "keyxchg_algo_rsa":true, "max_version":true, "min_version":true} forceNew:map[string]bool(nil)
								"auth_algo_sha1": dsschema.BoolAttribute{
									Description: "Allow authentication SHA1.",
									Computed:    true,
								},
								"auth_algo_sha256": dsschema.BoolAttribute{
									Description: "Allow authentication SHA256.",
									Computed:    true,
								},
								"auth_algo_sha384": dsschema.BoolAttribute{
									Description: "Allow authentication SHA384.",
									Computed:    true,
								},
								"enc_algo_3des": dsschema.BoolAttribute{
									Description: "Allow algorithm 3DES.",
									Computed:    true,
								},
								"enc_algo_aes_128_cbc": dsschema.BoolAttribute{
									Description: "Allow algorithm AES-128-CBC.",
									Computed:    true,
								},
								"enc_algo_aes_128_gcm": dsschema.BoolAttribute{
									Description: "Allow algorithm AES-128-GCM.",
									Computed:    true,
								},
								"enc_algo_aes_256_cbc": dsschema.BoolAttribute{
									Description: "Allow algorithm AES-256-CBC.",
									Computed:    true,
								},
								"enc_algo_aes_256_gcm": dsschema.BoolAttribute{
									Description: "Allow algorithm AES-256-GCM.",
									Computed:    true,
								},
								"enc_algo_rc4": dsschema.BoolAttribute{
									Description: "Allow algorithm RC4.",
									Computed:    true,
								},
								"keyxchg_algo_dhe": dsschema.BoolAttribute{
									Description: "Allow algorithm DHE.",
									Computed:    true,
								},
								"keyxchg_algo_ecdhe": dsschema.BoolAttribute{
									Description: "Allow algorithm ECDHE.",
									Computed:    true,
								},
								"keyxchg_algo_rsa": dsschema.BoolAttribute{
									Description: "Allow algorithm RSA.",
									Computed:    true,
								},
								"max_version": dsschema.StringAttribute{
									Description: "The MaxVersion param. String must be one of these: `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`, `\"max\"`. Default: `\"max\"`.",
									Computed:    true,
								},
								"min_version": dsschema.StringAttribute{
									Description: "The MinVersion param. String must be one of these: `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`. Default: `\"tls1-0\"`.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *tlsServiceProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *tlsServiceProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state tlsServiceProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_tls_service_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := aSvnUVk.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := aSvnUVk.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]tlsServiceProfileListDsModel_eXzfzFj_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := tlsServiceProfileListDsModel_eXzfzFj_Config{}

			var1.Certificate = types.StringValue(var0.Certificate)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var1.ProtocolSettings = tlsServiceProfileListDsModel_eXzfzFj_ProtocolSettingsObject{}

			var1.ProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(var0.ProtocolSettings.AuthAlgoSha1)

			var1.ProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(var0.ProtocolSettings.AuthAlgoSha256)

			var1.ProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(var0.ProtocolSettings.AuthAlgoSha384)

			var1.ProtocolSettings.EncAlgo3des = types.BoolPointerValue(var0.ProtocolSettings.EncAlgo3des)

			var1.ProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(var0.ProtocolSettings.EncAlgoAes128Cbc)

			var1.ProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(var0.ProtocolSettings.EncAlgoAes128Gcm)

			var1.ProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(var0.ProtocolSettings.EncAlgoAes256Cbc)

			var1.ProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(var0.ProtocolSettings.EncAlgoAes256Gcm)

			var1.ProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(var0.ProtocolSettings.EncAlgoRc4)

			var1.ProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(var0.ProtocolSettings.KeyxchgAlgoDhe)

			var1.ProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(var0.ProtocolSettings.KeyxchgAlgoEcdhe)

			var1.ProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(var0.ProtocolSettings.KeyxchgAlgoRsa)

			var1.ProtocolSettings.MaxVersion = types.StringPointerValue(var0.ProtocolSettings.MaxVersion)

			var1.ProtocolSettings.MinVersion = types.StringPointerValue(var0.ProtocolSettings.MinVersion)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &tlsServiceProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &tlsServiceProfileDataSource{}
)

func NewTlsServiceProfileDataSource() datasource.DataSource {
	return &tlsServiceProfileDataSource{}
}

type tlsServiceProfileDataSource struct {
	client *scm.Client
}

// tlsServiceProfileDsModel is the model.
type tlsServiceProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Certificate types.String `tfsdk:"certificate"`
	// omit input: id
	Name             types.String                                            `tfsdk:"name"`
	ProtocolSettings tlsServiceProfileDsModel_eXzfzFj_ProtocolSettingsObject `tfsdk:"protocol_settings"`
}

type tlsServiceProfileDsModel_eXzfzFj_ProtocolSettingsObject struct {
	AuthAlgoSha1     types.Bool   `tfsdk:"auth_algo_sha1"`
	AuthAlgoSha256   types.Bool   `tfsdk:"auth_algo_sha256"`
	AuthAlgoSha384   types.Bool   `tfsdk:"auth_algo_sha384"`
	EncAlgo3des      types.Bool   `tfsdk:"enc_algo_3des"`
	EncAlgoAes128Cbc types.Bool   `tfsdk:"enc_algo_aes_128_cbc"`
	EncAlgoAes128Gcm types.Bool   `tfsdk:"enc_algo_aes_128_gcm"`
	EncAlgoAes256Cbc types.Bool   `tfsdk:"enc_algo_aes_256_cbc"`
	EncAlgoAes256Gcm types.Bool   `tfsdk:"enc_algo_aes_256_gcm"`
	EncAlgoRc4       types.Bool   `tfsdk:"enc_algo_rc4"`
	KeyxchgAlgoDhe   types.Bool   `tfsdk:"keyxchg_algo_dhe"`
	KeyxchgAlgoEcdhe types.Bool   `tfsdk:"keyxchg_algo_ecdhe"`
	KeyxchgAlgoRsa   types.Bool   `tfsdk:"keyxchg_algo_rsa"`
	MaxVersion       types.String `tfsdk:"max_version"`
	MinVersion       types.String `tfsdk:"min_version"`
}

// Metadata returns the data source type name.
func (d *tlsServiceProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_tls_service_profile"
}

// Schema defines the schema for this data source.
func (d *tlsServiceProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"certificate":true, "id":true, "name":true, "protocol_settings":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"certificate": dsschema.StringAttribute{
				Description: "SSL certificate file name. String length must not exceed 255 characters.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "SSL TLS Service Profile name, value is muCustomDomainSSLProfile when it is used on mobile-agent infra settings. String length must not exceed 127 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.",
				Computed:    true,
			},
			"protocol_settings": dsschema.SingleNestedAttribute{
				Description: "The ProtocolSettings param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"auth_algo_sha1":true, "auth_algo_sha256":true, "auth_algo_sha384":true, "enc_algo_3des":true, "enc_algo_aes_128_cbc":true, "enc_algo_aes_128_gcm":true, "enc_algo_aes_256_cbc":true, "enc_algo_aes_256_gcm":true, "enc_algo_rc4":true, "keyxchg_algo_dhe":true, "keyxchg_algo_ecdhe":true, "keyxchg_algo_rsa":true, "max_version":true, "min_version":true} forceNew:map[string]bool(nil)
					"auth_algo_sha1": dsschema.BoolAttribute{
						Description: "Allow authentication SHA1.",
						Computed:    true,
					},
					"auth_algo_sha256": dsschema.BoolAttribute{
						Description: "Allow authentication SHA256.",
						Computed:    true,
					},
					"auth_algo_sha384": dsschema.BoolAttribute{
						Description: "Allow authentication SHA384.",
						Computed:    true,
					},
					"enc_algo_3des": dsschema.BoolAttribute{
						Description: "Allow algorithm 3DES.",
						Computed:    true,
					},
					"enc_algo_aes_128_cbc": dsschema.BoolAttribute{
						Description: "Allow algorithm AES-128-CBC.",
						Computed:    true,
					},
					"enc_algo_aes_128_gcm": dsschema.BoolAttribute{
						Description: "Allow algorithm AES-128-GCM.",
						Computed:    true,
					},
					"enc_algo_aes_256_cbc": dsschema.BoolAttribute{
						Description: "Allow algorithm AES-256-CBC.",
						Computed:    true,
					},
					"enc_algo_aes_256_gcm": dsschema.BoolAttribute{
						Description: "Allow algorithm AES-256-GCM.",
						Computed:    true,
					},
					"enc_algo_rc4": dsschema.BoolAttribute{
						Description: "Allow algorithm RC4.",
						Computed:    true,
					},
					"keyxchg_algo_dhe": dsschema.BoolAttribute{
						Description: "Allow algorithm DHE.",
						Computed:    true,
					},
					"keyxchg_algo_ecdhe": dsschema.BoolAttribute{
						Description: "Allow algorithm ECDHE.",
						Computed:    true,
					},
					"keyxchg_algo_rsa": dsschema.BoolAttribute{
						Description: "Allow algorithm RSA.",
						Computed:    true,
					},
					"max_version": dsschema.StringAttribute{
						Description: "The MaxVersion param. String must be one of these: `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`, `\"max\"`. Default: `\"max\"`.",
						Computed:    true,
					},
					"min_version": dsschema.StringAttribute{
						Description: "The MinVersion param. String must be one of these: `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`. Default: `\"tls1-0\"`.",
						Computed:    true,
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *tlsServiceProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *tlsServiceProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state tlsServiceProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_tls_service_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := aSvnUVk.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := aSvnUVk.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Certificate = types.StringValue(ans.Certificate)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ProtocolSettings = tlsServiceProfileDsModel_eXzfzFj_ProtocolSettingsObject{}

	state.ProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha1)

	state.ProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha256)

	state.ProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha384)

	state.ProtocolSettings.EncAlgo3des = types.BoolPointerValue(ans.ProtocolSettings.EncAlgo3des)

	state.ProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes128Cbc)

	state.ProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes128Gcm)

	state.ProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes256Cbc)

	state.ProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes256Gcm)

	state.ProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoRc4)

	state.ProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoDhe)

	state.ProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoEcdhe)

	state.ProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoRsa)

	state.ProtocolSettings.MaxVersion = types.StringPointerValue(ans.ProtocolSettings.MaxVersion)

	state.ProtocolSettings.MinVersion = types.StringPointerValue(ans.ProtocolSettings.MinVersion)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &tlsServiceProfileResource{}
	_ resource.ResourceWithConfigure   = &tlsServiceProfileResource{}
	_ resource.ResourceWithImportState = &tlsServiceProfileResource{}
)

func NewTlsServiceProfileResource() resource.Resource {
	return &tlsServiceProfileResource{}
}

type tlsServiceProfileResource struct {
	client *scm.Client
}

// tlsServiceProfileRsModel is the model.
type tlsServiceProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Certificate      types.String                                            `tfsdk:"certificate"`
	Device           types.String                                            `tfsdk:"device"`
	Folder           types.String                                            `tfsdk:"folder"`
	Id               types.String                                            `tfsdk:"id"`
	Name             types.String                                            `tfsdk:"name"`
	ProtocolSettings tlsServiceProfileRsModel_eXzfzFj_ProtocolSettingsObject `tfsdk:"protocol_settings"`
	Snippet          types.String                                            `tfsdk:"snippet"`

	// Output.
	// omit input: certificate
	// omit input: id
	// omit input: name
	// omit input: protocol_settings
}

type tlsServiceProfileRsModel_eXzfzFj_ProtocolSettingsObject struct {
	AuthAlgoSha1     types.Bool   `tfsdk:"auth_algo_sha1"`
	AuthAlgoSha256   types.Bool   `tfsdk:"auth_algo_sha256"`
	AuthAlgoSha384   types.Bool   `tfsdk:"auth_algo_sha384"`
	EncAlgo3des      types.Bool   `tfsdk:"enc_algo_3des"`
	EncAlgoAes128Cbc types.Bool   `tfsdk:"enc_algo_aes_128_cbc"`
	EncAlgoAes128Gcm types.Bool   `tfsdk:"enc_algo_aes_128_gcm"`
	EncAlgoAes256Cbc types.Bool   `tfsdk:"enc_algo_aes_256_cbc"`
	EncAlgoAes256Gcm types.Bool   `tfsdk:"enc_algo_aes_256_gcm"`
	EncAlgoRc4       types.Bool   `tfsdk:"enc_algo_rc4"`
	KeyxchgAlgoDhe   types.Bool   `tfsdk:"keyxchg_algo_dhe"`
	KeyxchgAlgoEcdhe types.Bool   `tfsdk:"keyxchg_algo_ecdhe"`
	KeyxchgAlgoRsa   types.Bool   `tfsdk:"keyxchg_algo_rsa"`
	MaxVersion       types.String `tfsdk:"max_version"`
	MinVersion       types.String `tfsdk:"min_version"`
}

// Metadata returns the data source type name.
func (r *tlsServiceProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_tls_service_profile"
}

// Schema defines the schema for this data source.
func (r *tlsServiceProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"certificate":true, "device":true, "folder":true, "id":true, "name":true, "protocol_settings":true, "snippet":true} outputs:map[string]bool{"certificate":true, "id":true, "name":true, "protocol_settings":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"certificate": rsschema.StringAttribute{
				Description: "SSL certificate file name. String length must not exceed 255 characters.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(255),
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "SSL TLS Service Profile name, value is muCustomDomainSSLProfile when it is used on mobile-agent infra settings. String length must not exceed 127 characters. String validation regex: `^[a-zA-Z0-9._-]+$`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(127),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9._-]+$"), ""),
				},
			},
			"protocol_settings": rsschema.SingleNestedAttribute{
				Description: "The ProtocolSettings param.",
				Required:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"auth_algo_sha1":true, "auth_algo_sha256":true, "auth_algo_sha384":true, "enc_algo_3des":true, "enc_algo_aes_128_cbc":true, "enc_algo_aes_128_gcm":true, "enc_algo_aes_256_cbc":true, "enc_algo_aes_256_gcm":true, "enc_algo_rc4":true, "keyxchg_algo_dhe":true, "keyxchg_algo_ecdhe":true, "keyxchg_algo_rsa":true, "max_version":true, "min_version":true} outputs:map[string]bool{"auth_algo_sha1":true, "auth_algo_sha256":true, "auth_algo_sha384":true, "enc_algo_3des":true, "enc_algo_aes_128_cbc":true, "enc_algo_aes_128_gcm":true, "enc_algo_aes_256_cbc":true, "enc_algo_aes_256_gcm":true, "enc_algo_rc4":true, "keyxchg_algo_dhe":true, "keyxchg_algo_ecdhe":true, "keyxchg_algo_rsa":true, "max_version":true, "min_version":true} forceNew:map[string]bool(nil)
					"auth_algo_sha1": rsschema.BoolAttribute{
						Description: "Allow authentication SHA1.",
						Optional:    true,
					},
					"auth_algo_sha256": rsschema.BoolAttribute{
						Description: "Allow authentication SHA256.",
						Optional:    true,
					},
					"auth_algo_sha384": rsschema.BoolAttribute{
						Description: "Allow authentication SHA384.",
						Optional:    true,
					},
					"enc_algo_3des": rsschema.BoolAttribute{
						Description: "Allow algorithm 3DES.",
						Optional:    true,
					},
					"enc_algo_aes_128_cbc": rsschema.BoolAttribute{
						Description: "Allow algorithm AES-128-CBC.",
						Optional:    true,
					},
					"enc_algo_aes_128_gcm": rsschema.BoolAttribute{
						Description: "Allow algorithm AES-128-GCM.",
						Optional:    true,
					},
					"enc_algo_aes_256_cbc": rsschema.BoolAttribute{
						Description: "Allow algorithm AES-256-CBC.",
						Optional:    true,
					},
					"enc_algo_aes_256_gcm": rsschema.BoolAttribute{
						Description: "Allow algorithm AES-256-GCM.",
						Optional:    true,
					},
					"enc_algo_rc4": rsschema.BoolAttribute{
						Description: "Allow algorithm RC4.",
						Optional:    true,
					},
					"keyxchg_algo_dhe": rsschema.BoolAttribute{
						Description: "Allow algorithm DHE.",
						Optional:    true,
					},
					"keyxchg_algo_ecdhe": rsschema.BoolAttribute{
						Description: "Allow algorithm ECDHE.",
						Optional:    true,
					},
					"keyxchg_algo_rsa": rsschema.BoolAttribute{
						Description: "Allow algorithm RSA.",
						Optional:    true,
					},
					"max_version": rsschema.StringAttribute{
						Description: "The MaxVersion param. String must be one of these: `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`, `\"tls1-3\"`, `\"max\"`. Default: `\"max\"`.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("max"),
						Validators: []validator.String{
							stringvalidator.OneOf("tls1-0", "tls1-1", "tls1-2", "tls1-3", "max"),
						},
					},
					"min_version": rsschema.StringAttribute{
						Description: "The MinVersion param. String must be one of these: `\"tls1-0\"`, `\"tls1-1\"`, `\"tls1-2\"`. Default: `\"tls1-0\"`.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("tls1-0"),
						Validators: []validator.String{
							stringvalidator.OneOf("tls1-0", "tls1-1", "tls1-2"),
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *tlsServiceProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *tlsServiceProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state tlsServiceProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_tls_service_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := aSvnUVk.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := aSvnUVk.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &eXzfzFj.Config{}

	input.Request.Certificate = state.Certificate.ValueString()

	input.Request.Name = state.Name.ValueString()

	input.Request.ProtocolSettings.AuthAlgoSha1 = state.ProtocolSettings.AuthAlgoSha1.ValueBoolPointer()

	input.Request.ProtocolSettings.AuthAlgoSha256 = state.ProtocolSettings.AuthAlgoSha256.ValueBoolPointer()

	input.Request.ProtocolSettings.AuthAlgoSha384 = state.ProtocolSettings.AuthAlgoSha384.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgo3des = state.ProtocolSettings.EncAlgo3des.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoAes128Cbc = state.ProtocolSettings.EncAlgoAes128Cbc.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoAes128Gcm = state.ProtocolSettings.EncAlgoAes128Gcm.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoAes256Cbc = state.ProtocolSettings.EncAlgoAes256Cbc.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoAes256Gcm = state.ProtocolSettings.EncAlgoAes256Gcm.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoRc4 = state.ProtocolSettings.EncAlgoRc4.ValueBoolPointer()

	input.Request.ProtocolSettings.KeyxchgAlgoDhe = state.ProtocolSettings.KeyxchgAlgoDhe.ValueBoolPointer()

	input.Request.ProtocolSettings.KeyxchgAlgoEcdhe = state.ProtocolSettings.KeyxchgAlgoEcdhe.ValueBoolPointer()

	input.Request.ProtocolSettings.KeyxchgAlgoRsa = state.ProtocolSettings.KeyxchgAlgoRsa.ValueBoolPointer()

	input.Request.ProtocolSettings.MaxVersion = state.ProtocolSettings.MaxVersion.ValueStringPointer()

	input.Request.ProtocolSettings.MinVersion = state.ProtocolSettings.MinVersion.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Certificate = types.StringValue(ans.Certificate)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ProtocolSettings = tlsServiceProfileRsModel_eXzfzFj_ProtocolSettingsObject{}

	state.ProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha1)

	state.ProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha256)

	state.ProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha384)

	state.ProtocolSettings.EncAlgo3des = types.BoolPointerValue(ans.ProtocolSettings.EncAlgo3des)

	state.ProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes128Cbc)

	state.ProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes128Gcm)

	state.ProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes256Cbc)

	state.ProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes256Gcm)

	state.ProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoRc4)

	state.ProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoDhe)

	state.ProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoEcdhe)

	state.ProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoRsa)

	state.ProtocolSettings.MaxVersion = types.StringPointerValue(ans.ProtocolSettings.MaxVersion)

	state.ProtocolSettings.MinVersion = types.StringPointerValue(ans.ProtocolSettings.MinVersion)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *tlsServiceProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state tlsServiceProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_tls_service_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := aSvnUVk.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := aSvnUVk.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Certificate = types.StringValue(ans.Certificate)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ProtocolSettings = tlsServiceProfileRsModel_eXzfzFj_ProtocolSettingsObject{}

	state.ProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha1)

	state.ProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha256)

	state.ProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha384)

	state.ProtocolSettings.EncAlgo3des = types.BoolPointerValue(ans.ProtocolSettings.EncAlgo3des)

	state.ProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes128Cbc)

	state.ProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes128Gcm)

	state.ProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes256Cbc)

	state.ProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes256Gcm)

	state.ProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoRc4)

	state.ProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoDhe)

	state.ProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoEcdhe)

	state.ProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoRsa)

	state.ProtocolSettings.MaxVersion = types.StringPointerValue(ans.ProtocolSettings.MaxVersion)

	state.ProtocolSettings.MinVersion = types.StringPointerValue(ans.ProtocolSettings.MinVersion)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *tlsServiceProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state tlsServiceProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_tls_service_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := aSvnUVk.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := aSvnUVk.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &eXzfzFj.Config{}

	input.Request.Certificate = plan.Certificate.ValueString()

	input.Request.Name = plan.Name.ValueString()

	input.Request.ProtocolSettings.AuthAlgoSha1 = plan.ProtocolSettings.AuthAlgoSha1.ValueBoolPointer()

	input.Request.ProtocolSettings.AuthAlgoSha256 = plan.ProtocolSettings.AuthAlgoSha256.ValueBoolPointer()

	input.Request.ProtocolSettings.AuthAlgoSha384 = plan.ProtocolSettings.AuthAlgoSha384.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgo3des = plan.ProtocolSettings.EncAlgo3des.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoAes128Cbc = plan.ProtocolSettings.EncAlgoAes128Cbc.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoAes128Gcm = plan.ProtocolSettings.EncAlgoAes128Gcm.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoAes256Cbc = plan.ProtocolSettings.EncAlgoAes256Cbc.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoAes256Gcm = plan.ProtocolSettings.EncAlgoAes256Gcm.ValueBoolPointer()

	input.Request.ProtocolSettings.EncAlgoRc4 = plan.ProtocolSettings.EncAlgoRc4.ValueBoolPointer()

	input.Request.ProtocolSettings.KeyxchgAlgoDhe = plan.ProtocolSettings.KeyxchgAlgoDhe.ValueBoolPointer()

	input.Request.ProtocolSettings.KeyxchgAlgoEcdhe = plan.ProtocolSettings.KeyxchgAlgoEcdhe.ValueBoolPointer()

	input.Request.ProtocolSettings.KeyxchgAlgoRsa = plan.ProtocolSettings.KeyxchgAlgoRsa.ValueBoolPointer()

	input.Request.ProtocolSettings.MaxVersion = plan.ProtocolSettings.MaxVersion.ValueStringPointer()

	input.Request.ProtocolSettings.MinVersion = plan.ProtocolSettings.MinVersion.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Certificate = types.StringValue(ans.Certificate)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	state.ProtocolSettings = tlsServiceProfileRsModel_eXzfzFj_ProtocolSettingsObject{}

	state.ProtocolSettings.AuthAlgoSha1 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha1)

	state.ProtocolSettings.AuthAlgoSha256 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha256)

	state.ProtocolSettings.AuthAlgoSha384 = types.BoolPointerValue(ans.ProtocolSettings.AuthAlgoSha384)

	state.ProtocolSettings.EncAlgo3des = types.BoolPointerValue(ans.ProtocolSettings.EncAlgo3des)

	state.ProtocolSettings.EncAlgoAes128Cbc = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes128Cbc)

	state.ProtocolSettings.EncAlgoAes128Gcm = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes128Gcm)

	state.ProtocolSettings.EncAlgoAes256Cbc = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes256Cbc)

	state.ProtocolSettings.EncAlgoAes256Gcm = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoAes256Gcm)

	state.ProtocolSettings.EncAlgoRc4 = types.BoolPointerValue(ans.ProtocolSettings.EncAlgoRc4)

	state.ProtocolSettings.KeyxchgAlgoDhe = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoDhe)

	state.ProtocolSettings.KeyxchgAlgoEcdhe = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoEcdhe)

	state.ProtocolSettings.KeyxchgAlgoRsa = types.BoolPointerValue(ans.ProtocolSettings.KeyxchgAlgoRsa)

	state.ProtocolSettings.MaxVersion = types.StringPointerValue(ans.ProtocolSettings.MaxVersion)

	state.ProtocolSettings.MinVersion = types.StringPointerValue(ans.ProtocolSettings.MinVersion)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *tlsServiceProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_tls_service_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := aSvnUVk.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := aSvnUVk.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *tlsServiceProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
