package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	hhIWLbI "github.com/paloaltonetworks/scm-go/netsec/schemas/traffic/steering/rules"
	ljRBvXJ "github.com/paloaltonetworks/scm-go/netsec/services/trafficsteeringrules"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &trafficSteeringRuleListDataSource{}
	_ datasource.DataSourceWithConfigure = &trafficSteeringRuleListDataSource{}
)

func NewTrafficSteeringRuleListDataSource() datasource.DataSource {
	return &trafficSteeringRuleListDataSource{}
}

type trafficSteeringRuleListDataSource struct {
	client *scm.Client
}

// trafficSteeringRuleListDsModel is the model.
type trafficSteeringRuleListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Folder types.String `tfsdk:"folder"`
	Limit  types.Int64  `tfsdk:"limit"`
	Name   types.String `tfsdk:"name"`
	Offset types.Int64  `tfsdk:"offset"`

	// Output.
	Data []trafficSteeringRuleListDsModel_hhIWLbI_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type trafficSteeringRuleListDsModel_hhIWLbI_Config struct {
	Action      *trafficSteeringRuleListDsModel_hhIWLbI_ActionObject `tfsdk:"action"`
	Category    types.List                                           `tfsdk:"category"`
	Destination types.List                                           `tfsdk:"destination"`
	Id          types.String                                         `tfsdk:"id"`
	Name        types.String                                         `tfsdk:"name"`
	Service     types.List                                           `tfsdk:"service"`
	Source      types.List                                           `tfsdk:"source"`
	SourceUser  types.List                                           `tfsdk:"source_user"`
}

type trafficSteeringRuleListDsModel_hhIWLbI_ActionObject struct {
	Forward *trafficSteeringRuleListDsModel_hhIWLbI_ForwardObject `tfsdk:"forward"`
	NoPbf   types.Bool                                            `tfsdk:"no_pbf"`
}

type trafficSteeringRuleListDsModel_hhIWLbI_ForwardObject struct {
	Target types.String `tfsdk:"target"`
}

// Metadata returns the data source type name.
func (d *trafficSteeringRuleListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_traffic_steering_rule_list"
}

// Schema defines the schema for this listing data source.
func (d *trafficSteeringRuleListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"folder":true, "limit":true, "name":true, "offset":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"folder":true, "limit":true, "name":true, "offset":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "category":true, "destination":true, "id":true, "name":true, "service":true, "source":true, "source_user":true} forceNew:map[string]bool(nil)
						"action": dsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"forward":true, "no-pbf":true} forceNew:map[string]bool(nil)
								"forward": dsschema.SingleNestedAttribute{
									Description: "The Forward param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"target":true} forceNew:map[string]bool(nil)
										"target": dsschema.StringAttribute{
											Description: "The Target param.",
											Computed:    true,
										},
									},
								},
								"no_pbf": dsschema.BoolAttribute{
									Description: "The NoPbf param. Default: `false`.",
									Computed:    true,
								},
							},
						},
						"category": dsschema.ListAttribute{
							Description: "The Category param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"destination": dsschema.ListAttribute{
							Description: "The Destination param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"service": dsschema.ListAttribute{
							Description: "The Service param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"source": dsschema.ListAttribute{
							Description: "The Source param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"source_user": dsschema.ListAttribute{
							Description: "The SourceUser param.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Service Connections\"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `\"Service Connections\"`.",
				Optional:    true,
				Computed:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *trafficSteeringRuleListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *trafficSteeringRuleListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state trafficSteeringRuleListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_traffic_steering_rule_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := ljRBvXJ.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueString()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	idBuilder.WriteString(input.Folder)

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]trafficSteeringRuleListDsModel_hhIWLbI_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := trafficSteeringRuleListDsModel_hhIWLbI_Config{}

			if var0.Action == nil {
				var1.Action = nil
			} else {
				var1.Action = &trafficSteeringRuleListDsModel_hhIWLbI_ActionObject{}

				if var0.Action.Forward == nil {
					var1.Action.Forward = nil
				} else {
					var1.Action.Forward = &trafficSteeringRuleListDsModel_hhIWLbI_ForwardObject{}

					var1.Action.Forward.Target = types.StringPointerValue(var0.Action.Forward.Target)
				}

				var1.Action.NoPbf = types.BoolValue(var0.Action.NoPbf != nil)
			}

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Category)
			var1.Category = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Destination)
			var1.Destination = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Service)
			var1.Service = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.Source)
			var1.Source = var8
			resp.Diagnostics.Append(var9.Errors()...)

			var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.SourceUser)
			var1.SourceUser = var10
			resp.Diagnostics.Append(var11.Errors()...)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &trafficSteeringRuleDataSource{}
	_ datasource.DataSourceWithConfigure = &trafficSteeringRuleDataSource{}
)

func NewTrafficSteeringRuleDataSource() datasource.DataSource {
	return &trafficSteeringRuleDataSource{}
}

type trafficSteeringRuleDataSource struct {
	client *scm.Client
}

// trafficSteeringRuleDsModel is the model.
type trafficSteeringRuleDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Action      *trafficSteeringRuleDsModel_hhIWLbI_ActionObject `tfsdk:"action"`
	Category    types.List                                       `tfsdk:"category"`
	Destination types.List                                       `tfsdk:"destination"`
	// omit input: id
	Name       types.String `tfsdk:"name"`
	Service    types.List   `tfsdk:"service"`
	Source     types.List   `tfsdk:"source"`
	SourceUser types.List   `tfsdk:"source_user"`
}

type trafficSteeringRuleDsModel_hhIWLbI_ActionObject struct {
	Forward *trafficSteeringRuleDsModel_hhIWLbI_ForwardObject `tfsdk:"forward"`
	NoPbf   types.Bool                                        `tfsdk:"no_pbf"`
}

type trafficSteeringRuleDsModel_hhIWLbI_ForwardObject struct {
	Target types.String `tfsdk:"target"`
}

// Metadata returns the data source type name.
func (d *trafficSteeringRuleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_traffic_steering_rule"
}

// Schema defines the schema for this data source.
func (d *trafficSteeringRuleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"action":true, "category":true, "destination":true, "id":true, "name":true, "service":true, "source":true, "source_user":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"action": dsschema.SingleNestedAttribute{
				Description: "The Action param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"forward":true, "no-pbf":true} forceNew:map[string]bool(nil)
					"forward": dsschema.SingleNestedAttribute{
						Description: "The Forward param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"target":true} forceNew:map[string]bool(nil)
							"target": dsschema.StringAttribute{
								Description: "The Target param.",
								Computed:    true,
							},
						},
					},
					"no_pbf": dsschema.BoolAttribute{
						Description: "The NoPbf param. Default: `false`.",
						Computed:    true,
					},
				},
			},
			"category": dsschema.ListAttribute{
				Description: "The Category param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"destination": dsschema.ListAttribute{
				Description: "The Destination param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"service": dsschema.ListAttribute{
				Description: "The Service param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"source": dsschema.ListAttribute{
				Description: "The Source param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"source_user": dsschema.ListAttribute{
				Description: "The SourceUser param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *trafficSteeringRuleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *trafficSteeringRuleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state trafficSteeringRuleDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_traffic_steering_rule",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := ljRBvXJ.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.Action == nil {
		state.Action = nil
	} else {
		state.Action = &trafficSteeringRuleDsModel_hhIWLbI_ActionObject{}

		if ans.Action.Forward == nil {
			state.Action.Forward = nil
		} else {
			state.Action.Forward = &trafficSteeringRuleDsModel_hhIWLbI_ForwardObject{}

			state.Action.Forward.Target = types.StringPointerValue(ans.Action.Forward.Target)
		}

		state.Action.NoPbf = types.BoolValue(ans.Action.NoPbf != nil)
	}

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Category)
	state.Category = var0
	resp.Diagnostics.Append(var1.Errors()...)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Destination)
	state.Destination = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Service)
	state.Service = var4
	resp.Diagnostics.Append(var5.Errors()...)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Source)
	state.Source = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.SourceUser)
	state.SourceUser = var8
	resp.Diagnostics.Append(var9.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &trafficSteeringRuleResource{}
	_ resource.ResourceWithConfigure   = &trafficSteeringRuleResource{}
	_ resource.ResourceWithImportState = &trafficSteeringRuleResource{}
)

func NewTrafficSteeringRuleResource() resource.Resource {
	return &trafficSteeringRuleResource{}
}

type trafficSteeringRuleResource struct {
	client *scm.Client
}

// trafficSteeringRuleRsModel is the model.
type trafficSteeringRuleRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Action      *trafficSteeringRuleRsModel_hhIWLbI_ActionObject `tfsdk:"action"`
	Category    types.List                                       `tfsdk:"category"`
	Destination types.List                                       `tfsdk:"destination"`
	Folder      types.String                                     `tfsdk:"folder"`
	Id          types.String                                     `tfsdk:"id"`
	Name        types.String                                     `tfsdk:"name"`
	Service     types.List                                       `tfsdk:"service"`
	Source      types.List                                       `tfsdk:"source"`
	SourceUser  types.List                                       `tfsdk:"source_user"`

	// Output.
	// omit input: action
	// omit input: category
	// omit input: destination
	// omit input: id
	// omit input: name
	// omit input: service
	// omit input: source
	// omit input: source_user
}

type trafficSteeringRuleRsModel_hhIWLbI_ActionObject struct {
	Forward *trafficSteeringRuleRsModel_hhIWLbI_ForwardObject `tfsdk:"forward"`
	NoPbf   types.Bool                                        `tfsdk:"no_pbf"`
}

type trafficSteeringRuleRsModel_hhIWLbI_ForwardObject struct {
	Target types.String `tfsdk:"target"`
}

// Metadata returns the data source type name.
func (r *trafficSteeringRuleResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_traffic_steering_rule"
}

// Schema defines the schema for this data source.
func (r *trafficSteeringRuleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"action":true, "category":true, "destination":true, "folder":true, "id":true, "name":true, "service":true, "source":true, "source_user":true} outputs:map[string]bool{"action":true, "category":true, "destination":true, "id":true, "name":true, "service":true, "source":true, "source_user":true, "tfid":true} forceNew:map[string]bool{"folder":true}
			"action": rsschema.SingleNestedAttribute{
				Description: "The Action param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"forward":true, "no-pbf":true} outputs:map[string]bool{"forward":true, "no-pbf":true} forceNew:map[string]bool(nil)
					"forward": rsschema.SingleNestedAttribute{
						Description: "The Forward param. Ensure that only one of the following is specified: `forward`, `no-pbf`",
						Optional:    true,
						Validators: []validator.Object{
							objectvalidator.ExactlyOneOf(
								path.MatchRelative(),
								path.MatchRelative().AtParent().AtName("no-pbf"),
							),
						},
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"target":true} outputs:map[string]bool{"target":true} forceNew:map[string]bool(nil)
							"target": rsschema.StringAttribute{
								Description: "The Target param.",
								Optional:    true,
							},
						},
					},
					"no_pbf": rsschema.BoolAttribute{
						Description: "The NoPbf param. Default: `false`. Ensure that only one of the following is specified: `forward`, `no-pbf`",
						Optional:    true,
						Computed:    true,
						Default:     booldefault.StaticBool(false),
					},
				},
			},
			"category": rsschema.ListAttribute{
				Description: "The Category param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"destination": rsschema.ListAttribute{
				Description: "The Destination param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param. String can either be a specific string(`\"Service Connections\"`) or match this regex: `^[0-9a-zA-Z._\\s-]{1,}$`. Default: `\"Service Connections\"`.",
				Optional:    true,
				Computed:    true,
				Default:     stringdefault.StaticString("Service Connections"),
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[0-9a-zA-Z._\\s-]{1,}$|^Service Connections$"), ""),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"service": rsschema.ListAttribute{
				Description: "The Service param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"source": rsschema.ListAttribute{
				Description: "The Source param.",
				Required:    true,
				ElementType: types.StringType,
			},
			"source_user": rsschema.ListAttribute{
				Description: "The SourceUser param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *trafficSteeringRuleResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *trafficSteeringRuleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state trafficSteeringRuleRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_traffic_steering_rule",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
	})

	// Prepare to create the config.
	svc := ljRBvXJ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.CreateInput{}

	input.Folder = state.Folder.ValueString()
	input.Request = &hhIWLbI.Config{}

	if state.Action != nil {
		input.Request.Action = &hhIWLbI.ActionObject{}

		if state.Action.Forward != nil {
			input.Request.Action.Forward = &hhIWLbI.ForwardObject{}

			input.Request.Action.Forward.Target = state.Action.Forward.Target.ValueStringPointer()
		}

		if !state.Action.NoPbf.IsNull() && state.Action.NoPbf.ValueBool() {
			input.Request.Action.NoPbf = map[string]interface{}{}
		}
	}

	resp.Diagnostics.Append(state.Category.ElementsAs(ctx, &input.Request.Category, false)...)
	//if len(state.Category) != 0 {
	//    input.Request.Category = make([]string, 0, len(state.Category))
	//    for _, var0 := range state.Category {
	//        input.Request.Category = append(input.Request.Category, var0.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Destination.ElementsAs(ctx, &input.Request.Destination, false)...)
	//if len(state.Destination) != 0 {
	//    input.Request.Destination = make([]string, 0, len(state.Destination))
	//    for _, var1 := range state.Destination {
	//        input.Request.Destination = append(input.Request.Destination, var1.ValueString())
	//    }
	//}

	input.Request.Name = state.Name.ValueString()

	resp.Diagnostics.Append(state.Service.ElementsAs(ctx, &input.Request.Service, false)...)
	//if len(state.Service) != 0 {
	//    input.Request.Service = make([]string, 0, len(state.Service))
	//    for _, var2 := range state.Service {
	//        input.Request.Service = append(input.Request.Service, var2.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Source.ElementsAs(ctx, &input.Request.Source, false)...)
	//if len(state.Source) != 0 {
	//    input.Request.Source = make([]string, 0, len(state.Source))
	//    for _, var3 := range state.Source {
	//        input.Request.Source = append(input.Request.Source, var3.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.SourceUser.ElementsAs(ctx, &input.Request.SourceUser, false)...)
	//if len(state.SourceUser) != 0 {
	//    input.Request.SourceUser = make([]string, 0, len(state.SourceUser))
	//    for _, var4 := range state.SourceUser {
	//        input.Request.SourceUser = append(input.Request.SourceUser, var4.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Folder)

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if ans.Action == nil {
		state.Action = nil
	} else {
		state.Action = &trafficSteeringRuleRsModel_hhIWLbI_ActionObject{}

		if ans.Action.Forward == nil {
			state.Action.Forward = nil
		} else {
			state.Action.Forward = &trafficSteeringRuleRsModel_hhIWLbI_ForwardObject{}

			state.Action.Forward.Target = types.StringPointerValue(ans.Action.Forward.Target)
		}

		state.Action.NoPbf = types.BoolValue(ans.Action.NoPbf != nil)
	}

	var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Category)
	state.Category = var5
	resp.Diagnostics.Append(var6.Errors()...)

	var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Destination)
	state.Destination = var7
	resp.Diagnostics.Append(var8.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Service)
	state.Service = var9
	resp.Diagnostics.Append(var10.Errors()...)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Source)
	state.Source = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.SourceUser)
	state.SourceUser = var13
	resp.Diagnostics.Append(var14.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *trafficSteeringRuleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state trafficSteeringRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_traffic_steering_rule",
		"locMap":                      map[string]int{"folder": 0, "id": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := ljRBvXJ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.ReadInput{}

	input.Id = tokens[1]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}
	state.Tfid = savestate.Tfid

	if ans.Action == nil {
		state.Action = nil
	} else {
		state.Action = &trafficSteeringRuleRsModel_hhIWLbI_ActionObject{}

		if ans.Action.Forward == nil {
			state.Action.Forward = nil
		} else {
			state.Action.Forward = &trafficSteeringRuleRsModel_hhIWLbI_ForwardObject{}

			state.Action.Forward.Target = types.StringPointerValue(ans.Action.Forward.Target)
		}

		state.Action.NoPbf = types.BoolValue(ans.Action.NoPbf != nil)
	}

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Category)
	state.Category = var0
	resp.Diagnostics.Append(var1.Errors()...)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Destination)
	state.Destination = var2
	resp.Diagnostics.Append(var3.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Service)
	state.Service = var4
	resp.Diagnostics.Append(var5.Errors()...)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Source)
	state.Source = var6
	resp.Diagnostics.Append(var7.Errors()...)

	var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.SourceUser)
	state.SourceUser = var8
	resp.Diagnostics.Append(var9.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *trafficSteeringRuleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state trafficSteeringRuleRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_traffic_steering_rule",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := ljRBvXJ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.UpdateInput{}

	if tokens[1] != "" {
		input.Id = tokens[1]
	}
	input.Request = &hhIWLbI.Config{}

	if plan.Action != nil {
		input.Request.Action = &hhIWLbI.ActionObject{}

		if plan.Action.Forward != nil {
			input.Request.Action.Forward = &hhIWLbI.ForwardObject{}

			input.Request.Action.Forward.Target = plan.Action.Forward.Target.ValueStringPointer()
		}

		if !plan.Action.NoPbf.IsNull() && plan.Action.NoPbf.ValueBool() {
			input.Request.Action.NoPbf = map[string]interface{}{}
		}
	}

	resp.Diagnostics.Append(plan.Category.ElementsAs(ctx, &input.Request.Category, false)...)
	//if len(plan.Category) != 0 {
	//    input.Request.Category = make([]string, 0, len(plan.Category))
	//    for _, var0 := range plan.Category {
	//        input.Request.Category = append(input.Request.Category, var0.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Destination.ElementsAs(ctx, &input.Request.Destination, false)...)
	//if len(plan.Destination) != 0 {
	//    input.Request.Destination = make([]string, 0, len(plan.Destination))
	//    for _, var1 := range plan.Destination {
	//        input.Request.Destination = append(input.Request.Destination, var1.ValueString())
	//    }
	//}

	input.Request.Name = plan.Name.ValueString()

	resp.Diagnostics.Append(plan.Service.ElementsAs(ctx, &input.Request.Service, false)...)
	//if len(plan.Service) != 0 {
	//    input.Request.Service = make([]string, 0, len(plan.Service))
	//    for _, var2 := range plan.Service {
	//        input.Request.Service = append(input.Request.Service, var2.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Source.ElementsAs(ctx, &input.Request.Source, false)...)
	//if len(plan.Source) != 0 {
	//    input.Request.Source = make([]string, 0, len(plan.Source))
	//    for _, var3 := range plan.Source {
	//        input.Request.Source = append(input.Request.Source, var3.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.SourceUser.ElementsAs(ctx, &input.Request.SourceUser, false)...)
	//if len(plan.SourceUser) != 0 {
	//    input.Request.SourceUser = make([]string, 0, len(plan.SourceUser))
	//    for _, var4 := range plan.SourceUser {
	//        input.Request.SourceUser = append(input.Request.SourceUser, var4.ValueString())
	//    }
	//}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	if ans.Action == nil {
		state.Action = nil
	} else {
		state.Action = &trafficSteeringRuleRsModel_hhIWLbI_ActionObject{}

		if ans.Action.Forward == nil {
			state.Action.Forward = nil
		} else {
			state.Action.Forward = &trafficSteeringRuleRsModel_hhIWLbI_ForwardObject{}

			state.Action.Forward.Target = types.StringPointerValue(ans.Action.Forward.Target)
		}

		state.Action.NoPbf = types.BoolValue(ans.Action.NoPbf != nil)
	}

	var5, var6 := types.ListValueFrom(ctx, types.StringType, ans.Category)
	state.Category = var5
	resp.Diagnostics.Append(var6.Errors()...)

	var7, var8 := types.ListValueFrom(ctx, types.StringType, ans.Destination)
	state.Destination = var7
	resp.Diagnostics.Append(var8.Errors()...)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Service)
	state.Service = var9
	resp.Diagnostics.Append(var10.Errors()...)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Source)
	state.Source = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.SourceUser)
	state.SourceUser = var13
	resp.Diagnostics.Append(var14.Errors()...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *trafficSteeringRuleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 2 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 2 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_traffic_steering_rule",
		"locMap":                      map[string]int{"folder": 0, "id": 1},
		"tokens":                      tokens,
	})

	svc := ljRBvXJ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := ljRBvXJ.DeleteInput{}

	input.Id = tokens[1]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *trafficSteeringRuleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
