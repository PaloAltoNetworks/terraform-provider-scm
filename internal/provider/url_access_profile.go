package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	ivVDSwf "github.com/paloaltonetworks/scm-go/netsec/schemas/url/access/profiles"
	alljvhu "github.com/paloaltonetworks/scm-go/netsec/services/urlaccessprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &urlAccessProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &urlAccessProfileListDataSource{}
)

func NewUrlAccessProfileListDataSource() datasource.DataSource {
	return &urlAccessProfileListDataSource{}
}

type urlAccessProfileListDataSource struct {
	client *scm.Client
}

// urlAccessProfileListDsModel is the model.
type urlAccessProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []urlAccessProfileListDsModel_ivVDSwf_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type urlAccessProfileListDsModel_ivVDSwf_Config struct {
	Alerts                 types.List                                                       `tfsdk:"alerts"`
	Allows                 types.List                                                       `tfsdk:"allows"`
	Blocks                 types.List                                                       `tfsdk:"blocks"`
	CloudInlineCat         types.Bool                                                       `tfsdk:"cloud_inline_cat"`
	Continues              types.List                                                       `tfsdk:"continues"`
	CredentialEnforcement  *urlAccessProfileListDsModel_ivVDSwf_CredentialEnforcementObject `tfsdk:"credential_enforcement"`
	Description            types.String                                                     `tfsdk:"description"`
	Id                     types.String                                                     `tfsdk:"id"`
	LocalInlineCat         types.Bool                                                       `tfsdk:"local_inline_cat"`
	LogContainerPageOnly   types.Bool                                                       `tfsdk:"log_container_page_only"`
	LogHttpHdrReferer      types.Bool                                                       `tfsdk:"log_http_hdr_referer"`
	LogHttpHdrUserAgent    types.Bool                                                       `tfsdk:"log_http_hdr_user_agent"`
	LogHttpHdrXff          types.Bool                                                       `tfsdk:"log_http_hdr_xff"`
	MlavCategoryExceptions types.List                                                       `tfsdk:"mlav_category_exceptions"`
	Name                   types.String                                                     `tfsdk:"name"`
	SafeSearchEnforcement  types.Bool                                                       `tfsdk:"safe_search_enforcement"`
}

type urlAccessProfileListDsModel_ivVDSwf_CredentialEnforcementObject struct {
	Alerts      types.List                                      `tfsdk:"alerts"`
	Allows      types.List                                      `tfsdk:"allows"`
	Blocks      types.List                                      `tfsdk:"blocks"`
	Continues   types.List                                      `tfsdk:"continues"`
	LogSeverity types.String                                    `tfsdk:"log_severity"`
	Mode        *urlAccessProfileListDsModel_ivVDSwf_ModeObject `tfsdk:"mode"`
}

type urlAccessProfileListDsModel_ivVDSwf_ModeObject struct {
	Disabled          types.Bool   `tfsdk:"disabled"`
	DomainCredentials types.Bool   `tfsdk:"domain_credentials"`
	GroupMapping      types.String `tfsdk:"group_mapping"`
	IpUser            types.Bool   `tfsdk:"ip_user"`
}

// Metadata returns the data source type name.
func (d *urlAccessProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_url_access_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *urlAccessProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "cloud_inline_cat":true, "continue":true, "credential_enforcement":true, "description":true, "id":true, "local_inline_cat":true, "log_container_page_only":true, "log_http_hdr_referer":true, "log_http_hdr_user_agent":true, "log_http_hdr_xff":true, "mlav_category_exception":true, "name":true, "safe_search_enforcement":true} forceNew:map[string]bool(nil)
						"alerts": dsschema.ListAttribute{
							Description: "The Alerts param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"allows": dsschema.ListAttribute{
							Description: "The Allows param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"blocks": dsschema.ListAttribute{
							Description: "The Blocks param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"cloud_inline_cat": dsschema.BoolAttribute{
							Description: "The CloudInlineCat param.",
							Computed:    true,
						},
						"continues": dsschema.ListAttribute{
							Description: "The Continues param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"credential_enforcement": dsschema.SingleNestedAttribute{
							Description: "The CredentialEnforcement param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "continue":true, "log_severity":true, "mode":true} forceNew:map[string]bool(nil)
								"alerts": dsschema.ListAttribute{
									Description: "The Alerts param.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"allows": dsschema.ListAttribute{
									Description: "The Allows param.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"blocks": dsschema.ListAttribute{
									Description: "The Blocks param.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"continues": dsschema.ListAttribute{
									Description: "The Continues param.",
									Computed:    true,
									ElementType: types.StringType,
								},
								"log_severity": dsschema.StringAttribute{
									Description: "The LogSeverity param. Default: `\"medium\"`.",
									Computed:    true,
								},
								"mode": dsschema.SingleNestedAttribute{
									Description: "The Mode param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"disabled":true, "domain_credentials":true, "group_mapping":true, "ip_user":true} forceNew:map[string]bool(nil)
										"disabled": dsschema.BoolAttribute{
											Description: "The Disabled param.",
											Computed:    true,
										},
										"domain_credentials": dsschema.BoolAttribute{
											Description: "The DomainCredentials param.",
											Computed:    true,
										},
										"group_mapping": dsschema.StringAttribute{
											Description: "The GroupMapping param.",
											Computed:    true,
										},
										"ip_user": dsschema.BoolAttribute{
											Description: "The IpUser param.",
											Computed:    true,
										},
									},
								},
							},
						},
						"description": dsschema.StringAttribute{
							Description: "The Description param. String length must not exceed 255 characters.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"local_inline_cat": dsschema.BoolAttribute{
							Description: "The LocalInlineCat param.",
							Computed:    true,
						},
						"log_container_page_only": dsschema.BoolAttribute{
							Description: "The LogContainerPageOnly param. Default: `true`.",
							Computed:    true,
						},
						"log_http_hdr_referer": dsschema.BoolAttribute{
							Description: "The LogHttpHdrReferer param. Default: `false`.",
							Computed:    true,
						},
						"log_http_hdr_user_agent": dsschema.BoolAttribute{
							Description: "The LogHttpHdrUserAgent param. Default: `false`.",
							Computed:    true,
						},
						"log_http_hdr_xff": dsschema.BoolAttribute{
							Description: "The LogHttpHdrXff param. Default: `false`.",
							Computed:    true,
						},
						"mlav_category_exceptions": dsschema.ListAttribute{
							Description: "The MlavCategoryExceptions param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"safe_search_enforcement": dsschema.BoolAttribute{
							Description: "The SafeSearchEnforcement param. Default: `false`.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *urlAccessProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *urlAccessProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state urlAccessProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_url_access_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := alljvhu.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := alljvhu.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]urlAccessProfileListDsModel_ivVDSwf_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := urlAccessProfileListDsModel_ivVDSwf_Config{}

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Alerts)
			var1.Alerts = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Allows)
			var1.Allows = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.Blocks)
			var1.Blocks = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var1.CloudInlineCat = types.BoolPointerValue(var0.CloudInlineCat)

			var8, var9 := types.ListValueFrom(ctx, types.StringType, var0.Continues)
			var1.Continues = var8
			resp.Diagnostics.Append(var9.Errors()...)

			if var0.CredentialEnforcement == nil {
				var1.CredentialEnforcement = nil
			} else {
				var1.CredentialEnforcement = &urlAccessProfileListDsModel_ivVDSwf_CredentialEnforcementObject{}

				var10, var11 := types.ListValueFrom(ctx, types.StringType, var0.CredentialEnforcement.Alerts)
				var1.CredentialEnforcement.Alerts = var10
				resp.Diagnostics.Append(var11.Errors()...)

				var12, var13 := types.ListValueFrom(ctx, types.StringType, var0.CredentialEnforcement.Allows)
				var1.CredentialEnforcement.Allows = var12
				resp.Diagnostics.Append(var13.Errors()...)

				var14, var15 := types.ListValueFrom(ctx, types.StringType, var0.CredentialEnforcement.Blocks)
				var1.CredentialEnforcement.Blocks = var14
				resp.Diagnostics.Append(var15.Errors()...)

				var16, var17 := types.ListValueFrom(ctx, types.StringType, var0.CredentialEnforcement.Continues)
				var1.CredentialEnforcement.Continues = var16
				resp.Diagnostics.Append(var17.Errors()...)

				var1.CredentialEnforcement.LogSeverity = types.StringPointerValue(var0.CredentialEnforcement.LogSeverity)

				if var0.CredentialEnforcement.Mode == nil {
					var1.CredentialEnforcement.Mode = nil
				} else {
					var1.CredentialEnforcement.Mode = &urlAccessProfileListDsModel_ivVDSwf_ModeObject{}

					var1.CredentialEnforcement.Mode.Disabled = types.BoolValue(var0.CredentialEnforcement.Mode.Disabled != nil)

					var1.CredentialEnforcement.Mode.DomainCredentials = types.BoolValue(var0.CredentialEnforcement.Mode.DomainCredentials != nil)

					var1.CredentialEnforcement.Mode.GroupMapping = types.StringPointerValue(var0.CredentialEnforcement.Mode.GroupMapping)

					var1.CredentialEnforcement.Mode.IpUser = types.BoolValue(var0.CredentialEnforcement.Mode.IpUser != nil)
				}
			}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.LocalInlineCat = types.BoolPointerValue(var0.LocalInlineCat)

			var1.LogContainerPageOnly = types.BoolPointerValue(var0.LogContainerPageOnly)

			var1.LogHttpHdrReferer = types.BoolPointerValue(var0.LogHttpHdrReferer)

			var1.LogHttpHdrUserAgent = types.BoolPointerValue(var0.LogHttpHdrUserAgent)

			var1.LogHttpHdrXff = types.BoolPointerValue(var0.LogHttpHdrXff)

			var18, var19 := types.ListValueFrom(ctx, types.StringType, var0.MlavCategoryExceptions)
			var1.MlavCategoryExceptions = var18
			resp.Diagnostics.Append(var19.Errors()...)

			var1.Name = types.StringValue(var0.Name)

			var1.SafeSearchEnforcement = types.BoolPointerValue(var0.SafeSearchEnforcement)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &urlAccessProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &urlAccessProfileDataSource{}
)

func NewUrlAccessProfileDataSource() datasource.DataSource {
	return &urlAccessProfileDataSource{}
}

type urlAccessProfileDataSource struct {
	client *scm.Client
}

// urlAccessProfileDsModel is the model.
type urlAccessProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Alerts                types.List                                                   `tfsdk:"alerts"`
	Allows                types.List                                                   `tfsdk:"allows"`
	Blocks                types.List                                                   `tfsdk:"blocks"`
	CloudInlineCat        types.Bool                                                   `tfsdk:"cloud_inline_cat"`
	Continues             types.List                                                   `tfsdk:"continues"`
	CredentialEnforcement *urlAccessProfileDsModel_ivVDSwf_CredentialEnforcementObject `tfsdk:"credential_enforcement"`
	Description           types.String                                                 `tfsdk:"description"`
	// omit input: id
	LocalInlineCat         types.Bool   `tfsdk:"local_inline_cat"`
	LogContainerPageOnly   types.Bool   `tfsdk:"log_container_page_only"`
	LogHttpHdrReferer      types.Bool   `tfsdk:"log_http_hdr_referer"`
	LogHttpHdrUserAgent    types.Bool   `tfsdk:"log_http_hdr_user_agent"`
	LogHttpHdrXff          types.Bool   `tfsdk:"log_http_hdr_xff"`
	MlavCategoryExceptions types.List   `tfsdk:"mlav_category_exceptions"`
	Name                   types.String `tfsdk:"name"`
	SafeSearchEnforcement  types.Bool   `tfsdk:"safe_search_enforcement"`
}

type urlAccessProfileDsModel_ivVDSwf_CredentialEnforcementObject struct {
	Alerts      types.List                                  `tfsdk:"alerts"`
	Allows      types.List                                  `tfsdk:"allows"`
	Blocks      types.List                                  `tfsdk:"blocks"`
	Continues   types.List                                  `tfsdk:"continues"`
	LogSeverity types.String                                `tfsdk:"log_severity"`
	Mode        *urlAccessProfileDsModel_ivVDSwf_ModeObject `tfsdk:"mode"`
}

type urlAccessProfileDsModel_ivVDSwf_ModeObject struct {
	Disabled          types.Bool   `tfsdk:"disabled"`
	DomainCredentials types.Bool   `tfsdk:"domain_credentials"`
	GroupMapping      types.String `tfsdk:"group_mapping"`
	IpUser            types.Bool   `tfsdk:"ip_user"`
}

// Metadata returns the data source type name.
func (d *urlAccessProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_url_access_profile"
}

// Schema defines the schema for this data source.
func (d *urlAccessProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "cloud_inline_cat":true, "continue":true, "credential_enforcement":true, "description":true, "id":true, "local_inline_cat":true, "log_container_page_only":true, "log_http_hdr_referer":true, "log_http_hdr_user_agent":true, "log_http_hdr_xff":true, "mlav_category_exception":true, "name":true, "safe_search_enforcement":true, "tfid":true} forceNew:map[string]bool{"id":true}
			"alerts": dsschema.ListAttribute{
				Description: "The Alerts param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"allows": dsschema.ListAttribute{
				Description: "The Allows param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"blocks": dsschema.ListAttribute{
				Description: "The Blocks param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"cloud_inline_cat": dsschema.BoolAttribute{
				Description: "The CloudInlineCat param.",
				Computed:    true,
			},
			"continues": dsschema.ListAttribute{
				Description: "The Continues param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"credential_enforcement": dsschema.SingleNestedAttribute{
				Description: "The CredentialEnforcement param.",
				Computed:    true,
				Attributes: map[string]dsschema.Attribute{
					// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "continue":true, "log_severity":true, "mode":true} forceNew:map[string]bool(nil)
					"alerts": dsschema.ListAttribute{
						Description: "The Alerts param.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"allows": dsschema.ListAttribute{
						Description: "The Allows param.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"blocks": dsschema.ListAttribute{
						Description: "The Blocks param.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"continues": dsschema.ListAttribute{
						Description: "The Continues param.",
						Computed:    true,
						ElementType: types.StringType,
					},
					"log_severity": dsschema.StringAttribute{
						Description: "The LogSeverity param. Default: `\"medium\"`.",
						Computed:    true,
					},
					"mode": dsschema.SingleNestedAttribute{
						Description: "The Mode param.",
						Computed:    true,
						Attributes: map[string]dsschema.Attribute{
							// inputs:map[string]bool{} outputs:map[string]bool{"disabled":true, "domain_credentials":true, "group_mapping":true, "ip_user":true} forceNew:map[string]bool(nil)
							"disabled": dsschema.BoolAttribute{
								Description: "The Disabled param.",
								Computed:    true,
							},
							"domain_credentials": dsschema.BoolAttribute{
								Description: "The DomainCredentials param.",
								Computed:    true,
							},
							"group_mapping": dsschema.StringAttribute{
								Description: "The GroupMapping param.",
								Computed:    true,
							},
							"ip_user": dsschema.BoolAttribute{
								Description: "The IpUser param.",
								Computed:    true,
							},
						},
					},
				},
			},
			"description": dsschema.StringAttribute{
				Description: "The Description param. String length must not exceed 255 characters.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"local_inline_cat": dsschema.BoolAttribute{
				Description: "The LocalInlineCat param.",
				Computed:    true,
			},
			"log_container_page_only": dsschema.BoolAttribute{
				Description: "The LogContainerPageOnly param. Default: `true`.",
				Computed:    true,
			},
			"log_http_hdr_referer": dsschema.BoolAttribute{
				Description: "The LogHttpHdrReferer param. Default: `false`.",
				Computed:    true,
			},
			"log_http_hdr_user_agent": dsschema.BoolAttribute{
				Description: "The LogHttpHdrUserAgent param. Default: `false`.",
				Computed:    true,
			},
			"log_http_hdr_xff": dsschema.BoolAttribute{
				Description: "The LogHttpHdrXff param. Default: `false`.",
				Computed:    true,
			},
			"mlav_category_exceptions": dsschema.ListAttribute{
				Description: "The MlavCategoryExceptions param.",
				Computed:    true,
				ElementType: types.StringType,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Computed:    true,
			},
			"safe_search_enforcement": dsschema.BoolAttribute{
				Description: "The SafeSearchEnforcement param. Default: `false`.",
				Computed:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *urlAccessProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *urlAccessProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state urlAccessProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_url_access_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := alljvhu.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := alljvhu.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Alerts)
	state.Alerts = var0
	resp.Diagnostics.Append(var1.Errors()...)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Allows)
	state.Allows = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Blocks)
	state.Blocks = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.CloudInlineCat = types.BoolPointerValue(ans.CloudInlineCat)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Continues)
	state.Continues = var6
	resp.Diagnostics.Append(var7.Errors()...)

	if ans.CredentialEnforcement == nil {
		state.CredentialEnforcement = nil
	} else {
		state.CredentialEnforcement = &urlAccessProfileDsModel_ivVDSwf_CredentialEnforcementObject{}

		var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Alerts)
		state.CredentialEnforcement.Alerts = var8
		resp.Diagnostics.Append(var9.Errors()...)

		var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Allows)
		state.CredentialEnforcement.Allows = var10
		resp.Diagnostics.Append(var11.Errors()...)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Blocks)
		state.CredentialEnforcement.Blocks = var12
		resp.Diagnostics.Append(var13.Errors()...)

		var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Continues)
		state.CredentialEnforcement.Continues = var14
		resp.Diagnostics.Append(var15.Errors()...)

		state.CredentialEnforcement.LogSeverity = types.StringPointerValue(ans.CredentialEnforcement.LogSeverity)

		if ans.CredentialEnforcement.Mode == nil {
			state.CredentialEnforcement.Mode = nil
		} else {
			state.CredentialEnforcement.Mode = &urlAccessProfileDsModel_ivVDSwf_ModeObject{}

			state.CredentialEnforcement.Mode.Disabled = types.BoolValue(ans.CredentialEnforcement.Mode.Disabled != nil)

			state.CredentialEnforcement.Mode.DomainCredentials = types.BoolValue(ans.CredentialEnforcement.Mode.DomainCredentials != nil)

			state.CredentialEnforcement.Mode.GroupMapping = types.StringPointerValue(ans.CredentialEnforcement.Mode.GroupMapping)

			state.CredentialEnforcement.Mode.IpUser = types.BoolValue(ans.CredentialEnforcement.Mode.IpUser != nil)
		}
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.LocalInlineCat = types.BoolPointerValue(ans.LocalInlineCat)

	state.LogContainerPageOnly = types.BoolPointerValue(ans.LogContainerPageOnly)

	state.LogHttpHdrReferer = types.BoolPointerValue(ans.LogHttpHdrReferer)

	state.LogHttpHdrUserAgent = types.BoolPointerValue(ans.LogHttpHdrUserAgent)

	state.LogHttpHdrXff = types.BoolPointerValue(ans.LogHttpHdrXff)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.MlavCategoryExceptions)
	state.MlavCategoryExceptions = var16
	resp.Diagnostics.Append(var17.Errors()...)

	state.Name = types.StringValue(ans.Name)

	state.SafeSearchEnforcement = types.BoolPointerValue(ans.SafeSearchEnforcement)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &urlAccessProfileResource{}
	_ resource.ResourceWithConfigure   = &urlAccessProfileResource{}
	_ resource.ResourceWithImportState = &urlAccessProfileResource{}
)

func NewUrlAccessProfileResource() resource.Resource {
	return &urlAccessProfileResource{}
}

type urlAccessProfileResource struct {
	client *scm.Client
}

// urlAccessProfileRsModel is the model.
type urlAccessProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Alerts                 types.List                                                   `tfsdk:"alerts"`
	Allows                 types.List                                                   `tfsdk:"allows"`
	Blocks                 types.List                                                   `tfsdk:"blocks"`
	CloudInlineCat         types.Bool                                                   `tfsdk:"cloud_inline_cat"`
	Continues              types.List                                                   `tfsdk:"continues"`
	CredentialEnforcement  *urlAccessProfileRsModel_ivVDSwf_CredentialEnforcementObject `tfsdk:"credential_enforcement"`
	Description            types.String                                                 `tfsdk:"description"`
	Device                 types.String                                                 `tfsdk:"device"`
	Folder                 types.String                                                 `tfsdk:"folder"`
	Id                     types.String                                                 `tfsdk:"id"`
	LocalInlineCat         types.Bool                                                   `tfsdk:"local_inline_cat"`
	LogContainerPageOnly   types.Bool                                                   `tfsdk:"log_container_page_only"`
	LogHttpHdrReferer      types.Bool                                                   `tfsdk:"log_http_hdr_referer"`
	LogHttpHdrUserAgent    types.Bool                                                   `tfsdk:"log_http_hdr_user_agent"`
	LogHttpHdrXff          types.Bool                                                   `tfsdk:"log_http_hdr_xff"`
	MlavCategoryExceptions types.List                                                   `tfsdk:"mlav_category_exceptions"`
	Name                   types.String                                                 `tfsdk:"name"`
	SafeSearchEnforcement  types.Bool                                                   `tfsdk:"safe_search_enforcement"`
	Snippet                types.String                                                 `tfsdk:"snippet"`

	// Output.
	// omit input: alerts
	// omit input: allows
	// omit input: blocks
	// omit input: cloud_inline_cat
	// omit input: continues
	// omit input: credential_enforcement
	// omit input: description
	// omit input: id
	// omit input: local_inline_cat
	// omit input: log_container_page_only
	// omit input: log_http_hdr_referer
	// omit input: log_http_hdr_user_agent
	// omit input: log_http_hdr_xff
	// omit input: mlav_category_exceptions
	// omit input: name
	// omit input: safe_search_enforcement
}

type urlAccessProfileRsModel_ivVDSwf_CredentialEnforcementObject struct {
	Alerts      types.List                                  `tfsdk:"alerts"`
	Allows      types.List                                  `tfsdk:"allows"`
	Blocks      types.List                                  `tfsdk:"blocks"`
	Continues   types.List                                  `tfsdk:"continues"`
	LogSeverity types.String                                `tfsdk:"log_severity"`
	Mode        *urlAccessProfileRsModel_ivVDSwf_ModeObject `tfsdk:"mode"`
}

type urlAccessProfileRsModel_ivVDSwf_ModeObject struct {
	Disabled          types.Bool   `tfsdk:"disabled"`
	DomainCredentials types.Bool   `tfsdk:"domain_credentials"`
	GroupMapping      types.String `tfsdk:"group_mapping"`
	IpUser            types.Bool   `tfsdk:"ip_user"`
}

// Metadata returns the data source type name.
func (r *urlAccessProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_url_access_profile"
}

// Schema defines the schema for this data source.
func (r *urlAccessProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"alert":true, "allow":true, "block":true, "cloud_inline_cat":true, "continue":true, "credential_enforcement":true, "description":true, "device":true, "folder":true, "id":true, "local_inline_cat":true, "log_container_page_only":true, "log_http_hdr_referer":true, "log_http_hdr_user_agent":true, "log_http_hdr_xff":true, "mlav_category_exception":true, "name":true, "safe_search_enforcement":true, "snippet":true} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "cloud_inline_cat":true, "continue":true, "credential_enforcement":true, "description":true, "id":true, "local_inline_cat":true, "log_container_page_only":true, "log_http_hdr_referer":true, "log_http_hdr_user_agent":true, "log_http_hdr_xff":true, "mlav_category_exception":true, "name":true, "safe_search_enforcement":true, "tfid":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"alerts": rsschema.ListAttribute{
				Description: "The Alerts param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"allows": rsschema.ListAttribute{
				Description: "The Allows param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"blocks": rsschema.ListAttribute{
				Description: "The Blocks param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"cloud_inline_cat": rsschema.BoolAttribute{
				Description: "The CloudInlineCat param.",
				Optional:    true,
			},
			"continues": rsschema.ListAttribute{
				Description: "The Continues param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"credential_enforcement": rsschema.SingleNestedAttribute{
				Description: "The CredentialEnforcement param.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					// inputs:map[string]bool{"alert":true, "allow":true, "block":true, "continue":true, "log_severity":true, "mode":true} outputs:map[string]bool{"alert":true, "allow":true, "block":true, "continue":true, "log_severity":true, "mode":true} forceNew:map[string]bool(nil)
					"alerts": rsschema.ListAttribute{
						Description: "The Alerts param.",
						Optional:    true,
						ElementType: types.StringType,
					},
					"allows": rsschema.ListAttribute{
						Description: "The Allows param.",
						Optional:    true,
						ElementType: types.StringType,
					},
					"blocks": rsschema.ListAttribute{
						Description: "The Blocks param.",
						Optional:    true,
						ElementType: types.StringType,
					},
					"continues": rsschema.ListAttribute{
						Description: "The Continues param.",
						Optional:    true,
						ElementType: types.StringType,
					},
					"log_severity": rsschema.StringAttribute{
						Description: "The LogSeverity param. Default: `\"medium\"`.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("medium"),
					},
					"mode": rsschema.SingleNestedAttribute{
						Description: "The Mode param.",
						Optional:    true,
						Attributes: map[string]rsschema.Attribute{
							// inputs:map[string]bool{"disabled":true, "domain_credentials":true, "group_mapping":true, "ip_user":true} outputs:map[string]bool{"disabled":true, "domain_credentials":true, "group_mapping":true, "ip_user":true} forceNew:map[string]bool(nil)
							"disabled": rsschema.BoolAttribute{
								Description: "The Disabled param.",
								Optional:    true,
							},
							"domain_credentials": rsschema.BoolAttribute{
								Description: "The DomainCredentials param.",
								Optional:    true,
							},
							"group_mapping": rsschema.StringAttribute{
								Description: "The GroupMapping param.",
								Optional:    true,
							},
							"ip_user": rsschema.BoolAttribute{
								Description: "The IpUser param.",
								Optional:    true,
							},
						},
					},
				},
			},
			"description": rsschema.StringAttribute{
				Description: "The Description param. String length must not exceed 255 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(255),
				},
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"local_inline_cat": rsschema.BoolAttribute{
				Description: "The LocalInlineCat param.",
				Optional:    true,
			},
			"log_container_page_only": rsschema.BoolAttribute{
				Description: "The LogContainerPageOnly param. Default: `true`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(true),
			},
			"log_http_hdr_referer": rsschema.BoolAttribute{
				Description: "The LogHttpHdrReferer param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"log_http_hdr_user_agent": rsschema.BoolAttribute{
				Description: "The LogHttpHdrUserAgent param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"log_http_hdr_xff": rsschema.BoolAttribute{
				Description: "The LogHttpHdrXff param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"mlav_category_exceptions": rsschema.ListAttribute{
				Description: "The MlavCategoryExceptions param.",
				Optional:    true,
				ElementType: types.StringType,
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param.",
				Required:    true,
			},
			"safe_search_enforcement": rsschema.BoolAttribute{
				Description: "The SafeSearchEnforcement param. Default: `false`.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *urlAccessProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *urlAccessProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state urlAccessProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_url_access_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := alljvhu.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := alljvhu.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &ivVDSwf.Config{}

	resp.Diagnostics.Append(state.Alerts.ElementsAs(ctx, &input.Request.Alerts, false)...)
	//if len(state.Alerts) != 0 {
	//    input.Request.Alerts = make([]string, 0, len(state.Alerts))
	//    for _, var0 := range state.Alerts {
	//        input.Request.Alerts = append(input.Request.Alerts, var0.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Allows.ElementsAs(ctx, &input.Request.Allows, false)...)
	//if len(state.Allows) != 0 {
	//    input.Request.Allows = make([]string, 0, len(state.Allows))
	//    for _, var1 := range state.Allows {
	//        input.Request.Allows = append(input.Request.Allows, var1.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(state.Blocks.ElementsAs(ctx, &input.Request.Blocks, false)...)
	//if len(state.Blocks) != 0 {
	//    input.Request.Blocks = make([]string, 0, len(state.Blocks))
	//    for _, var2 := range state.Blocks {
	//        input.Request.Blocks = append(input.Request.Blocks, var2.ValueString())
	//    }
	//}

	input.Request.CloudInlineCat = state.CloudInlineCat.ValueBoolPointer()

	resp.Diagnostics.Append(state.Continues.ElementsAs(ctx, &input.Request.Continues, false)...)
	//if len(state.Continues) != 0 {
	//    input.Request.Continues = make([]string, 0, len(state.Continues))
	//    for _, var3 := range state.Continues {
	//        input.Request.Continues = append(input.Request.Continues, var3.ValueString())
	//    }
	//}

	if state.CredentialEnforcement != nil {
		input.Request.CredentialEnforcement = &ivVDSwf.CredentialEnforcementObject{}

		resp.Diagnostics.Append(state.CredentialEnforcement.Alerts.ElementsAs(ctx, &input.Request.CredentialEnforcement.Alerts, false)...)
		//if len(state.CredentialEnforcement.Alerts) != 0 {
		//    input.Request.CredentialEnforcement.Alerts = make([]string, 0, len(state.CredentialEnforcement.Alerts))
		//    for _, var4 := range state.CredentialEnforcement.Alerts {
		//        input.Request.CredentialEnforcement.Alerts = append(input.Request.CredentialEnforcement.Alerts, var4.ValueString())
		//    }
		//}

		resp.Diagnostics.Append(state.CredentialEnforcement.Allows.ElementsAs(ctx, &input.Request.CredentialEnforcement.Allows, false)...)
		//if len(state.CredentialEnforcement.Allows) != 0 {
		//    input.Request.CredentialEnforcement.Allows = make([]string, 0, len(state.CredentialEnforcement.Allows))
		//    for _, var5 := range state.CredentialEnforcement.Allows {
		//        input.Request.CredentialEnforcement.Allows = append(input.Request.CredentialEnforcement.Allows, var5.ValueString())
		//    }
		//}

		resp.Diagnostics.Append(state.CredentialEnforcement.Blocks.ElementsAs(ctx, &input.Request.CredentialEnforcement.Blocks, false)...)
		//if len(state.CredentialEnforcement.Blocks) != 0 {
		//    input.Request.CredentialEnforcement.Blocks = make([]string, 0, len(state.CredentialEnforcement.Blocks))
		//    for _, var6 := range state.CredentialEnforcement.Blocks {
		//        input.Request.CredentialEnforcement.Blocks = append(input.Request.CredentialEnforcement.Blocks, var6.ValueString())
		//    }
		//}

		resp.Diagnostics.Append(state.CredentialEnforcement.Continues.ElementsAs(ctx, &input.Request.CredentialEnforcement.Continues, false)...)
		//if len(state.CredentialEnforcement.Continues) != 0 {
		//    input.Request.CredentialEnforcement.Continues = make([]string, 0, len(state.CredentialEnforcement.Continues))
		//    for _, var7 := range state.CredentialEnforcement.Continues {
		//        input.Request.CredentialEnforcement.Continues = append(input.Request.CredentialEnforcement.Continues, var7.ValueString())
		//    }
		//}

		input.Request.CredentialEnforcement.LogSeverity = state.CredentialEnforcement.LogSeverity.ValueStringPointer()

		if state.CredentialEnforcement.Mode != nil {
			input.Request.CredentialEnforcement.Mode = &ivVDSwf.ModeObject{}

			if !state.CredentialEnforcement.Mode.Disabled.IsNull() && state.CredentialEnforcement.Mode.Disabled.ValueBool() {
				input.Request.CredentialEnforcement.Mode.Disabled = map[string]interface{}{}
			}

			if !state.CredentialEnforcement.Mode.DomainCredentials.IsNull() && state.CredentialEnforcement.Mode.DomainCredentials.ValueBool() {
				input.Request.CredentialEnforcement.Mode.DomainCredentials = map[string]interface{}{}
			}

			input.Request.CredentialEnforcement.Mode.GroupMapping = state.CredentialEnforcement.Mode.GroupMapping.ValueStringPointer()

			if !state.CredentialEnforcement.Mode.IpUser.IsNull() && state.CredentialEnforcement.Mode.IpUser.ValueBool() {
				input.Request.CredentialEnforcement.Mode.IpUser = map[string]interface{}{}
			}
		}
	}

	input.Request.Description = state.Description.ValueStringPointer()

	input.Request.LocalInlineCat = state.LocalInlineCat.ValueBoolPointer()

	input.Request.LogContainerPageOnly = state.LogContainerPageOnly.ValueBoolPointer()

	input.Request.LogHttpHdrReferer = state.LogHttpHdrReferer.ValueBoolPointer()

	input.Request.LogHttpHdrUserAgent = state.LogHttpHdrUserAgent.ValueBoolPointer()

	input.Request.LogHttpHdrXff = state.LogHttpHdrXff.ValueBoolPointer()

	resp.Diagnostics.Append(state.MlavCategoryExceptions.ElementsAs(ctx, &input.Request.MlavCategoryExceptions, false)...)
	//if len(state.MlavCategoryExceptions) != 0 {
	//    input.Request.MlavCategoryExceptions = make([]string, 0, len(state.MlavCategoryExceptions))
	//    for _, var8 := range state.MlavCategoryExceptions {
	//        input.Request.MlavCategoryExceptions = append(input.Request.MlavCategoryExceptions, var8.ValueString())
	//    }
	//}

	input.Request.Name = state.Name.ValueString()

	input.Request.SafeSearchEnforcement = state.SafeSearchEnforcement.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Alerts)
	state.Alerts = var9
	resp.Diagnostics.Append(var10.Errors()...)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Allows)
	state.Allows = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.Blocks)
	state.Blocks = var13
	resp.Diagnostics.Append(var14.Errors()...)

	state.CloudInlineCat = types.BoolPointerValue(ans.CloudInlineCat)

	var15, var16 := types.ListValueFrom(ctx, types.StringType, ans.Continues)
	state.Continues = var15
	resp.Diagnostics.Append(var16.Errors()...)

	if ans.CredentialEnforcement == nil {
		state.CredentialEnforcement = nil
	} else {
		state.CredentialEnforcement = &urlAccessProfileRsModel_ivVDSwf_CredentialEnforcementObject{}

		var17, var18 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Alerts)
		state.CredentialEnforcement.Alerts = var17
		resp.Diagnostics.Append(var18.Errors()...)

		var19, var20 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Allows)
		state.CredentialEnforcement.Allows = var19
		resp.Diagnostics.Append(var20.Errors()...)

		var21, var22 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Blocks)
		state.CredentialEnforcement.Blocks = var21
		resp.Diagnostics.Append(var22.Errors()...)

		var23, var24 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Continues)
		state.CredentialEnforcement.Continues = var23
		resp.Diagnostics.Append(var24.Errors()...)

		state.CredentialEnforcement.LogSeverity = types.StringPointerValue(ans.CredentialEnforcement.LogSeverity)

		if ans.CredentialEnforcement.Mode == nil {
			state.CredentialEnforcement.Mode = nil
		} else {
			state.CredentialEnforcement.Mode = &urlAccessProfileRsModel_ivVDSwf_ModeObject{}

			state.CredentialEnforcement.Mode.Disabled = types.BoolValue(ans.CredentialEnforcement.Mode.Disabled != nil)

			state.CredentialEnforcement.Mode.DomainCredentials = types.BoolValue(ans.CredentialEnforcement.Mode.DomainCredentials != nil)

			state.CredentialEnforcement.Mode.GroupMapping = types.StringPointerValue(ans.CredentialEnforcement.Mode.GroupMapping)

			state.CredentialEnforcement.Mode.IpUser = types.BoolValue(ans.CredentialEnforcement.Mode.IpUser != nil)
		}
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.LocalInlineCat = types.BoolPointerValue(ans.LocalInlineCat)

	state.LogContainerPageOnly = types.BoolPointerValue(ans.LogContainerPageOnly)

	state.LogHttpHdrReferer = types.BoolPointerValue(ans.LogHttpHdrReferer)

	state.LogHttpHdrUserAgent = types.BoolPointerValue(ans.LogHttpHdrUserAgent)

	state.LogHttpHdrXff = types.BoolPointerValue(ans.LogHttpHdrXff)

	var25, var26 := types.ListValueFrom(ctx, types.StringType, ans.MlavCategoryExceptions)
	state.MlavCategoryExceptions = var25
	resp.Diagnostics.Append(var26.Errors()...)

	state.Name = types.StringValue(ans.Name)

	state.SafeSearchEnforcement = types.BoolPointerValue(ans.SafeSearchEnforcement)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *urlAccessProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state urlAccessProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_url_access_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := alljvhu.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := alljvhu.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	var0, var1 := types.ListValueFrom(ctx, types.StringType, ans.Alerts)
	state.Alerts = var0
	resp.Diagnostics.Append(var1.Errors()...)

	var2, var3 := types.ListValueFrom(ctx, types.StringType, ans.Allows)
	state.Allows = var2
	resp.Diagnostics.Append(var3.Errors()...)

	var4, var5 := types.ListValueFrom(ctx, types.StringType, ans.Blocks)
	state.Blocks = var4
	resp.Diagnostics.Append(var5.Errors()...)

	state.CloudInlineCat = types.BoolPointerValue(ans.CloudInlineCat)

	var6, var7 := types.ListValueFrom(ctx, types.StringType, ans.Continues)
	state.Continues = var6
	resp.Diagnostics.Append(var7.Errors()...)

	if ans.CredentialEnforcement == nil {
		state.CredentialEnforcement = nil
	} else {
		state.CredentialEnforcement = &urlAccessProfileRsModel_ivVDSwf_CredentialEnforcementObject{}

		var8, var9 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Alerts)
		state.CredentialEnforcement.Alerts = var8
		resp.Diagnostics.Append(var9.Errors()...)

		var10, var11 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Allows)
		state.CredentialEnforcement.Allows = var10
		resp.Diagnostics.Append(var11.Errors()...)

		var12, var13 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Blocks)
		state.CredentialEnforcement.Blocks = var12
		resp.Diagnostics.Append(var13.Errors()...)

		var14, var15 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Continues)
		state.CredentialEnforcement.Continues = var14
		resp.Diagnostics.Append(var15.Errors()...)

		state.CredentialEnforcement.LogSeverity = types.StringPointerValue(ans.CredentialEnforcement.LogSeverity)

		if ans.CredentialEnforcement.Mode == nil {
			state.CredentialEnforcement.Mode = nil
		} else {
			state.CredentialEnforcement.Mode = &urlAccessProfileRsModel_ivVDSwf_ModeObject{}

			state.CredentialEnforcement.Mode.Disabled = types.BoolValue(ans.CredentialEnforcement.Mode.Disabled != nil)

			state.CredentialEnforcement.Mode.DomainCredentials = types.BoolValue(ans.CredentialEnforcement.Mode.DomainCredentials != nil)

			state.CredentialEnforcement.Mode.GroupMapping = types.StringPointerValue(ans.CredentialEnforcement.Mode.GroupMapping)

			state.CredentialEnforcement.Mode.IpUser = types.BoolValue(ans.CredentialEnforcement.Mode.IpUser != nil)
		}
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.LocalInlineCat = types.BoolPointerValue(ans.LocalInlineCat)

	state.LogContainerPageOnly = types.BoolPointerValue(ans.LogContainerPageOnly)

	state.LogHttpHdrReferer = types.BoolPointerValue(ans.LogHttpHdrReferer)

	state.LogHttpHdrUserAgent = types.BoolPointerValue(ans.LogHttpHdrUserAgent)

	state.LogHttpHdrXff = types.BoolPointerValue(ans.LogHttpHdrXff)

	var16, var17 := types.ListValueFrom(ctx, types.StringType, ans.MlavCategoryExceptions)
	state.MlavCategoryExceptions = var16
	resp.Diagnostics.Append(var17.Errors()...)

	state.Name = types.StringValue(ans.Name)

	state.SafeSearchEnforcement = types.BoolPointerValue(ans.SafeSearchEnforcement)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *urlAccessProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state urlAccessProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_url_access_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := alljvhu.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := alljvhu.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &ivVDSwf.Config{}

	resp.Diagnostics.Append(plan.Alerts.ElementsAs(ctx, &input.Request.Alerts, false)...)
	//if len(plan.Alerts) != 0 {
	//    input.Request.Alerts = make([]string, 0, len(plan.Alerts))
	//    for _, var0 := range plan.Alerts {
	//        input.Request.Alerts = append(input.Request.Alerts, var0.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Allows.ElementsAs(ctx, &input.Request.Allows, false)...)
	//if len(plan.Allows) != 0 {
	//    input.Request.Allows = make([]string, 0, len(plan.Allows))
	//    for _, var1 := range plan.Allows {
	//        input.Request.Allows = append(input.Request.Allows, var1.ValueString())
	//    }
	//}

	resp.Diagnostics.Append(plan.Blocks.ElementsAs(ctx, &input.Request.Blocks, false)...)
	//if len(plan.Blocks) != 0 {
	//    input.Request.Blocks = make([]string, 0, len(plan.Blocks))
	//    for _, var2 := range plan.Blocks {
	//        input.Request.Blocks = append(input.Request.Blocks, var2.ValueString())
	//    }
	//}

	input.Request.CloudInlineCat = plan.CloudInlineCat.ValueBoolPointer()

	resp.Diagnostics.Append(plan.Continues.ElementsAs(ctx, &input.Request.Continues, false)...)
	//if len(plan.Continues) != 0 {
	//    input.Request.Continues = make([]string, 0, len(plan.Continues))
	//    for _, var3 := range plan.Continues {
	//        input.Request.Continues = append(input.Request.Continues, var3.ValueString())
	//    }
	//}

	if plan.CredentialEnforcement != nil {
		input.Request.CredentialEnforcement = &ivVDSwf.CredentialEnforcementObject{}

		resp.Diagnostics.Append(plan.CredentialEnforcement.Alerts.ElementsAs(ctx, &input.Request.CredentialEnforcement.Alerts, false)...)
		//if len(plan.CredentialEnforcement.Alerts) != 0 {
		//    input.Request.CredentialEnforcement.Alerts = make([]string, 0, len(plan.CredentialEnforcement.Alerts))
		//    for _, var4 := range plan.CredentialEnforcement.Alerts {
		//        input.Request.CredentialEnforcement.Alerts = append(input.Request.CredentialEnforcement.Alerts, var4.ValueString())
		//    }
		//}

		resp.Diagnostics.Append(plan.CredentialEnforcement.Allows.ElementsAs(ctx, &input.Request.CredentialEnforcement.Allows, false)...)
		//if len(plan.CredentialEnforcement.Allows) != 0 {
		//    input.Request.CredentialEnforcement.Allows = make([]string, 0, len(plan.CredentialEnforcement.Allows))
		//    for _, var5 := range plan.CredentialEnforcement.Allows {
		//        input.Request.CredentialEnforcement.Allows = append(input.Request.CredentialEnforcement.Allows, var5.ValueString())
		//    }
		//}

		resp.Diagnostics.Append(plan.CredentialEnforcement.Blocks.ElementsAs(ctx, &input.Request.CredentialEnforcement.Blocks, false)...)
		//if len(plan.CredentialEnforcement.Blocks) != 0 {
		//    input.Request.CredentialEnforcement.Blocks = make([]string, 0, len(plan.CredentialEnforcement.Blocks))
		//    for _, var6 := range plan.CredentialEnforcement.Blocks {
		//        input.Request.CredentialEnforcement.Blocks = append(input.Request.CredentialEnforcement.Blocks, var6.ValueString())
		//    }
		//}

		resp.Diagnostics.Append(plan.CredentialEnforcement.Continues.ElementsAs(ctx, &input.Request.CredentialEnforcement.Continues, false)...)
		//if len(plan.CredentialEnforcement.Continues) != 0 {
		//    input.Request.CredentialEnforcement.Continues = make([]string, 0, len(plan.CredentialEnforcement.Continues))
		//    for _, var7 := range plan.CredentialEnforcement.Continues {
		//        input.Request.CredentialEnforcement.Continues = append(input.Request.CredentialEnforcement.Continues, var7.ValueString())
		//    }
		//}

		input.Request.CredentialEnforcement.LogSeverity = plan.CredentialEnforcement.LogSeverity.ValueStringPointer()

		if plan.CredentialEnforcement.Mode != nil {
			input.Request.CredentialEnforcement.Mode = &ivVDSwf.ModeObject{}

			if !plan.CredentialEnforcement.Mode.Disabled.IsNull() && plan.CredentialEnforcement.Mode.Disabled.ValueBool() {
				input.Request.CredentialEnforcement.Mode.Disabled = map[string]interface{}{}
			}

			if !plan.CredentialEnforcement.Mode.DomainCredentials.IsNull() && plan.CredentialEnforcement.Mode.DomainCredentials.ValueBool() {
				input.Request.CredentialEnforcement.Mode.DomainCredentials = map[string]interface{}{}
			}

			input.Request.CredentialEnforcement.Mode.GroupMapping = plan.CredentialEnforcement.Mode.GroupMapping.ValueStringPointer()

			if !plan.CredentialEnforcement.Mode.IpUser.IsNull() && plan.CredentialEnforcement.Mode.IpUser.ValueBool() {
				input.Request.CredentialEnforcement.Mode.IpUser = map[string]interface{}{}
			}
		}
	}

	input.Request.Description = plan.Description.ValueStringPointer()

	input.Request.LocalInlineCat = plan.LocalInlineCat.ValueBoolPointer()

	input.Request.LogContainerPageOnly = plan.LogContainerPageOnly.ValueBoolPointer()

	input.Request.LogHttpHdrReferer = plan.LogHttpHdrReferer.ValueBoolPointer()

	input.Request.LogHttpHdrUserAgent = plan.LogHttpHdrUserAgent.ValueBoolPointer()

	input.Request.LogHttpHdrXff = plan.LogHttpHdrXff.ValueBoolPointer()

	resp.Diagnostics.Append(plan.MlavCategoryExceptions.ElementsAs(ctx, &input.Request.MlavCategoryExceptions, false)...)
	//if len(plan.MlavCategoryExceptions) != 0 {
	//    input.Request.MlavCategoryExceptions = make([]string, 0, len(plan.MlavCategoryExceptions))
	//    for _, var8 := range plan.MlavCategoryExceptions {
	//        input.Request.MlavCategoryExceptions = append(input.Request.MlavCategoryExceptions, var8.ValueString())
	//    }
	//}

	input.Request.Name = plan.Name.ValueString()

	input.Request.SafeSearchEnforcement = plan.SafeSearchEnforcement.ValueBoolPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	var9, var10 := types.ListValueFrom(ctx, types.StringType, ans.Alerts)
	state.Alerts = var9
	resp.Diagnostics.Append(var10.Errors()...)

	var11, var12 := types.ListValueFrom(ctx, types.StringType, ans.Allows)
	state.Allows = var11
	resp.Diagnostics.Append(var12.Errors()...)

	var13, var14 := types.ListValueFrom(ctx, types.StringType, ans.Blocks)
	state.Blocks = var13
	resp.Diagnostics.Append(var14.Errors()...)

	state.CloudInlineCat = types.BoolPointerValue(ans.CloudInlineCat)

	var15, var16 := types.ListValueFrom(ctx, types.StringType, ans.Continues)
	state.Continues = var15
	resp.Diagnostics.Append(var16.Errors()...)

	if ans.CredentialEnforcement == nil {
		state.CredentialEnforcement = nil
	} else {
		state.CredentialEnforcement = &urlAccessProfileRsModel_ivVDSwf_CredentialEnforcementObject{}

		var17, var18 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Alerts)
		state.CredentialEnforcement.Alerts = var17
		resp.Diagnostics.Append(var18.Errors()...)

		var19, var20 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Allows)
		state.CredentialEnforcement.Allows = var19
		resp.Diagnostics.Append(var20.Errors()...)

		var21, var22 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Blocks)
		state.CredentialEnforcement.Blocks = var21
		resp.Diagnostics.Append(var22.Errors()...)

		var23, var24 := types.ListValueFrom(ctx, types.StringType, ans.CredentialEnforcement.Continues)
		state.CredentialEnforcement.Continues = var23
		resp.Diagnostics.Append(var24.Errors()...)

		state.CredentialEnforcement.LogSeverity = types.StringPointerValue(ans.CredentialEnforcement.LogSeverity)

		if ans.CredentialEnforcement.Mode == nil {
			state.CredentialEnforcement.Mode = nil
		} else {
			state.CredentialEnforcement.Mode = &urlAccessProfileRsModel_ivVDSwf_ModeObject{}

			state.CredentialEnforcement.Mode.Disabled = types.BoolValue(ans.CredentialEnforcement.Mode.Disabled != nil)

			state.CredentialEnforcement.Mode.DomainCredentials = types.BoolValue(ans.CredentialEnforcement.Mode.DomainCredentials != nil)

			state.CredentialEnforcement.Mode.GroupMapping = types.StringPointerValue(ans.CredentialEnforcement.Mode.GroupMapping)

			state.CredentialEnforcement.Mode.IpUser = types.BoolValue(ans.CredentialEnforcement.Mode.IpUser != nil)
		}
	}

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.LocalInlineCat = types.BoolPointerValue(ans.LocalInlineCat)

	state.LogContainerPageOnly = types.BoolPointerValue(ans.LogContainerPageOnly)

	state.LogHttpHdrReferer = types.BoolPointerValue(ans.LogHttpHdrReferer)

	state.LogHttpHdrUserAgent = types.BoolPointerValue(ans.LogHttpHdrUserAgent)

	state.LogHttpHdrXff = types.BoolPointerValue(ans.LogHttpHdrXff)

	var25, var26 := types.ListValueFrom(ctx, types.StringType, ans.MlavCategoryExceptions)
	state.MlavCategoryExceptions = var25
	resp.Diagnostics.Append(var26.Errors()...)

	state.Name = types.StringValue(ans.Name)

	state.SafeSearchEnforcement = types.BoolPointerValue(ans.SafeSearchEnforcement)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *urlAccessProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_url_access_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := alljvhu.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := alljvhu.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *urlAccessProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
