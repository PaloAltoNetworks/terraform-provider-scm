package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	aeWshcf "github.com/paloaltonetworks/scm-go/netsec/schemas/variables"
	mvZFtQR "github.com/paloaltonetworks/scm-go/netsec/services/variables"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &variableListDataSource{}
	_ datasource.DataSourceWithConfigure = &variableListDataSource{}
)

func NewVariableListDataSource() datasource.DataSource {
	return &variableListDataSource{}
}

type variableListDataSource struct {
	client *scm.Client
}

// variableListDsModel is the model.
type variableListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []variableListDsModel_aeWshcf_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type variableListDsModel_aeWshcf_Config struct {
	Description types.String `tfsdk:"description"`
	Id          types.String `tfsdk:"id"`
	Name        types.String `tfsdk:"name"`
	Overridden  types.Bool   `tfsdk:"overridden"`
	Type        types.String `tfsdk:"type"`
	Value       types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (d *variableListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_variable_list"
}

// Schema defines the schema for this listing data source.
func (d *variableListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "id":true, "name":true, "overridden":true, "type":true, "value":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
							Computed:    true,
						},
						"overridden": dsschema.BoolAttribute{
							Description: "The Overridden param.",
							Computed:    true,
						},
						"type": dsschema.StringAttribute{
							Description: "The Type param. String must be one of these: `\"percent\"`, `\"count\"`, `\"ip-netmask\"`, `\"zone\"`, `\"ip-range\"`, `\"ip-wildcard\"`, `\"device-priority\"`, `\"device-id\"`, `\"egress-max\"`, `\"as-number\"`, `\"fqdn\"`, `\"port\"`, `\"link-tag\"`, `\"group-id\"`, `\"rate\"`, `\"router-id\"`, `\"qos-profile\"`, `\"timer\"`.",
							Computed:    true,
						},
						"value": dsschema.StringAttribute{
							Description: "value can accept either string or integer.",
							Computed:    true,
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *variableListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *variableListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state variableListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_variable_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"limit":                       state.Limit.ValueInt64(),
		"offset":                      state.Offset.ValueInt64(),
	})

	// Prepare to run the command.
	svc := mvZFtQR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]variableListDsModel_aeWshcf_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := variableListDsModel_aeWshcf_Config{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.Overridden = types.BoolPointerValue(var0.Overridden)

			var1.Type = types.StringPointerValue(var0.Type)

			var1.Value = types.StringPointerValue(var0.Value)
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &variableDataSource{}
	_ datasource.DataSourceWithConfigure = &variableDataSource{}
)

func NewVariableDataSource() datasource.DataSource {
	return &variableDataSource{}
}

type variableDataSource struct {
	client *scm.Client
}

// variableDsModel is the model.
type variableDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Id      types.String `tfsdk:"id"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Description types.String `tfsdk:"description"`
	// omit input: id
	Name       types.String `tfsdk:"name"`
	Overridden types.Bool   `tfsdk:"overridden"`
	Type       types.String `tfsdk:"type"`
	Value      types.String `tfsdk:"value"`
}

// Metadata returns the data source type name.
func (d *variableDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_variable"
}

// Schema defines the schema for this data source.
func (d *variableDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "id":true, "snippet":true} outputs:map[string]bool{"description":true, "id":true, "name":true, "overridden":true, "tfid":true, "type":true, "value":true} forceNew:map[string]bool{"device":true, "folder":true, "id":true, "snippet":true}
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Computed:    true,
			},
			"overridden": dsschema.BoolAttribute{
				Description: "The Overridden param.",
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"type": dsschema.StringAttribute{
				Description: "The Type param. String must be one of these: `\"percent\"`, `\"count\"`, `\"ip-netmask\"`, `\"zone\"`, `\"ip-range\"`, `\"ip-wildcard\"`, `\"device-priority\"`, `\"device-id\"`, `\"egress-max\"`, `\"as-number\"`, `\"fqdn\"`, `\"port\"`, `\"link-tag\"`, `\"group-id\"`, `\"rate\"`, `\"router-id\"`, `\"qos-profile\"`, `\"timer\"`.",
				Computed:    true,
			},
			"value": dsschema.StringAttribute{
				Description: "value can accept either string or integer.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *variableDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *variableDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state variableDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_variable",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to run the command.
	svc := mvZFtQR.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.ReadInput{}

	input.Id = state.Id.ValueString()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	state.Overridden = types.BoolPointerValue(ans.Overridden)

	state.Type = types.StringPointerValue(ans.Type)

	state.Value = types.StringPointerValue(ans.Value)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &variableResource{}
	_ resource.ResourceWithConfigure   = &variableResource{}
	_ resource.ResourceWithImportState = &variableResource{}
)

func NewVariableResource() resource.Resource {
	return &variableResource{}
}

type variableResource struct {
	client *scm.Client
}

// variableRsModel is the model.
type variableRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Description types.String `tfsdk:"description"`
	Device      types.String `tfsdk:"device"`
	Folder      types.String `tfsdk:"folder"`
	Id          types.String `tfsdk:"id"`
	Name        types.String `tfsdk:"name"`
	Overridden  types.Bool   `tfsdk:"overridden"`
	Snippet     types.String `tfsdk:"snippet"`
	Type        types.String `tfsdk:"type"`
	Value       types.String `tfsdk:"value"`

	// Output.
	// omit input: description
	// omit input: id
	// omit input: name
	// omit input: overridden
	// omit input: type
	// omit input: value
}

// Metadata returns the data source type name.
func (r *variableResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_variable"
}

// Schema defines the schema for this data source.
func (r *variableResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"description":true, "device":true, "folder":true, "id":true, "name":true, "overridden":true, "snippet":true, "type":true, "value":true} outputs:map[string]bool{"description":true, "id":true, "name":true, "overridden":true, "tfid":true, "type":true, "value":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "Alphanumeric string begin with letter: [0-9a-zA-Z._-]. String length must not exceed 63 characters.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(63),
				},
			},
			"overridden": rsschema.BoolAttribute{
				Description: "The Overridden param.",
				Computed:    true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"type": rsschema.StringAttribute{
				Description: "The Type param. String must be one of these: `\"percent\"`, `\"count\"`, `\"ip-netmask\"`, `\"zone\"`, `\"ip-range\"`, `\"ip-wildcard\"`, `\"device-priority\"`, `\"device-id\"`, `\"egress-max\"`, `\"as-number\"`, `\"fqdn\"`, `\"port\"`, `\"link-tag\"`, `\"group-id\"`, `\"rate\"`, `\"router-id\"`, `\"qos-profile\"`, `\"timer\"`.",
				Optional:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("percent", "count", "ip-netmask", "zone", "ip-range", "ip-wildcard", "device-priority", "device-id", "egress-max", "as-number", "fqdn", "port", "link-tag", "group-id", "rate", "router-id", "qos-profile", "timer"),
				},
			},
			"value": rsschema.StringAttribute{
				Description: "value can accept either string or integer.",
				Optional:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (r *variableResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *variableResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state variableRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_variable",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := mvZFtQR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &aeWshcf.Config{}

	input.Request.Description = state.Description.ValueStringPointer()

	input.Request.Name = state.Name.ValueStringPointer()

	input.Request.Type = state.Type.ValueStringPointer()

	input.Request.Value = state.Value.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	state.Overridden = types.BoolPointerValue(ans.Overridden)

	state.Type = types.StringPointerValue(ans.Type)

	state.Value = types.StringPointerValue(ans.Value)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *variableResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state variableRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_variable",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := mvZFtQR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.ReadInput{}

	input.Id = tokens[3]

	input.Folder = &tokens[0]

	input.Snippet = &tokens[1]

	input.Device = &tokens[2]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	state.Overridden = types.BoolPointerValue(ans.Overridden)

	state.Type = types.StringPointerValue(ans.Type)

	state.Value = types.StringPointerValue(ans.Value)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *variableResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state variableRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_variable",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := mvZFtQR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}

	if tokens[0] != "" {
		input.Folder = &tokens[0]
	}

	if tokens[1] != "" {
		input.Snippet = &tokens[1]
	}

	if tokens[2] != "" {
		input.Device = &tokens[2]
	}
	input.Request = &aeWshcf.Config{}

	input.Request.Description = plan.Description.ValueStringPointer()

	input.Request.Name = plan.Name.ValueStringPointer()

	input.Request.Type = plan.Type.ValueStringPointer()

	input.Request.Value = plan.Value.ValueStringPointer()

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringPointerValue(ans.Name)

	state.Overridden = types.BoolPointerValue(ans.Overridden)

	state.Type = types.StringPointerValue(ans.Type)

	state.Value = types.StringPointerValue(ans.Value)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *variableResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_variable",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := mvZFtQR.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := mvZFtQR.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *variableResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
