package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	zAHtTyI "github.com/paloaltonetworks/scm-go/netsec/schemas/vulnerability/protection/profiles"
	cAmNwjX "github.com/paloaltonetworks/scm-go/netsec/services/vulnerabilityprotectionprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &vulnerabilityProtectionProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &vulnerabilityProtectionProfileListDataSource{}
)

func NewVulnerabilityProtectionProfileListDataSource() datasource.DataSource {
	return &vulnerabilityProtectionProfileListDataSource{}
}

type vulnerabilityProtectionProfileListDataSource struct {
	client *scm.Client
}

// vulnerabilityProtectionProfileListDsModel is the model.
type vulnerabilityProtectionProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []vulnerabilityProtectionProfileListDsModel_zAHtTyI_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_Config struct {
	Description      types.String                                                              `tfsdk:"description"`
	Id               types.String                                                              `tfsdk:"id"`
	Name             types.String                                                              `tfsdk:"name"`
	Rules            []vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleObject            `tfsdk:"rules"`
	ThreatExceptions []vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionObject `tfsdk:"threat_exceptions"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleObject struct {
	Action        *vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleActionObject `tfsdk:"action"`
	Category      types.String                                                        `tfsdk:"category"`
	Cves          types.List                                                          `tfsdk:"cves"`
	Host          types.String                                                        `tfsdk:"host"`
	Name          types.String                                                        `tfsdk:"name"`
	PacketCapture types.String                                                        `tfsdk:"packet_capture"`
	Severities    types.List                                                          `tfsdk:"severities"`
	ThreatName    types.String                                                        `tfsdk:"threat_name"`
	VendorIds     types.List                                                          `tfsdk:"vendor_ids"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleActionObject struct {
	Alert       types.Bool                                                           `tfsdk:"alert"`
	Allow       types.Bool                                                           `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                           `tfsdk:"default"`
	Drop        types.Bool                                                           `tfsdk:"drop"`
	ResetBoth   types.Bool                                                           `tfsdk:"reset_both"`
	ResetClient types.Bool                                                           `tfsdk:"reset_client"`
	ResetServer types.Bool                                                           `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionObject struct {
	Action        *vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionActionObject `tfsdk:"action"`
	ExemptIps     []vulnerabilityProtectionProfileListDsModel_zAHtTyI_ExemptIpObject             `tfsdk:"exempt_ips"`
	Name          types.String                                                                   `tfsdk:"name"`
	Notes         types.String                                                                   `tfsdk:"notes"`
	PacketCapture types.String                                                                   `tfsdk:"packet_capture"`
	TimeAttribute *vulnerabilityProtectionProfileListDsModel_zAHtTyI_TimeAttributeObject         `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionActionObject struct {
	Alert       types.Bool                                                                      `tfsdk:"alert"`
	Allow       types.Bool                                                                      `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                                      `tfsdk:"default"`
	Drop        types.Bool                                                                      `tfsdk:"drop"`
	ResetBoth   types.Bool                                                                      `tfsdk:"reset_both"`
	ResetClient types.Bool                                                                      `tfsdk:"reset_client"`
	ResetServer types.Bool                                                                      `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_ExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

type vulnerabilityProtectionProfileListDsModel_zAHtTyI_TimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

// Metadata returns the data source type name.
func (d *vulnerabilityProtectionProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *vulnerabilityProtectionProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "id":true, "name":true, "rules":true, "threat_exception":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param. String validation regex: `^[a-zA-Z0-9._-]+$`.",
							Computed:    true,
						},
						"rules": dsschema.ListNestedAttribute{
							Description: "The Rules param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "category":true, "cve":true, "host":true, "name":true, "packet_capture":true, "severity":true, "threat_name":true, "vendor_id":true} forceNew:map[string]bool(nil)
									"action": dsschema.SingleNestedAttribute{
										Description: "The Action param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
											"alert": dsschema.BoolAttribute{
												Description: "The Alert param. Default: `false`.",
												Computed:    true,
											},
											"allow": dsschema.BoolAttribute{
												Description: "The Allow param. Default: `false`.",
												Computed:    true,
											},
											"block_ip": dsschema.SingleNestedAttribute{
												Description: "The BlockIp param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
													"duration": dsschema.Int64Attribute{
														Description: "The Duration param. Value must be between 1 and 3600.",
														Computed:    true,
													},
													"track_by": dsschema.StringAttribute{
														Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
														Computed:    true,
													},
												},
											},
											"default": dsschema.BoolAttribute{
												Description: "The Default param. Default: `false`.",
												Computed:    true,
											},
											"drop": dsschema.BoolAttribute{
												Description: "The Drop param. Default: `false`.",
												Computed:    true,
											},
											"reset_both": dsschema.BoolAttribute{
												Description: "The ResetBoth param. Default: `false`.",
												Computed:    true,
											},
											"reset_client": dsschema.BoolAttribute{
												Description: "The ResetClient param. Default: `false`.",
												Computed:    true,
											},
											"reset_server": dsschema.BoolAttribute{
												Description: "The ResetServer param. Default: `false`.",
												Computed:    true,
											},
										},
									},
									"category": dsschema.StringAttribute{
										Description: "The Category param. String must be one of these: `\"any\"`, `\"brute-force\"`, `\"code-execution\"`, `\"code-obfuscation\"`, `\"command-execution\"`, `\"dos\"`, `\"exploit-kit\"`, `\"info-leak\"`, `\"insecure-credentials\"`, `\"overflow\"`, `\"phishing\"`, `\"protocol-anomaly\"`, `\"scan\"`, `\"sql-injection\"`.",
										Computed:    true,
									},
									"cves": dsschema.ListAttribute{
										Description: "The Cves param.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"host": dsschema.StringAttribute{
										Description: "The Host param.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"packet_capture": dsschema.StringAttribute{
										Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
										Computed:    true,
									},
									"severities": dsschema.ListAttribute{
										Description: "The Severities param.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"threat_name": dsschema.StringAttribute{
										Description: "The ThreatName param.",
										Computed:    true,
									},
									"vendor_ids": dsschema.ListAttribute{
										Description: "The VendorIds param.",
										Computed:    true,
										ElementType: types.StringType,
									},
								},
							},
						},
						"threat_exceptions": dsschema.ListNestedAttribute{
							Description: "The ThreatExceptions param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "exempt_ip":true, "name":true, "notes":true, "packet_capture":true, "time_attribute":true} forceNew:map[string]bool(nil)
									"action": dsschema.SingleNestedAttribute{
										Description: "The Action param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
											"alert": dsschema.BoolAttribute{
												Description: "The Alert param. Default: `false`.",
												Computed:    true,
											},
											"allow": dsschema.BoolAttribute{
												Description: "The Allow param. Default: `false`.",
												Computed:    true,
											},
											"block_ip": dsschema.SingleNestedAttribute{
												Description: "The BlockIp param.",
												Computed:    true,
												Attributes: map[string]dsschema.Attribute{
													// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
													"duration": dsschema.Int64Attribute{
														Description: "The Duration param. Value must be between 1 and 3600.",
														Computed:    true,
													},
													"track_by": dsschema.StringAttribute{
														Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
														Computed:    true,
													},
												},
											},
											"default": dsschema.BoolAttribute{
												Description: "The Default param. Default: `false`.",
												Computed:    true,
											},
											"drop": dsschema.BoolAttribute{
												Description: "The Drop param. Default: `false`.",
												Computed:    true,
											},
											"reset_both": dsschema.BoolAttribute{
												Description: "The ResetBoth param. Default: `false`.",
												Computed:    true,
											},
											"reset_client": dsschema.BoolAttribute{
												Description: "The ResetClient param. Default: `false`.",
												Computed:    true,
											},
											"reset_server": dsschema.BoolAttribute{
												Description: "The ResetServer param. Default: `false`.",
												Computed:    true,
											},
										},
									},
									"exempt_ips": dsschema.ListNestedAttribute{
										Description: "The ExemptIps param.",
										Computed:    true,
										NestedObject: dsschema.NestedAttributeObject{
											Attributes: map[string]dsschema.Attribute{
												// inputs:map[string]bool{} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
												"name": dsschema.StringAttribute{
													Description: "The Name param.",
													Computed:    true,
												},
											},
										},
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"notes": dsschema.StringAttribute{
										Description: "The Notes param.",
										Computed:    true,
									},
									"packet_capture": dsschema.StringAttribute{
										Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
										Computed:    true,
									},
									"time_attribute": dsschema.SingleNestedAttribute{
										Description: "The TimeAttribute param.",
										Computed:    true,
										Attributes: map[string]dsschema.Attribute{
											// inputs:map[string]bool{} outputs:map[string]bool{"interval":true, "threshold":true, "track_by":true} forceNew:map[string]bool(nil)
											"interval": dsschema.Int64Attribute{
												Description: "The Interval param. Value must be between 1 and 3600.",
												Computed:    true,
											},
											"threshold": dsschema.Int64Attribute{
												Description: "The Threshold param. Value must be between 1 and 65535.",
												Computed:    true,
											},
											"track_by": dsschema.StringAttribute{
												Description: "The TrackBy param. String must be one of these: `\"source\"`, `\"destination\"`, `\"source-and-destination\"`.",
												Computed:    true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *vulnerabilityProtectionProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *vulnerabilityProtectionProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state vulnerabilityProtectionProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_vulnerability_protection_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := cAmNwjX.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := cAmNwjX.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]vulnerabilityProtectionProfileListDsModel_zAHtTyI_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := vulnerabilityProtectionProfileListDsModel_zAHtTyI_Config{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Id = types.StringPointerValue(var0.Id)

			var1.Name = types.StringValue(var0.Name)

			if len(var0.Rules) == 0 {
				var1.Rules = nil
			} else {
				var1.Rules = make([]vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleObject, 0, len(var0.Rules))
				for _, var2 := range var0.Rules {
					var3 := vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleObject{}

					if var2.Action == nil {
						var3.Action = nil
					} else {
						var3.Action = &vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleActionObject{}

						var3.Action.Alert = types.BoolValue(var2.Action.Alert != nil)

						var3.Action.Allow = types.BoolValue(var2.Action.Allow != nil)

						if var2.Action.BlockIp == nil {
							var3.Action.BlockIp = nil
						} else {
							var3.Action.BlockIp = &vulnerabilityProtectionProfileListDsModel_zAHtTyI_RuleBlockIpObject{}

							var3.Action.BlockIp.Duration = types.Int64PointerValue(var2.Action.BlockIp.Duration)

							var3.Action.BlockIp.TrackBy = types.StringPointerValue(var2.Action.BlockIp.TrackBy)
						}

						var3.Action.Default = types.BoolValue(var2.Action.Default != nil)

						var3.Action.Drop = types.BoolValue(var2.Action.Drop != nil)

						var3.Action.ResetBoth = types.BoolValue(var2.Action.ResetBoth != nil)

						var3.Action.ResetClient = types.BoolValue(var2.Action.ResetClient != nil)

						var3.Action.ResetServer = types.BoolValue(var2.Action.ResetServer != nil)
					}

					var3.Category = types.StringPointerValue(var2.Category)

					var4, var5 := types.ListValueFrom(ctx, types.StringType, var2.Cves)
					var3.Cves = var4
					resp.Diagnostics.Append(var5.Errors()...)

					var3.Host = types.StringPointerValue(var2.Host)

					var3.Name = types.StringPointerValue(var2.Name)

					var3.PacketCapture = types.StringPointerValue(var2.PacketCapture)

					var6, var7 := types.ListValueFrom(ctx, types.StringType, var2.Severities)
					var3.Severities = var6
					resp.Diagnostics.Append(var7.Errors()...)

					var3.ThreatName = types.StringPointerValue(var2.ThreatName)

					var8, var9 := types.ListValueFrom(ctx, types.StringType, var2.VendorIds)
					var3.VendorIds = var8
					resp.Diagnostics.Append(var9.Errors()...)
					var1.Rules = append(var1.Rules, var3)
				}
			}

			if len(var0.ThreatExceptions) == 0 {
				var1.ThreatExceptions = nil
			} else {
				var1.ThreatExceptions = make([]vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionObject, 0, len(var0.ThreatExceptions))
				for _, var10 := range var0.ThreatExceptions {
					var11 := vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionObject{}

					if var10.Action == nil {
						var11.Action = nil
					} else {
						var11.Action = &vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionActionObject{}

						var11.Action.Alert = types.BoolValue(var10.Action.Alert != nil)

						var11.Action.Allow = types.BoolValue(var10.Action.Allow != nil)

						if var10.Action.BlockIp == nil {
							var11.Action.BlockIp = nil
						} else {
							var11.Action.BlockIp = &vulnerabilityProtectionProfileListDsModel_zAHtTyI_ThreatExceptionBlockIpObject{}

							var11.Action.BlockIp.Duration = types.Int64PointerValue(var10.Action.BlockIp.Duration)

							var11.Action.BlockIp.TrackBy = types.StringPointerValue(var10.Action.BlockIp.TrackBy)
						}

						var11.Action.Default = types.BoolValue(var10.Action.Default != nil)

						var11.Action.Drop = types.BoolValue(var10.Action.Drop != nil)

						var11.Action.ResetBoth = types.BoolValue(var10.Action.ResetBoth != nil)

						var11.Action.ResetClient = types.BoolValue(var10.Action.ResetClient != nil)

						var11.Action.ResetServer = types.BoolValue(var10.Action.ResetServer != nil)
					}

					if len(var10.ExemptIps) == 0 {
						var11.ExemptIps = nil
					} else {
						var11.ExemptIps = make([]vulnerabilityProtectionProfileListDsModel_zAHtTyI_ExemptIpObject, 0, len(var10.ExemptIps))
						for _, var12 := range var10.ExemptIps {
							var13 := vulnerabilityProtectionProfileListDsModel_zAHtTyI_ExemptIpObject{}

							var13.Name = types.StringValue(var12.Name)
							var11.ExemptIps = append(var11.ExemptIps, var13)
						}
					}

					var11.Name = types.StringPointerValue(var10.Name)

					var11.Notes = types.StringPointerValue(var10.Notes)

					var11.PacketCapture = types.StringPointerValue(var10.PacketCapture)

					if var10.TimeAttribute == nil {
						var11.TimeAttribute = nil
					} else {
						var11.TimeAttribute = &vulnerabilityProtectionProfileListDsModel_zAHtTyI_TimeAttributeObject{}

						var11.TimeAttribute.Interval = types.Int64PointerValue(var10.TimeAttribute.Interval)

						var11.TimeAttribute.Threshold = types.Int64PointerValue(var10.TimeAttribute.Threshold)

						var11.TimeAttribute.TrackBy = types.StringPointerValue(var10.TimeAttribute.TrackBy)
					}
					var1.ThreatExceptions = append(var1.ThreatExceptions, var11)
				}
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &vulnerabilityProtectionProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &vulnerabilityProtectionProfileDataSource{}
)

func NewVulnerabilityProtectionProfileDataSource() datasource.DataSource {
	return &vulnerabilityProtectionProfileDataSource{}
}

type vulnerabilityProtectionProfileDataSource struct {
	client *scm.Client
}

// vulnerabilityProtectionProfileDsModel is the model.
type vulnerabilityProtectionProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Description types.String `tfsdk:"description"`
	// omit input: id
	Name             types.String                                                          `tfsdk:"name"`
	Rules            []vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleObject            `tfsdk:"rules"`
	ThreatExceptions []vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionObject `tfsdk:"threat_exceptions"`
}

type vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleObject struct {
	Action        *vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleActionObject `tfsdk:"action"`
	Category      types.String                                                    `tfsdk:"category"`
	Cves          types.List                                                      `tfsdk:"cves"`
	Host          types.String                                                    `tfsdk:"host"`
	Name          types.String                                                    `tfsdk:"name"`
	PacketCapture types.String                                                    `tfsdk:"packet_capture"`
	Severities    types.List                                                      `tfsdk:"severities"`
	ThreatName    types.String                                                    `tfsdk:"threat_name"`
	VendorIds     types.List                                                      `tfsdk:"vendor_ids"`
}

type vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleActionObject struct {
	Alert       types.Bool                                                       `tfsdk:"alert"`
	Allow       types.Bool                                                       `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                       `tfsdk:"default"`
	Drop        types.Bool                                                       `tfsdk:"drop"`
	ResetBoth   types.Bool                                                       `tfsdk:"reset_both"`
	ResetClient types.Bool                                                       `tfsdk:"reset_client"`
	ResetServer types.Bool                                                       `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionObject struct {
	Action        *vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionActionObject `tfsdk:"action"`
	ExemptIps     []vulnerabilityProtectionProfileDsModel_zAHtTyI_ExemptIpObject             `tfsdk:"exempt_ips"`
	Name          types.String                                                               `tfsdk:"name"`
	Notes         types.String                                                               `tfsdk:"notes"`
	PacketCapture types.String                                                               `tfsdk:"packet_capture"`
	TimeAttribute *vulnerabilityProtectionProfileDsModel_zAHtTyI_TimeAttributeObject         `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionActionObject struct {
	Alert       types.Bool                                                                  `tfsdk:"alert"`
	Allow       types.Bool                                                                  `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                                  `tfsdk:"default"`
	Drop        types.Bool                                                                  `tfsdk:"drop"`
	ResetBoth   types.Bool                                                                  `tfsdk:"reset_both"`
	ResetClient types.Bool                                                                  `tfsdk:"reset_client"`
	ResetServer types.Bool                                                                  `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfileDsModel_zAHtTyI_ExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

type vulnerabilityProtectionProfileDsModel_zAHtTyI_TimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

// Metadata returns the data source type name.
func (d *vulnerabilityProtectionProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_profile"
}

// Schema defines the schema for this data source.
func (d *vulnerabilityProtectionProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"description":true, "id":true, "name":true, "rules":true, "tfid":true, "threat_exception":true} forceNew:map[string]bool{"id":true}
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param. String validation regex: `^[a-zA-Z0-9._-]+$`.",
				Computed:    true,
			},
			"rules": dsschema.ListNestedAttribute{
				Description: "The Rules param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "category":true, "cve":true, "host":true, "name":true, "packet_capture":true, "severity":true, "threat_name":true, "vendor_id":true} forceNew:map[string]bool(nil)
						"action": dsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": dsschema.BoolAttribute{
									Description: "The Alert param. Default: `false`.",
									Computed:    true,
								},
								"allow": dsschema.BoolAttribute{
									Description: "The Allow param. Default: `false`.",
									Computed:    true,
								},
								"block_ip": dsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": dsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Computed:    true,
										},
										"track_by": dsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Computed:    true,
										},
									},
								},
								"default": dsschema.BoolAttribute{
									Description: "The Default param. Default: `false`.",
									Computed:    true,
								},
								"drop": dsschema.BoolAttribute{
									Description: "The Drop param. Default: `false`.",
									Computed:    true,
								},
								"reset_both": dsschema.BoolAttribute{
									Description: "The ResetBoth param. Default: `false`.",
									Computed:    true,
								},
								"reset_client": dsschema.BoolAttribute{
									Description: "The ResetClient param. Default: `false`.",
									Computed:    true,
								},
								"reset_server": dsschema.BoolAttribute{
									Description: "The ResetServer param. Default: `false`.",
									Computed:    true,
								},
							},
						},
						"category": dsschema.StringAttribute{
							Description: "The Category param. String must be one of these: `\"any\"`, `\"brute-force\"`, `\"code-execution\"`, `\"code-obfuscation\"`, `\"command-execution\"`, `\"dos\"`, `\"exploit-kit\"`, `\"info-leak\"`, `\"insecure-credentials\"`, `\"overflow\"`, `\"phishing\"`, `\"protocol-anomaly\"`, `\"scan\"`, `\"sql-injection\"`.",
							Computed:    true,
						},
						"cves": dsschema.ListAttribute{
							Description: "The Cves param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"host": dsschema.StringAttribute{
							Description: "The Host param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"packet_capture": dsschema.StringAttribute{
							Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Computed:    true,
						},
						"severities": dsschema.ListAttribute{
							Description: "The Severities param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"threat_name": dsschema.StringAttribute{
							Description: "The ThreatName param.",
							Computed:    true,
						},
						"vendor_ids": dsschema.ListAttribute{
							Description: "The VendorIds param.",
							Computed:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"threat_exceptions": dsschema.ListNestedAttribute{
				Description: "The ThreatExceptions param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"action":true, "exempt_ip":true, "name":true, "notes":true, "packet_capture":true, "time_attribute":true} forceNew:map[string]bool(nil)
						"action": dsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": dsschema.BoolAttribute{
									Description: "The Alert param. Default: `false`.",
									Computed:    true,
								},
								"allow": dsschema.BoolAttribute{
									Description: "The Allow param. Default: `false`.",
									Computed:    true,
								},
								"block_ip": dsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Computed:    true,
									Attributes: map[string]dsschema.Attribute{
										// inputs:map[string]bool{} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": dsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Computed:    true,
										},
										"track_by": dsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Computed:    true,
										},
									},
								},
								"default": dsschema.BoolAttribute{
									Description: "The Default param. Default: `false`.",
									Computed:    true,
								},
								"drop": dsschema.BoolAttribute{
									Description: "The Drop param. Default: `false`.",
									Computed:    true,
								},
								"reset_both": dsschema.BoolAttribute{
									Description: "The ResetBoth param. Default: `false`.",
									Computed:    true,
								},
								"reset_client": dsschema.BoolAttribute{
									Description: "The ResetClient param. Default: `false`.",
									Computed:    true,
								},
								"reset_server": dsschema.BoolAttribute{
									Description: "The ResetServer param. Default: `false`.",
									Computed:    true,
								},
							},
						},
						"exempt_ips": dsschema.ListNestedAttribute{
							Description: "The ExemptIps param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
								},
							},
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"notes": dsschema.StringAttribute{
							Description: "The Notes param.",
							Computed:    true,
						},
						"packet_capture": dsschema.StringAttribute{
							Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Computed:    true,
						},
						"time_attribute": dsschema.SingleNestedAttribute{
							Description: "The TimeAttribute param.",
							Computed:    true,
							Attributes: map[string]dsschema.Attribute{
								// inputs:map[string]bool{} outputs:map[string]bool{"interval":true, "threshold":true, "track_by":true} forceNew:map[string]bool(nil)
								"interval": dsschema.Int64Attribute{
									Description: "The Interval param. Value must be between 1 and 3600.",
									Computed:    true,
								},
								"threshold": dsschema.Int64Attribute{
									Description: "The Threshold param. Value must be between 1 and 65535.",
									Computed:    true,
								},
								"track_by": dsschema.StringAttribute{
									Description: "The TrackBy param. String must be one of these: `\"source\"`, `\"destination\"`, `\"source-and-destination\"`.",
									Computed:    true,
								},
							},
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (d *vulnerabilityProtectionProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *vulnerabilityProtectionProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state vulnerabilityProtectionProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_vulnerability_protection_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := cAmNwjX.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := cAmNwjX.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleObject, 0, len(ans.Rules))
		for _, var0 := range ans.Rules {
			var1 := vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleObject{}

			if var0.Action == nil {
				var1.Action = nil
			} else {
				var1.Action = &vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleActionObject{}

				var1.Action.Alert = types.BoolValue(var0.Action.Alert != nil)

				var1.Action.Allow = types.BoolValue(var0.Action.Allow != nil)

				if var0.Action.BlockIp == nil {
					var1.Action.BlockIp = nil
				} else {
					var1.Action.BlockIp = &vulnerabilityProtectionProfileDsModel_zAHtTyI_RuleBlockIpObject{}

					var1.Action.BlockIp.Duration = types.Int64PointerValue(var0.Action.BlockIp.Duration)

					var1.Action.BlockIp.TrackBy = types.StringPointerValue(var0.Action.BlockIp.TrackBy)
				}

				var1.Action.Default = types.BoolValue(var0.Action.Default != nil)

				var1.Action.Drop = types.BoolValue(var0.Action.Drop != nil)

				var1.Action.ResetBoth = types.BoolValue(var0.Action.ResetBoth != nil)

				var1.Action.ResetClient = types.BoolValue(var0.Action.ResetClient != nil)

				var1.Action.ResetServer = types.BoolValue(var0.Action.ResetServer != nil)
			}

			var1.Category = types.StringPointerValue(var0.Category)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Cves)
			var1.Cves = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Host = types.StringPointerValue(var0.Host)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.PacketCapture = types.StringPointerValue(var0.PacketCapture)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Severities)
			var1.Severities = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.ThreatName = types.StringPointerValue(var0.ThreatName)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.VendorIds)
			var1.VendorIds = var6
			resp.Diagnostics.Append(var7.Errors()...)
			state.Rules = append(state.Rules, var1)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var8 := range ans.ThreatExceptions {
			var9 := vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionObject{}

			if var8.Action == nil {
				var9.Action = nil
			} else {
				var9.Action = &vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionActionObject{}

				var9.Action.Alert = types.BoolValue(var8.Action.Alert != nil)

				var9.Action.Allow = types.BoolValue(var8.Action.Allow != nil)

				if var8.Action.BlockIp == nil {
					var9.Action.BlockIp = nil
				} else {
					var9.Action.BlockIp = &vulnerabilityProtectionProfileDsModel_zAHtTyI_ThreatExceptionBlockIpObject{}

					var9.Action.BlockIp.Duration = types.Int64PointerValue(var8.Action.BlockIp.Duration)

					var9.Action.BlockIp.TrackBy = types.StringPointerValue(var8.Action.BlockIp.TrackBy)
				}

				var9.Action.Default = types.BoolValue(var8.Action.Default != nil)

				var9.Action.Drop = types.BoolValue(var8.Action.Drop != nil)

				var9.Action.ResetBoth = types.BoolValue(var8.Action.ResetBoth != nil)

				var9.Action.ResetClient = types.BoolValue(var8.Action.ResetClient != nil)

				var9.Action.ResetServer = types.BoolValue(var8.Action.ResetServer != nil)
			}

			if len(var8.ExemptIps) == 0 {
				var9.ExemptIps = nil
			} else {
				var9.ExemptIps = make([]vulnerabilityProtectionProfileDsModel_zAHtTyI_ExemptIpObject, 0, len(var8.ExemptIps))
				for _, var10 := range var8.ExemptIps {
					var11 := vulnerabilityProtectionProfileDsModel_zAHtTyI_ExemptIpObject{}

					var11.Name = types.StringValue(var10.Name)
					var9.ExemptIps = append(var9.ExemptIps, var11)
				}
			}

			var9.Name = types.StringPointerValue(var8.Name)

			var9.Notes = types.StringPointerValue(var8.Notes)

			var9.PacketCapture = types.StringPointerValue(var8.PacketCapture)

			if var8.TimeAttribute == nil {
				var9.TimeAttribute = nil
			} else {
				var9.TimeAttribute = &vulnerabilityProtectionProfileDsModel_zAHtTyI_TimeAttributeObject{}

				var9.TimeAttribute.Interval = types.Int64PointerValue(var8.TimeAttribute.Interval)

				var9.TimeAttribute.Threshold = types.Int64PointerValue(var8.TimeAttribute.Threshold)

				var9.TimeAttribute.TrackBy = types.StringPointerValue(var8.TimeAttribute.TrackBy)
			}
			state.ThreatExceptions = append(state.ThreatExceptions, var9)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &vulnerabilityProtectionProfileResource{}
	_ resource.ResourceWithConfigure   = &vulnerabilityProtectionProfileResource{}
	_ resource.ResourceWithImportState = &vulnerabilityProtectionProfileResource{}
)

func NewVulnerabilityProtectionProfileResource() resource.Resource {
	return &vulnerabilityProtectionProfileResource{}
}

type vulnerabilityProtectionProfileResource struct {
	client *scm.Client
}

// vulnerabilityProtectionProfileRsModel is the model.
type vulnerabilityProtectionProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Description      types.String                                                          `tfsdk:"description"`
	Device           types.String                                                          `tfsdk:"device"`
	Folder           types.String                                                          `tfsdk:"folder"`
	Id               types.String                                                          `tfsdk:"id"`
	Name             types.String                                                          `tfsdk:"name"`
	Rules            []vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleObject            `tfsdk:"rules"`
	Snippet          types.String                                                          `tfsdk:"snippet"`
	ThreatExceptions []vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionObject `tfsdk:"threat_exceptions"`

	// Output.
	// omit input: description
	// omit input: id
	// omit input: name
	// omit input: rules
	// omit input: threat_exceptions
}

type vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleObject struct {
	Action        *vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleActionObject `tfsdk:"action"`
	Category      types.String                                                    `tfsdk:"category"`
	Cves          types.List                                                      `tfsdk:"cves"`
	Host          types.String                                                    `tfsdk:"host"`
	Name          types.String                                                    `tfsdk:"name"`
	PacketCapture types.String                                                    `tfsdk:"packet_capture"`
	Severities    types.List                                                      `tfsdk:"severities"`
	ThreatName    types.String                                                    `tfsdk:"threat_name"`
	VendorIds     types.List                                                      `tfsdk:"vendor_ids"`
}

type vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleActionObject struct {
	Alert       types.Bool                                                       `tfsdk:"alert"`
	Allow       types.Bool                                                       `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                       `tfsdk:"default"`
	Drop        types.Bool                                                       `tfsdk:"drop"`
	ResetBoth   types.Bool                                                       `tfsdk:"reset_both"`
	ResetClient types.Bool                                                       `tfsdk:"reset_client"`
	ResetServer types.Bool                                                       `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionObject struct {
	Action        *vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionActionObject `tfsdk:"action"`
	ExemptIps     []vulnerabilityProtectionProfileRsModel_zAHtTyI_ExemptIpObject             `tfsdk:"exempt_ips"`
	Name          types.String                                                               `tfsdk:"name"`
	Notes         types.String                                                               `tfsdk:"notes"`
	PacketCapture types.String                                                               `tfsdk:"packet_capture"`
	TimeAttribute *vulnerabilityProtectionProfileRsModel_zAHtTyI_TimeAttributeObject         `tfsdk:"time_attribute"`
}

type vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionActionObject struct {
	Alert       types.Bool                                                                  `tfsdk:"alert"`
	Allow       types.Bool                                                                  `tfsdk:"allow"`
	BlockIp     *vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionBlockIpObject `tfsdk:"block_ip"`
	Default     types.Bool                                                                  `tfsdk:"default"`
	Drop        types.Bool                                                                  `tfsdk:"drop"`
	ResetBoth   types.Bool                                                                  `tfsdk:"reset_both"`
	ResetClient types.Bool                                                                  `tfsdk:"reset_client"`
	ResetServer types.Bool                                                                  `tfsdk:"reset_server"`
}

type vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionBlockIpObject struct {
	Duration types.Int64  `tfsdk:"duration"`
	TrackBy  types.String `tfsdk:"track_by"`
}

type vulnerabilityProtectionProfileRsModel_zAHtTyI_ExemptIpObject struct {
	Name types.String `tfsdk:"name"`
}

type vulnerabilityProtectionProfileRsModel_zAHtTyI_TimeAttributeObject struct {
	Interval  types.Int64  `tfsdk:"interval"`
	Threshold types.Int64  `tfsdk:"threshold"`
	TrackBy   types.String `tfsdk:"track_by"`
}

// Metadata returns the data source type name.
func (r *vulnerabilityProtectionProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_vulnerability_protection_profile"
}

// Schema defines the schema for this data source.
func (r *vulnerabilityProtectionProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"description":true, "device":true, "folder":true, "id":true, "name":true, "rules":true, "snippet":true, "threat_exception":true} outputs:map[string]bool{"description":true, "id":true, "name":true, "rules":true, "tfid":true, "threat_exception":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param. String validation regex: `^[a-zA-Z0-9._-]+$`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9._-]+$"), ""),
				},
			},
			"rules": rsschema.ListNestedAttribute{
				Description: "The Rules param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"action":true, "category":true, "cve":true, "host":true, "name":true, "packet_capture":true, "severity":true, "threat_name":true, "vendor_id":true} outputs:map[string]bool{"action":true, "category":true, "cve":true, "host":true, "name":true, "packet_capture":true, "severity":true, "threat_name":true, "vendor_id":true} forceNew:map[string]bool(nil)
						"action": rsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Optional:    true,
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": rsschema.BoolAttribute{
									Description: "The Alert param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"allow": rsschema.BoolAttribute{
									Description: "The Allow param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"block_ip": rsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"duration":true, "track_by":true} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": rsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Optional:    true,
											Validators: []validator.Int64{
												int64validator.Between(1, 3600),
											},
										},
										"track_by": rsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Optional:    true,
											Validators: []validator.String{
												stringvalidator.OneOf("source-and-destination", "source"),
											},
										},
									},
								},
								"default": rsschema.BoolAttribute{
									Description: "The Default param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"drop": rsschema.BoolAttribute{
									Description: "The Drop param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"reset_both": rsschema.BoolAttribute{
									Description: "The ResetBoth param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"reset_client": rsschema.BoolAttribute{
									Description: "The ResetClient param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"reset_server": rsschema.BoolAttribute{
									Description: "The ResetServer param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
							},
						},
						"category": rsschema.StringAttribute{
							Description: "The Category param. String must be one of these: `\"any\"`, `\"brute-force\"`, `\"code-execution\"`, `\"code-obfuscation\"`, `\"command-execution\"`, `\"dos\"`, `\"exploit-kit\"`, `\"info-leak\"`, `\"insecure-credentials\"`, `\"overflow\"`, `\"phishing\"`, `\"protocol-anomaly\"`, `\"scan\"`, `\"sql-injection\"`.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.OneOf("any", "brute-force", "code-execution", "code-obfuscation", "command-execution", "dos", "exploit-kit", "info-leak", "insecure-credentials", "overflow", "phishing", "protocol-anomaly", "scan", "sql-injection"),
							},
						},
						"cves": rsschema.ListAttribute{
							Description: "The Cves param.",
							Optional:    true,
							ElementType: types.StringType,
						},
						"host": rsschema.StringAttribute{
							Description: "The Host param.",
							Optional:    true,
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
						"packet_capture": rsschema.StringAttribute{
							Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.OneOf("disable", "single-packet", "extended-capture"),
							},
						},
						"severities": rsschema.ListAttribute{
							Description: "The Severities param.",
							Optional:    true,
							ElementType: types.StringType,
						},
						"threat_name": rsschema.StringAttribute{
							Description: "The ThreatName param.",
							Optional:    true,
						},
						"vendor_ids": rsschema.ListAttribute{
							Description: "The VendorIds param.",
							Optional:    true,
							ElementType: types.StringType,
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"threat_exceptions": rsschema.ListNestedAttribute{
				Description: "The ThreatExceptions param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"action":true, "exempt_ip":true, "name":true, "notes":true, "packet_capture":true, "time_attribute":true} outputs:map[string]bool{"action":true, "exempt_ip":true, "name":true, "notes":true, "packet_capture":true, "time_attribute":true} forceNew:map[string]bool(nil)
						"action": rsschema.SingleNestedAttribute{
							Description: "The Action param.",
							Optional:    true,
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} outputs:map[string]bool{"alert":true, "allow":true, "block_ip":true, "default":true, "drop":true, "reset_both":true, "reset_client":true, "reset_server":true} forceNew:map[string]bool(nil)
								"alert": rsschema.BoolAttribute{
									Description: "The Alert param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"allow": rsschema.BoolAttribute{
									Description: "The Allow param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"block_ip": rsschema.SingleNestedAttribute{
									Description: "The BlockIp param.",
									Optional:    true,
									Attributes: map[string]rsschema.Attribute{
										// inputs:map[string]bool{"duration":true, "track_by":true} outputs:map[string]bool{"duration":true, "track_by":true} forceNew:map[string]bool(nil)
										"duration": rsschema.Int64Attribute{
											Description: "The Duration param. Value must be between 1 and 3600.",
											Optional:    true,
											Validators: []validator.Int64{
												int64validator.Between(1, 3600),
											},
										},
										"track_by": rsschema.StringAttribute{
											Description: "The TrackBy param. String must be one of these: `\"source-and-destination\"`, `\"source\"`.",
											Optional:    true,
											Validators: []validator.String{
												stringvalidator.OneOf("source-and-destination", "source"),
											},
										},
									},
								},
								"default": rsschema.BoolAttribute{
									Description: "The Default param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"drop": rsschema.BoolAttribute{
									Description: "The Drop param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"reset_both": rsschema.BoolAttribute{
									Description: "The ResetBoth param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"reset_client": rsschema.BoolAttribute{
									Description: "The ResetClient param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
								"reset_server": rsschema.BoolAttribute{
									Description: "The ResetServer param. Default: `false`.",
									Optional:    true,
									Computed:    true,
									Default:     booldefault.StaticBool(false),
								},
							},
						},
						"exempt_ips": rsschema.ListNestedAttribute{
							Description: "The ExemptIps param.",
							Optional:    true,
							NestedObject: rsschema.NestedAttributeObject{
								Attributes: map[string]rsschema.Attribute{
									// inputs:map[string]bool{"name":true} outputs:map[string]bool{"name":true} forceNew:map[string]bool(nil)
									"name": rsschema.StringAttribute{
										Description: "The Name param.",
										Required:    true,
									},
								},
							},
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
						"notes": rsschema.StringAttribute{
							Description: "The Notes param.",
							Optional:    true,
						},
						"packet_capture": rsschema.StringAttribute{
							Description: "The PacketCapture param. String must be one of these: `\"disable\"`, `\"single-packet\"`, `\"extended-capture\"`.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.OneOf("disable", "single-packet", "extended-capture"),
							},
						},
						"time_attribute": rsschema.SingleNestedAttribute{
							Description: "The TimeAttribute param.",
							Optional:    true,
							Attributes: map[string]rsschema.Attribute{
								// inputs:map[string]bool{"interval":true, "threshold":true, "track_by":true} outputs:map[string]bool{"interval":true, "threshold":true, "track_by":true} forceNew:map[string]bool(nil)
								"interval": rsschema.Int64Attribute{
									Description: "The Interval param. Value must be between 1 and 3600.",
									Optional:    true,
									Validators: []validator.Int64{
										int64validator.Between(1, 3600),
									},
								},
								"threshold": rsschema.Int64Attribute{
									Description: "The Threshold param. Value must be between 1 and 65535.",
									Optional:    true,
									Validators: []validator.Int64{
										int64validator.Between(1, 65535),
									},
								},
								"track_by": rsschema.StringAttribute{
									Description: "The TrackBy param. String must be one of these: `\"source\"`, `\"destination\"`, `\"source-and-destination\"`.",
									Optional:    true,
									Validators: []validator.String{
										stringvalidator.OneOf("source", "destination", "source-and-destination"),
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *vulnerabilityProtectionProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *vulnerabilityProtectionProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state vulnerabilityProtectionProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_vulnerability_protection_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := cAmNwjX.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cAmNwjX.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &zAHtTyI.Config{}

	input.Request.Description = state.Description.ValueStringPointer()

	input.Request.Name = state.Name.ValueString()

	if len(state.Rules) != 0 {
		input.Request.Rules = make([]zAHtTyI.RuleObject, 0, len(state.Rules))
		for _, var0 := range state.Rules {
			var var1 zAHtTyI.RuleObject

			if var0.Action != nil {
				var1.Action = &zAHtTyI.RuleActionObject{}

				if !var0.Action.Alert.IsNull() && var0.Action.Alert.ValueBool() {
					var1.Action.Alert = map[string]interface{}{}
				}

				if !var0.Action.Allow.IsNull() && var0.Action.Allow.ValueBool() {
					var1.Action.Allow = map[string]interface{}{}
				}

				if var0.Action.BlockIp != nil {
					var1.Action.BlockIp = &zAHtTyI.RuleBlockIpObject{}

					var1.Action.BlockIp.Duration = var0.Action.BlockIp.Duration.ValueInt64Pointer()

					var1.Action.BlockIp.TrackBy = var0.Action.BlockIp.TrackBy.ValueStringPointer()
				}

				if !var0.Action.Default.IsNull() && var0.Action.Default.ValueBool() {
					var1.Action.Default = map[string]interface{}{}
				}

				if !var0.Action.Drop.IsNull() && var0.Action.Drop.ValueBool() {
					var1.Action.Drop = map[string]interface{}{}
				}

				if !var0.Action.ResetBoth.IsNull() && var0.Action.ResetBoth.ValueBool() {
					var1.Action.ResetBoth = map[string]interface{}{}
				}

				if !var0.Action.ResetClient.IsNull() && var0.Action.ResetClient.ValueBool() {
					var1.Action.ResetClient = map[string]interface{}{}
				}

				if !var0.Action.ResetServer.IsNull() && var0.Action.ResetServer.ValueBool() {
					var1.Action.ResetServer = map[string]interface{}{}
				}
			}

			var1.Category = var0.Category.ValueStringPointer()

			resp.Diagnostics.Append(var0.Cves.ElementsAs(ctx, &var1.Cves, false)...)
			//if len(var0.Cves) != 0 {
			//    var1.Cves = make([]string, 0, len(var0.Cves))
			//    for _, var2 := range var0.Cves {
			//        var1.Cves = append(var1.Cves, var2.ValueString())
			//    }
			//}

			var1.Host = var0.Host.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()

			var1.PacketCapture = var0.PacketCapture.ValueStringPointer()

			resp.Diagnostics.Append(var0.Severities.ElementsAs(ctx, &var1.Severities, false)...)
			//if len(var0.Severities) != 0 {
			//    var1.Severities = make([]string, 0, len(var0.Severities))
			//    for _, var3 := range var0.Severities {
			//        var1.Severities = append(var1.Severities, var3.ValueString())
			//    }
			//}

			var1.ThreatName = var0.ThreatName.ValueStringPointer()

			resp.Diagnostics.Append(var0.VendorIds.ElementsAs(ctx, &var1.VendorIds, false)...)
			//if len(var0.VendorIds) != 0 {
			//    var1.VendorIds = make([]string, 0, len(var0.VendorIds))
			//    for _, var4 := range var0.VendorIds {
			//        var1.VendorIds = append(var1.VendorIds, var4.ValueString())
			//    }
			//}
			input.Request.Rules = append(input.Request.Rules, var1)
		}
	}

	if len(state.ThreatExceptions) != 0 {
		input.Request.ThreatExceptions = make([]zAHtTyI.ThreatExceptionObject, 0, len(state.ThreatExceptions))
		for _, var5 := range state.ThreatExceptions {
			var var6 zAHtTyI.ThreatExceptionObject

			if var5.Action != nil {
				var6.Action = &zAHtTyI.ThreatExceptionActionObject{}

				if !var5.Action.Alert.IsNull() && var5.Action.Alert.ValueBool() {
					var6.Action.Alert = map[string]interface{}{}
				}

				if !var5.Action.Allow.IsNull() && var5.Action.Allow.ValueBool() {
					var6.Action.Allow = map[string]interface{}{}
				}

				if var5.Action.BlockIp != nil {
					var6.Action.BlockIp = &zAHtTyI.ThreatExceptionBlockIpObject{}

					var6.Action.BlockIp.Duration = var5.Action.BlockIp.Duration.ValueInt64Pointer()

					var6.Action.BlockIp.TrackBy = var5.Action.BlockIp.TrackBy.ValueStringPointer()
				}

				if !var5.Action.Default.IsNull() && var5.Action.Default.ValueBool() {
					var6.Action.Default = map[string]interface{}{}
				}

				if !var5.Action.Drop.IsNull() && var5.Action.Drop.ValueBool() {
					var6.Action.Drop = map[string]interface{}{}
				}

				if !var5.Action.ResetBoth.IsNull() && var5.Action.ResetBoth.ValueBool() {
					var6.Action.ResetBoth = map[string]interface{}{}
				}

				if !var5.Action.ResetClient.IsNull() && var5.Action.ResetClient.ValueBool() {
					var6.Action.ResetClient = map[string]interface{}{}
				}

				if !var5.Action.ResetServer.IsNull() && var5.Action.ResetServer.ValueBool() {
					var6.Action.ResetServer = map[string]interface{}{}
				}
			}

			if len(var5.ExemptIps) != 0 {
				var6.ExemptIps = make([]zAHtTyI.ExemptIpObject, 0, len(var5.ExemptIps))
				for _, var7 := range var5.ExemptIps {
					var var8 zAHtTyI.ExemptIpObject

					var8.Name = var7.Name.ValueString()
					var6.ExemptIps = append(var6.ExemptIps, var8)
				}
			}

			var6.Name = var5.Name.ValueStringPointer()

			var6.Notes = var5.Notes.ValueStringPointer()

			var6.PacketCapture = var5.PacketCapture.ValueStringPointer()

			if var5.TimeAttribute != nil {
				var6.TimeAttribute = &zAHtTyI.TimeAttributeObject{}

				var6.TimeAttribute.Interval = var5.TimeAttribute.Interval.ValueInt64Pointer()

				var6.TimeAttribute.Threshold = var5.TimeAttribute.Threshold.ValueInt64Pointer()

				var6.TimeAttribute.TrackBy = var5.TimeAttribute.TrackBy.ValueStringPointer()
			}
			input.Request.ThreatExceptions = append(input.Request.ThreatExceptions, var6)
		}
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleObject, 0, len(ans.Rules))
		for _, var9 := range ans.Rules {
			var10 := vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleObject{}

			if var9.Action == nil {
				var10.Action = nil
			} else {
				var10.Action = &vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleActionObject{}

				var10.Action.Alert = types.BoolValue(var9.Action.Alert != nil)

				var10.Action.Allow = types.BoolValue(var9.Action.Allow != nil)

				if var9.Action.BlockIp == nil {
					var10.Action.BlockIp = nil
				} else {
					var10.Action.BlockIp = &vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleBlockIpObject{}

					var10.Action.BlockIp.Duration = types.Int64PointerValue(var9.Action.BlockIp.Duration)

					var10.Action.BlockIp.TrackBy = types.StringPointerValue(var9.Action.BlockIp.TrackBy)
				}

				var10.Action.Default = types.BoolValue(var9.Action.Default != nil)

				var10.Action.Drop = types.BoolValue(var9.Action.Drop != nil)

				var10.Action.ResetBoth = types.BoolValue(var9.Action.ResetBoth != nil)

				var10.Action.ResetClient = types.BoolValue(var9.Action.ResetClient != nil)

				var10.Action.ResetServer = types.BoolValue(var9.Action.ResetServer != nil)
			}

			var10.Category = types.StringPointerValue(var9.Category)

			var11, var12 := types.ListValueFrom(ctx, types.StringType, var9.Cves)
			var10.Cves = var11
			resp.Diagnostics.Append(var12.Errors()...)

			var10.Host = types.StringPointerValue(var9.Host)

			var10.Name = types.StringPointerValue(var9.Name)

			var10.PacketCapture = types.StringPointerValue(var9.PacketCapture)

			var13, var14 := types.ListValueFrom(ctx, types.StringType, var9.Severities)
			var10.Severities = var13
			resp.Diagnostics.Append(var14.Errors()...)

			var10.ThreatName = types.StringPointerValue(var9.ThreatName)

			var15, var16 := types.ListValueFrom(ctx, types.StringType, var9.VendorIds)
			var10.VendorIds = var15
			resp.Diagnostics.Append(var16.Errors()...)
			state.Rules = append(state.Rules, var10)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var17 := range ans.ThreatExceptions {
			var18 := vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionObject{}

			if var17.Action == nil {
				var18.Action = nil
			} else {
				var18.Action = &vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionActionObject{}

				var18.Action.Alert = types.BoolValue(var17.Action.Alert != nil)

				var18.Action.Allow = types.BoolValue(var17.Action.Allow != nil)

				if var17.Action.BlockIp == nil {
					var18.Action.BlockIp = nil
				} else {
					var18.Action.BlockIp = &vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionBlockIpObject{}

					var18.Action.BlockIp.Duration = types.Int64PointerValue(var17.Action.BlockIp.Duration)

					var18.Action.BlockIp.TrackBy = types.StringPointerValue(var17.Action.BlockIp.TrackBy)
				}

				var18.Action.Default = types.BoolValue(var17.Action.Default != nil)

				var18.Action.Drop = types.BoolValue(var17.Action.Drop != nil)

				var18.Action.ResetBoth = types.BoolValue(var17.Action.ResetBoth != nil)

				var18.Action.ResetClient = types.BoolValue(var17.Action.ResetClient != nil)

				var18.Action.ResetServer = types.BoolValue(var17.Action.ResetServer != nil)
			}

			if len(var17.ExemptIps) == 0 {
				var18.ExemptIps = nil
			} else {
				var18.ExemptIps = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_ExemptIpObject, 0, len(var17.ExemptIps))
				for _, var19 := range var17.ExemptIps {
					var20 := vulnerabilityProtectionProfileRsModel_zAHtTyI_ExemptIpObject{}

					var20.Name = types.StringValue(var19.Name)
					var18.ExemptIps = append(var18.ExemptIps, var20)
				}
			}

			var18.Name = types.StringPointerValue(var17.Name)

			var18.Notes = types.StringPointerValue(var17.Notes)

			var18.PacketCapture = types.StringPointerValue(var17.PacketCapture)

			if var17.TimeAttribute == nil {
				var18.TimeAttribute = nil
			} else {
				var18.TimeAttribute = &vulnerabilityProtectionProfileRsModel_zAHtTyI_TimeAttributeObject{}

				var18.TimeAttribute.Interval = types.Int64PointerValue(var17.TimeAttribute.Interval)

				var18.TimeAttribute.Threshold = types.Int64PointerValue(var17.TimeAttribute.Threshold)

				var18.TimeAttribute.TrackBy = types.StringPointerValue(var17.TimeAttribute.TrackBy)
			}
			state.ThreatExceptions = append(state.ThreatExceptions, var18)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *vulnerabilityProtectionProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state vulnerabilityProtectionProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_vulnerability_protection_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := cAmNwjX.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cAmNwjX.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleObject, 0, len(ans.Rules))
		for _, var0 := range ans.Rules {
			var1 := vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleObject{}

			if var0.Action == nil {
				var1.Action = nil
			} else {
				var1.Action = &vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleActionObject{}

				var1.Action.Alert = types.BoolValue(var0.Action.Alert != nil)

				var1.Action.Allow = types.BoolValue(var0.Action.Allow != nil)

				if var0.Action.BlockIp == nil {
					var1.Action.BlockIp = nil
				} else {
					var1.Action.BlockIp = &vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleBlockIpObject{}

					var1.Action.BlockIp.Duration = types.Int64PointerValue(var0.Action.BlockIp.Duration)

					var1.Action.BlockIp.TrackBy = types.StringPointerValue(var0.Action.BlockIp.TrackBy)
				}

				var1.Action.Default = types.BoolValue(var0.Action.Default != nil)

				var1.Action.Drop = types.BoolValue(var0.Action.Drop != nil)

				var1.Action.ResetBoth = types.BoolValue(var0.Action.ResetBoth != nil)

				var1.Action.ResetClient = types.BoolValue(var0.Action.ResetClient != nil)

				var1.Action.ResetServer = types.BoolValue(var0.Action.ResetServer != nil)
			}

			var1.Category = types.StringPointerValue(var0.Category)

			var2, var3 := types.ListValueFrom(ctx, types.StringType, var0.Cves)
			var1.Cves = var2
			resp.Diagnostics.Append(var3.Errors()...)

			var1.Host = types.StringPointerValue(var0.Host)

			var1.Name = types.StringPointerValue(var0.Name)

			var1.PacketCapture = types.StringPointerValue(var0.PacketCapture)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var0.Severities)
			var1.Severities = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var1.ThreatName = types.StringPointerValue(var0.ThreatName)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var0.VendorIds)
			var1.VendorIds = var6
			resp.Diagnostics.Append(var7.Errors()...)
			state.Rules = append(state.Rules, var1)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var8 := range ans.ThreatExceptions {
			var9 := vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionObject{}

			if var8.Action == nil {
				var9.Action = nil
			} else {
				var9.Action = &vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionActionObject{}

				var9.Action.Alert = types.BoolValue(var8.Action.Alert != nil)

				var9.Action.Allow = types.BoolValue(var8.Action.Allow != nil)

				if var8.Action.BlockIp == nil {
					var9.Action.BlockIp = nil
				} else {
					var9.Action.BlockIp = &vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionBlockIpObject{}

					var9.Action.BlockIp.Duration = types.Int64PointerValue(var8.Action.BlockIp.Duration)

					var9.Action.BlockIp.TrackBy = types.StringPointerValue(var8.Action.BlockIp.TrackBy)
				}

				var9.Action.Default = types.BoolValue(var8.Action.Default != nil)

				var9.Action.Drop = types.BoolValue(var8.Action.Drop != nil)

				var9.Action.ResetBoth = types.BoolValue(var8.Action.ResetBoth != nil)

				var9.Action.ResetClient = types.BoolValue(var8.Action.ResetClient != nil)

				var9.Action.ResetServer = types.BoolValue(var8.Action.ResetServer != nil)
			}

			if len(var8.ExemptIps) == 0 {
				var9.ExemptIps = nil
			} else {
				var9.ExemptIps = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_ExemptIpObject, 0, len(var8.ExemptIps))
				for _, var10 := range var8.ExemptIps {
					var11 := vulnerabilityProtectionProfileRsModel_zAHtTyI_ExemptIpObject{}

					var11.Name = types.StringValue(var10.Name)
					var9.ExemptIps = append(var9.ExemptIps, var11)
				}
			}

			var9.Name = types.StringPointerValue(var8.Name)

			var9.Notes = types.StringPointerValue(var8.Notes)

			var9.PacketCapture = types.StringPointerValue(var8.PacketCapture)

			if var8.TimeAttribute == nil {
				var9.TimeAttribute = nil
			} else {
				var9.TimeAttribute = &vulnerabilityProtectionProfileRsModel_zAHtTyI_TimeAttributeObject{}

				var9.TimeAttribute.Interval = types.Int64PointerValue(var8.TimeAttribute.Interval)

				var9.TimeAttribute.Threshold = types.Int64PointerValue(var8.TimeAttribute.Threshold)

				var9.TimeAttribute.TrackBy = types.StringPointerValue(var8.TimeAttribute.TrackBy)
			}
			state.ThreatExceptions = append(state.ThreatExceptions, var9)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *vulnerabilityProtectionProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state vulnerabilityProtectionProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_vulnerability_protection_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := cAmNwjX.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cAmNwjX.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &zAHtTyI.Config{}

	input.Request.Description = plan.Description.ValueStringPointer()

	input.Request.Name = plan.Name.ValueString()

	if len(plan.Rules) != 0 {
		input.Request.Rules = make([]zAHtTyI.RuleObject, 0, len(plan.Rules))
		for _, var0 := range plan.Rules {
			var var1 zAHtTyI.RuleObject

			if var0.Action != nil {
				var1.Action = &zAHtTyI.RuleActionObject{}

				if !var0.Action.Alert.IsNull() && var0.Action.Alert.ValueBool() {
					var1.Action.Alert = map[string]interface{}{}
				}

				if !var0.Action.Allow.IsNull() && var0.Action.Allow.ValueBool() {
					var1.Action.Allow = map[string]interface{}{}
				}

				if var0.Action.BlockIp != nil {
					var1.Action.BlockIp = &zAHtTyI.RuleBlockIpObject{}

					var1.Action.BlockIp.Duration = var0.Action.BlockIp.Duration.ValueInt64Pointer()

					var1.Action.BlockIp.TrackBy = var0.Action.BlockIp.TrackBy.ValueStringPointer()
				}

				if !var0.Action.Default.IsNull() && var0.Action.Default.ValueBool() {
					var1.Action.Default = map[string]interface{}{}
				}

				if !var0.Action.Drop.IsNull() && var0.Action.Drop.ValueBool() {
					var1.Action.Drop = map[string]interface{}{}
				}

				if !var0.Action.ResetBoth.IsNull() && var0.Action.ResetBoth.ValueBool() {
					var1.Action.ResetBoth = map[string]interface{}{}
				}

				if !var0.Action.ResetClient.IsNull() && var0.Action.ResetClient.ValueBool() {
					var1.Action.ResetClient = map[string]interface{}{}
				}

				if !var0.Action.ResetServer.IsNull() && var0.Action.ResetServer.ValueBool() {
					var1.Action.ResetServer = map[string]interface{}{}
				}
			}

			var1.Category = var0.Category.ValueStringPointer()

			resp.Diagnostics.Append(var0.Cves.ElementsAs(ctx, &var1.Cves, false)...)
			//if len(var0.Cves) != 0 {
			//    var1.Cves = make([]string, 0, len(var0.Cves))
			//    for _, var2 := range var0.Cves {
			//        var1.Cves = append(var1.Cves, var2.ValueString())
			//    }
			//}

			var1.Host = var0.Host.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()

			var1.PacketCapture = var0.PacketCapture.ValueStringPointer()

			resp.Diagnostics.Append(var0.Severities.ElementsAs(ctx, &var1.Severities, false)...)
			//if len(var0.Severities) != 0 {
			//    var1.Severities = make([]string, 0, len(var0.Severities))
			//    for _, var3 := range var0.Severities {
			//        var1.Severities = append(var1.Severities, var3.ValueString())
			//    }
			//}

			var1.ThreatName = var0.ThreatName.ValueStringPointer()

			resp.Diagnostics.Append(var0.VendorIds.ElementsAs(ctx, &var1.VendorIds, false)...)
			//if len(var0.VendorIds) != 0 {
			//    var1.VendorIds = make([]string, 0, len(var0.VendorIds))
			//    for _, var4 := range var0.VendorIds {
			//        var1.VendorIds = append(var1.VendorIds, var4.ValueString())
			//    }
			//}
			input.Request.Rules = append(input.Request.Rules, var1)
		}
	}

	if len(plan.ThreatExceptions) != 0 {
		input.Request.ThreatExceptions = make([]zAHtTyI.ThreatExceptionObject, 0, len(plan.ThreatExceptions))
		for _, var5 := range plan.ThreatExceptions {
			var var6 zAHtTyI.ThreatExceptionObject

			if var5.Action != nil {
				var6.Action = &zAHtTyI.ThreatExceptionActionObject{}

				if !var5.Action.Alert.IsNull() && var5.Action.Alert.ValueBool() {
					var6.Action.Alert = map[string]interface{}{}
				}

				if !var5.Action.Allow.IsNull() && var5.Action.Allow.ValueBool() {
					var6.Action.Allow = map[string]interface{}{}
				}

				if var5.Action.BlockIp != nil {
					var6.Action.BlockIp = &zAHtTyI.ThreatExceptionBlockIpObject{}

					var6.Action.BlockIp.Duration = var5.Action.BlockIp.Duration.ValueInt64Pointer()

					var6.Action.BlockIp.TrackBy = var5.Action.BlockIp.TrackBy.ValueStringPointer()
				}

				if !var5.Action.Default.IsNull() && var5.Action.Default.ValueBool() {
					var6.Action.Default = map[string]interface{}{}
				}

				if !var5.Action.Drop.IsNull() && var5.Action.Drop.ValueBool() {
					var6.Action.Drop = map[string]interface{}{}
				}

				if !var5.Action.ResetBoth.IsNull() && var5.Action.ResetBoth.ValueBool() {
					var6.Action.ResetBoth = map[string]interface{}{}
				}

				if !var5.Action.ResetClient.IsNull() && var5.Action.ResetClient.ValueBool() {
					var6.Action.ResetClient = map[string]interface{}{}
				}

				if !var5.Action.ResetServer.IsNull() && var5.Action.ResetServer.ValueBool() {
					var6.Action.ResetServer = map[string]interface{}{}
				}
			}

			if len(var5.ExemptIps) != 0 {
				var6.ExemptIps = make([]zAHtTyI.ExemptIpObject, 0, len(var5.ExemptIps))
				for _, var7 := range var5.ExemptIps {
					var var8 zAHtTyI.ExemptIpObject

					var8.Name = var7.Name.ValueString()
					var6.ExemptIps = append(var6.ExemptIps, var8)
				}
			}

			var6.Name = var5.Name.ValueStringPointer()

			var6.Notes = var5.Notes.ValueStringPointer()

			var6.PacketCapture = var5.PacketCapture.ValueStringPointer()

			if var5.TimeAttribute != nil {
				var6.TimeAttribute = &zAHtTyI.TimeAttributeObject{}

				var6.TimeAttribute.Interval = var5.TimeAttribute.Interval.ValueInt64Pointer()

				var6.TimeAttribute.Threshold = var5.TimeAttribute.Threshold.ValueInt64Pointer()

				var6.TimeAttribute.TrackBy = var5.TimeAttribute.TrackBy.ValueStringPointer()
			}
			input.Request.ThreatExceptions = append(input.Request.ThreatExceptions, var6)
		}
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	state.Name = types.StringValue(ans.Name)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleObject, 0, len(ans.Rules))
		for _, var9 := range ans.Rules {
			var10 := vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleObject{}

			if var9.Action == nil {
				var10.Action = nil
			} else {
				var10.Action = &vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleActionObject{}

				var10.Action.Alert = types.BoolValue(var9.Action.Alert != nil)

				var10.Action.Allow = types.BoolValue(var9.Action.Allow != nil)

				if var9.Action.BlockIp == nil {
					var10.Action.BlockIp = nil
				} else {
					var10.Action.BlockIp = &vulnerabilityProtectionProfileRsModel_zAHtTyI_RuleBlockIpObject{}

					var10.Action.BlockIp.Duration = types.Int64PointerValue(var9.Action.BlockIp.Duration)

					var10.Action.BlockIp.TrackBy = types.StringPointerValue(var9.Action.BlockIp.TrackBy)
				}

				var10.Action.Default = types.BoolValue(var9.Action.Default != nil)

				var10.Action.Drop = types.BoolValue(var9.Action.Drop != nil)

				var10.Action.ResetBoth = types.BoolValue(var9.Action.ResetBoth != nil)

				var10.Action.ResetClient = types.BoolValue(var9.Action.ResetClient != nil)

				var10.Action.ResetServer = types.BoolValue(var9.Action.ResetServer != nil)
			}

			var10.Category = types.StringPointerValue(var9.Category)

			var11, var12 := types.ListValueFrom(ctx, types.StringType, var9.Cves)
			var10.Cves = var11
			resp.Diagnostics.Append(var12.Errors()...)

			var10.Host = types.StringPointerValue(var9.Host)

			var10.Name = types.StringPointerValue(var9.Name)

			var10.PacketCapture = types.StringPointerValue(var9.PacketCapture)

			var13, var14 := types.ListValueFrom(ctx, types.StringType, var9.Severities)
			var10.Severities = var13
			resp.Diagnostics.Append(var14.Errors()...)

			var10.ThreatName = types.StringPointerValue(var9.ThreatName)

			var15, var16 := types.ListValueFrom(ctx, types.StringType, var9.VendorIds)
			var10.VendorIds = var15
			resp.Diagnostics.Append(var16.Errors()...)
			state.Rules = append(state.Rules, var10)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var17 := range ans.ThreatExceptions {
			var18 := vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionObject{}

			if var17.Action == nil {
				var18.Action = nil
			} else {
				var18.Action = &vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionActionObject{}

				var18.Action.Alert = types.BoolValue(var17.Action.Alert != nil)

				var18.Action.Allow = types.BoolValue(var17.Action.Allow != nil)

				if var17.Action.BlockIp == nil {
					var18.Action.BlockIp = nil
				} else {
					var18.Action.BlockIp = &vulnerabilityProtectionProfileRsModel_zAHtTyI_ThreatExceptionBlockIpObject{}

					var18.Action.BlockIp.Duration = types.Int64PointerValue(var17.Action.BlockIp.Duration)

					var18.Action.BlockIp.TrackBy = types.StringPointerValue(var17.Action.BlockIp.TrackBy)
				}

				var18.Action.Default = types.BoolValue(var17.Action.Default != nil)

				var18.Action.Drop = types.BoolValue(var17.Action.Drop != nil)

				var18.Action.ResetBoth = types.BoolValue(var17.Action.ResetBoth != nil)

				var18.Action.ResetClient = types.BoolValue(var17.Action.ResetClient != nil)

				var18.Action.ResetServer = types.BoolValue(var17.Action.ResetServer != nil)
			}

			if len(var17.ExemptIps) == 0 {
				var18.ExemptIps = nil
			} else {
				var18.ExemptIps = make([]vulnerabilityProtectionProfileRsModel_zAHtTyI_ExemptIpObject, 0, len(var17.ExemptIps))
				for _, var19 := range var17.ExemptIps {
					var20 := vulnerabilityProtectionProfileRsModel_zAHtTyI_ExemptIpObject{}

					var20.Name = types.StringValue(var19.Name)
					var18.ExemptIps = append(var18.ExemptIps, var20)
				}
			}

			var18.Name = types.StringPointerValue(var17.Name)

			var18.Notes = types.StringPointerValue(var17.Notes)

			var18.PacketCapture = types.StringPointerValue(var17.PacketCapture)

			if var17.TimeAttribute == nil {
				var18.TimeAttribute = nil
			} else {
				var18.TimeAttribute = &vulnerabilityProtectionProfileRsModel_zAHtTyI_TimeAttributeObject{}

				var18.TimeAttribute.Interval = types.Int64PointerValue(var17.TimeAttribute.Interval)

				var18.TimeAttribute.Threshold = types.Int64PointerValue(var17.TimeAttribute.Threshold)

				var18.TimeAttribute.TrackBy = types.StringPointerValue(var17.TimeAttribute.TrackBy)
			}
			state.ThreatExceptions = append(state.ThreatExceptions, var18)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *vulnerabilityProtectionProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_vulnerability_protection_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := cAmNwjX.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := cAmNwjX.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *vulnerabilityProtectionProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
