package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"regexp"
	"strconv"
	"strings"

	"github.com/paloaltonetworks/scm-go"
	fVAkWHS "github.com/paloaltonetworks/scm-go/netsec/schemas/wildfire/anti/virus/profiles"
	lDGsTGZ "github.com/paloaltonetworks/scm-go/netsec/services/wildfireantivirusprofiles"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Data source (listing).
var (
	_ datasource.DataSource              = &wildfireAntiVirusProfileListDataSource{}
	_ datasource.DataSourceWithConfigure = &wildfireAntiVirusProfileListDataSource{}
)

func NewWildfireAntiVirusProfileListDataSource() datasource.DataSource {
	return &wildfireAntiVirusProfileListDataSource{}
}

type wildfireAntiVirusProfileListDataSource struct {
	client *scm.Client
}

// wildfireAntiVirusProfileListDsModel is the model.
type wildfireAntiVirusProfileListDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Device  types.String `tfsdk:"device"`
	Folder  types.String `tfsdk:"folder"`
	Limit   types.Int64  `tfsdk:"limit"`
	Name    types.String `tfsdk:"name"`
	Offset  types.Int64  `tfsdk:"offset"`
	Snippet types.String `tfsdk:"snippet"`

	// Output.
	Data []wildfireAntiVirusProfileListDsModel_fVAkWHS_Config `tfsdk:"data"`
	// omit input: limit
	// omit input: offset
	Total types.Int64 `tfsdk:"total"`
}

type wildfireAntiVirusProfileListDsModel_fVAkWHS_Config struct {
	Description      types.String                                                        `tfsdk:"description"`
	Id               types.String                                                        `tfsdk:"id"`
	MlavExceptions   []wildfireAntiVirusProfileListDsModel_fVAkWHS_MlavExceptionObject   `tfsdk:"mlav_exceptions"`
	Name             types.String                                                        `tfsdk:"name"`
	PacketCapture    types.Bool                                                          `tfsdk:"packet_capture"`
	Rules            []wildfireAntiVirusProfileListDsModel_fVAkWHS_RuleObject            `tfsdk:"rules"`
	ThreatExceptions []wildfireAntiVirusProfileListDsModel_fVAkWHS_ThreatExceptionObject `tfsdk:"threat_exceptions"`
}

type wildfireAntiVirusProfileListDsModel_fVAkWHS_MlavExceptionObject struct {
	Description types.String `tfsdk:"description"`
	Filename    types.String `tfsdk:"filename"`
	Name        types.String `tfsdk:"name"`
}

type wildfireAntiVirusProfileListDsModel_fVAkWHS_RuleObject struct {
	Analysis     types.String `tfsdk:"analysis"`
	Applications types.List   `tfsdk:"applications"`
	Direction    types.String `tfsdk:"direction"`
	FileTypes    types.List   `tfsdk:"file_types"`
	Name         types.String `tfsdk:"name"`
}

type wildfireAntiVirusProfileListDsModel_fVAkWHS_ThreatExceptionObject struct {
	Name  types.String `tfsdk:"name"`
	Notes types.String `tfsdk:"notes"`
}

// Metadata returns the data source type name.
func (d *wildfireAntiVirusProfileListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wildfire_anti_virus_profile_list"
}

// Schema defines the schema for this listing data source.
func (d *wildfireAntiVirusProfileListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a listing of config items.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true} outputs:map[string]bool{"data":true, "limit":true, "offset":true, "tfid":true, "total":true} forceNew:map[string]bool{"device":true, "folder":true, "limit":true, "name":true, "offset":true, "snippet":true}
			"data": dsschema.ListNestedAttribute{
				Description: "The Data param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "id":true, "mlav_exception":true, "name":true, "packet_capture":true, "rules":true, "threat_exception":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"id": dsschema.StringAttribute{
							Description: "UUID of the resource.",
							Computed:    true,
						},
						"mlav_exceptions": dsschema.ListNestedAttribute{
							Description: "The MlavExceptions param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "filename":true, "name":true} forceNew:map[string]bool(nil)
									"description": dsschema.StringAttribute{
										Description: "The Description param.",
										Computed:    true,
									},
									"filename": dsschema.StringAttribute{
										Description: "The Filename param.",
										Computed:    true,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
								},
							},
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param. String validation regex: `^[a-zA-Z0-9._-]+$`.",
							Computed:    true,
						},
						"packet_capture": dsschema.BoolAttribute{
							Description: "The PacketCapture param.",
							Computed:    true,
						},
						"rules": dsschema.ListNestedAttribute{
							Description: "The Rules param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"analysis":true, "application":true, "direction":true, "file_type":true, "name":true} forceNew:map[string]bool(nil)
									"analysis": dsschema.StringAttribute{
										Description: "The Analysis param. String must be one of these: `\"public-cloud\"`, `\"private-cloud\"`.",
										Computed:    true,
									},
									"applications": dsschema.ListAttribute{
										Description: "The Applications param.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"direction": dsschema.StringAttribute{
										Description: "The Direction param. String must be one of these: `\"download\"`, `\"upload\"`, `\"both\"`.",
										Computed:    true,
									},
									"file_types": dsschema.ListAttribute{
										Description: "The FileTypes param.",
										Computed:    true,
										ElementType: types.StringType,
									},
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
								},
							},
						},
						"threat_exceptions": dsschema.ListNestedAttribute{
							Description: "The ThreatExceptions param.",
							Computed:    true,
							NestedObject: dsschema.NestedAttributeObject{
								Attributes: map[string]dsschema.Attribute{
									// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "notes":true} forceNew:map[string]bool(nil)
									"name": dsschema.StringAttribute{
										Description: "The Name param.",
										Computed:    true,
									},
									"notes": dsschema.StringAttribute{
										Description: "The Notes param.",
										Computed:    true,
									},
								},
							},
						},
					},
				},
			},
			"device": dsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
			},
			"folder": dsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
			},
			"limit": dsschema.Int64Attribute{
				Description: "The Limit param. A limit of -1 will return all configured items. Default: `200`.",
				Optional:    true,
				Computed:    true,
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param.",
				Optional:    true,
			},
			"offset": dsschema.Int64Attribute{
				Description: "The Offset param. Default: `0`.",
				Optional:    true,
				Computed:    true,
			},
			"snippet": dsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"total": dsschema.Int64Attribute{
				Description: "The Total param.",
				Computed:    true,
			},
		},
	}
}

// Configure prepares the struct.
func (d *wildfireAntiVirusProfileListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *wildfireAntiVirusProfileListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state wildfireAntiVirusProfileListDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source listing", map[string]any{
		"data_source_name":            "scm_wildfire_anti_virus_profile_list",
		"terraform_provider_function": "Read",
		"name":                        state.Name.ValueString(),
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
		"offset":                      state.Offset.ValueInt64(),
		"limit":                       state.Limit.ValueInt64(),
	})

	// Prepare to run the command.
	svc := lDGsTGZ.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := lDGsTGZ.ListInput{}

	input.Name = state.Name.ValueStringPointer()

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()

	input.Offset = state.Offset.ValueInt64Pointer()

	input.Limit = state.Limit.ValueInt64Pointer()

	// Perform the operation.
	ans, err := svc.List(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error getting listing", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Name != nil {
		idBuilder.WriteString(*input.Name)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Offset != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Offset, 10))
	}

	idBuilder.WriteString(IdSeparator)
	if input.Limit != nil {
		idBuilder.WriteString(strconv.FormatInt(*input.Limit, 10))
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	if len(ans.Data) == 0 {
		state.Data = nil
	} else {
		state.Data = make([]wildfireAntiVirusProfileListDsModel_fVAkWHS_Config, 0, len(ans.Data))
		for _, var0 := range ans.Data {
			var1 := wildfireAntiVirusProfileListDsModel_fVAkWHS_Config{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Id = types.StringPointerValue(var0.Id)

			if len(var0.MlavExceptions) == 0 {
				var1.MlavExceptions = nil
			} else {
				var1.MlavExceptions = make([]wildfireAntiVirusProfileListDsModel_fVAkWHS_MlavExceptionObject, 0, len(var0.MlavExceptions))
				for _, var2 := range var0.MlavExceptions {
					var3 := wildfireAntiVirusProfileListDsModel_fVAkWHS_MlavExceptionObject{}

					var3.Description = types.StringPointerValue(var2.Description)

					var3.Filename = types.StringPointerValue(var2.Filename)

					var3.Name = types.StringPointerValue(var2.Name)
					var1.MlavExceptions = append(var1.MlavExceptions, var3)
				}
			}

			var1.Name = types.StringValue(var0.Name)

			var1.PacketCapture = types.BoolPointerValue(var0.PacketCapture)

			if len(var0.Rules) == 0 {
				var1.Rules = nil
			} else {
				var1.Rules = make([]wildfireAntiVirusProfileListDsModel_fVAkWHS_RuleObject, 0, len(var0.Rules))
				for _, var4 := range var0.Rules {
					var5 := wildfireAntiVirusProfileListDsModel_fVAkWHS_RuleObject{}

					var5.Analysis = types.StringPointerValue(var4.Analysis)

					var6, var7 := types.ListValueFrom(ctx, types.StringType, var4.Applications)
					var5.Applications = var6
					resp.Diagnostics.Append(var7.Errors()...)

					var5.Direction = types.StringPointerValue(var4.Direction)

					var8, var9 := types.ListValueFrom(ctx, types.StringType, var4.FileTypes)
					var5.FileTypes = var8
					resp.Diagnostics.Append(var9.Errors()...)

					var5.Name = types.StringPointerValue(var4.Name)
					var1.Rules = append(var1.Rules, var5)
				}
			}

			if len(var0.ThreatExceptions) == 0 {
				var1.ThreatExceptions = nil
			} else {
				var1.ThreatExceptions = make([]wildfireAntiVirusProfileListDsModel_fVAkWHS_ThreatExceptionObject, 0, len(var0.ThreatExceptions))
				for _, var10 := range var0.ThreatExceptions {
					var11 := wildfireAntiVirusProfileListDsModel_fVAkWHS_ThreatExceptionObject{}

					var11.Name = types.StringPointerValue(var10.Name)

					var11.Notes = types.StringPointerValue(var10.Notes)
					var1.ThreatExceptions = append(var1.ThreatExceptions, var11)
				}
			}
			state.Data = append(state.Data, var1)
		}
	}

	state.Limit = types.Int64PointerValue(ans.Limit)

	state.Offset = types.Int64PointerValue(ans.Offset)

	state.Total = types.Int64PointerValue(ans.Total)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Data source.
var (
	_ datasource.DataSource              = &wildfireAntiVirusProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &wildfireAntiVirusProfileDataSource{}
)

func NewWildfireAntiVirusProfileDataSource() datasource.DataSource {
	return &wildfireAntiVirusProfileDataSource{}
}

type wildfireAntiVirusProfileDataSource struct {
	client *scm.Client
}

// wildfireAntiVirusProfileDsModel is the model.
type wildfireAntiVirusProfileDsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Id types.String `tfsdk:"id"`

	// Output.
	Description types.String `tfsdk:"description"`
	// omit input: id
	MlavExceptions   []wildfireAntiVirusProfileDsModel_fVAkWHS_MlavExceptionObject   `tfsdk:"mlav_exceptions"`
	Name             types.String                                                    `tfsdk:"name"`
	PacketCapture    types.Bool                                                      `tfsdk:"packet_capture"`
	Rules            []wildfireAntiVirusProfileDsModel_fVAkWHS_RuleObject            `tfsdk:"rules"`
	ThreatExceptions []wildfireAntiVirusProfileDsModel_fVAkWHS_ThreatExceptionObject `tfsdk:"threat_exceptions"`
}

type wildfireAntiVirusProfileDsModel_fVAkWHS_MlavExceptionObject struct {
	Description types.String `tfsdk:"description"`
	Filename    types.String `tfsdk:"filename"`
	Name        types.String `tfsdk:"name"`
}

type wildfireAntiVirusProfileDsModel_fVAkWHS_RuleObject struct {
	Analysis     types.String `tfsdk:"analysis"`
	Applications types.List   `tfsdk:"applications"`
	Direction    types.String `tfsdk:"direction"`
	FileTypes    types.List   `tfsdk:"file_types"`
	Name         types.String `tfsdk:"name"`
}

type wildfireAntiVirusProfileDsModel_fVAkWHS_ThreatExceptionObject struct {
	Name  types.String `tfsdk:"name"`
	Notes types.String `tfsdk:"notes"`
}

// Metadata returns the data source type name.
func (d *wildfireAntiVirusProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wildfire_anti_virus_profile"
}

// Schema defines the schema for this data source.
func (d *wildfireAntiVirusProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = dsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]dsschema.Attribute{
			// inputs:map[string]bool{"id":true} outputs:map[string]bool{"description":true, "id":true, "mlav_exception":true, "name":true, "packet_capture":true, "rules":true, "tfid":true, "threat_exception":true} forceNew:map[string]bool{"id":true}
			"description": dsschema.StringAttribute{
				Description: "The Description param.",
				Computed:    true,
			},
			"id": dsschema.StringAttribute{
				Description: "The Id param.",
				Required:    true,
			},
			"mlav_exceptions": dsschema.ListNestedAttribute{
				Description: "The MlavExceptions param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"description":true, "filename":true, "name":true} forceNew:map[string]bool(nil)
						"description": dsschema.StringAttribute{
							Description: "The Description param.",
							Computed:    true,
						},
						"filename": dsschema.StringAttribute{
							Description: "The Filename param.",
							Computed:    true,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
					},
				},
			},
			"name": dsschema.StringAttribute{
				Description: "The Name param. String validation regex: `^[a-zA-Z0-9._-]+$`.",
				Computed:    true,
			},
			"packet_capture": dsschema.BoolAttribute{
				Description: "The PacketCapture param.",
				Computed:    true,
			},
			"rules": dsschema.ListNestedAttribute{
				Description: "The Rules param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"analysis":true, "application":true, "direction":true, "file_type":true, "name":true} forceNew:map[string]bool(nil)
						"analysis": dsschema.StringAttribute{
							Description: "The Analysis param. String must be one of these: `\"public-cloud\"`, `\"private-cloud\"`.",
							Computed:    true,
						},
						"applications": dsschema.ListAttribute{
							Description: "The Applications param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"direction": dsschema.StringAttribute{
							Description: "The Direction param. String must be one of these: `\"download\"`, `\"upload\"`, `\"both\"`.",
							Computed:    true,
						},
						"file_types": dsschema.ListAttribute{
							Description: "The FileTypes param.",
							Computed:    true,
							ElementType: types.StringType,
						},
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
					},
				},
			},
			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
			},
			"threat_exceptions": dsschema.ListNestedAttribute{
				Description: "The ThreatExceptions param.",
				Computed:    true,
				NestedObject: dsschema.NestedAttributeObject{
					Attributes: map[string]dsschema.Attribute{
						// inputs:map[string]bool{} outputs:map[string]bool{"name":true, "notes":true} forceNew:map[string]bool(nil)
						"name": dsschema.StringAttribute{
							Description: "The Name param.",
							Computed:    true,
						},
						"notes": dsschema.StringAttribute{
							Description: "The Notes param.",
							Computed:    true,
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (d *wildfireAntiVirusProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*scm.Client)
}

// Read performs Read for the struct.
func (d *wildfireAntiVirusProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state wildfireAntiVirusProfileDsModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing data source read", map[string]any{
		"data_source_name":            "scm_wildfire_anti_virus_profile",
		"terraform_provider_function": "Read",
		"id":                          state.Id.ValueString(),
	})

	// Prepare to run the command.
	svc := lDGsTGZ.NewClient(d.client)

	// Prepare input for the API endpoint.
	input := lDGsTGZ.ReadInput{}

	input.Id = state.Id.ValueString()

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error reading config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	idBuilder.WriteString(input.Id)

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	if len(ans.MlavExceptions) == 0 {
		state.MlavExceptions = nil
	} else {
		state.MlavExceptions = make([]wildfireAntiVirusProfileDsModel_fVAkWHS_MlavExceptionObject, 0, len(ans.MlavExceptions))
		for _, var0 := range ans.MlavExceptions {
			var1 := wildfireAntiVirusProfileDsModel_fVAkWHS_MlavExceptionObject{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Filename = types.StringPointerValue(var0.Filename)

			var1.Name = types.StringPointerValue(var0.Name)
			state.MlavExceptions = append(state.MlavExceptions, var1)
		}
	}

	state.Name = types.StringValue(ans.Name)

	state.PacketCapture = types.BoolPointerValue(ans.PacketCapture)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]wildfireAntiVirusProfileDsModel_fVAkWHS_RuleObject, 0, len(ans.Rules))
		for _, var2 := range ans.Rules {
			var3 := wildfireAntiVirusProfileDsModel_fVAkWHS_RuleObject{}

			var3.Analysis = types.StringPointerValue(var2.Analysis)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var2.Applications)
			var3.Applications = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var3.Direction = types.StringPointerValue(var2.Direction)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var2.FileTypes)
			var3.FileTypes = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var3.Name = types.StringPointerValue(var2.Name)
			state.Rules = append(state.Rules, var3)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]wildfireAntiVirusProfileDsModel_fVAkWHS_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var8 := range ans.ThreatExceptions {
			var9 := wildfireAntiVirusProfileDsModel_fVAkWHS_ThreatExceptionObject{}

			var9.Name = types.StringPointerValue(var8.Name)

			var9.Notes = types.StringPointerValue(var8.Notes)
			state.ThreatExceptions = append(state.ThreatExceptions, var9)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Resource.
var (
	_ resource.Resource                = &wildfireAntiVirusProfileResource{}
	_ resource.ResourceWithConfigure   = &wildfireAntiVirusProfileResource{}
	_ resource.ResourceWithImportState = &wildfireAntiVirusProfileResource{}
)

func NewWildfireAntiVirusProfileResource() resource.Resource {
	return &wildfireAntiVirusProfileResource{}
}

type wildfireAntiVirusProfileResource struct {
	client *scm.Client
}

// wildfireAntiVirusProfileRsModel is the model.
type wildfireAntiVirusProfileRsModel struct {
	Tfid types.String `tfsdk:"tfid"`

	// Input.
	Description      types.String                                                    `tfsdk:"description"`
	Device           types.String                                                    `tfsdk:"device"`
	Folder           types.String                                                    `tfsdk:"folder"`
	Id               types.String                                                    `tfsdk:"id"`
	MlavExceptions   []wildfireAntiVirusProfileRsModel_fVAkWHS_MlavExceptionObject   `tfsdk:"mlav_exceptions"`
	Name             types.String                                                    `tfsdk:"name"`
	PacketCapture    types.Bool                                                      `tfsdk:"packet_capture"`
	Rules            []wildfireAntiVirusProfileRsModel_fVAkWHS_RuleObject            `tfsdk:"rules"`
	Snippet          types.String                                                    `tfsdk:"snippet"`
	ThreatExceptions []wildfireAntiVirusProfileRsModel_fVAkWHS_ThreatExceptionObject `tfsdk:"threat_exceptions"`

	// Output.
	// omit input: description
	// omit input: id
	// omit input: mlav_exceptions
	// omit input: name
	// omit input: packet_capture
	// omit input: rules
	// omit input: threat_exceptions
}

type wildfireAntiVirusProfileRsModel_fVAkWHS_MlavExceptionObject struct {
	Description types.String `tfsdk:"description"`
	Filename    types.String `tfsdk:"filename"`
	Name        types.String `tfsdk:"name"`
}

type wildfireAntiVirusProfileRsModel_fVAkWHS_RuleObject struct {
	Analysis     types.String `tfsdk:"analysis"`
	Applications types.List   `tfsdk:"applications"`
	Direction    types.String `tfsdk:"direction"`
	FileTypes    types.List   `tfsdk:"file_types"`
	Name         types.String `tfsdk:"name"`
}

type wildfireAntiVirusProfileRsModel_fVAkWHS_ThreatExceptionObject struct {
	Name  types.String `tfsdk:"name"`
	Notes types.String `tfsdk:"notes"`
}

// Metadata returns the data source type name.
func (r *wildfireAntiVirusProfileResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_wildfire_anti_virus_profile"
}

// Schema defines the schema for this data source.
func (r *wildfireAntiVirusProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = rsschema.Schema{
		Description: "Retrieves a config item.",

		Attributes: map[string]rsschema.Attribute{
			// inputs:map[string]bool{"description":true, "device":true, "folder":true, "id":true, "mlav_exception":true, "name":true, "packet_capture":true, "rules":true, "snippet":true, "threat_exception":true} outputs:map[string]bool{"description":true, "id":true, "mlav_exception":true, "name":true, "packet_capture":true, "rules":true, "tfid":true, "threat_exception":true} forceNew:map[string]bool{"device":true, "folder":true, "snippet":true}
			"description": rsschema.StringAttribute{
				Description: "The Description param.",
				Optional:    true,
			},
			"device": rsschema.StringAttribute{
				Description: "The Device param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"folder": rsschema.StringAttribute{
				Description: "The Folder param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": rsschema.StringAttribute{
				Description: "UUID of the resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"mlav_exceptions": rsschema.ListNestedAttribute{
				Description: "The MlavExceptions param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"description":true, "filename":true, "name":true} outputs:map[string]bool{"description":true, "filename":true, "name":true} forceNew:map[string]bool(nil)
						"description": rsschema.StringAttribute{
							Description: "The Description param.",
							Optional:    true,
						},
						"filename": rsschema.StringAttribute{
							Description: "The Filename param.",
							Optional:    true,
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
					},
				},
			},
			"name": rsschema.StringAttribute{
				Description: "The Name param. String validation regex: `^[a-zA-Z0-9._-]+$`.",
				Required:    true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9._-]+$"), ""),
				},
			},
			"packet_capture": rsschema.BoolAttribute{
				Description: "The PacketCapture param.",
				Optional:    true,
			},
			"rules": rsschema.ListNestedAttribute{
				Description: "The Rules param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"analysis":true, "application":true, "direction":true, "file_type":true, "name":true} outputs:map[string]bool{"analysis":true, "application":true, "direction":true, "file_type":true, "name":true} forceNew:map[string]bool(nil)
						"analysis": rsschema.StringAttribute{
							Description: "The Analysis param. String must be one of these: `\"public-cloud\"`, `\"private-cloud\"`.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.OneOf("public-cloud", "private-cloud"),
							},
						},
						"applications": rsschema.ListAttribute{
							Description: "The Applications param.",
							Optional:    true,
							ElementType: types.StringType,
						},
						"direction": rsschema.StringAttribute{
							Description: "The Direction param. String must be one of these: `\"download\"`, `\"upload\"`, `\"both\"`.",
							Optional:    true,
							Validators: []validator.String{
								stringvalidator.OneOf("download", "upload", "both"),
							},
						},
						"file_types": rsschema.ListAttribute{
							Description: "The FileTypes param.",
							Optional:    true,
							ElementType: types.StringType,
						},
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
					},
				},
			},
			"snippet": rsschema.StringAttribute{
				Description: "The Snippet param.",
				Optional:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"threat_exceptions": rsschema.ListNestedAttribute{
				Description: "The ThreatExceptions param.",
				Optional:    true,
				NestedObject: rsschema.NestedAttributeObject{
					Attributes: map[string]rsschema.Attribute{
						// inputs:map[string]bool{"name":true, "notes":true} outputs:map[string]bool{"name":true, "notes":true} forceNew:map[string]bool(nil)
						"name": rsschema.StringAttribute{
							Description: "The Name param.",
							Optional:    true,
						},
						"notes": rsschema.StringAttribute{
							Description: "The Notes param.",
							Optional:    true,
						},
					},
				},
			},
		},
	}
}

// Configure prepares the struct.
func (r *wildfireAntiVirusProfileResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*scm.Client)
}

// Create resource.
func (r *wildfireAntiVirusProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state wildfireAntiVirusProfileRsModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name":               "scm_wildfire_anti_virus_profile",
		"terraform_provider_function": "Create",
		"folder":                      state.Folder.ValueString(),
		"snippet":                     state.Snippet.ValueString(),
		"device":                      state.Device.ValueString(),
	})

	// Prepare to create the config.
	svc := lDGsTGZ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lDGsTGZ.CreateInput{}

	input.Folder = state.Folder.ValueStringPointer()

	input.Snippet = state.Snippet.ValueStringPointer()

	input.Device = state.Device.ValueStringPointer()
	input.Request = &fVAkWHS.Config{}

	input.Request.Description = state.Description.ValueStringPointer()

	if len(state.MlavExceptions) != 0 {
		input.Request.MlavExceptions = make([]fVAkWHS.MlavExceptionObject, 0, len(state.MlavExceptions))
		for _, var0 := range state.MlavExceptions {
			var var1 fVAkWHS.MlavExceptionObject

			var1.Description = var0.Description.ValueStringPointer()

			var1.Filename = var0.Filename.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()
			input.Request.MlavExceptions = append(input.Request.MlavExceptions, var1)
		}
	}

	input.Request.Name = state.Name.ValueString()

	input.Request.PacketCapture = state.PacketCapture.ValueBoolPointer()

	if len(state.Rules) != 0 {
		input.Request.Rules = make([]fVAkWHS.RuleObject, 0, len(state.Rules))
		for _, var2 := range state.Rules {
			var var3 fVAkWHS.RuleObject

			var3.Analysis = var2.Analysis.ValueStringPointer()

			resp.Diagnostics.Append(var2.Applications.ElementsAs(ctx, &var3.Applications, false)...)
			//if len(var2.Applications) != 0 {
			//    var3.Applications = make([]string, 0, len(var2.Applications))
			//    for _, var4 := range var2.Applications {
			//        var3.Applications = append(var3.Applications, var4.ValueString())
			//    }
			//}

			var3.Direction = var2.Direction.ValueStringPointer()

			resp.Diagnostics.Append(var2.FileTypes.ElementsAs(ctx, &var3.FileTypes, false)...)
			//if len(var2.FileTypes) != 0 {
			//    var3.FileTypes = make([]string, 0, len(var2.FileTypes))
			//    for _, var5 := range var2.FileTypes {
			//        var3.FileTypes = append(var3.FileTypes, var5.ValueString())
			//    }
			//}

			var3.Name = var2.Name.ValueStringPointer()
			input.Request.Rules = append(input.Request.Rules, var3)
		}
	}

	if len(state.ThreatExceptions) != 0 {
		input.Request.ThreatExceptions = make([]fVAkWHS.ThreatExceptionObject, 0, len(state.ThreatExceptions))
		for _, var6 := range state.ThreatExceptions {
			var var7 fVAkWHS.ThreatExceptionObject

			var7.Name = var6.Name.ValueStringPointer()

			var7.Notes = var6.Notes.ValueStringPointer()
			input.Request.ThreatExceptions = append(input.Request.ThreatExceptions, var7)
		}
	}

	// Perform the operation.
	ans, err := svc.Create(ctx, input)
	if err != nil {
		resp.Diagnostics.AddError("Error creating config", err.Error())
		return
	}

	// Create the Terraform ID.
	var idBuilder strings.Builder
	if input.Folder != nil {
		idBuilder.WriteString(*input.Folder)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Snippet != nil {
		idBuilder.WriteString(*input.Snippet)
	}

	idBuilder.WriteString(IdSeparator)
	if input.Device != nil {
		idBuilder.WriteString(*input.Device)
	}

	idBuilder.WriteString(IdSeparator)
	if ans.Id == nil {
		resp.Diagnostics.AddError("Undefined param required for ID", "Id")
		return
	}
	if ans.Id != nil {
		idBuilder.WriteString(*ans.Id)
	}

	// Store the answer to state.

	state.Tfid = types.StringValue(idBuilder.String())

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	if len(ans.MlavExceptions) == 0 {
		state.MlavExceptions = nil
	} else {
		state.MlavExceptions = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_MlavExceptionObject, 0, len(ans.MlavExceptions))
		for _, var8 := range ans.MlavExceptions {
			var9 := wildfireAntiVirusProfileRsModel_fVAkWHS_MlavExceptionObject{}

			var9.Description = types.StringPointerValue(var8.Description)

			var9.Filename = types.StringPointerValue(var8.Filename)

			var9.Name = types.StringPointerValue(var8.Name)
			state.MlavExceptions = append(state.MlavExceptions, var9)
		}
	}

	state.Name = types.StringValue(ans.Name)

	state.PacketCapture = types.BoolPointerValue(ans.PacketCapture)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_RuleObject, 0, len(ans.Rules))
		for _, var10 := range ans.Rules {
			var11 := wildfireAntiVirusProfileRsModel_fVAkWHS_RuleObject{}

			var11.Analysis = types.StringPointerValue(var10.Analysis)

			var12, var13 := types.ListValueFrom(ctx, types.StringType, var10.Applications)
			var11.Applications = var12
			resp.Diagnostics.Append(var13.Errors()...)

			var11.Direction = types.StringPointerValue(var10.Direction)

			var14, var15 := types.ListValueFrom(ctx, types.StringType, var10.FileTypes)
			var11.FileTypes = var14
			resp.Diagnostics.Append(var15.Errors()...)

			var11.Name = types.StringPointerValue(var10.Name)
			state.Rules = append(state.Rules, var11)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var16 := range ans.ThreatExceptions {
			var17 := wildfireAntiVirusProfileRsModel_fVAkWHS_ThreatExceptionObject{}

			var17.Name = types.StringPointerValue(var16.Name)

			var17.Notes = types.StringPointerValue(var16.Notes)
			state.ThreatExceptions = append(state.ThreatExceptions, var17)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Read performs Read for the struct.
func (r *wildfireAntiVirusProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var savestate, state wildfireAntiVirusProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := savestate.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"terraform_provider_function": "Read",
		"resource_name":               "scm_wildfire_anti_virus_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	// Prepare to read the config.
	svc := lDGsTGZ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lDGsTGZ.ReadInput{}

	input.Id = tokens[3]

	// Perform the operation.
	ans, err := svc.Read(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading config", err.Error())
		}
		return
	}

	// Store the answer to state.

	if tokens[0] == "" {
		state.Folder = types.StringNull()
	} else {
		state.Folder = types.StringValue(tokens[0])
	}

	if tokens[1] == "" {
		state.Snippet = types.StringNull()
	} else {
		state.Snippet = types.StringValue(tokens[1])
	}

	if tokens[2] == "" {
		state.Device = types.StringNull()
	} else {
		state.Device = types.StringValue(tokens[2])
	}
	state.Tfid = savestate.Tfid

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	if len(ans.MlavExceptions) == 0 {
		state.MlavExceptions = nil
	} else {
		state.MlavExceptions = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_MlavExceptionObject, 0, len(ans.MlavExceptions))
		for _, var0 := range ans.MlavExceptions {
			var1 := wildfireAntiVirusProfileRsModel_fVAkWHS_MlavExceptionObject{}

			var1.Description = types.StringPointerValue(var0.Description)

			var1.Filename = types.StringPointerValue(var0.Filename)

			var1.Name = types.StringPointerValue(var0.Name)
			state.MlavExceptions = append(state.MlavExceptions, var1)
		}
	}

	state.Name = types.StringValue(ans.Name)

	state.PacketCapture = types.BoolPointerValue(ans.PacketCapture)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_RuleObject, 0, len(ans.Rules))
		for _, var2 := range ans.Rules {
			var3 := wildfireAntiVirusProfileRsModel_fVAkWHS_RuleObject{}

			var3.Analysis = types.StringPointerValue(var2.Analysis)

			var4, var5 := types.ListValueFrom(ctx, types.StringType, var2.Applications)
			var3.Applications = var4
			resp.Diagnostics.Append(var5.Errors()...)

			var3.Direction = types.StringPointerValue(var2.Direction)

			var6, var7 := types.ListValueFrom(ctx, types.StringType, var2.FileTypes)
			var3.FileTypes = var6
			resp.Diagnostics.Append(var7.Errors()...)

			var3.Name = types.StringPointerValue(var2.Name)
			state.Rules = append(state.Rules, var3)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var8 := range ans.ThreatExceptions {
			var9 := wildfireAntiVirusProfileRsModel_fVAkWHS_ThreatExceptionObject{}

			var9.Name = types.StringPointerValue(var8.Name)

			var9.Notes = types.StringPointerValue(var8.Notes)
			state.ThreatExceptions = append(state.ThreatExceptions, var9)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Update performs the Update for the struct.
func (r *wildfireAntiVirusProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state wildfireAntiVirusProfileRsModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	tfid := state.Tfid.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"terraform_provider_function": "Update",
		"resource_name":               "scm_wildfire_anti_virus_profile",
		"tfid":                        state.Tfid.ValueString(),
	})

	// Prepare to update the config.
	svc := lDGsTGZ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lDGsTGZ.UpdateInput{}

	if tokens[3] != "" {
		input.Id = tokens[3]
	}
	input.Request = &fVAkWHS.Config{}

	input.Request.Description = plan.Description.ValueStringPointer()

	if len(plan.MlavExceptions) != 0 {
		input.Request.MlavExceptions = make([]fVAkWHS.MlavExceptionObject, 0, len(plan.MlavExceptions))
		for _, var0 := range plan.MlavExceptions {
			var var1 fVAkWHS.MlavExceptionObject

			var1.Description = var0.Description.ValueStringPointer()

			var1.Filename = var0.Filename.ValueStringPointer()

			var1.Name = var0.Name.ValueStringPointer()
			input.Request.MlavExceptions = append(input.Request.MlavExceptions, var1)
		}
	}

	input.Request.Name = plan.Name.ValueString()

	input.Request.PacketCapture = plan.PacketCapture.ValueBoolPointer()

	if len(plan.Rules) != 0 {
		input.Request.Rules = make([]fVAkWHS.RuleObject, 0, len(plan.Rules))
		for _, var2 := range plan.Rules {
			var var3 fVAkWHS.RuleObject

			var3.Analysis = var2.Analysis.ValueStringPointer()

			resp.Diagnostics.Append(var2.Applications.ElementsAs(ctx, &var3.Applications, false)...)
			//if len(var2.Applications) != 0 {
			//    var3.Applications = make([]string, 0, len(var2.Applications))
			//    for _, var4 := range var2.Applications {
			//        var3.Applications = append(var3.Applications, var4.ValueString())
			//    }
			//}

			var3.Direction = var2.Direction.ValueStringPointer()

			resp.Diagnostics.Append(var2.FileTypes.ElementsAs(ctx, &var3.FileTypes, false)...)
			//if len(var2.FileTypes) != 0 {
			//    var3.FileTypes = make([]string, 0, len(var2.FileTypes))
			//    for _, var5 := range var2.FileTypes {
			//        var3.FileTypes = append(var3.FileTypes, var5.ValueString())
			//    }
			//}

			var3.Name = var2.Name.ValueStringPointer()
			input.Request.Rules = append(input.Request.Rules, var3)
		}
	}

	if len(plan.ThreatExceptions) != 0 {
		input.Request.ThreatExceptions = make([]fVAkWHS.ThreatExceptionObject, 0, len(plan.ThreatExceptions))
		for _, var6 := range plan.ThreatExceptions {
			var var7 fVAkWHS.ThreatExceptionObject

			var7.Name = var6.Name.ValueStringPointer()

			var7.Notes = var6.Notes.ValueStringPointer()
			input.Request.ThreatExceptions = append(input.Request.ThreatExceptions, var7)
		}
	}

	// Perform the operation.
	ans, err := svc.Update(ctx, input)
	if err != nil {
		if IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error updating resource", err.Error())
		}
		return
	}

	// Store the answer to state.
	// Note: when supporting importing a resource, this will need to change to taking
	// values from the savestate.Tfid param and locMap.

	state.Description = types.StringPointerValue(ans.Description)

	state.Id = types.StringPointerValue(ans.Id)

	if len(ans.MlavExceptions) == 0 {
		state.MlavExceptions = nil
	} else {
		state.MlavExceptions = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_MlavExceptionObject, 0, len(ans.MlavExceptions))
		for _, var8 := range ans.MlavExceptions {
			var9 := wildfireAntiVirusProfileRsModel_fVAkWHS_MlavExceptionObject{}

			var9.Description = types.StringPointerValue(var8.Description)

			var9.Filename = types.StringPointerValue(var8.Filename)

			var9.Name = types.StringPointerValue(var8.Name)
			state.MlavExceptions = append(state.MlavExceptions, var9)
		}
	}

	state.Name = types.StringValue(ans.Name)

	state.PacketCapture = types.BoolPointerValue(ans.PacketCapture)

	if len(ans.Rules) == 0 {
		state.Rules = nil
	} else {
		state.Rules = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_RuleObject, 0, len(ans.Rules))
		for _, var10 := range ans.Rules {
			var11 := wildfireAntiVirusProfileRsModel_fVAkWHS_RuleObject{}

			var11.Analysis = types.StringPointerValue(var10.Analysis)

			var12, var13 := types.ListValueFrom(ctx, types.StringType, var10.Applications)
			var11.Applications = var12
			resp.Diagnostics.Append(var13.Errors()...)

			var11.Direction = types.StringPointerValue(var10.Direction)

			var14, var15 := types.ListValueFrom(ctx, types.StringType, var10.FileTypes)
			var11.FileTypes = var14
			resp.Diagnostics.Append(var15.Errors()...)

			var11.Name = types.StringPointerValue(var10.Name)
			state.Rules = append(state.Rules, var11)
		}
	}

	if len(ans.ThreatExceptions) == 0 {
		state.ThreatExceptions = nil
	} else {
		state.ThreatExceptions = make([]wildfireAntiVirusProfileRsModel_fVAkWHS_ThreatExceptionObject, 0, len(ans.ThreatExceptions))
		for _, var16 := range ans.ThreatExceptions {
			var17 := wildfireAntiVirusProfileRsModel_fVAkWHS_ThreatExceptionObject{}

			var17.Name = types.StringPointerValue(var16.Name)

			var17.Notes = types.StringPointerValue(var16.Notes)
			state.ThreatExceptions = append(state.ThreatExceptions, var17)
		}
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Delete performs delete for the struct.
func (r *wildfireAntiVirusProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var idType types.String
	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("tfid"), &idType)...)
	if resp.Diagnostics.HasError() {
		return
	}
	tfid := idType.ValueString()
	tokens := strings.Split(tfid, IdSeparator)
	if len(tokens) != 4 {
		resp.Diagnostics.AddError("Error in resource ID format", "Expected 4 tokens")
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"terraform_provider_function": "Delete",
		"resource_name":               "scm_wildfire_anti_virus_profile",
		"locMap":                      map[string]int{"device": 2, "folder": 0, "id": 3, "snippet": 1},
		"tokens":                      tokens,
	})

	svc := lDGsTGZ.NewClient(r.client)

	// Prepare input for the API endpoint.
	input := lDGsTGZ.DeleteInput{}

	input.Id = tokens[3]

	// Perform the operation.
	if _, err := svc.Delete(ctx, input); err != nil && !IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}
}

func (r *wildfireAntiVirusProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}
